Attribute VB_Name = "Modul5"
Option Explicit

Private Const ODBC_ADD_DSN = 1        ' Add data source
Private Const ODBC_CONFIG_DSN = 2     ' Configure (edit) data source
Private Const ODBC_REMOVE_DSN = 3     ' Remove data source
Private Const vbAPINull As Long = 0  ' NULL Pointer

Private Declare Function SQLConfigDataSource Lib "ODBCCP32.DLL" _
    (ByVal hwndParent As Long, ByVal fRequest As Long, _
    ByVal lpszDriver As String, ByVal lpszAttributes As String) _
    As Long
        
Public Declare Function InternetGetConnectedState Lib "wininet.dll" ( _
    ByRef lpSFlags As Long, _
    ByVal dwReserved As Long) As Long
 
Const INTERNET_CONNECTION_LAN As Long = &H2
Const INTERNET_CONNECTION_MODEM As Long = &H1
Const INTERNET_CONNECTION_PROXY As Long = &H4
Const INTERNET_CONNECTION_MODEM_BUSY As Long = &H8
        
        
Public Function IfOnline()
  Dim icFlags As Long
 
  ' Verbindungen abfragen
  Call InternetGetConnectedState(icFlags, 0&)
  IfOnline = "Offline"
 
  ' Wenn Verbunden über LAN
  If icFlags And INTERNET_CONNECTION_LAN Then
    IfOnline = "Online"
  End If
 
  ' Wenn Verbunden Über Modem
  If icFlags And INTERNET_CONNECTION_MODEM Then
    IfOnline = "Online"
  End If
 
  ' Wenn Verbunden über Proxy
  If icFlags And INTERNET_CONNECTION_PROXY Then
    IfOnline = "Online"
  End If
 
  ' Wenn Modem gerade arbeitet (Verbindung besteht oder wird aufgebaut)
  If icFlags And INTERNET_CONNECTION_MODEM_BUSY Then
    IfOnline = "Online"
  End If
End Function
Public Sub speicherKundendurchscnittswerte()
    On Error GoTo LOKAL_ERROR

    Dim dUmsatzproKundeDurchschnitt As Double
    Dim dUmsatzproZR                As Double
    Dim dUmsatzMittelproKunde       As Double
    Dim lBeleganzahl                As Long
    Dim dKaufvorgänge               As Double
    Dim sSQL                        As String
    
    If KUDDAktuell Then
    
    Else
        lBeleganzahl = ermKundenumsatzproKaufalle()
        dUmsatzproZR = ermumsatzproZR()
        If lBeleganzahl <> 0 Then
            dUmsatzproKundeDurchschnitt = dUmsatzproZR / lBeleganzahl
        End If
        
        dUmsatzMittelproKunde = ermAktiveKundenzahlAusgesamtkassjour
        dKaufvorgänge = KundenVerkäufeMittel
        
        loeschNEW "KUDD", gdBase
        CreateTableT2 "KUDD", gdBase
        
        sSQL = "Insert into KUDD (adate,KaufvorgaengeSchnitt,UmsatzProkundeSchnitt,BonUmsatzProkundeSchnitt) values ("
        sSQL = sSQL & " clng(datevalue(now))"
        sSQL = sSQL & " , '" & dKaufvorgänge & "'"
        sSQL = sSQL & " , '" & dUmsatzMittelproKunde & "'"
        sSQL = sSQL & " , '" & dUmsatzproKundeDurchschnitt & "'"
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
        leseKundendurchscnittswerte
    End If

    Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "speicherKundendurchscnittswerte"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Sub

Public Function sternanzahlausSterne(iSterne As Integer) As String
    On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rsrs As Recordset
    
    sternanzahlausSterne = ""
    
    
    sSQL = "Select count(*) as maxi from STERNE where sterne = " & iSterne
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!maxi) Then
            sternanzahlausSterne = rsrs!maxi
        End If
    End If
    rsrs.Close
    
    Exit Function
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "sternanzahlausSterne"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Function
Public Function sternanzahl(iSterne As Integer) As String
    On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rsrs As Recordset
    
    sternanzahl = ""
    
    
    sSQL = "Select Sterne" & iSterne & " as maxi from STERNEZAHL "
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!maxi) Then
            sternanzahl = rsrs!maxi
        End If
    End If
    rsrs.Close
    
    Exit Function
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "sternanzahl"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Function
Public Sub leseKundendurchscnittswerte()
    On Error GoTo LOKAL_ERROR

    Dim rsrs As Recordset
    Dim sSQL As String
    
    gdUmsatzproKundeDurchschnitt = 0
    gdUmsatzMittelproKunde = 0
    gdKaufvorgänge = 0
    
    sSQL = "select * from kudd"
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
    
        If Not IsNull(rsrs!KaufvorgaengeSchnitt) Then
            gdKaufvorgänge = rsrs!KaufvorgaengeSchnitt
        End If
        
        If Not IsNull(rsrs!UmsatzProkundeSchnitt) Then
            gdUmsatzMittelproKunde = rsrs!UmsatzProkundeSchnitt
        End If
        
        If Not IsNull(rsrs!BonUmsatzProkundeSchnitt) Then
            gdUmsatzproKundeDurchschnitt = rsrs!BonUmsatzProkundeSchnitt
        End If

    End If
    rsrs.Close

    Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "leseKundendurchscnittswerte"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Sub
Private Function KundenVerkäufeMittel() As Double
    On Error GoTo LOKAL_ERROR

    Dim rsrs        As Recordset
    Dim sSQL        As String
    Dim rsArt       As Recordset
    Dim cZus        As String
    
    KundenVerkäufeMittel = 0

    loeschNEW "zeitzone", gdBase
    
    sSQL = "select adate,kundnr ,cstr(adate) + cstr(kundnr) as zus into zeitzone  "
    sSQL = sSQL & " from Kassjour "
    sSQL = sSQL & " where kundnr > 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    CheckIndex "Zeitzone", "zus", "", gdBase
    
    loeschNEW "alit", gdBase
    sSQL = "select count(zus) as count ,zus into alit from zeitzone group by zus having count(zus) > 1"
    gdBase.Execute sSQL, dbFailOnError
    
    Set rsrs = gdBase.OpenRecordset("alit", dbOpenTable)
    If Not rsrs.EOF Then
        Do While Not rsrs.EOF
            If Not IsNull(rsrs!zus) Then
                cZus = Trim(rsrs!zus)
            End If
            
            sSQL = "Select * from zeitzone where zus = '" & cZus & "'"
            Set rsArt = gdBase.OpenRecordset(sSQL)
            If Not rsArt.EOF Then
                rsArt.MoveFirst
                Do While Not rsArt.EOF
                    rsArt.delete
                    rsArt.MoveNext
                Loop
                rsrs.MoveNext
            End If
            rsArt.Close: Set rsArt = Nothing
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
    
    loeschNEW "alit", gdBase
    sSQL = "select count(kundnr) as count ,kundnr into alit from zeitzone group by kundnr "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Select avg(count) as mittel from alit"
    Set rsArt = gdBase.OpenRecordset(sSQL)
    If Not rsArt.EOF Then
        If Not IsNull(rsArt!Mittel) Then
            KundenVerkäufeMittel = Trim(rsArt!Mittel)
        End If
    End If
    rsArt.Close: Set rsArt = Nothing
    
    loeschNEW "alit", gdBase
    loeschNEW "zeitzone", gdBase
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul2"
    Fehler.gsFunktion = "KundenVerkäufeMittel"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function KundenVerkäufeMittel_proJahr(iJahr As Integer) As Double
    On Error GoTo LOKAL_ERROR

    Dim rsrs        As Recordset
    Dim sSQL        As String
    Dim rsArt       As Recordset
    Dim cZus        As String
    
    KundenVerkäufeMittel_proJahr = 0

    loeschNEW "zeitzone", gdBase
    
    sSQL = "select adate,kundnr ,cstr(adate) + cstr(kundnr) as zus into zeitzone  "
    sSQL = sSQL & " from Kassjour "
    sSQL = sSQL & " where kundnr > 0 "
    sSQL = sSQL & " and year(adate) = " & iJahr
    gdBase.Execute sSQL, dbFailOnError
    
    CheckIndex "Zeitzone", "zus", "", gdBase
    
    loeschNEW "alit", gdBase
    sSQL = "select count(zus) as count ,zus into alit from zeitzone group by zus having count(zus) > 1"
    gdBase.Execute sSQL, dbFailOnError
    
    Set rsrs = gdBase.OpenRecordset("alit", dbOpenTable)
    If Not rsrs.EOF Then
        Do While Not rsrs.EOF
            If Not IsNull(rsrs!zus) Then
                cZus = Trim(rsrs!zus)
            End If
            
            sSQL = "Select * from zeitzone where zus = '" & cZus & "'"
            Set rsArt = gdBase.OpenRecordset(sSQL)
            If Not rsArt.EOF Then
                rsArt.MoveFirst
                Do While Not rsArt.EOF
                    rsArt.delete
                    rsArt.MoveNext
                Loop
                rsrs.MoveNext
            End If
            rsArt.Close: Set rsArt = Nothing
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
    
    loeschNEW "alit", gdBase
    sSQL = "select count(kundnr) as count ,kundnr into alit from zeitzone group by kundnr "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Select avg(count) as mittel from alit"
    Set rsArt = gdBase.OpenRecordset(sSQL)
    If Not rsArt.EOF Then
        If Not IsNull(rsArt!Mittel) Then
            KundenVerkäufeMittel_proJahr = Trim(rsArt!Mittel)
        End If
    End If
    rsArt.Close: Set rsArt = Nothing
    
    loeschNEW "alit", gdBase
    loeschNEW "zeitzone", gdBase
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul2"
    Fehler.gsFunktion = "KundenVerkäufeMittel_proJahr"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub eintragenWochendatei(giWoch As Integer, sfilen As String)
    On Error GoTo LOKAL_ERROR

    Dim sSQL As String
   
    sSQL = "Insert into MASTERPRO (KW ,Dateiname, ADATE , Jahr)"
    sSQL = sSQL & " Values "
    sSQL = sSQL & " ( " & giWoch & ",'" & sfilen & "','" & DateValue(Now) & "','" & Year(Now) & "')"
    gdBase.Execute sSQL, dbFailOnError
        
    Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "eintragenWochendatei"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Sub
Public Function wievieleTage(cArtNr As String) As Single
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rsrs As Recordset
    Dim dVKStueck As Long
    Dim dDuchschnittVerbrauch As Single
    
    wievieleTage = 0
    dDuchschnittVerbrauch = 0
    dVKStueck = 0
     
    
    If IsNumeric(cArtNr) Then
        sSQL = "Select sum(Menge) as maxi from kassjour where artnr = " & cArtNr & " and adate > datevalue(now) - 365"
        Set rsrs = gdBase.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
            If Not IsNull(rsrs!maxi) Then
                dVKStueck = Val(rsrs!maxi)
            End If
        End If
        rsrs.Close
    End If
    
    dDuchschnittVerbrauch = dVKStueck / 365
    
    If dDuchschnittVerbrauch <> 0 Then
        wievieleTage = ermBESTAND(cArtNr) / dDuchschnittVerbrauch
    End If
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "wievieleTage"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermNextWochendatei() As Integer
    On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rsrs As Recordset
    
    ermNextWochendatei = 0
    
    
    
    sSQL = "Select max(KW) as maxi from MASTERPRO where jahr = " & Year(Now)
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!maxi) Then
            ermNextWochendatei = rsrs!maxi
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    If ermNextWochendatei = 0 Then
        'aktuelle KW wird benötigt
        
        ermNextWochendatei = CInt(DatePart("ww", DateValue(Now)))
        If Year(Now) = "2016" Then
            ermNextWochendatei = ermNextWochendatei - 1
        
        End If
        
        Exit Function
    End If
    
    
    If ermNextWochendatei = 53 Then
        ermNextWochendatei = 1
    Else
        ermNextWochendatei = ermNextWochendatei + 1
    End If
    
        
    Exit Function
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermNextWochendatei"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Function
Public Function vkam(cArtNr As String, sArt As String) As String
    On Error GoTo LOKAL_ERROR

    Dim cSQL As String
    Dim rsrs As Recordset
    Dim ctmp As String

    vkam = 0
    cSQL = "Select sum(" & sArt & ") as vkam from UMS_art where ARTNR = " & cArtNr
    
    cSQL = cSQL & " and Monat = " & Month(DateValue(Now))
    cSQL = cSQL & " and Jahr = " & Year(DateValue(Now))

    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!vkam) Then
            vkam = rsrs!vkam
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
        
    
    Exit Function
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "vkam"
    Fehler.gsFehlertext = "Im Programmteil Artikelsuche ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Function
Public Function vkvm(cArtNr As String, sArt As String) As String
    On Error GoTo LOKAL_ERROR

    Dim cSQL As String
    Dim rsrs As Recordset
    Dim ctmp As String

    
    vkvm = 0
    cSQL = "Select sum(" & sArt & ") as vkvm from UMS_art where ARTNR = " & cArtNr
    If Month(Date) <> 1 Then
        cSQL = cSQL & " and Monat = " & Month(DateValue(Now)) - 1
        cSQL = cSQL & " and Jahr = " & Year(DateValue(Now))
    Else
        cSQL = cSQL & " and Monat = 12"
        cSQL = cSQL & " and Jahr = " & Year(DateValue(Now)) - 1
    End If
    
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!vkvm) Then
            vkvm = rsrs!vkvm
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
        
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "vkvm"
    Fehler.gsFehlertext = "Im Programmteil Artikelsuche ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Function
Public Function vklj(cArtNr As String, sArt As String) As String

    On Error GoTo LOKAL_ERROR
    
    '***************************** VKLJ ***********************
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim ctmp As String
    
    vklj = 0
    cSQL = "Select sum(" & sArt & ") as vklj from UMS_art where ARTNR = " & cArtNr
    cSQL = cSQL & " and Jahr = " & Year(DateValue(Now))
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!vklj) Then
            vklj = rsrs!vklj
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
     
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "vklj"
    Fehler.gsFehlertext = "Im Programmteil Artikelsuche ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Function
Public Function vkvj(cArtNr As String, sArt As String) As String
    On Error GoTo LOKAL_ERROR
    
    '***************************** VKVJ ***********************
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim ctmp As String
    
    vkvj = 0
    cSQL = "Select sum(" & sArt & ") as VKVJ1 from UMS_art where ARTNR = " & cArtNr
    cSQL = cSQL & " and Jahr = " & Year(DateValue(Now)) - 1
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!VKVJ1) Then
            vkvj = rsrs!VKVJ1
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
        
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "vkvj"
    Fehler.gsFehlertext = "Im Programmteil Artikelsuche ist ein Fehler aufgetreten. "
    Fehlermeldung1
End Function
Public Function ermoffenKUBmitKDNR(cKdnr As String) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    
    ermoffenKUBmitKDNR = False
    
    cSQL = "Select KUNDBEST.ARTNR from KUNDBEST "
    cSQL = cSQL & " where StatusARTIKEL = 'INBESTELLUNG' "
    cSQL = cSQL & " and kundnr = " & cKdnr
    
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        ermoffenKUBmitKDNR = True
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermoffenKUBmitKDNR"
    Fehler.gsFehlertext = "Im Programmteil Bestellungen ist ein Fehler aufgetreten. "
    
    Fehlermeldung1
End Function
Public Function umsatzLFJahr(cSuch As String) As Double
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim lJahr As Long
    
    lJahr = Year(Now)
    
    umsatzLFJahr = 0
    
    cSQL = "Select KUNDNR, JAHR, UMSATZJ as UMSLJ from UMSKDJ where KUNDNR = " & Val(cSuch) & " and JAHR = " & Trim$(Str$(lJahr)) & " "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!UMSLJ) Then
            umsatzLFJahr = rsrs!UMSLJ
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "umsatzLFJahr"
    Fehler.gsFehlertext = "Im Programmteil Kundendaten bearbeiten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
'Public Function umsatzLFJahr_ausKUNDKASS(cSuch As String) As Double
'    On Error GoTo LOKAL_ERROR
'
'    Dim cSQL As String
'    Dim rsrs As Recordset
'    Dim lJahr As Long
'
'    lJahr = Year(Now)
'
'    umsatzLFJahr_ausKUNDKASS = 0
'
'    cSQL = "Select KUNDNR, JAHR, UMSATZJ as UMSLJ from UMSKDJ where KUNDNR = " & Val(cSuch) & " and JAHR = " & Trim$(Str$(lJahr)) & " "
'    Set rsrs = gdBase.OpenRecordset(cSQL)
'    If Not rsrs.EOF Then
'        rsrs.MoveFirst
'        If Not IsNull(rsrs!UMSLJ) Then
'            umsatzLFJahr_ausKUNDKASS = rsrs!UMSLJ
'        End If
'    End If
'    rsrs.Close: Set rsrs = Nothing
'
'Exit Function
'LOKAL_ERROR:
'    Fehler.gsDescr = err.Description
'    Fehler.gsNumber = err.Number
'    Fehler.gsFormular = "Modul5"
'    Fehler.gsFunktion = "umsatzLFJahr_ausKUNDKASS"
'    Fehler.gsFehlertext = "Im Programmteil Kundendaten bearbeiten ist ein Fehler aufgetreten."
'
'    Fehlermeldung1
'End Function
Public Function umsatzVJJahr(cSuch As String) As Double
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim lJahr As Long
    
    lJahr = Year(Now)
    
    umsatzVJJahr = 0
    
    cSQL = "Select KUNDNR, JAHR, UMSATZJ as UMSVJ from UMSKDJ where KUNDNR = " & Val(cSuch) & " and JAHR = " & Trim$(Str$(lJahr - 1)) & " "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!UMSVJ) Then
            umsatzVJJahr = rsrs!UMSVJ
        End If
   
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "umsatzVJJahr"
    Fehler.gsFehlertext = "Im Programmteil Kundendaten bearbeiten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
   
End Function
Public Function umsatzLFJahr1(cSuch As String) As Double
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset

    umsatzLFJahr1 = 0
    cSQL = "Select sum(preis) as UMSLJ from kassjour where KUNDNR = " & Val(cSuch) & " and year(adate)= year(now) "
    cSQL = cSQL & " and ums_ok = 'J' "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!UMSLJ) Then
            umsatzLFJahr1 = rsrs!UMSLJ
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "umsatzLFJahr1"
    Fehler.gsFehlertext = "Im Programmteil Kundendaten bearbeiten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function fnLeseIniPrinterWKL00() As Integer
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr As Integer
    Dim lPos As Long
    Dim ctmp As String
    Dim lStart As Long
    
    iFileNr = FreeFile
    
    Open App.Path & "\PRINTWKL.INI" For Binary As #iFileNr
    If LOF(iFileNr) > 0 Then
        fnLeseIniPrinterWKL00 = 0
        ctmp = Space$(LOF(iFileNr))
        Get #iFileNr, 1, ctmp
        
        'MsgBox cTmp
        
        lStart = 1
        lPos = InStr(lStart, ctmp, vbCrLf)
        gcBonDrucker = Mid(ctmp, lStart, lPos - lStart)
        
        'die Bondrucker Epson Tmt 88 3 und Posline von Aures
        If InStr(UCase$(gcBonDrucker), "ELTRON") > 0 Or InStr(UCase$(gcBonDrucker), "EPSON") > 0 Then
            gcSchneiden = Chr$(27) + Chr$(105)
            
            If gbPrintLOGO = True Then
            
                If InStr(gcBonDrucker, "TM-T81") > 0 Then
                    gcBild = Chr$(29) + Chr$(40) + Chr$(76) + Chr$(6) + Chr$(0) + Chr$(48) + Chr$(69) + Chr$(48) + Chr$(48) + Chr$(1) + Chr$(1)
                Else
                
                    gcBild = Chr$(28) + Chr$(112) + Chr$(1) + Chr$(0)  ' alt
                End If
               
            Else
                gcBild = ""
            End If
            
            gcLade = Chr$(27) + Chr$(112) + Chr$(0) + Chr$(30) + Chr$(120)
            gcInit = Chr$(27) + Chr$(61) + Chr$(1) + Chr$(27) + Chr$(64)
            gcBarCode = Chr$(29) + Chr$(107) + Chr$(2)
        End If
        
        'die Bondrucker Epson TmT88 4 und 5
        If InStr(UCase$(gcBonDrucker), "DRUCKER45") > 0 Then
            
            gcSchneiden = Chr$(27) + Chr$(105)
            
            '48 48 ist die Bildposition
            If gbPrintLOGO = True Then
                gcBild = Chr$(29) + Chr$(40) + Chr$(76) + Chr$(6) + Chr$(0) + Chr$(48) + Chr$(69) + Chr$(48) + Chr$(48) + Chr$(1) + Chr$(1)
            Else
                gcBild = ""
            End If
            
            gcLade = Chr$(27) + Chr$(112) + Chr$(0) + Chr$(30) + Chr$(120)
            gcInit = Chr$(27) + Chr$(61) + Chr$(1) + Chr$(27) + Chr$(64)
            gcBarCode = Chr$(29) + Chr$(107) + Chr$(2)
        End If
        
        
        
        If InStr(gcBonDrucker, "TM-T70") > 0 Then
            
            gcSchneiden = Chr$(27) + Chr$(105)
            
            '48 48 ist die Bildposition
            If gbPrintLOGO = True Then
                gcBild = Chr$(29) + Chr$(40) + Chr$(76) + Chr$(6) + Chr$(0) + Chr$(48) + Chr$(69) + Chr$(48) + Chr$(48) + Chr$(1) + Chr$(1)
            Else
                gcBild = ""
            End If
            
            gcLade = Chr$(27) + Chr$(112) + Chr$(0) + Chr$(30) + Chr$(120)
            gcInit = Chr$(27) + Chr$(61) + Chr$(1) + Chr$(27) + Chr$(64)
            gcBarCode = Chr$(29) + Chr$(107) + Chr$(2)
        End If
        
        If InStr(gcBonDrucker, "TM-T20") > 0 Then
            
            gcSchneiden = Chr$(27) + Chr$(105)
            
            '32 32 ist die Bildposition
            If gbPrintLOGO = True Then
                gcBild = Chr$(29) + Chr$(40) + Chr$(76) + Chr$(6) + Chr$(0) + Chr$(48) + Chr$(69) + Chr$(32) + Chr$(32) + Chr$(1) + Chr$(1)
            Else
                gcBild = ""
            End If
            
            gcLade = Chr$(27) + Chr$(112) + Chr$(0) + Chr$(30) + Chr$(120)
            gcInit = Chr$(27) + Chr$(61) + Chr$(1) + Chr$(27) + Chr$(64)
            gcBarCode = Chr$(29) + Chr$(107) + Chr$(2)
        End If
        
        
        If InStr(UCase$(gcBonDrucker), "UNIVERSAL/NUR TEXT") > 0 Then
            gcSchneiden = Chr$(28) + Chr$(73) + Chr$(1)
            gcLade = ""
            gcInit = Chr$(27) + Chr$(61) + Chr$(1) + Chr$(27) + Chr$(64)
        End If
        
        If InStr(UCase$(gcBonDrucker), "STAR-TXT") > 0 Then
            gcSchneiden = ""
            gcLade = Chr$(27) + Chr$(7)
            gcInit = Chr$(27) + Chr$(61) + Chr$(1) + Chr$(27) + Chr$(64)
        End If
        
        If InStr(UCase$(gcBonDrucker), "STAR") > 0 Then
            gcSchneiden = ""
            gcLade = Chr$(7)
            gcInit = Chr$(27) + Chr$(61) + Chr$(1) + Chr$(27) + Chr$(64)
        End If
        
        lPos = lPos + 2
        lStart = lPos
        lPos = InStr(lStart, ctmp, vbCrLf)
        gcListenDrucker = Mid(ctmp, lStart, lPos - lStart)
        
        lPos = lPos + 2
        lStart = lPos
        lPos = InStr(lStart, ctmp, vbCrLf)
        gcEtikettenDrucker = Mid(ctmp, lStart, lPos - lStart)
        
        lPos = lPos + 2
        lStart = lPos
        lPos = InStr(lStart, ctmp, vbCrLf)
        gcFaxDrucker = Mid(ctmp, lStart, lPos - lStart)
        
        lPos = lPos + 2
        lStart = lPos
        lPos = InStr(lStart, ctmp, vbCrLf)
        If lPos > 0 Then
            gcGutscheinDrucker = Mid(ctmp, lStart, lPos - lStart)
        End If
        
        
        Close iFileNr
    Else
        fnLeseIniPrinterWKL00 = 1
        Close iFileNr
        gcBonDrucker = ""
        gcListenDrucker = ""
        gcEtikettenDrucker = ""
        gcGutscheinDrucker = ""
        Kill App.Path & "\PRINTWKL.INI"
    End If
    
Exit Function
LOKAL_ERROR:

    fnLeseIniPrinterWKL00 = 1
    If iFileNr > 0 Then
        Close iFileNr
    End If
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "fnLeseIniPrinterWKL00"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
'    Resume Next
End Function
Public Function AUSwertungZP(lDatum As Long, sZeitung As String, cKd As String, lZeitlinr As Long) As String
    On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    
    AUSwertungZP = Original_VMP_Format(lDatum, sZeitung, cKd, lZeitlinr)

    If lDatum = 0 Then 'If lDatum > 0 Then
        sSQL = "update kassjour set abok = true "
        sSQL = sSQL & " where abok = false  "
        gdBase.Execute sSQL, dbFailOnError
    End If

    Screen.MousePointer = 0

Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AUSwertungZP"
    Fehler.gsFehlertext = "Bei der Zeitungsauswertung ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Private Function Original_VMP_Format(lDatum As Long, sZeitung As String, cKd As String, lZeitlinr As Long) As String
    On Error GoTo LOKAL_ERROR

    Dim rsrs            As Recordset
    Dim sSQL            As String
    Dim lFiliale        As Long
    Dim lPos            As Long
    Dim sBezeich        As String
    Dim iFilnr          As Integer
    Dim sTeilString     As String
    Dim sEAN            As String
    Dim sADDON          As String
    Dim sBon            As String
    Dim sDatum          As String
    Dim sDATEIN         As String
    Dim sUZEIT          As String
    Dim sZeit           As String
    Dim sMenge          As String
    Dim sEH_NR          As String
    Dim sWriteString    As String
    Dim sZwischen       As String
    Dim rec             As Recordset
    
    Original_VMP_Format = ""

    Screen.MousePointer = 11
    
    loeschNEW "ZEITUNG", gdBase
    CreateTable "ZEITUNG", gdBase
    
    sSQL = "Insert into Zeitung select kassjour.bezeich as abezeich "
    sSQL = sSQL & ", kassjour.belegnr "
    sSQL = sSQL & ", kassjour.adate "
    sSQL = sSQL & ", kassjour.azeit "
    sSQL = sSQL & ", kassjour.menge as amenge "
    sSQL = sSQL & ", '" & cKd & "' as eh_nr "
    sSQL = sSQL & " from Kassjour where "
    
    If lZeitlinr = 0 Then
        sSQL = sSQL & " bezeich like 'ZEITSCHRIFTEN*'  "
    Else
        sSQL = sSQL & " linr = " & lZeitlinr
    End If
    
    If lDatum > 0 Then
        sSQL = sSQL & " and adate = " & lDatum
    Else
        sSQL = sSQL & " and abok =  false "
    End If
    gdBase.Execute sSQL, dbFailOnError
    
    Kill sZeitung
    
    iFilnr = FreeFile
    Open sZeitung For Output As iFilnr
    
    sSQL = "select * from ZEITUNG "
    Set rec = gdBase.OpenRecordset(sSQL)
    If rec.EOF Then
        rec.Close: Set rec = Nothing
        Close iFilnr
        Screen.MousePointer = 0
        Original_VMP_Format = "Fehler: ZEITUNG.TXT konnte nicht erstellt werden - keine Daten vorhanden"
        Exit Function
    End If
    
    While Not rec.EOF
        If Not IsNull(rec!ABEZEICH) Then
            sBezeich = Trim(rec!ABEZEICH)
        End If
        
        lPos = InStr(1, sBezeich, " ")
        If lPos > 0 Then
        
            If lZeitlinr = 0 Then
                sBezeich = Right(sBezeich, Len(sBezeich) - lPos)
            Else
                sBezeich = Right(sBezeich, 18)
            End If
            
            sTeilString = Right(sBezeich, 18)
            sEAN = Left(Trim(sTeilString), 13)
            While Len(Trim(sEAN)) < 13
                sEAN = sEAN & "0"
            Wend
            
            If Len(Trim(sTeilString)) > 13 Then
                sADDON = Right(Trim(sTeilString), Len(Trim(sTeilString)) - 13)
            Else
                sADDON = "00000"
            End If
            While Len(Trim(sADDON)) < 5
                sADDON = sADDON & "0"
            Wend
        
            If Not IsNull(rec!eh_nr) Then
                sEH_NR = Trim(rec!eh_nr)
                While Len(Trim(sEH_NR)) < 10
                    sEH_NR = "0" & sEH_NR
                Wend
            End If
    
            If Not IsNull(rec!BELEGNR) Then
                sBon = rec!BELEGNR
                While Len(Trim(sBon)) < 6
                    sBon = "0" & sBon
                Wend
            End If
            If Not IsNull(rec!ADATE) Then
                sDATEIN = Trim(rec!ADATE)
                If Len(Mid(sDATEIN, 7)) < 4 Then
                    sZwischen = "20"
                Else
                    sZwischen = ""
                End If
                sDatum = Mid(sDATEIN, 1, 2) & Mid(sDATEIN, 4, 2) & sZwischen & Mid(sDATEIN, 7)
            End If
            If Not IsNull(rec!AZEIT) Then
                sZeit = rec!AZEIT
                sUZEIT = Mid(sZeit, 1, InStr(1, sZeit, ":") - 1) & Mid(sZeit, InStr(1, sZeit, ":") + 1, 2) & Mid(sZeit, Len(sZeit) - 1)
            End If
            If Not IsNull(rec!aMenge) Then
                sMenge = rec!aMenge
            End If
            While Len(Trim(sMenge)) < 3
                 sMenge = "0" & sMenge
            Wend
            sWriteString = sEAN & sADDON & Trim(sEH_NR) & Trim(sBon) & Trim(sDatum) & Trim(sUZEIT) & Trim(sMenge)
            If Len(Trim(sWriteString)) Then
                Print #iFilnr, Trim(sWriteString)
            End If
        End If
        rec.MoveNext
    Wend
    Close iFilnr
    rec.Close: Set rec = Nothing
    
    Original_VMP_Format = ""
    
    Screen.MousePointer = 0
    
Exit Function
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "Original_VMP_Format"
        Fehler.gsFehlertext = "Bei der Zeitungsauswertung ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If

End Function
Private Function ALT_VMP_Format(lDatum As Long, sZeitung As String, cKd As String, lZeitlinr As Long) As String
    On Error GoTo LOKAL_ERROR

    Dim rsrs            As Recordset
    Dim sSQL            As String
    Dim lFiliale        As Long
    Dim lPos            As Long
    Dim sBezeich        As String
    Dim iFilnr          As Integer
    Dim sEAN            As String * 18
    Dim sADDON          As String * 5
    Dim sBon            As String * 6
    Dim sDatum          As String * 8
    Dim sDATEIN         As String
    Dim sUZEIT          As String * 6
    Dim sZeit           As String
    Dim sMenge          As String * 3
    Dim sEH_NR          As String * 10
    Dim sWriteString    As String * 51
    Dim sZwischen       As String
    Dim rec             As Recordset
    
    ALT_VMP_Format = ""

    Screen.MousePointer = 11
    
    loeschNEW "ZEITUNG", gdBase
    CreateTable "ZEITUNG", gdBase
    
    sSQL = "Insert into Zeitung select kassjour.bezeich as abezeich "
    sSQL = sSQL & ", kassjour.belegnr "
    sSQL = sSQL & ", kassjour.adate "
    sSQL = sSQL & ", kassjour.azeit "
    sSQL = sSQL & ", kassjour.menge as amenge "
    sSQL = sSQL & ", '" & cKd & "' as eh_nr "
    sSQL = sSQL & " from Kassjour where "
    
    If lZeitlinr = 0 Then
        sSQL = sSQL & " bezeich like 'ZEITSCHRIFTEN*'  "
    Else
        sSQL = sSQL & " linr = " & lZeitlinr
    End If
    
    If lDatum > 0 Then
        sSQL = sSQL & " and adate = " & lDatum
    Else
        sSQL = sSQL & " and abok =  false "
    End If
    gdBase.Execute sSQL, dbFailOnError
    
    Kill sZeitung
    
    iFilnr = FreeFile
    Open sZeitung For Output As iFilnr
    
    sSQL = "select * from ZEITUNG "
    Set rec = gdBase.OpenRecordset(sSQL)
    If rec.EOF Then
        rec.Close: Set rec = Nothing
        Close iFilnr
        Screen.MousePointer = 0
        ALT_VMP_Format = "Fehler: ZEITUNG.TXT konnte nicht erstellt werden - keine Daten vorhanden"
        Exit Function
    End If
    
    While Not rec.EOF
        If Not IsNull(rec!ABEZEICH) Then
            sBezeich = Trim(rec!ABEZEICH)
        End If
        
        lPos = InStr(1, sBezeich, " ")
        If lPos > 0 Then
        
            If lZeitlinr = 0 Then
                sBezeich = Right(sBezeich, Len(sBezeich) - lPos)
            Else
                sBezeich = Right(sBezeich, 18)
            End If
            
            sEAN = Right(sBezeich, 18)
            sEAN = sEAN & Space(18 - Len(sEAN))
        
            If Not IsNull(rec!eh_nr) Then
                sEH_NR = Trim(rec!eh_nr)
            End If
    
            If Not IsNull(rec!BELEGNR) Then
                sBon = rec!BELEGNR
                While Len(Trim(sBon)) < 6
                    sBon = "0" & sBon
                Wend
            End If
            If Not IsNull(rec!ADATE) Then
                sDATEIN = Trim(rec!ADATE)
                If Len(Mid(sDATEIN, 7)) < 4 Then
                    sZwischen = "20"
                Else
                    sZwischen = ""
                End If
                sDatum = Mid(sDATEIN, 1, 2) & Mid(sDATEIN, 4, 2) & sZwischen & Mid(sDATEIN, 7)
            End If
            If Not IsNull(rec!AZEIT) Then
                sZeit = rec!AZEIT
                sUZEIT = Mid(sZeit, 1, InStr(1, sZeit, ":") - 1) & Mid(sZeit, InStr(1, sZeit, ":") + 1, 2) & Mid(sZeit, Len(sZeit) - 1)
            End If
            If Not IsNull(rec!aMenge) Then
                sMenge = rec!aMenge
            End If
            While Len(Trim(sMenge)) < 3
                 sMenge = "0" & sMenge
            Wend
            sWriteString = sEAN & Trim(sEH_NR) & Trim(sBon) & Trim(sDatum) & Trim(sUZEIT) & Trim(sMenge)
            If Len(Trim(sWriteString)) Then
                Print #iFilnr, Trim(sWriteString)
            End If
        End If
        rec.MoveNext
    Wend
    Close iFilnr
    rec.Close: Set rec = Nothing
    
    ALT_VMP_Format = ""
    
    Screen.MousePointer = 0
    
Exit Function
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "ALT_VMP_Format"
        Fehler.gsFehlertext = "Bei der Zeitungsauswertung ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If

End Function
Public Function ErmittleKundenBonus(cKunde As String) As Double
    On Error GoTo LOKAL_ERROR
    
    Dim rsrs As Recordset
    Dim sSQL As String
    
    If cKunde = "" Then
        Exit Function
    End If
    
    ErmittleKundenBonus = 0
    sSQL = "Select Bonus from Kunden where kundnr = " & cKunde
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!BONUS) Then
            ErmittleKundenBonus = rsrs!BONUS
        End If
        
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ErmittleKundenBonus"
    Fehler.gsFehlertext = "Es trat ein Fehler im Programmteil Bonus auf. "
    
    Fehlermeldung1
End Function
Public Sub LeseDatenWKL22(Listx As ListBox, listx1 As ListBox)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim cFeld As String
    Dim cLBSatz As String
    Dim dWert As Double
    
    listx1.Clear
    listx1.AddItem "Nr. Bediener-Name                       Berechtigung"
    
    Listx.Clear
    cSQL = "Select * from BEDNAME where BEDNU <> 99 order by BEDNU"
'    cSQL = "Select * from BEDNAME where BEDNU <> 99 and ( SYNSTATUS is null or SYNSTATUS = 'E' or SYNSTATUS = 'A' ) order by BEDNU"
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        Do While Not rsrs.EOF
            If Not IsNull(rsrs!BEDNU) Then
                dWert = rsrs!BEDNU
            Else
                dWert = 0
            End If
            cFeld = Format$(dWert, "##0")
            cFeld = Space$(3 - Len(cFeld)) & cFeld
            cLBSatz = cFeld & " "
            
            If Not IsNull(rsrs!bedname) Then
                cFeld = rsrs!bedname
            Else
                cFeld = ""
            End If
            cFeld = Trim$(cFeld)
            cFeld = cFeld & Space$(35 - Len(cFeld)) & " "
            cLBSatz = cLBSatz & cFeld
            
            If Not IsNull(rsrs!BEDIENER) Then
                dWert = rsrs!BEDIENER
            Else
                dWert = 0
            End If
            cLBSatz = cLBSatz & Format$(dWert, "0")
            
            Listx.AddItem cLBSatz
            
            rsrs.MoveNext
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "LeseDatenWKL22"
    Fehler.gsFehlertext = "Im Programmteil Bedienerverwaltung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub lastvoreinstellungspeichern(sTab As String, frmme As Form, givon As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim i As Integer
    Dim sSQL As String
    Dim ibis As Integer
    
    If givon = 11 Or givon = 9 Then
        ibis = 9
    Else
        ibis = 8
    End If
    
    For i = 0 To ibis
    
        If frmme.Check1(i).value = vbChecked Then
            sSQL = "Update " & sTab & " set transf" & i & " = true "
            gdBase.Execute sSQL, dbFailOnError
        Else
            sSQL = "Update " & sTab & " set transf" & i & " = False "
            gdBase.Execute sSQL, dbFailOnError
        End If
    Next i
    
Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "lastvoreinstellungspeichern"
    Fehler.gsFehlertext = "Beim Speichern der letzten Voreinstellungen ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function listeArtikelhistorie(sArt As String, sArtnr As String)
    On Error GoTo LOKAL_ERROR
    
    Select Case sArt
        Case "Bestand"
            If SuchedatenAHB(sArtnr) = True Then
            
                loeschNEW "BESTPDRU", gdApp
                TransferTab gdBase, App.Path & "/kissapp.mdb", "BESTPDRU"
    
            
                reportbildschirmApp "", "awkl78" '"aWKL46g"
            End If
    End Select
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "listeArtikelhistorie"
    Fehler.gsFehlertext = "Beim Anzeigen der Artikelhistorie ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function SuchedatenAHB(sArt As String) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsrs        As Recordset
    
    If sArt = "" Then
        Exit Function
    End If
    
    SuchedatenAHB = False
    Screen.MousePointer = 11
    
    
    loeschNEW "BESTPDRU" & srechnertab, gdBase
    CreateTableT2 "BESTPDRU" & srechnertab, gdBase
    
    sSQL = "Create Index Bednu on bedname (bednu)"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into BESTPDRU" & srechnertab & " select * from BestProt where aenart <> 'Kassiervorgang' "
    sSQL = sSQL & " and artnr = " & sArt
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into BESTPDRU" & srechnertab & " select artnr, Bediener, 'Kassiervorgang' as aenart "
    sSQL = sSQL & ", Filiale "
    sSQL = sSQL & ", adate as Lastdate "
    sSQL = sSQL & ", azeit as lasttime "
    sSQL = sSQL & ", best1 as newbest "
    sSQL = sSQL & ", (best1 + menge) as oldbest "
    sSQL = sSQL & ", menge as umenge "
    sSQL = sSQL & " from Kassjour  "
    sSQL = sSQL & " where artnr = " & sArt
    sSQL = sSQL & " and menge > 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into BESTPDRU" & srechnertab & " select artnr, Bediener, 'Kassiervorgang' as aenart "
    sSQL = sSQL & ", Filiale "
    sSQL = sSQL & ", adate as Lastdate "
    sSQL = sSQL & ", azeit as lasttime "
    sSQL = sSQL & ", best1 as newbest "
    sSQL = sSQL & ", (best1 + menge) as oldbest "
    sSQL = sSQL & ", menge as umenge "
    sSQL = sSQL & " from Kollverk  "
    sSQL = sSQL & " where artnr = " & sArt
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into BESTPDRU" & srechnertab & " select artnr,Bediener, 'Filialtausch' as aenart "
    sSQL = sSQL & ", adate as Lastdate "
    sSQL = sSQL & ", azeit as lasttime "
    sSQL = sSQL & ", menge as umenge "
    sSQL = sSQL & " from Tausch  "
    sSQL = sSQL & " where artnr = " & sArt
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update BESTPDRU" & srechnertab & " inner join bedname on BESTPDRU" & srechnertab & ".Bediener = bedname.bednu "
    sSQL = sSQL & " Set BESTPDRU" & srechnertab & ".bedname = bedname.bedname"
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    loeschNEW "BESTPDRU", gdBase
    
    
    sSQL = "Select * into BESTPDRU from BESTPDRU" & srechnertab & "  "
    gdBase.Execute sSQL, dbFailOnError
    
    
    
        
    Set rsrs = gdBase.OpenRecordset("BESTPDRU" & srechnertab, dbOpenTable)
    If rsrs.EOF Then
        Screen.MousePointer = 0
        rsrs.Close: Set rsrs = Nothing
        Exit Function
    End If
    rsrs.Close: Set rsrs = Nothing
    
    SuchedatenAHB = True
    Screen.MousePointer = 0
Exit Function
LOKAL_ERROR:
    If err.Number = 3375 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SuchedatenAHB"
        Fehler.gsFehlertext = "Beim Erzeugen der Artikelhistorie ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Function
Public Function SuchedatenAHEAN(sArt As String) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsrs        As Recordset
    
    SuchedatenAHEAN = False
    
    If sArt = "" Then
        Exit Function
    End If
    
    Screen.MousePointer = 11
    
    
    loeschNEW "EANpdru", gdBase
    CreateTable "EANPDRU", gdBase
    
    sSQL = "Insert into EANpdru select * from EANProt where artnr = " & sArt
    gdBase.Execute sSQL, dbFailOnError
    
    Set rsrs = gdBase.OpenRecordset("EANPDRU", dbOpenTable)
    If rsrs.EOF Then
        Screen.MousePointer = 0
        Exit Function
    End If
    rsrs.Close: Set rsrs = Nothing
    
    SuchedatenAHEAN = True
    
    Screen.MousePointer = 0
Exit Function
LOKAL_ERROR:
    If err.Number = 3375 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SuchedatenAHEAN"
        Fehler.gsFehlertext = "Beim Erzeugen der Artikelhistorie ist ein Fehler aufgetreten."
        
        Fehlermeldung1
       
    End If
End Function
Public Function ermBezeichausWGN(cWg As String) As String
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

ermBezeichausWGN = ""

If IsNumeric(cWg) Then

    sSQL = " Select BEZEICH from ARTIKEL where artnr = " & cWg
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then

        rsrs.MoveFirst
        If Not IsNull(rsrs!BEZEICH) Then
            ermBezeichausWGN = rsrs!BEZEICH
        End If

    End If
    rsrs.Close: Set rsrs = Nothing

End If

ermBezeichausWGN = ermBezeichausWGN & Space(35 - Len(ermBezeichausWGN))


Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermBezeichausWGN"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function ermVKPR(cArtNr As String) As String
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

ermVKPR = "0"

If IsNumeric(cArtNr) Then
    sSQL = " Select VKPR from ARTIKEL where artnr = " & cArtNr
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!vkpr) Then
            ermVKPR = rsrs!vkpr
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
End If

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermVKPR"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function ermKVKPR1(cWg As String) As String
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

ermKVKPR1 = "0"

If IsNumeric(cWg) Then

    sSQL = " Select KVKPR1 from ARTIKEL where artnr = " & cWg
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!KVKPR1) Then
            ermKVKPR1 = rsrs!KVKPR1
        End If

    End If
    rsrs.Close: Set rsrs = Nothing
End If

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermKVKPR1"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function ermPreisMitPreisZK(cArtNr As String, iPreizKZ As Integer) As Double
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

Dim dFaktorV    As Double
Dim dFaktorE    As Double
Dim cMwst       As String
    
dFaktorV = 1 + (gdMWStV / 100)
dFaktorE = 1 + (gdMWStE / 100)

ermPreisMitPreisZK = 0

If IsNumeric(cArtNr) Then

    sSQL = " Select * from ARTIKEL where artnr = " & cArtNr
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        
        If Not IsNull(rsrs!MWST) Then
            cMwst = rsrs!MWST
        Else
            cMwst = "V"
        End If
        
        Select Case iPreizKZ
            Case Is = 0
                If Not IsNull(rsrs!KVKPR1) Then
                    ermPreisMitPreisZK = rsrs!KVKPR1
                End If
            Case Is = 1
                If Not IsNull(rsrs!vkpr) Then
                    ermPreisMitPreisZK = rsrs!vkpr
                End If
            Case Is = 2
                    
                'Achtung augepasst - jetzt den größten aus der Artlief nehmen
            
                ermPreisMitPreisZK = ermMaxLEKPR(cArtNr)
                
                If ermPreisMitPreisZK = 0 Then
                    If Not IsNull(rsrs!lekpr) Then
                        ermPreisMitPreisZK = rsrs!lekpr
                    End If
                End If
                
                If cMwst = "V" Then
                    ermPreisMitPreisZK = ermPreisMitPreisZK * dFaktorV
                End If
                If cMwst = "E" Then
                    ermPreisMitPreisZK = ermPreisMitPreisZK * dFaktorE
                End If
            Case Is = 3
                If Not IsNull(rsrs!ekpr) Then
                    ermPreisMitPreisZK = rsrs!ekpr
                End If
                If cMwst = "V" Then
                    ermPreisMitPreisZK = ermPreisMitPreisZK * dFaktorV
                End If
                If cMwst = "E" Then
                    ermPreisMitPreisZK = ermPreisMitPreisZK * dFaktorE
                End If
            Case Is = 4 'Spez kvk
                ermPreisMitPreisZK = LeseSpezpreis(CLng(cArtNr), 0)
                If ermPreisMitPreisZK = 0 Then
                    If Not IsNull(rsrs!KVKPR1) Then
                        ermPreisMitPreisZK = rsrs!KVKPR1
                    End If
                End If
            Case Is = 5 'lvk m A
                If rsrs!RABATT_OK = "N" Then
                    If Not IsNull(rsrs!KVKPR1) Then
                        ermPreisMitPreisZK = rsrs!KVKPR1
                    
                    End If
                Else
                    If Not IsNull(rsrs!vkpr) Then
                        ermPreisMitPreisZK = rsrs!vkpr
                    
                    End If
                End If
        End Select

    End If
    rsrs.Close: Set rsrs = Nothing
End If

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermPreisMitPreisZK"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function ermLINR(cART As String) As Long
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

ermLINR = 0

If IsNumeric(cART) Then

    sSQL = " Select linr from ARTIKEL where artnr = " & cART
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!linr) Then
            ermLINR = rsrs!linr
        End If

    End If
    rsrs.Close: Set rsrs = Nothing
End If

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermLINR"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function SuchedatenAHEANEAN(sArt As String) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsrs        As Recordset
    
    SuchedatenAHEANEAN = False
    
    If sArt = "" Then
        Exit Function
    End If
    Screen.MousePointer = 11
    
    loeschNEW "EANpdru", gdBase
    CreateTable "EANPDRU", gdBase
    
    sSQL = "Insert into EANpdru select * from EANProt where EAN = '" & sArt & "'"
    gdBase.Execute sSQL, dbFailOnError
    
    Set rsrs = gdBase.OpenRecordset("EANPDRU", dbOpenTable)
    If rsrs.EOF Then
        Screen.MousePointer = 0
        Exit Function
    End If
    rsrs.Close: Set rsrs = Nothing
    
    SuchedatenAHEANEAN = True
    
    Screen.MousePointer = 0
Exit Function
LOKAL_ERROR:
    If err.Number = 3375 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SuchedatenAHEANEAN"
        Fehler.gsFehlertext = "Beim Erzeugen der Artikelhistorie ist ein Fehler aufgetreten."
        
        Fehlermeldung1
       
    End If
End Function
Public Function SuchedatenAHKVKPR1(sArt As String) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsrs        As Recordset
    
    SuchedatenAHKVKPR1 = False
    
    If sArt = "" Then
        Exit Function
    End If
    Screen.MousePointer = 11
    
    loeschNEW "KVKPR1pdru", gdBase
    CreateTable "KVKPR1PDRU", gdBase
    
    sSQL = "Insert into KVKPR1pdru select * from KVKPR1Prot where artnr = " & sArt
    gdBase.Execute sSQL, dbFailOnError
    
    Set rsrs = gdBase.OpenRecordset("KVKPR1PDRU", dbOpenTable)
    If rsrs.EOF Then
        Screen.MousePointer = 0
        Exit Function
    End If
    rsrs.Close: Set rsrs = Nothing
    
    SuchedatenAHKVKPR1 = True
    
    Screen.MousePointer = 0
Exit Function
LOKAL_ERROR:
    If err.Number = 3375 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SuchedatenAHKVKPR1"
        Fehler.gsFehlertext = "Beim Erzeugen der Artikelhistorie ist ein Fehler aufgetreten."
        
        Fehlermeldung1
       
    End If
End Function
 Public Sub FaktorBerechnungWKL43()
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim cArtNr      As String
    Dim cDateNow    As String
    Dim dFaktor     As Double
    Dim iMonatNow   As Integer
    Dim iMinMen     As Integer
    Dim iBestand    As Long
    Dim i           As Long
    Dim rsrs        As Recordset
    Dim iMonat(1 To 12)   As Long
        
    
    UeberlaufFehler = False
    
    cDateNow = DateValue(Now)
    cDateNow = Mid$(cDateNow, 1, 2)
    iMonatNow = Month(Now)
    
    If iMonatNow >= 4 Then
        cSQL = "Select LJ" & iMonatNow & " as MONAT1"
        cSQL = cSQL & " ,LJ" & iMonatNow - 1 & " as MONAT2"
        cSQL = cSQL & " ,LJ" & iMonatNow - 2 & " as MONAT3"
        cSQL = cSQL & " ,LJ" & iMonatNow - 3 & " as MONAT4"
        Select Case iMonatNow
            Case Is = 4
                For i = 5 To 12
                    cSQL = cSQL & " ,VJ" & i & " as MONAT" & i
                Next i
                
            Case Is = 5
                cSQL = cSQL & " ,LJ" & iMonatNow - 4 & " as MONAT5 "
                For i = 6 To 12
                    cSQL = cSQL & " ,VJ" & i & " as MONAT" & i
                Next i
                
            Case Is = 6
                cSQL = cSQL & " ,LJ" & iMonatNow - 4 & " as MONAT5 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 5 & " as MONAT6 "
                For i = 7 To 12
                    cSQL = cSQL & " ,VJ" & i & " as MONAT" & i
                Next i
                
            Case Is = 7
                cSQL = cSQL & " ,LJ" & iMonatNow - 4 & " as MONAT5 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 5 & " as MONAT6 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 6 & " as MONAT7 "
                For i = 8 To 12
                    cSQL = cSQL & " ,VJ" & i & " as MONAT" & i
                Next i
            
            Case Is = 8
                cSQL = cSQL & " ,LJ" & iMonatNow - 4 & " as MONAT5 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 5 & " as MONAT6 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 6 & " as MONAT7 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 7 & " as MONAT8 "
                For i = 9 To 12
                    cSQL = cSQL & " ,VJ" & i & " as MONAT" & i
                Next i
            
            Case Is = 9
                cSQL = cSQL & " ,LJ" & iMonatNow - 4 & " as MONAT5 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 5 & " as MONAT6 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 6 & " as MONAT7 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 7 & " as MONAT8 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 8 & " as MONAT9 "
                For i = 10 To 12
                    cSQL = cSQL & " ,VJ" & i & " as MONAT" & i
                Next i
            
            Case Is = 10
                cSQL = cSQL & " ,LJ" & iMonatNow - 4 & " as MONAT5 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 5 & " as MONAT6 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 6 & " as MONAT7 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 7 & " as MONAT8 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 8 & " as MONAT9 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 9 & " as MONAT10 "
                For i = 11 To 12
                    cSQL = cSQL & " ,VJ" & i & " as MONAT" & i
                Next i
            
            Case Is = 11
                cSQL = cSQL & " ,LJ" & iMonatNow - 4 & " as MONAT5 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 5 & " as MONAT6 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 6 & " as MONAT7 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 7 & " as MONAT8 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 8 & " as MONAT9 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 9 & " as MONAT10 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 10 & " as MONAT11 "
                cSQL = cSQL & " ,VJ12" & " as MONAT12 "
            
            Case Is = 12
                cSQL = cSQL & " ,LJ" & iMonatNow - 4 & " as MONAT5 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 5 & " as MONAT6 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 6 & " as MONAT7 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 7 & " as MONAT8 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 8 & " as MONAT9 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 9 & " as MONAT10 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 10 & " as MONAT11 "
                cSQL = cSQL & " ,LJ" & iMonatNow - 11 & " as MONAT12 "
        End Select
        cSQL = cSQL & " ,BESTAND,FAKTOR,MINMEN,BESTVOR,ARTNR from VORSCHLZ "
    Else  '** iMonatNow < 4 **
        If iMonatNow = 1 Then
            cSQL = "Select LJ1 as MONAT1"
            For i = 12 To 2 Step -1
                If i = 12 Then cSQL = cSQL & ",VJ" & i & " as MONAT2"
                If i = 11 Then cSQL = cSQL & ",VJ" & i & " as MONAT3"
                If i = 10 Then cSQL = cSQL & ",VJ" & i & " as MONAT4"
                If i = 9 Then cSQL = cSQL & ",VJ" & i & " as MONAT5"
                If i = 8 Then cSQL = cSQL & ",VJ" & i & " as MONAT6"
                If i = 7 Then cSQL = cSQL & ",VJ" & i & " as MONAT7"
                If i = 6 Then cSQL = cSQL & ",VJ" & i & " as MONAT8"
                If i = 5 Then cSQL = cSQL & ",VJ" & i & " as MONAT9"
                If i = 4 Then cSQL = cSQL & ",VJ" & i & " as MONAT10"
                If i = 3 Then cSQL = cSQL & ",VJ" & i & " as MONAT11"
                If i = 2 Then cSQL = cSQL & ",VJ" & i & " as MONAT12"
            Next i
        ElseIf iMonatNow = 2 Then
            cSQL = "Select LJ2 as MONAT1,LJ1 as MONAT2"
            For i = 12 To 3 Step -1
                If i = 12 Then cSQL = cSQL & ",VJ" & i & " as MONAT3"
                If i = 11 Then cSQL = cSQL & ",VJ" & i & " as MONAT4"
                If i = 10 Then cSQL = cSQL & ",VJ" & i & " as MONAT5"
                If i = 9 Then cSQL = cSQL & ",VJ" & i & " as MONAT6"
                If i = 8 Then cSQL = cSQL & ",VJ" & i & " as MONAT7"
                If i = 7 Then cSQL = cSQL & ",VJ" & i & " as MONAT8"
                If i = 6 Then cSQL = cSQL & ",VJ" & i & " as MONAT9"
                If i = 5 Then cSQL = cSQL & ",VJ" & i & " as MONAT10"
                If i = 4 Then cSQL = cSQL & ",VJ" & i & " as MONAT11"
                If i = 3 Then cSQL = cSQL & ",VJ" & i & " as MONAT12"
            Next i
        Else:
            cSQL = "Select LJ3 as MONAT1,LJ2 as MONAT2,LJ1 as MONAT3"
            For i = 12 To 4 Step -1
                If i = 12 Then cSQL = cSQL & ",VJ" & i & " as MONAT4"
                If i = 11 Then cSQL = cSQL & ",VJ" & i & " as MONAT5"
                If i = 10 Then cSQL = cSQL & ",VJ" & i & " as MONAT6"
                If i = 9 Then cSQL = cSQL & ",VJ" & i & " as MONAT7"
                If i = 8 Then cSQL = cSQL & ",VJ" & i & " as MONAT8"
                If i = 7 Then cSQL = cSQL & ",VJ" & i & " as MONAT9"
                If i = 6 Then cSQL = cSQL & ",VJ" & i & " as MONAT10"
                If i = 5 Then cSQL = cSQL & ",VJ" & i & " as MONAT11"
                If i = 4 Then cSQL = cSQL & ",VJ" & i & " as MONAT12"
            Next i
        End If
        cSQL = cSQL & " ,BESTAND,FAKTOR,MINMEN,BESTVOR,ARTNR from VORSCHLZ "
    End If
    
    Set rsrs = gdApp.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        i = 1
        Do While Not rsrs.EOF
            If Not IsNull(rsrs!artnr) Then
                cArtNr = rsrs!artnr
'                If cArtNr = "316159" Then
'                    MsgBox cArtNr
'                End If
            Else
                cArtNr = 0
            End If
            If Not IsNull(rsrs!MONAT1) Then
                iMonat(1) = rsrs!MONAT1
            Else
                iMonat(1) = 0
            End If
            If Not IsNull(rsrs!MONAT2) Then
                iMonat(2) = rsrs!MONAT2
            Else
                iMonat(2) = 0
            End If
            If Not IsNull(rsrs!MONAT3) Then
                iMonat(3) = rsrs!MONAT3
            Else
                iMonat(3) = 0
            End If
            If Not IsNull(rsrs!MONAT4) Then
                iMonat(4) = rsrs!MONAT4
            Else
                iMonat(4) = 0
            End If
            If Not IsNull(rsrs!MONAT5) Then
                iMonat(5) = rsrs!MONAT5
            Else
                iMonat(5) = 0
            End If
            If Not IsNull(rsrs!MONAT6) Then
                iMonat(6) = rsrs!MONAT6
            Else
                iMonat(6) = 0
            End If
            
            If Not IsNull(rsrs!MONAT7) Then
                iMonat(7) = rsrs!MONAT7
            Else
                iMonat(7) = 0
            End If
            If Not IsNull(rsrs!MONAT8) Then
                iMonat(8) = rsrs!MONAT8
            Else
                iMonat(8) = 0
            End If
            If Not IsNull(rsrs!MONAT9) Then
                iMonat(9) = rsrs!MONAT9
            Else
                iMonat(9) = 0
            End If
            If Not IsNull(rsrs!MONAT10) Then
                iMonat(10) = rsrs!MONAT10
            Else
                iMonat(10) = 0
            End If
            If Not IsNull(rsrs!MONAT11) Then
                iMonat(11) = rsrs!MONAT11
            Else
                iMonat(11) = 0
            End If
            If Not IsNull(rsrs!MONAT12) Then
                iMonat(12) = rsrs!MONAT12
            Else
                iMonat(12) = 0
            End If
            
            If Not IsNull(rsrs!BESTAND) Then
                If CDbl(rsrs!BESTAND) > 10000 Then
                    Dim ctmp As String
                    ctmp = "Der Artikel: " & cArtNr & " hat einen sehr hohen Bestand von: " & rsrs!BESTAND & "." & vbCrLf & vbCrLf
                    ctmp = ctmp & " Dieser wird jetzt auf 0 gesetzt." & vbCrLf
                    ctmp = ctmp & " Bitte korrigieren Sie erst den Bestand unter" & vbCrLf
                    ctmp = ctmp & " Artikel.../Bestandskorrektur." & vbCrLf
                    ctmp = ctmp & " Führen Sie dann diesen Bestellvorschlag nocheinmal durch!"
                    MsgBox ctmp, vbInformation, "Winkiss Hinweis:"
                    Bestandsveraenderung cArtNr, 0, "zu hoher Bestand"
'                    cSQL = "Update Artikel set Bestand = 0 where artnr = " & cArtNr
'                    schreibeProtokollDabaAblauf cSQL:gdBase.Execute cSQL, dbFailOnError
                    UeberlaufFehler = True
                    Exit Sub
                    iBestand = 0
                Else

                    iBestand = rsrs!BESTAND
                End If
            Else
                iBestand = 0
            End If

            dFaktor = (iMonat(1) + iMonat(2) + iMonat(3)) / (60 + CInt(cDateNow))
            dFaktor = Format$(dFaktor, "###,##0.00")
            rsrs.Edit
            
            If dFaktor = 0 And iBestand <> 0 Then
                dFaktor = (iMonat(1) + iMonat(2) + iMonat(3) + iMonat(4) + iMonat(5) + iMonat(6) + iMonat(7) + iMonat(8) + iMonat(9) + iMonat(10) + iMonat(11) + iMonat(12))
                dFaktor = dFaktor / 360
                dFaktor = Format$(dFaktor, "###,##0.00")
                rsrs!Faktor = dFaktor

            Else
                rsrs!Faktor = dFaktor
            End If
            rsrs.Update
            i = i + 1
            rsrs.MoveNext
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
       
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "FaktorBerechnungWKL43"
    Fehler.gsFehlertext = "Im Programmteil Bestellungen ist ein Fehler aufgetreten. "
    
    Fehlermeldung1
'    Resume Next
End Sub
Public Sub GraphFuellenWKL43(sUmsTab As String)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim ctmp        As String
    Dim cJahrJetzt  As String
    Dim cMonatJetzt As String
    Dim cMonatV     As String
    Dim cJahrV      As String
    Dim iMonat      As Integer
    Dim rsrs        As Recordset
    Dim rsRsUMS     As Recordset
    
    cMonatJetzt = Month(Fix(Now))
    cJahrJetzt = Year(Fix(Now))
    
    If cMonatJetzt = "1" Then
        cMonatV = "12"
        cJahrV = Trim$(Str$((Val(cJahrJetzt) - 1)))
    Else
        cMonatV = Trim$(Str$((Val(cMonatJetzt) - 1)))
        cJahrV = Trim$(Str$((Val(cJahrJetzt) - 1)))
    End If
    
    cSQL = "Select * from VORSCHLZ"
    Set rsrs = gdApp.OpenRecordset(cSQL)
        If Not rsrs.EOF Then
            rsrs.MoveFirst
            Do While Not rsrs.EOF
                If Not IsNull(rsrs!artnr) Then
                    ctmp = rsrs!artnr
                    rsrs.Edit
                Else
                    ctmp = ""
                    GoTo weiter
                End If
                
                '**************** Daten für das Diagramm , Laufendes jahr ***************
                
                Set rsRsUMS = gdBase.OpenRecordset(sUmsTab, dbOpenTable)
                
                rsRsUMS.index = "Primkey"
                For iMonat = 1 To 12
                    rsRsUMS.Seek "=", Val(ctmp), Val(cJahrJetzt), Val(iMonat)
                    If Not rsRsUMS.NoMatch Then
                        Select Case iMonat
                            Case Is = 1
                                rsrs!LJ1 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 2
                                rsrs!LJ2 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 3
                                rsrs!LJ3 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 4
                                rsrs!LJ4 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                           Case Is = 5
                                rsrs!LJ5 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 6
                                rsrs!LJ6 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 7
                                rsrs!LJ7 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 8
                                rsrs!LJ8 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 9
                                rsrs!LJ9 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 10
                                rsrs!LJ10 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 11
                                rsrs!LJ11 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            Case Is = 12
                                rsrs!LJ12 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                        End Select
                    Else
                        If iMonat = 1 Then rsrs!LJ1 = 0
                        If iMonat = 2 Then rsrs!LJ2 = 0
                        If iMonat = 3 Then rsrs!LJ3 = 0
                        If iMonat = 4 Then rsrs!LJ4 = 0
                        If iMonat = 5 Then rsrs!LJ5 = 0
                        If iMonat = 6 Then rsrs!LJ6 = 0
                        If iMonat = 7 Then rsrs!LJ7 = 0
                        If iMonat = 8 Then rsrs!LJ8 = 0
                        If iMonat = 9 Then rsrs!LJ9 = 0
                        If iMonat = 10 Then rsrs!LJ10 = 0
                        If iMonat = 11 Then rsrs!LJ11 = 0
                        If iMonat = 12 Then rsrs!LJ12 = 0
                    End If
                       
                       '*********** Daten für das Diagram , VorJahr *********************
                       rsRsUMS.Seek "=", Val(ctmp), Val(cJahrV), Val(iMonat)
                       If Not rsRsUMS.NoMatch Then
                            Select Case iMonat
                                Case Is = 1
                                    rsrs!VJ1 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 2
                                    rsrs!VJ2 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 3
                                    rsrs!VJ3 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 4
                                    rsrs!VJ4 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                               Case Is = 5
                                    rsrs!VJ5 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 6
                                    rsrs!VJ6 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 7
                                    rsrs!VJ7 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 8
                                    rsrs!VJ8 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 9
                                    rsrs!VJ9 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 10
                                    rsrs!VJ10 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 11
                                    rsrs!VJ11 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                                Case Is = 12
                                    rsrs!VJ12 = IIf(IsNull(rsRsUMS!ANZAHL), 0, rsRsUMS!ANZAHL)
                            End Select
                       Else
                           If iMonat = 1 Then rsrs!VJ1 = 0
                           If iMonat = 2 Then rsrs!VJ2 = 0
                           If iMonat = 3 Then rsrs!VJ3 = 0
                           If iMonat = 4 Then rsrs!VJ4 = 0
                           If iMonat = 5 Then rsrs!VJ5 = 0
                           If iMonat = 6 Then rsrs!VJ6 = 0
                           If iMonat = 7 Then rsrs!VJ7 = 0
                           If iMonat = 8 Then rsrs!VJ8 = 0
                           If iMonat = 9 Then rsrs!VJ9 = 0
                           If iMonat = 10 Then rsrs!VJ10 = 0
                           If iMonat = 11 Then rsrs!VJ11 = 0
                           If iMonat = 12 Then rsrs!VJ12 = 0
                       End If
                       
                   Next iMonat
                   rsRsUMS.Close
                   rsrs.Update
weiter:
                   rsrs.MoveNext
              Loop
              rsrs.Close: Set rsrs = Nothing
        End If
        
Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "GraphFuellenWKL43"
    Fehler.gsFehlertext = "Im Programmteil Bestellungen ist ein Fehler aufgetreten. "
    
    Fehlermeldung1
End Sub
Public Function Bilde_Umsatz_plusKollVK(cLinr As String) As String
    On Error GoTo LOKAL_ERROR
    
    Bilde_Umsatz_plusKollVK = "UMS_KOLLVK"
    
    Dim sSQL        As String
    
    loeschNEW "KASSKOLL", gdBase
    
    sSQL = "SELECT ARTNR,ADATE,PREIS,MENGE INTO KASSKOLL from kassjour "
    If cLinr <> "0" Then
        sSQL = sSQL & " where linr = " & cLinr
    End If
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into KASSKOLL Select ARTNR,ADATE,PREIS,MENGE from kollverk "
    If cLinr <> "0" Then
        sSQL = sSQL & " where linr = " & cLinr
    End If
    gdBase.Execute sSQL, dbFailOnError

    loeschNEW "UMS_KOLLVK", gdBase
    
    sSQL = " SELECT [KASSKOLL].[ARTNR], Year([ADATE]) AS Jahr, Month([ADATE]) AS Monat, Sum([KASSKOLL].[PREIS]) AS Umsatz"
    sSQL = sSQL & ", Sum([KASSKOLL].[MENGE]) AS Anzahl INTO UMS_KOLLVK"
    sSQL = sSQL & " From KASSKOLL GROUP BY [KASSKOLL].[ARTNR], Year([ADATE]), Month([ADATE])"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Create Index PRIMKEY on UMS_KOLLVK (ARTNR, JAHR, MONAT)"
    gdBase.Execute sSQL, dbFailOnError
    
    Bilde_Umsatz_plusKollVK = "UMS_KOLLVK"
    
    loeschNEW "KASSKOLL", gdBase
    
Exit Function
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Bilde_Umsatz_plusKollVK"
    Fehler.gsFehlertext = "Im Programmteil Bestellungen ist ein Fehler aufgetreten. "
    
    Fehlermeldung1
End Function
Public Sub vorschlzRefresh()
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    Dim cSQL As String
    
    cPfad = gcPfad      'Anwendungspfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    loeschNEW "VORSCHLZ", gdApp
    CreateTable "VORSCHLZ", gdApp
    
    cSQL = "Create Index ARTNR on VORSCHLZ (ARTNR)"
    gdApp.Execute cSQL, dbFailOnError
    
    cSQL = "Create Index LINR on VORSCHLZ (LINR)"
    gdApp.Execute cSQL, dbFailOnError
    
    cSQL = "Create Index ANZEIGE on VORSCHLZ (ANZEIGE)"
    gdApp.Execute cSQL, dbFailOnError
    
    Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "vorschlzrefresh"
    Fehler.gsFehlertext = "Beim Erzeugen der Grundlagentabelle vorschlz ist ein Fehler aufgetreten."
    
    Fehlermeldung1
        
End Sub
Public Sub lastvoreinstellungzeigen(sTab As String, frmme As Form, givon As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim i As Integer
    Dim rsrs As Recordset
    Dim sSQL As String
    
    
    'suche in dieser Tabelle nach transf9
    
    If SpalteInTabellegefundenNEW(sTab, "TRANSF9", gdBase) = False Then
        SpalteAnfuegenNEW sTab, "TRANSF9", "bit", gdBase
    End If
    
    
    
    sSQL = "Select * from " & sTab
    
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        
        If rsrs!Transf0 = True Then
            frmme.Check1(0).value = vbChecked
        Else
            frmme.Check1(0).value = vbUnchecked
        End If
        
        If rsrs!Transf1 = True Then
            frmme.Check1(1).value = vbChecked
        Else
            frmme.Check1(1).value = vbUnchecked
        End If
        
        If rsrs!Transf2 = True Then
            frmme.Check1(2).value = vbChecked
        Else
            frmme.Check1(2).value = vbUnchecked
        End If
        
        If rsrs!Transf3 = True Then
            frmme.Check1(3).value = vbChecked
        Else
            frmme.Check1(3).value = vbUnchecked
        End If
        
        If rsrs!Transf4 = True Then
            frmme.Check1(4).value = vbChecked
        Else
            frmme.Check1(4).value = vbUnchecked
        End If
        
        If rsrs!Transf5 = True Then
            frmme.Check1(5).value = vbChecked
        Else
            frmme.Check1(5).value = vbUnchecked
        End If
        
        If rsrs!Transf6 = True Then
            frmme.Check1(6).value = vbChecked
        Else
            frmme.Check1(6).value = vbUnchecked
        End If
        
        If rsrs!Transf7 = True Then
            frmme.Check1(7).value = vbChecked
        Else
            frmme.Check1(7).value = vbUnchecked
        End If
        
        If rsrs!Transf8 = True Then
            frmme.Check1(8).value = vbChecked
        Else
            frmme.Check1(8).value = vbUnchecked
        End If
        
        If givon = 11 Then
            If rsrs!Transf9 = True Then
                frmme.Check1(9).value = vbChecked
            Else
                frmme.Check1(9).value = vbUnchecked
            End If
        End If
        
        If givon = 9 Then
            If rsrs!Transf9 = True Then
                frmme.Check1(9).value = vbChecked
            Else
                frmme.Check1(9).value = vbUnchecked
            End If
        End If
    
    End If
    rsrs.Close: Set rsrs = Nothing
    
    If givon = 11 Or givon = 9 Then
        For i = 0 To 9
            frmme.Check1(i).Refresh
        Next i
    Else
        For i = 0 To 8
            frmme.Check1(i).Refresh
        Next i
    
    End If
   
Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "lastvoreinstellungzeigen"
    Fehler.gsFehlertext = "Beim Anzeigen der letzten Voreinstellungen ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    Resume Next
End Sub
Public Sub zeigHilfeimNetz(Seitename As String)
On Error GoTo LOKAL_ERROR

    Dim cPfad As String
    Dim result&
    Dim iRet As Double
    
    cPfad = App.Path
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    cPfad = cPfad & "WHELP\"
    
    Screen.MousePointer = 11


    iRet = Shell("EXPLORER.EXE " & cPfad & Seitename & ".htm", vbNormalFocus)
    Screen.MousePointer = 0

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "zeigHilfeimNetz"
    Fehler.gsFehlertext = "Beim Anzeigen der Hilfedatei im Internet ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub SetzeCommandTags(frmx As Form)
    On Error GoTo LOKAL_ERROR
    
    'Hauptmenüpunkt:Stammdaten
    frmx.Command2(2).Tag = 0
    frmx.Command2(3).Tag = 1
    frmx.Command2(4).Tag = 2

    frmx.Command14(6).Tag = 3
    frmx.Command14(5).Tag = 4
    frmx.Command14(10).Tag = 96

    frmx.Command12(3).Tag = 5
    frmx.Command12(1).Tag = 6
    frmx.Command12(0).Tag = 7

    frmx.Command4(0).Tag = 8
    frmx.Command4(1).Tag = 9
    frmx.Command4(2).Tag = 10
    frmx.Command4(4).Tag = 84
    frmx.Command4(8).Tag = 86
    frmx.Command4(9).Tag = 106

    frmx.Command14(3).Tag = 11
    frmx.Command14(2).Tag = 12
    frmx.Command14(1).Tag = 13
    frmx.Command14(7).Tag = 82
    frmx.Command14(8).Tag = 91
    frmx.Command14(9).Tag = 92
    frmx.Command14(11).Tag = 104

    frmx.Command4(6).Tag = 14
    frmx.Command4(7).Tag = 15
    frmx.Command4(19).Tag = 102
    
    'Hauptmenüpunkt:Kasse
    frmx.Command3(0).Tag = 16
    frmx.Command3(1).Tag = 17
    frmx.Command3(7).Tag = 18
    frmx.Command3(8).Tag = 95
    frmx.Command3(9).Tag = 98
    frmx.Command3(10).Tag = 100
    
        'Unterpunkt:Protokolle
    frmx.Command7(4).Tag = 19
    frmx.Command7(5).Tag = 20
    frmx.Command7(6).Tag = 21
    frmx.Command7(0).Tag = 22
    frmx.Command7(1).Tag = 83
    frmx.Command7(2).Tag = 85
    frmx.Command7(3).Tag = 99
    frmx.Command7(8).Tag = 101
    
        'Unterpunkt:Kredit
    frmx.Command11(0).Tag = 23
    frmx.Command11(1).Tag = 24

    'Hauptmenüpunkt:Statistiken
    frmx.Command13(0).Tag = 25
    frmx.Command13(1).Tag = 26
    frmx.Command13(2).Tag = 27
    frmx.Command13(3).Tag = 28
    frmx.Command13(4).Tag = 29
    frmx.Command13(6).Tag = 30
    frmx.Command13(7).Tag = 31
    frmx.Command13(8).Tag = 32
    
    'Hauptmenüpunkt:Listen
    frmx.Command5(1).Tag = 33
    frmx.Command5(2).Tag = 34
    frmx.Command5(5).Tag = 35
    frmx.Command5(7).Tag = 36
    frmx.Command5(6).Tag = 37
    frmx.Command5(8).Tag = 38
    frmx.Command5(3).Tag = 39
    
        'Unterpunkt:Artikellisten
    frmx.Command10(0).Tag = 40
    frmx.Command10(1).Tag = 41
    frmx.Command10(6).Tag = 42
    frmx.Command10(2).Tag = 43
    frmx.Command10(3).Tag = 44
    frmx.Command10(4).Tag = 45
    frmx.Command10(7).Tag = 46
    frmx.Command10(8).Tag = 81
    
    'Hauptmenüpunkt:Termine
    frmx.Command8(0).Tag = 47
    frmx.Command8(1).Tag = 48
    frmx.Command8(2).Tag = 49
    frmx.Command8(4).Tag = 97
    
    'Hauptmenüpunkt:Service
    frmx.Command6(4).Tag = 50
    frmx.Command6(5).Tag = 51
    frmx.Command6(6).Tag = 52
    frmx.Command6(7).Tag = 53
    
        'Unterpunkt:Einstellungen
    frmx.Command9(0).Tag = 54
    frmx.Command9(6).Tag = 55
    frmx.Command9(1).Tag = 56
    frmx.Command9(2).Tag = 57
    frmx.Command9(3).Tag = 58
    frmx.Command9(4).Tag = 59
    frmx.Command9(7).Tag = 60
    frmx.Command9(8).Tag = 61
    
        'Unterpunkt:Datenbank
    frmx.Command12(4).Tag = 62
    frmx.Command12(6).Tag = 63
    frmx.Command12(7).Tag = 64
    frmx.Command12(8).Tag = 65
    frmx.Command12(12).Tag = 66
    frmx.Command12(13).Tag = 67
    
        'Unterpunkt:Kissnet
    frmx.Command12(20).Tag = 68
    frmx.Command12(18).Tag = 69
    frmx.Command12(17).Tag = 70
    frmx.Command12(16).Tag = 71
    frmx.Command12(15).Tag = 72
    frmx.Command12(14).Tag = 73
    
        'Unterpunkt:Kassendateien
    frmx.Command12(11).Tag = 74
    frmx.Command12(9).Tag = 75
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SetzeCommandTags"
    Fehler.gsFehlertext = "Beim Setzen der Buttonindentifikation ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub SetzefürKostenlos(frmx As Form)
    On Error GoTo LOKAL_ERROR
    
    'Hauptmenüpunkt:Stammdaten
    frmx.Command2(0).Enabled = True 'immer frei
    frmx.Command2(1).Enabled = True 'immer frei
    frmx.Command2(2).Enabled = True 'immer frei
    frmx.Command2(4).Enabled = True 'immer frei
    frmx.Command2(5).Enabled = True 'immer frei
    frmx.Command2(6).Enabled = True 'immer frei
    frmx.Command2(7).Enabled = True 'immer frei
    frmx.Command2(8).Enabled = True 'immer frei
    
    frmx.Command2(3).Enabled = True 'Kunden bearbeiten
    
    frmx.Command14(6).Enabled = True 'Lieferantenbearbeitung
    frmx.Command14(5).Enabled = False
    frmx.Command14(10).Enabled = False

    frmx.Command12(3).Enabled = False
    frmx.Command12(1).Enabled = False
    frmx.Command12(0).Enabled = True 'WE aus E
    
    frmx.Command12(23).Enabled = False
    frmx.Command12(21).Enabled = False
    
    frmx.Command12(24).Enabled = False
    frmx.Command12(26).Enabled = False
    frmx.Command12(27).Enabled = False
    frmx.Command12(28).Enabled = False
    frmx.Command12(29).Enabled = False
    frmx.Command12(30).Enabled = False
    
    frmx.Command12(31).Enabled = False
    frmx.Command12(32).Enabled = False
    frmx.Command12(33).Enabled = False
    frmx.Command12(34).Enabled = False
    frmx.Command12(35).Enabled = False
    frmx.Command12(37).Enabled = False
    frmx.Command12(38).Enabled = False
    frmx.Command12(39).Enabled = False

    frmx.Command4(0).Enabled = True 'Etiketten
    frmx.Command4(1).Enabled = True 'Etiketten selbst wählen
    frmx.Command4(2).Enabled = False
    frmx.Command4(17).Enabled = False
    
    frmx.Command14(3).Enabled = False
    frmx.Command14(2).Enabled = True 'Bestandskorrektur
    frmx.Command14(1).Enabled = True 'Artikelbearbeitung
    frmx.Command14(7).Enabled = False
    frmx.Command14(8).Enabled = False
    frmx.Command14(9).Enabled = False
    frmx.Command14(11).Enabled = False
    
    frmx.Command4(4).Enabled = False
    frmx.Command4(9).Enabled = False
    frmx.Command4(10).Enabled = True 'Artikelgruppenbearbeitung
    frmx.Command4(11).Enabled = False

    frmx.Command4(6).Enabled = False
    frmx.Command4(7).Enabled = False
    frmx.Command4(19).Enabled = False
    
    'Hauptmenüpunkt:Kasse
    frmx.Command3(4).Enabled = True 'immer frei
    frmx.Command3(5).Enabled = True 'immer frei
    frmx.Command3(6).Enabled = True 'immer frei
    
    frmx.Command3(0).Enabled = True 'Kasse
    frmx.Command3(1).Enabled = True 'Tagesbericht
    frmx.Command3(7).Enabled = False
    frmx.Command3(8).Enabled = False
    frmx.Command3(9).Enabled = False
    frmx.Command3(10).Enabled = False
    
    'Unterpunkt:Protokolle
    frmx.Command7(4).Enabled = True 'Verkaufsprotokoll
    frmx.Command7(5).Enabled = False
    frmx.Command7(6).Enabled = False
    frmx.Command7(0).Enabled = False
    frmx.Command7(1).Enabled = False
    frmx.Command7(2).Enabled = False
    frmx.Command7(3).Enabled = False
    frmx.Command7(8).Enabled = False
    
    'Unterpunkt:Kredit
    frmx.Command11(0).Enabled = False
    frmx.Command11(1).Enabled = False

    'Hauptmenüpunkt:Statistiken
    frmx.Command13(5).Enabled = True 'immer frei
    frmx.Command13(0).Enabled = False
    frmx.Command13(1).Enabled = False
    frmx.Command13(2).Enabled = False
    frmx.Command13(3).Enabled = True 'Umsatzstatistik
    frmx.Command13(4).Enabled = False
    frmx.Command13(6).Enabled = False
    frmx.Command13(7).Enabled = False
    frmx.Command13(8).Enabled = True
    
    frmx.Command4(15).Enabled = True 'immer frei
    frmx.Command4(14).Enabled = False
    frmx.Command4(16).Enabled = False
    frmx.Command4(13).Enabled = False
    frmx.Command4(12).Enabled = False
    
    'Hauptmenüpunkt:Listen
    frmx.Command5(9).Enabled = True 'immer frei
    frmx.Command5(3).Enabled = True 'immer frei
    frmx.Command5(0).Enabled = True 'immer frei
    frmx.Command5(1).Enabled = True 'immer frei
    
    frmx.Command5(2).Enabled = False
    frmx.Command5(5).Enabled = False
    frmx.Command5(7).Enabled = False
    frmx.Command5(6).Enabled = False
    frmx.Command5(8).Enabled = False
    
    'Unterpunkt:Artikellisten
    frmx.Command10(0).Enabled = False
    frmx.Command10(1).Enabled = False
    frmx.Command10(6).Enabled = False
    frmx.Command10(2).Enabled = False
    frmx.Command10(3).Enabled = False
    frmx.Command10(4).Enabled = False
    frmx.Command10(7).Enabled = False
    frmx.Command10(8).Enabled = False
    
    'Hauptmenüpunkt:Termine
    frmx.Command8(0).Enabled = False
    frmx.Command8(1).Enabled = False
    frmx.Command8(2).Enabled = False
    frmx.Command8(4).Enabled = False
    
    'Hauptmenüpunkt:Service
    frmx.Command6(0).Enabled = True 'immer frei
    frmx.Command6(1).Enabled = True 'immer frei
    frmx.Command6(2).Enabled = True 'immer frei
    frmx.Command6(3).Enabled = True 'immer frei
    frmx.Command6(8).Enabled = True 'immer frei
    
    frmx.Command6(4).Enabled = False
    frmx.Command6(5).Enabled = False
    frmx.Command6(6).Enabled = True 'Programmeinstellungen
    frmx.Command6(7).Enabled = False
    
    'Unterpunkt:Einstellungen
    frmx.Command9(0).Enabled = True 'Unternehmensdaten
    frmx.Command9(6).Enabled = True 'Bedienerverwaltung
    frmx.Command9(1).Enabled = True 'Drucker
    frmx.Command9(2).Enabled = True 'Texte Kassenbon
    frmx.Command9(3).Enabled = True 'Kartenleser
    frmx.Command9(4).Enabled = True 'Warengruppen
    frmx.Command9(7).Enabled = False
    frmx.Command9(8).Enabled = True 'immer frei
    
        'Unterpunkt:Datenbank
    frmx.Command12(4).Enabled = True 'Pfad zur Datenbank
    frmx.Command12(6).Enabled = False
    frmx.Command12(7).Enabled = False
    frmx.Command12(8).Enabled = False
    frmx.Command12(12).Enabled = False
    frmx.Command12(13).Enabled = True 'Datenbankbefehl
    
        'Unterpunkt:Kissnet
    frmx.Command12(20).Enabled = False
    frmx.Command12(18).Enabled = False
    frmx.Command12(17).Enabled = False
    frmx.Command12(16).Enabled = False
    frmx.Command12(15).Enabled = False
    frmx.Command12(14).Enabled = False
    
        'Unterpunkt:Kassendateien
    frmx.Command12(11).Enabled = False
    frmx.Command12(9).Enabled = False
      
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SetzefürKostenlos"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub checkgutschScan(Scanstring As TextBox)
    On Error GoTo LOKAL_ERROR
    
    Dim ctmp As String
    Dim lWert As Long
    
    If Len(Scanstring.Text) = 8 Then
        ctmp = Mid(Scanstring.Text, 2, 6)
    Else
        ctmp = Scanstring.Text
    End If
    
    Scanstring.Text = ctmp
      
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "checkgutschScan"
    Fehler.gsFehlertext = "Beim der Überprüfung des gescannten Gutscheins ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub anzeigeNew(SFarbe As String, satext As String, lab As Label)
    On Error GoTo LOKAL_ERROR
    
    anzeige SFarbe, satext, lab

    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "anzeigeNew"
    Fehler.gsFehlertext = "Bei der Erstellung der Anzeige ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub schreib232_read(byteport As Byte)
    On Error GoTo LOKAL_ERROR
    
    Dim cSatz1          As String
    Dim iFileNr         As Integer
    Dim cSatz           As String
    Dim cPfad           As String
    
    cPfad = gcDBPfad        'Datenbankpfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    iFileNr = FreeFile
    Open cPfad & "232_read.ini" For Binary As #iFileNr
        cSatz = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cSatz
    Close iFileNr

    cSatz1 = vbCrLf
    cSatz1 = cSatz1 & "mde" & vbCrLf
    cSatz1 = cSatz1 & byteport & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf
    cSatz1 = cSatz1 & "2" & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf

    iFileNr = FreeFile
    
    Kill cPfad & "232_read.ini"
    
    Open cPfad & "232_read.ini" For Binary As #iFileNr
        
    Put #iFileNr, 1, cSatz1
    Close iFileNr

Exit Sub
LOKAL_ERROR:
    
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreib232_read"
        Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub schreibData_read(byteport As Byte)
    On Error GoTo LOKAL_ERROR
    
    Dim cSatz1          As String
    Dim iFileNr         As Integer
    Dim cSatz           As String
    Dim cPfad           As String
    
    cPfad = gcPfad        'apppfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    iFileNr = FreeFile
    Open cPfad & "data_read.ini" For Binary As #iFileNr
        cSatz = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cSatz
    Close iFileNr

    cSatz1 = cPfad & "mde.txt" & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf
    cSatz1 = cSatz1 & byteport & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf
    cSatz1 = cSatz1 & "2" & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf
    cSatz1 = cSatz1 & "1" & vbCrLf 'cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "2" & vbCrLf
    cSatz1 = cSatz1 & "2" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "3" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "9" & vbCrLf
    cSatz1 = cSatz1 & "0" & vbCrLf
    cSatz1 = cSatz1 & "2" & vbCrLf

    iFileNr = FreeFile
    
    Kill cPfad & "data_read.ini"
    
    Open cPfad & "data_read.ini" For Binary As #iFileNr
        
    Put #iFileNr, 1, cSatz1
    Close iFileNr

Exit Sub
LOKAL_ERROR:
    
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreibdata_read"
        Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub DruckeNeuenPreisBelegWK20d(cZeilen() As String, iMax As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim aDeviceName As String
    Dim cEscapeSequenz As String
    ReDim cDruckZeile(1 To 1) As String
    Dim lAnzZeile As Long
    Dim lcount As Long
    Dim i As Integer
    
'    setzedrucker gcBonDrucker
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    '***********************************************
    'Drucker ein- und Kundendisplay ausschalten
    '***********************************************
    
    cEscapeSequenz = gcInit
    
    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cEscapeSequenz

    For lcount = 1 To 3
        cEscapeSequenz = " " & vbCrLf
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    Next lcount

    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cZeilen(1) & vbCrLf

    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    KonvertAnsiAscii cZeilen(0)
    cDruckZeile(lAnzZeile) = cZeilen(0) & vbCrLf
    
    For i = 1 To iMax
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        KonvertAnsiAscii cZeilen(i)
        cDruckZeile(lAnzZeile) = cZeilen(i) & vbCrLf
    Next i

    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cZeilen(1) & vbCrLf

    For lcount = 1 To 9
        If lcount = 9 Then
            cEscapeSequenz = "." & vbCrLf
        Else
            cEscapeSequenz = " " & vbCrLf
        End If
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    Next lcount
    
    
    
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    
    

    
    If gbAPI = True Then
        OpenDrawer3 aDeviceName, cDruckZeile(), lAnzZeile
    Else
        OpenDrawer4 aDeviceName, cDruckZeile(), lAnzZeile
    End If
    
'bon schneiden
    If gbAPI = True Then
        aDeviceName = Printer.DeviceName
        cEscapeSequenz = gcSchneiden
        OpenDrawer aDeviceName, cEscapeSequenz
    End If

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DruckeNeuenPreisBelegWK20d"
    Fehler.gsFehlertext = "Beim Drucken ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub DruckeArbeitszeitBelegWK20d(cZeilen() As String, iMax As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim aDeviceName As String
    Dim cEscapeSequenz As String
    ReDim cDruckZeile(1 To 1) As String
    Dim lAnzZeile As Long
    Dim lcount As Long
    Dim i As Integer
    
    setzedrucker gcBonDrucker
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    '***********************************************
    'Drucker ein- und Kundendisplay ausschalten
    '***********************************************
    
    cEscapeSequenz = gcInit
    
'    cEscapeSequenz = Chr(29) & Chr(33) & Chr(2)
'    OpenDrawer aDeviceName, cEscapeSequenz
    
    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cEscapeSequenz

    For lcount = 1 To 3
        cEscapeSequenz = " " & vbCrLf
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    Next lcount

    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cZeilen(1) & vbCrLf


    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    KonvertAnsiAscii cZeilen(0)
    cDruckZeile(lAnzZeile) = cZeilen(0) & vbCrLf
    
    For i = 1 To iMax
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        KonvertAnsiAscii cZeilen(i)
        cDruckZeile(lAnzZeile) = cZeilen(i) & vbCrLf
    Next i

    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cZeilen(1) & vbCrLf

    For lcount = 1 To 9
        If lcount = 9 Then
            cEscapeSequenz = "." & vbCrLf
        Else
            cEscapeSequenz = " " & vbCrLf
        End If
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    Next lcount
    
    
    
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    
    

    
    If gbAPI = True Then
        OpenDrawer3 aDeviceName, cDruckZeile(), lAnzZeile
    Else
        OpenDrawer4 aDeviceName, cDruckZeile(), lAnzZeile
    End If
    
'bon schneiden
    If gbAPI = True Then
        aDeviceName = Printer.DeviceName
        cEscapeSequenz = gcSchneiden
        OpenDrawer aDeviceName, cEscapeSequenz
    End If

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DruckeArbeitszeitBelegWK20d"
    Fehler.gsFehlertext = "Beim Drucken ist ein Fehler aufgetreten."
    
    Fehlermeldung1
   
End Sub
Public Sub DruckeTextArray(cZeilen() As String, iMax As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim aDeviceName As String
    Dim cEscapeSequenz As String
    ReDim cDruckZeile(1 To 1) As String
    Dim lAnzZeile As Long
    Dim lcount As Long
    Dim i As Integer
    
    setzedrucker gcBonDrucker
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    '***********************************************
    'Drucker ein- und Kundendisplay ausschalten
    '***********************************************
    
    cEscapeSequenz = gcInit
    
'    cEscapeSequenz = Chr(29) & Chr(33) & Chr(2)
'    OpenDrawer aDeviceName, cEscapeSequenz
    
    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cEscapeSequenz

    For lcount = 1 To 3
        cEscapeSequenz = " " & vbCrLf
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    Next lcount

'    lAnzZeile = lAnzZeile + 1
'    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
'    cDruckZeile(lAnzZeile) = cZeilen(1) & vbCrLf


    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    KonvertAnsiAscii cZeilen(1)
    cDruckZeile(lAnzZeile) = cZeilen(1) & vbCrLf
    
    For i = 2 To iMax
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        KonvertAnsiAscii cZeilen(i)
        cDruckZeile(lAnzZeile) = cZeilen(i) & vbCrLf
    Next i

    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cZeilen(1) & vbCrLf

    For lcount = 1 To 9
        If lcount = 9 Then
            cEscapeSequenz = "." & vbCrLf
        Else
            cEscapeSequenz = " " & vbCrLf
        End If
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    Next lcount
    
    
    
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    
    

    
    If gbAPI = True Then
        OpenDrawer3 aDeviceName, cDruckZeile(), lAnzZeile
    Else
        OpenDrawer4 aDeviceName, cDruckZeile(), lAnzZeile
    End If
    
'bon schneiden
    If gbAPI = True Then
        aDeviceName = Printer.DeviceName
        cEscapeSequenz = gcSchneiden
        OpenDrawer aDeviceName, cEscapeSequenz
    End If

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DruckeTextArray"
    Fehler.gsFehlertext = "Beim Drucken ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub DruckeEndlosBeleg(cZeilen() As String, iMax As Integer, bschnitt As Boolean)
    On Error GoTo LOKAL_ERROR
    
    Dim aDeviceName As String
    Dim cEscapeSequenz As String
    ReDim cDruckZeile(1 To 1) As String
    Dim lAnzZeile As Long
    Dim lcount As Long
    Dim i As Integer
    
    ''setzedrucker gcBonDrucker
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    '***********************************************
    'Drucker ein- und Kundendisplay ausschalten
    '***********************************************
    
    cEscapeSequenz = gcInit
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cEscapeSequenz

    For i = 0 To iMax
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        KonvertAnsiAscii cZeilen(i)
        cDruckZeile(lAnzZeile) = cZeilen(i) & vbCrLf
    Next i


    If bschnitt = True Then
        For lcount = 1 To 9
            If lcount = 9 Then
                cEscapeSequenz = " " & vbCrLf
            Else
                cEscapeSequenz = " " & vbCrLf
            End If
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        Next lcount
    End If
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    If gbAPI = True Then
        OpenDrawer3 aDeviceName, cDruckZeile(), lAnzZeile
    Else
        OpenDrawer4 aDeviceName, cDruckZeile(), lAnzZeile
    End If
    
    If gbAPI = True And bschnitt = True Then
        aDeviceName = Printer.DeviceName
        cEscapeSequenz = gcSchneiden
        OpenDrawer aDeviceName, cEscapeSequenz
    End If

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DruckeEndlosBeleg"
    Fehler.gsFehlertext = "Beim Drucken ist ein Fehler aufgetreten."
    
    Fehlermeldung1
'    Resume Next
End Sub
Public Sub DruckeBonusV3Beleg(cZeilen() As String, iMax As Integer, bschnitt As Boolean)
    On Error GoTo LOKAL_ERROR
    
    Dim cDaten As String
    Dim aDeviceName As String
    Dim cEscapeSequenz As String
    ReDim cDruckZeile(1 To 1) As String
    Dim lAnzZeile As Long
    Dim lcount As Long
    Dim i As Integer
    Dim iLenZeile As Integer
    iLenZeile = 32
    
    ''setzedrucker gcBonDrucker
    
    
    aDeviceName = gcBonDrucker
    
    '***********************************************
    'ggf. Logo auf Kassenbon bringen
    '***********************************************

    If gcBild <> "" Then
        aDeviceName = Printer.DeviceName
        cEscapeSequenz = gcBild
        OpenDrawer aDeviceName, cEscapeSequenz
    End If
    
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    Barcode_BonusV3 gsSpezBonArtRab
    
    
    
    
    
    '***********************************************
    'Drucker ein- und Kundendisplay ausschalten
    '***********************************************
    
    cEscapeSequenz = gcInit
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cEscapeSequenz
    
    
    
    '***********************************************
    'Zeile Leerzeile drucken
    '***********************************************
    cEscapeSequenz = vbCrLf
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cEscapeSequenz
    
    
    
    
    
    '***********************************************
    'Kopfdaten 1.Zeile an Drucker senden
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "K.I.S.S. Warenwirtschaft"
    Else
        cDaten = gcBonText(0)
        
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
        KonvertAnsiAscii cDaten
        cEscapeSequenz = cDaten & vbCrLf
        
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    End If
    
    '***********************************************
    'Kopfdaten 2.Zeile an Drucker senden
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "Carsten Schröder"
    Else
        cDaten = gcBonText(1)
    End If
    If Trim$(cDaten) <> "" Then
        cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
        KonvertAnsiAscii cDaten
        cEscapeSequenz = cDaten & vbCrLf
        
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    End If
    '***********************************************
    'Kopfdaten 3.Zeile an Drucker senden
    '***********************************************

    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION"
    Else
        cDaten = gcBonText(4)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
        KonvertAnsiAscii cDaten
        cEscapeSequenz = cDaten & vbCrLf
        
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
       
    End If
    
    '***********************************************
    'Kopfdaten 4.Zeile an Drucker senden
    '***********************************************

    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION"
    Else
        cDaten = gcBonText(12)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
        KonvertAnsiAscii cDaten
        cEscapeSequenz = cDaten & vbCrLf
        
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        cDruckZeile(lAnzZeile) = cEscapeSequenz
    End If

    '***********************************************
    'Trennstrich drucken
    '***********************************************
    
    cDaten = String$(iLenZeile, "-")
    cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
    KonvertAnsiAscii cDaten
    cEscapeSequenz = cDaten & vbCrLf
    
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cEscapeSequenz
    
    
    
    
    
    
    
    

    For i = 0 To iMax
        lAnzZeile = lAnzZeile + 1
        ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
        
        cZeilen(i) = Space$((iLenZeile - Len(cZeilen(i))) / 2) & cZeilen(i)
                
        
        KonvertAnsiAscii cZeilen(i)
        cDruckZeile(lAnzZeile) = cZeilen(i) & vbCrLf
    Next i
    
    
    
    
    
    
    
    
    '***********************************************
    'Zeile Trennstrich drucken
    '***********************************************
    cDaten = String$(iLenZeile, gsSTERNZEICH)
'    cDaten = String$(iLenZeile, "*")
    cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
    KonvertAnsiAscii cDaten
    cEscapeSequenz = cDaten & vbCrLf
    lAnzZeile = lAnzZeile + 1
    ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
    cDruckZeile(lAnzZeile) = cEscapeSequenz
    
    
    '***********************************************
    'Zeile Trennstrich drucken
    '***********************************************
    



    '***********************************************
    'Fußzeile 1 drucken
    '***********************************************
    
    'Fußzeilen
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "KEIN GÜLTIGER KASSENBON!"
    Else
        cDaten = gcBonText(2)
    End If
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
    End If
    
    '***********************************************
    'Fußzeile 2 drucken
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION!"
    Else
        cDaten = gcBonText(3)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
        
        
    End If
    
    '***********************************************
    'Fußzeile 3 drucken
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = ""
    Else
        cDaten = gcBonText(5)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
        
        
    End If
    
    '***********************************************
    'Fußzeile 4 drucken
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION!"
    Else
        cDaten = gcBonText(6)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
    End If
    '***********************************************
    'Fußzeile 5 drucken
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION!"
    Else
        cDaten = gcBonText(7)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
    End If
    
    '***********************************************
    'Fußzeile 6 drucken
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION!"
    Else
        cDaten = gcBonText(8)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
    End If

    '***********************************************
    'Fußzeile 7 drucken
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION!"
    Else
        cDaten = gcBonText(9)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
    End If
    
    '***********************************************
    'Fußzeile 8 drucken
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION!"
    Else
        cDaten = gcBonText(10)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
    End If
    
    '***********************************************
    'Fußzeile 9 drucken
    '***********************************************
    
    If gbDEMO Then
        'HIER FÜR DEMO FESTTEXT
        cDaten = "DEMO - VERSION!"
    Else
        cDaten = gcBonText(11)
    End If
    
    If Trim$(cDaten) <> "" Then
        cDaten = Trim$(cDaten)
        If cDaten <> "" Then
            cDaten = Space$((iLenZeile - Len(cDaten)) / 2) & cDaten
            KonvertAnsiAscii cDaten
            cEscapeSequenz = cDaten & vbCrLf
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        End If
    End If
    
    
    
    
    
    
    
                
    
    
    
    
    
    
    
    
    
    
    
    


    If bschnitt = True Then
        For lcount = 1 To 9
            If lcount = 9 Then
                cEscapeSequenz = " " & vbCrLf
            Else
                cEscapeSequenz = " " & vbCrLf
            End If
            lAnzZeile = lAnzZeile + 1
            ReDim Preserve cDruckZeile(1 To lAnzZeile) As String
            cDruckZeile(lAnzZeile) = cEscapeSequenz
        Next lcount
    End If
    
    'Drucker an, Display aus, Init Drucker
    aDeviceName = Printer.DeviceName
    cEscapeSequenz = gcInit
    OpenDrawer aDeviceName, cEscapeSequenz
    
    
'    OpenDrawer5_V3 aDeviceName, cDruckZeile(), lAnzZeile
    
    
    
    
    
    If gbAPI = True Then
        OpenDrawer3 aDeviceName, cDruckZeile(), lAnzZeile
    Else
        OpenDrawer4 aDeviceName, cDruckZeile(), lAnzZeile
    End If

    If gbAPI = True And bschnitt = True Then
        aDeviceName = Printer.DeviceName
        cEscapeSequenz = gcSchneiden
        OpenDrawer aDeviceName, cEscapeSequenz
    End If

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DruckeBonusV3Beleg"
    Fehler.gsFehlertext = "Beim Drucken ist ein Fehler aufgetreten."
    
    Fehlermeldung1
'    Resume Next
End Sub

Public Function Datumschreiben11a(ltop As Long, lleft As Long) As String
    On Error GoTo LOKAL_ERROR
    Datumschreiben11a = ""
    
    glKalTop = ltop
    glKalLeft = lleft
    frmWK11a.Show 1
    
    Datumschreiben11a = gsDatum
   
Exit Function
LOKAL_ERROR:
   
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Datumschreiben11a"
    Fehler.gsFehlertext = "Beim Schreiben des Datums ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function datumwandlung(cdat As String) As Long
    On Error GoTo LOKAL_ERROR

If IsDate(cdat) Then
    datumwandlung = DateValue(cdat)
Else
    If Left(cdat, 5) = "29.02" Then 'Schaltjahrtag
        datumwandlung = DateValue("01.03" & Right(cdat, 5))
    End If
End If

Exit Function
LOKAL_ERROR:
   
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "datumwandlung"
    Fehler.gsFehlertext = "Beim Umwandeln des Datumsformats ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub mstext35check()
    On Error GoTo LOKAL_ERROR
    
    Dim lWert As Long
    Dim cSysPfad As String
    Dim cQuelle As String
    Dim cZiel As String
    Dim lfail As Long
    Dim lRet As Long
    
    If FileExists(App.Path & "\MSTEXT35.dll") Then
        cSysPfad = Space$(255)
        lWert = GetSystemDirectory(cSysPfad, Len(cSysPfad))
        cSysPfad = Left(cSysPfad, lWert)
        
        'kopiere
        cQuelle = App.Path & "\MSTEXT35.dll"
        cZiel = cSysPfad & "\MSTEXT35.dll"
        lRet = CopyFile(cQuelle, cZiel, lfail)
            
    End If
    
    If FileExists(App.Path & "\MSTEXT40.dll") Then
        cSysPfad = Space$(255)
        lWert = GetSystemDirectory(cSysPfad, Len(cSysPfad))
        cSysPfad = Left(cSysPfad, lWert)

        'kopiere
        cQuelle = App.Path & "\MSTEXT40.dll"
        cZiel = cSysPfad & "\MSTEXT40.dll"
        lRet = CopyFile(cQuelle, cZiel, lfail)

    End If
    
    Exit Sub
LOKAL_ERROR:
   
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "mstext35check"
    Fehler.gsFehlertext = "Bei der Dateiüberprüfung mstext35.dll ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub HoleRegisterDat()
    On Error GoTo LOKAL_ERROR
    
    Dim lWert As Long
    Dim cSysPfad As String
    Dim cQuelle As String
    Dim cZiel As String
    Dim lfail As Long
    Dim lRet As Long
    
    If FileExists(App.Path & "\CMCTLS32.dll") Then
        Exit Sub
    End If
    
    cSysPfad = Space$(255)
    lWert = GetSystemDirectory(cSysPfad, Len(cSysPfad))
    cSysPfad = Left(cSysPfad, lWert)
    
    If FileExists(cSysPfad & "\CMCTLS32.dll") Then
        'kopiere
        cQuelle = cSysPfad & "\CMCTLS32.dll"
        cZiel = App.Path & "\CMCTLS32.dll"
        lRet = CopyFile(cQuelle, cZiel, lfail)
        
        Kill cQuelle
    End If
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 75 Then
        Exit Sub
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "HoleRegisterDat"
        Fehler.gsFehlertext = "Bei der Dateiüberprüfung Register.dll ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub schreibeTxtBestand_update(sArtnr As String, lNeuerBestand As Long, iFil As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim cZeil       As String
    
'    sTime = TimeValue(Now)
'    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "Bestand\"

'    lWert = DateValue(Now)
'    ctmp = Format$(lWert, "DD.MM.YY")
    
    cdatei = "Bestand_" & sArtnr
    cSatz = cPfad & cdatei & ".txt"
    Kill cSatz
    cZeil = ""
    cZeil = sArtnr & ";" & lNeuerBestand & ";" & iFil
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cZeil & vbCrLf
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreibeTxtBestand_update"
        Fehler.gsFehlertext = "Beim Erstellen des allgemeinen Protokolls ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub SchreibeEtiDruWKL11(rsrs1 As Recordset, rsRs2 As Recordset, dKVkPr1Neu As Double, cArtNr As String)
    On Error GoTo LOKAL_ERROR

    Dim lLinr       As Long
    Dim lLpz        As Long
    Dim sSQL        As String
    Dim cPfad       As String
    Dim cBezeich    As String
    Dim cLiBesNr    As String
    Dim cEAN        As String
    Dim iFilnr, i   As Integer
    Dim dBestand    As Double
    Dim dAnzahl     As Double
    
    Dim rsrs        As Recordset
    Dim rsRs4       As Recordset
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    If Not IsNull(rsrs1!linr) Then
        lLinr = rsrs1!linr
    Else
        lLinr = 0
    End If

    If Not IsNull(rsrs1!LPZ) Then
        lLpz = rsrs1!LPZ
    Else
        lLpz = 0
    End If

    If Not IsNull(rsrs1!BEZEICH) Then
        If gbTagAkt = True Then
            cBezeich = UCase(rsrs1!BEZEICH)
        Else
            cBezeich = rsrs1!BEZEICH
        End If
    Else
        cBezeich = ""
    End If

    If Not IsNull(rsrs1!LIBESNR) Then
        cLiBesNr = rsrs1!LIBESNR
    Else
        cLiBesNr = ""
    End If

    If Not IsNull(rsrs1!EAN) Then
        cEAN = rsrs1!EAN
    Else
        cEAN = ""
    End If

   '****************************Etidru füllen

    If gcFilNr <> "1" Then

        If Not IsNull(rsRs2!BESTAND) Then
            If rsRs2!BESTAND > 0 Then
                dBestand = rsRs2!BESTAND

                dAnzahl = dBestand

                sSQL = " Insert into ETIDRU ( "
                sSQL = sSQL & " Artnr "
                sSQL = sSQL & ", BEZEICH "
                sSQL = sSQL & ", BESTAND "
                sSQL = sSQL & ", ANZAHL "
                sSQL = sSQL & ", VKPR "
                sSQL = sSQL & ", LIBESNR "
                sSQL = sSQL & ", EAN "
                sSQL = sSQL & ", LPZ "
                sSQL = sSQL & ", LINR "
                sSQL = sSQL & ", FILNR "
                sSQL = sSQL & ", PCNAME "
                sSQL = sSQL & " )"
                
                sSQL = sSQL & " Values ( "
                sSQL = sSQL & " '" & cArtNr & "' "
                sSQL = sSQL & ", '" & cBezeich & "' "
                sSQL = sSQL & ", '" & dBestand & "' "
                sSQL = sSQL & ", '" & dAnzahl & "' "
                sSQL = sSQL & ", '" & dKVkPr1Neu & "' "
                sSQL = sSQL & ", '" & cLiBesNr & "' "
                sSQL = sSQL & ", '" & cEAN & "' "
                sSQL = sSQL & ", '" & lLpz & "' "
                sSQL = sSQL & ", '" & lLinr & "' "
                sSQL = sSQL & ", '" & gcFilNr & "' "
                sSQL = sSQL & ", '" & srechnertab & "' "
                sSQL = sSQL & " )"

                gdBase.Execute sSQL, dbFailOnError
            End If
        End If

    ElseIf gcFilNr = "1" Then

        If Not IsNull(rsRs2!BESTAND) Then
            If rsRs2!BESTAND > 0 Then
                dBestand = rsRs2!BESTAND

                dAnzahl = dBestand

                sSQL = " Insert into ETIDRU ( "
                
                sSQL = sSQL & " Artnr "
                sSQL = sSQL & ", BEZEICH "
                sSQL = sSQL & ", BESTAND "
                sSQL = sSQL & ", ANZAHL "
                sSQL = sSQL & ", VKPR "
                sSQL = sSQL & ", LIBESNR "
                sSQL = sSQL & ", EAN "
                sSQL = sSQL & ", LPZ "
                sSQL = sSQL & ", LINR "
                sSQL = sSQL & ", FILNR "
                sSQL = sSQL & ", PCNAME "
                sSQL = sSQL & " )"
                
                sSQL = sSQL & " Values ( "
                
                sSQL = sSQL & " '" & cArtNr & "' "
                sSQL = sSQL & ", '" & cBezeich & "' "
                sSQL = sSQL & ", '" & dBestand & "' "
                sSQL = sSQL & ", '" & dAnzahl & "' "
                sSQL = sSQL & ", '" & dKVkPr1Neu & "' "
                sSQL = sSQL & ", '" & cLiBesNr & "' "
                sSQL = sSQL & ", '" & cEAN & "' "
                sSQL = sSQL & ", '" & lLpz & "' "
                sSQL = sSQL & ", '" & lLinr & "' "
                sSQL = sSQL & ", '" & gcFilNr & "' "
                sSQL = sSQL & ", '" & srechnertab & "' "
                sSQL = sSQL & " )"

                gdBase.Execute sSQL, dbFailOnError
            End If
        End If

        For i = 2 To giAnzFil

        sSQL = "Select * from zbestand Where artnr = " & cArtNr
        sSQL = sSQL & " and Filialnr = " & i

        Set rsRs4 = gdBase.OpenRecordset(sSQL)

        If Not rsRs4.EOF Then

            If Not IsNull(rsRs4!BESTAND) Then
                If rsRs4!BESTAND > 0 Then
                    dBestand = rsRs4!BESTAND

                    dAnzahl = dBestand
                    
                    sSQL = " Insert into ETIDRU ( "
                    
                    
                    sSQL = sSQL & " Artnr "
                    sSQL = sSQL & ", BEZEICH "
                    sSQL = sSQL & ", BESTAND "
                    sSQL = sSQL & ", ANZAHL "
                    sSQL = sSQL & ", VKPR "
                    sSQL = sSQL & ", LIBESNR "
                    sSQL = sSQL & ", EAN "
                    sSQL = sSQL & ", LPZ "
                    sSQL = sSQL & ", LINR "
                    sSQL = sSQL & ", FILNR "
                    sSQL = sSQL & ", PCNAME "
                    sSQL = sSQL & " )"
                
                    sSQL = sSQL & " Values ( "
                    
                    
                    
                    sSQL = sSQL & " '" & cArtNr & "' "
                    sSQL = sSQL & ", '" & cBezeich & "' "
                    
                    sSQL = sSQL & ", '" & dBestand & "' "
                    sSQL = sSQL & ", '" & dAnzahl & "' "
                    sSQL = sSQL & ", '" & dKVkPr1Neu & "' "
                    sSQL = sSQL & ", '" & cLiBesNr & "' "
                    sSQL = sSQL & ", '" & cEAN & "' "
                    sSQL = sSQL & ", '" & lLpz & "' "
                    sSQL = sSQL & ", '" & lLinr & "' "
                    sSQL = sSQL & ", '" & i & "' "
                    sSQL = sSQL & ", '" & srechnertab & "' "
                    sSQL = sSQL & " )"

                    gdBase.Execute sSQL, dbFailOnError
                End If
            End If
        End If
        rsRs4.Close: Set rsRs4 = Nothing

        Next i
    End If



Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SchreibeEtiDruWKL11"
    Fehler.gsFehlertext = "Es trat ein Fehler auf. "
    
    Fehlermeldung1
End Sub
Public Sub SchreibeEtiDruForEinzelArtikelnurBeiFarbÄnderung(lartnr As Long)
    On Error GoTo LOKAL_ERROR

    Dim lLpz        As Long
    Dim sSQL        As String
    Dim cBezeich    As String
    Dim cLiBesNr    As String
    Dim cEAN        As String
    
    Dim dBestand    As Double
    Dim dAnzahl     As Double
    Dim dKVkPr1Neu  As Double
    
    Dim rsArt       As DAO.Recordset
    Dim lLinr       As Long
    
    lLinr = CLng(ermLiefmitkleinstenLEKPR(CStr(lartnr)))
    cLiBesNr = ermLibesnr(CStr(lartnr), lLinr)
   
    dKVkPr1Neu = 0
    dBestand = 0
    sSQL = "Select * from Artikel Where artnr = " & lartnr
    Set rsArt = gdBase.OpenRecordset(sSQL)
    If Not rsArt.EOF Then
        If Not IsNull(rsArt!BESTAND) Then
            If rsArt!BESTAND > 0 Then
                dBestand = rsArt!BESTAND
            End If
        End If
        
        If Not IsNull(rsArt!EAN) Then
            cEAN = rsArt!EAN
        Else
            cEAN = ""
        End If
        
        If Not IsNull(rsArt!KVKPR1) Then
            dKVkPr1Neu = rsArt!KVKPR1
        Else
            dKVkPr1Neu = 0
        End If
        
        If Not IsNull(rsArt!LPZ) Then
            lLpz = rsArt!LPZ
        Else
            lLpz = 0
        End If
        
        If Not IsNull(rsArt!BEZEICH) Then
            If gbTagAkt = True Then
                cBezeich = UCase(rsArt!BEZEICH)
            Else
                cBezeich = rsArt!BEZEICH
            End If
        Else
            cBezeich = ""
        End If
        
    End If
    rsArt.Close: Set rsArt = Nothing
    
   '****************************Etidru füllen

    If dBestand = 0 Then
        If HatArtikelVerkäufe(lartnr) Then 'für Rühle
            dBestand = 1
        End If
    End If
    
    If dBestand = 0 Then
        Exit Sub
    End If
    
    dAnzahl = dBestand

    sSQL = " Insert into ETIDRU ( "
    sSQL = sSQL & " Artnr "
    sSQL = sSQL & ", BEZEICH "
    sSQL = sSQL & ", BESTAND "
    sSQL = sSQL & ", ANZAHL "
    sSQL = sSQL & ", VKPR "
    sSQL = sSQL & ", LIBESNR "
    sSQL = sSQL & ", EAN "
    sSQL = sSQL & ", LPZ "
    sSQL = sSQL & ", LINR "
    sSQL = sSQL & ", FILNR "
    sSQL = sSQL & ", PCNAME "
    sSQL = sSQL & " )"
    
    sSQL = sSQL & " Values ( "
    sSQL = sSQL & " '" & lartnr & "' "
    sSQL = sSQL & ", '" & cBezeich & "' "
    sSQL = sSQL & ", '" & dBestand & "' "
    sSQL = sSQL & ", '" & dAnzahl & "' "
    sSQL = sSQL & ", '" & dKVkPr1Neu & "' "
    sSQL = sSQL & ", '" & cLiBesNr & "' "
    sSQL = sSQL & ", '" & cEAN & "' "
    sSQL = sSQL & ", '" & lLpz & "' "
    sSQL = sSQL & ", '" & lLinr & "' "
    sSQL = sSQL & ", '" & gcFilNr & "' "
    sSQL = sSQL & ", '" & srechnertab & "' "
    sSQL = sSQL & " )"
    gdBase.Execute sSQL, dbFailOnError
        
  
       
        
Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SchreibeEtiDruForEinzelArtikelnurBeiFarbÄnderung"
    Fehler.gsFehlertext = "Es trat ein Fehler auf. "
    
    Fehlermeldung1
End Sub
Public Function BistDualleineinderDatenbank() As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    Dim i As Integer
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    BistDualleineinderDatenbank = False
    
    gdBase.Close
    If frmWKL00!txtStatus.Text = 38 Then
        frmWKL00!txtStatus.Text = 37
    End If
    sErrDabapfad = cPfad & "kissdata.mdb"
    
    'das 2. True ist neu für read only
    Set gdBase = OpenDatabase(cPfad & "kissdata.mdb", True, False, "MS Access;PWD=" & gsPasswort)
'    Set gdBase = OpenDatabase(cPfad & "kissdata.mdb", True, False)
    
    If frmWKL00!txtStatus.Text = 37 Then
        frmWKL00!txtStatus.Text = 36
    End If
    
    gdBase.Close
    
    If frmWKL00!txtStatus.Text = 36 Then
        frmWKL00!txtStatus.Text = 35
    End If
    
    sErrDabapfad = cPfad & "kissdata.mdb"
    Set gdBase = OpenDatabase(cPfad & "kissdata.mdb", False, False, "MS Access;PWD=" & gsPasswort)
'    Set gdBase = OpenDatabase(cPfad & "kissdata.mdb", False)
    
    BistDualleineinderDatenbank = True
        


    Exit Function
LOKAL_ERROR:
    If err.Number = 3356 Then  'Or err.Number = 3050


        BistDualleineinderDatenbank = False
        Screen.MousePointer = 0
        Set gdBase = OpenDatabase(cPfad & "kissdata.mdb", False, False, "MS Access;PWD=" & gsPasswort)
'        Set gdBase = OpenDatabase(cPfad & "kissdata.mdb", False)
        
        If frmWKL00!txtStatus.Text = 37 Then
            frmWKL00!txtStatus.Text = 36
        End If

        Exit Function
        
    ElseIf err.Number = 3343 Then
    
        giUmleitgrund = 2 'Datenbankpfad muß rep
        
        gcUmleittxt = "Ihre Datenbank ist beschädigt. " & sErrDabapfad & vbCrLf
        gcUmleittxt = gcUmleittxt & "Beenden Sie alle anderen Programme auf allen anderen Computern! " & vbCrLf & vbCrLf
        gcUmleittxt = gcUmleittxt & "Drücken Sie 'reparieren', um dann die Datenbank zu reparieren!" & vbCrLf
        
        frmWKL60.Show 1
        
        
        
        
        Resume
    
    
        
    ElseIf err.Number = 3045 Then

        frmWKL00.Label1(1).Caption = ""
        frmWKL00.Label2.ForeColor = vbYellow
        frmWKL00.Label2.Caption = "An einem anderen Rechner wird vermutlich "
        frmWKL00.Label2.Refresh
        
        frmWKL00.Label3.ForeColor = vbYellow
        frmWKL00.Label3.Visible = True
        frmWKL00.Label3.Caption = "die Datenbank komprimiert."
        frmWKL00.Label3.Refresh
        Pause (2)
        frmWKL00.Label1(1).ForeColor = vbYellow
        For i = 60 To 1 Step -1
            frmWKL00.Label1(1).Caption = "Nächster Versuch in:   " & i & " Sekunden "
            frmWKL00.Label1(1).Refresh
            Pause (1)
        Next i
        frmWKL00.Label1(1).Caption = ""
        frmWKL00.Label3.Caption = ""
        frmWKL00.Label2.Caption = ""
        Resume
  
       
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "BistDualleineinderDatenbank"
        Fehler.gsFehlertext = "Beim EX-Daba Zugriff ist ein Fehler aufgetreten."
        
        Fehlermeldung1
        BistDualleineinderDatenbank = False
        
        Screen.MousePointer = 0
        Set gdBase = OpenDatabase(cPfad & "kissdata.mdb", False, False, "MS Access;PWD=" & gsPasswort)
'        Set gdBase = OpenDatabase(cPfad & "kissdata.mdb", False)
        
        Exit Function
    End If
End Function
Public Function BistDualleineinderDatenbankApp() As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    
    cPfad = App.Path
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    BistDualleineinderDatenbankApp = False
    
    gdApp.Close
    Set gdApp = OpenDatabase(cPfad & "kissapp.mdb", True, False)
    gdApp.Close
    Set gdApp = OpenDatabase(cPfad & "kissapp.mdb", False)
    
    BistDualleineinderDatenbankApp = True
        
    Exit Function
LOKAL_ERROR:
    If err.Number = 3356 Then
    
        BistDualleineinderDatenbankApp = False
        Screen.MousePointer = 0
        Set gdApp = OpenDatabase(cPfad & "kissapp.mdb", False)
        
        Exit Function
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "BistDualleineinderDatenbankApp"
        Fehler.gsFehlertext = "Beim EX-Daba Zugriff ist ein Fehler aufgetreten."
        
        Fehlermeldung1
        BistDualleineinderDatenbankApp = False
        
        Screen.MousePointer = 0
        Set gdApp = OpenDatabase(cPfad & "kissapp.mdb", False)
        
        Exit Function
    End If
End Function
Public Function BistDualleineinderDatenbankGDPDU() As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad           As String
    Dim GDPdU_DB        As Database
    
    cPfad = gcDBPfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "GDPdU\"
    
    BistDualleineinderDatenbankGDPDU = False
    
    Set GDPdU_DB = OpenDatabase(cPfad & "GDPDU.mdb", True, False, "MS Access;PWD=" & gsGDPdU_Passwort)
    
    GDPdU_DB.Close
    
    
    BistDualleineinderDatenbankGDPDU = True
        
    Exit Function
LOKAL_ERROR:
    If err.Number = 3356 Then
    
        BistDualleineinderDatenbankGDPDU = False
        Exit Function
        
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "BistDualleineinderDatenbankApp"
        Fehler.gsFehlertext = "Beim EX-Daba Zugriff ist ein Fehler aufgetreten."
        
        Fehlermeldung1
        BistDualleineinderDatenbankGDPDU = False
        Exit Function
    End If
    
End Function
Public Function BistDualleineinderDatenbankKASSBON() As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad           As String
    Dim KASSBON_DB        As Database
    
    cPfad = gcDBPfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "GDPdU\"
    
    BistDualleineinderDatenbankKASSBON = False
    
    Set KASSBON_DB = OpenDatabase(cPfad & "KASSBON.mdb", True, False, "MS Access;PWD=" & gsKASSBON_Passwort)
    
    KASSBON_DB.Close
    
    
    BistDualleineinderDatenbankKASSBON = True
        
    Exit Function
LOKAL_ERROR:
    If err.Number = 3356 Then
    
        BistDualleineinderDatenbankKASSBON = False
        Exit Function
        
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "BistDualleineinderDatenbankKASSBON"
        Fehler.gsFehlertext = "Beim EX-Daba Zugriff ist ein Fehler aufgetreten."
        
        Fehlermeldung1
        BistDualleineinderDatenbankKASSBON = False
        Exit Function
    End If
    
End Function
Public Sub füllecboBediener(cboBed As ComboBox)
    On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rs As Recordset
    Dim sTemp As String
    Dim sSatz As String
    Dim counter As Long
    Dim lAnzahl As Long
    
    sSQL = "Select bedname from bedname order by bedname"
    Set rs = gdBase.OpenRecordset(sSQL)
    
    cboBed.Clear
    If Not rs.EOF Then
        rs.MoveFirst
        Do While Not rs.EOF
            If Not IsNull(rs!bedname) Then
                sTemp = Trim(rs!bedname)
            Else
                sTemp = ""
            End If
            
            If sTemp <> "" Then
                cboBed.AddItem sTemp
            End If
            rs.MoveNext
        Loop
    End If
    rs.Close: Set rs = Nothing
    cboBed.Text = "alle"
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "füllecboBediener"
    Fehler.gsFehlertext = "Beim Füllen der Bediener ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub BestandsverauchinBestell(sBastARTNR As String, lnewBest As Long)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
   
    If IsNumeric(sBastARTNR) = False Then
        Exit Sub
    End If
    
    sSQL = "Update VORSCHLZ set bestand = " & lnewBest
    sSQL = sSQL & " where artnr = " & sBastARTNR
    gdApp.Execute sSQL, dbFailOnError
   
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "BestandsverauchinBestell"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub Insert_Kassjour(sArtnr As String, lMenge As Long, cUhrZeit As String, cDatum As String, cEinzelPreis As String)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim cBezeich As String
    Dim dKJPreis As Double
    Dim lKJADate As Long
    Dim lKJKasNum As Long
    Dim lKJFiliale As Long
    Dim lKJKundNr As Long
    Dim lKJBediener As Long
    Dim cKKart As String
    Dim lBelegnr As Long
    Dim rsrs As DAO.Recordset
    
    
    cKKart = "KR"
    lKJKasNum = 8
    lKJFiliale = CLng(gcFilNr)
    lKJKundNr = 0
    lKJBediener = 1
    lBelegnr = 0
    
    Dim IAbschluss  As Long
    IAbschluss = ermDIEaktuelleAbschlussNR(CByte(CStr(lKJKasNum)))

    lKJADate = DateValue(cDatum)
    dKJPreis = lMenge * CDbl(cEinzelPreis)
    
    Dim lOldBestand As Long
    Dim dKJVPPR As Double
    Dim lagn As Long
    Dim lLpz As Long
    Dim cEAN As String
    Dim cMwst As String
    Dim cUmsOK As String
    Dim dMoPreis As Double
    
    dMoPreis = 0
    lOldBestand = 0
    dKJVPPR = 0
    lagn = 0
    lLpz = 0
    cEAN = ""
    cMwst = "V"
    cUmsOK = "J"
    cBezeich = ""
    
    Set rsrs = gdBase.OpenRecordset("Select * from Artikel where artnr = " & sArtnr)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        
        If Not IsNull(rsrs!LPZ) Then
            lLpz = CLng(rsrs!LPZ)
        End If
        
        If Not IsNull(rsrs!BEZEICH) Then
            cBezeich = rsrs!BEZEICH
        End If
        
        If Not IsNull(rsrs!UMS_OK) Then
            cUmsOK = rsrs!UMS_OK
        End If
        
        If Not IsNull(rsrs!MWST) Then
            cMwst = rsrs!MWST
        End If
        
        If Not IsNull(rsrs!EAN) Then
            cEAN = rsrs!EAN
        End If
        
        If Not IsNull(rsrs!AGN) Then
            lagn = CLng(rsrs!AGN)
        End If
        
        If Not IsNull(rsrs!BESTAND) Then
            lOldBestand = CLng(rsrs!BESTAND)
        End If
        
        If Not IsNull(rsrs!vkpr) Then
            dKJVPPR = CDbl(rsrs!vkpr)
        End If
    End If
    rsrs.Close
    
    Dim lLinr As Long
    Dim dLEKPR As Double
    
    dLEKPR = 0
    lLinr = 0
    
    Set rsrs = gdBase.OpenRecordset("Select * from Artlief where artnr = " & sArtnr & " order by lekpr asc")
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        
        
        
        If Not IsNull(rsrs!linr) Then
            lLinr = CLng(rsrs!linr)
        End If
        
        If Not IsNull(rsrs!lekpr) Then
            dLEKPR = CDbl(rsrs!lekpr)
        End If
    End If
    rsrs.Close
    
    
    
    

    cSQL = " Insert into Kassjour ( "
            
    cSQL = cSQL & " artnr"
    cSQL = cSQL & " ,BEZEICH"
    cSQL = cSQL & " ,Menge"
    cSQL = cSQL & " ,Preis"
    cSQL = cSQL & " ,adate"
    
    cSQL = cSQL & " ,azeit"
    cSQL = cSQL & " ,BEDIENER"
    cSQL = cSQL & " ,kundnr"
    cSQL = cSQL & " ,Filiale"
    cSQL = cSQL & " ,KASNUM"
    
    cSQL = cSQL & " ,linr"
    cSQL = cSQL & " ,LPZ"
    cSQL = cSQL & " ,AGN"
    cSQL = cSQL & " ,EAN"
    cSQL = cSQL & " ,MWST"
    
    cSQL = cSQL & " ,ekpr"
    cSQL = cSQL & " ,UMS_OK"
    cSQL = cSQL & " ,MOPREIS"
    cSQL = cSQL & " ,ZBONNR"
    cSQL = cSQL & " ,ABOK"

    cSQL = cSQL & " ,vkpr"
    cSQL = cSQL & " ,BELEGNR"
    cSQL = cSQL & " ,best1"
    cSQL = cSQL & " ,KK_ART"
    cSQL = cSQL & " )"
    
    cSQL = cSQL & " values  "
            
    cSQL = cSQL & " ( " & Val(sArtnr) & " "
    cSQL = cSQL & " , '" & cBezeich & "' "
    cSQL = cSQL & " , " & lMenge & " "
    cSQL = cSQL & " , '" & dKJPreis & "' "
    cSQL = cSQL & " , " & lKJADate & " "
    cSQL = cSQL & " , '" & cUhrZeit & "' "
    
    cSQL = cSQL & " , " & lKJBediener & " "
    cSQL = cSQL & " , " & lKJKundNr & " "
    cSQL = cSQL & " , " & lKJFiliale & " "
    cSQL = cSQL & " , " & lKJKasNum & " "
            
    cSQL = cSQL & " , " & lLinr & " "
    cSQL = cSQL & " , " & lLpz & " "
    cSQL = cSQL & " , " & lagn & " "
    cSQL = cSQL & " , '" & cEAN & "' "
    cSQL = cSQL & " , '" & cMwst & "' "
            
    cSQL = cSQL & " , '" & dLEKPR & "' "
    cSQL = cSQL & " , '" & cUmsOK & "' "
    cSQL = cSQL & " , " & dMoPreis & " "
            
    cSQL = cSQL & " , " & IAbschluss & " "
    cSQL = cSQL & " , " & -1 & " "
    cSQL = cSQL & " , '" & dKJVPPR & "' "
    cSQL = cSQL & " , " & lBelegnr & " "
    cSQL = cSQL & " , " & lOldBestand & " "
    cSQL = cSQL & " , '" & cKKart & "' "
            
    cSQL = cSQL & " )"
    gdBase.Execute cSQL, dbFailOnError


Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Insert_Kassjour"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1

End Sub
Public Sub Bestandsveraenderung(sBastARTNR As String, lnewBest As Long, caenderung As String)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsRsBast As Recordset
    Dim rsrs As Recordset
    Dim lOldBest As Long
    Dim lUMenge As Long
    Dim bytefil As Byte
    Dim iStufe As Integer
    Dim ierrz As Integer
    Dim bUpdate As Boolean
    Dim caenderGRUND As String
    
    caenderGRUND = ""
    sGlobAenderGRUND = ""
    ierrz = 0
    iStufe = 1
    lOldBest = 0
    
    bUpdate = False
    bytefil = CByte(gcFilNr)
    
    If IsNumeric(sBastARTNR) = False Then
        Exit Sub
    End If
    
    If gbKeineBestVerWarengru Then
        If IstDasEineWGN(CLng(sBastARTNR)) = True Then
            Exit Sub
        End If
    End If

    
    
    
    'Altbestand ermitteln
    sSQL = "Select Bestand from Artikel "
    sSQL = sSQL & " where artnr = " & sBastARTNR
    
    Set rsRsBast = gdBase.OpenRecordset(sSQL)
    If Not rsRsBast.EOF Then
        rsRsBast.MoveFirst
        
        If Not IsNull(rsRsBast!BESTAND) Then
            lOldBest = CLng(rsRsBast!BESTAND)
        End If
    End If
    rsRsBast.Close
    
    
    If gbOhnebestProt Then
    
    Else
'        If bUpdate Then
        
            lUMenge = lnewBest - lOldBest
            
            
            If lUMenge < 0 Then
            
                If caenderung = "Bestandskorrektur" Or caenderung = "Artikel bea Tabelle" Or caenderung = "Artikelbearbeitung" Then
                    If gbBestandsgrund Then
                        dlgBestand.Show 1
                    
                        Select Case dlgBestand.Back
                            Case 1
                                caenderGRUND = "Diebstahl"
                            Case 2
                                caenderGRUND = "reg. Warenentnahme"
                            Case 3
                                caenderGRUND = "Bedienerfehler"
                            Case 4
                                caenderGRUND = "Verfallsdat erreicht"
                            Case 5
                                caenderGRUND = "Bruch"
                            Case 6
                                caenderGRUND = "unklare Bestandsdiff"
                            Case 7
                                caenderGRUND = "Ladenbedarf"
                            Case 8
                                caenderGRUND = "Eigenbedarf"
                            Case 9
                                caenderGRUND = "Spende"
                            Case 10
                                caenderGRUND = "Fehllieferung"
                            Case 11
                                caenderGRUND = "Auflösen"
                            Case 12
                                caenderGRUND = "Retoure"
                            Case 13
                                caenderGRUND = "Wundertüte"
                            Case 14
                                caenderGRUND = "Tester"
                            Case 15
                                caenderGRUND = "Personalkauf"
                            Case 16
                                caenderGRUND = "Shopverkauf"
                            
                        End Select
                    End If
                End If
            End If
            
            If gcBedienerNr = "" Then gcBedienerNr = "0"
            
            iStufe = 7
            'Insert an die Protokolltabelle BESTPROT
            
            sGlobAenderGRUND = caenderGRUND
            
            Set rsrs = gdBase.OpenRecordset("BESTPROT", dbOpenTable)

            rsrs.AddNew
            rsrs!artnr = sBastARTNR
            rsrs!UMENGE = lUMenge
            rsrs!NEWBEST = lnewBest
            rsrs!OLDBEST = lOldBest
            rsrs!BEDIENER = CLng(gcBedienerNr)
            rsrs!SYNStatus = "A"
            
            rsrs!AENART = caenderung
            rsrs!AENGRUND = caenderGRUND
            rsrs!FILIALE = bytefil
            rsrs!LASTDATE = DateValue(Now)
            rsrs!LASTTIME = TimeValue(Now)
            rsrs!SENDOK = False
            rsrs.Update
            
            rsrs.Close: Set rsrs = Nothing
            
            iStufe = 8
            
            If gcBedienerNr = "0" Then gcBedienerNr = ""
'        End If
    End If
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    'Altbestand ermitteln
    sSQL = "Select Bestand,LASTDATE,LASTTIME from Artikel "
    sSQL = sSQL & " where artnr = " & sBastARTNR
    
    iStufe = 2
    Set rsRsBast = gdBase.OpenRecordset(sSQL)
    If Not rsRsBast.EOF Then
        rsRsBast.MoveFirst
        
        iStufe = 3
        If Not IsNull(rsRsBast!BESTAND) Then
            lOldBest = CLng(rsRsBast!BESTAND)
        End If
        
        iStufe = 4
        
        rsRsBast.Edit
        rsRsBast!BESTAND = lnewBest
        rsRsBast!LASTDATE = DateValue(Now)
        rsRsBast!LASTTIME = TimeValue(Now)
        rsRsBast.Update
        
        iStufe = 5
        
        bUpdate = True
    End If
    rsRsBast.Close
    
    If gbBestDateien = True Then
        schreibeTxtBestand_update sBastARTNR, lnewBest, CInt(gcFilNr)
    End If
    
    If gbKL_LIVEBESTAND = True Then
        
        If gbKL_LIVEBESTAND_DIFF = True Then
        
            lUMenge = lnewBest - lOldBest
            live_bestand_updaten_Diffmenge sBastARTNR, lUMenge, lnewBest, CInt(gcFilNr)
        
        Else
        
            live_bestand_updaten sBastARTNR, lnewBest, CInt(gcFilNr)
        
        End If
    End If
    
    If gbMySQL_LIVEBESTAND = True Then
    
        Dim sErgebnisAusgabe As String
    
'        gsMySQL_PHP_SCRIPT_PFAD = "http://www.officeprosystem.de/test/kiss.php"
'        gsMySQL_BESTAND_TAB = "artikel"
'        gsMySQL_BESTAND_INDEXSPALTE = "artnr"
'        gsMySQL_BESTAND_SPALTE = "bestand"
    
    'OpenURL "http://www.officeprosystem.de/test/kiss.php?quelle=kiss&tab=artikel&spalteb=bestand&spaltea=artnr&artnr=" & sBastARTNR & "&menge=" & lnewBest & "", IOTDirect
    
    sErgebnisAusgabe = OpenURL(gsMySQL_PHP_SCRIPT_PFAD & "/bestand.php?quelle=kiss&tab=" & gsMySQL_BESTAND_TAB & "&spalteb=" & gsMySQL_BESTAND_SPALTE & "&spaltea=" & gsMySQL_BESTAND_INDEXSPALTE & "&artnr=" & sBastARTNR & "&menge=" & lnewBest & "", IOTDirect)
    
'    MsgBox OpenURL(gsMySQL_PHP_SCRIPT_PFAD & "/bestand.php?quelle=kiss&tab=" & gsMySQL_BESTAND_TAB & "&spalteb=" & gsMySQL_BESTAND_SPALTE & "&spaltea=" & gsMySQL_BESTAND_INDEXSPALTE & "&artnr=" & sBastARTNR & "&menge=" & lnewBest & "", IOTDirect)
    
'        MySQL_live_bestand_updaten sBastARTNR, lnewBest
    End If
    
    
    
    
    
'    If gbOhnebestProt Then
'
'    Else
'        If bUpdate Then
'
'            lUMenge = lnewBest - lOldBest
'
'
'            If lUMenge < 0 Then
'
'                If caenderung = "Bestandskorrektur" Or caenderung = "Artikel bea Tabelle" Or caenderung = "Artikelbearbeitung" Then
'                    If gbBestandsgrund Then
'                        dlgBestand.Show 1
'
'                        Select Case dlgBestand.Back
'                            Case 1
'                                caenderGRUND = "Diebstahl"
'                            Case 2
'                                caenderGRUND = "reg. Warenentnahme"
'                            Case 3
'                                caenderGRUND = "Bedienerfehler"
'                            Case 4
'                                caenderGRUND = "Verfallsdat erreicht"
'                            Case 5
'                                caenderGRUND = "Bruch"
'                            Case 6
'                                caenderGRUND = "unklare Bestandsdiff"
'                            Case 7
'                                caenderGRUND = "Ladenbedarf"
'                            Case 8
'                                caenderGRUND = "Eigenbedarf"
'                            Case 9
'                                caenderGRUND = "Spende"
'                            Case 10
'                                caenderGRUND = "Fehllieferung"
'                            Case 11
'                                caenderGRUND = "Auflösen"
'                            Case 12
'                                caenderGRUND = "Retoure"
'                            Case 13
'                                caenderGRUND = "Wundertüte"
'                            Case 14
'                                caenderGRUND = "Tester"
'                        End Select
'                    End If
'                End If
'            End If
'
'            If gcBedienerNr = "" Then gcBedienerNr = "0"
'
'            iStufe = 7
'            'Insert an die Protokolltabelle BESTPROT
'
'            Set rsrs = gdBase.OpenRecordset("BESTPROT", dbOpenTable)
'
'            rsrs.AddNew
'            rsrs!artnr = sBastARTNR
'            rsrs!UMENGE = lUMenge
'            rsrs!NEWBEST = lnewBest
'            rsrs!OLDBEST = lOldBest
'            rsrs!BEDIENER = CLng(gcBedienerNr)
'            rsrs!SYNStatus = "A"
'
'            rsrs!AENART = caenderung
'            rsrs!AENGRUND = caenderGRUND
'            rsrs!FILIALE = bytefil
'            rsrs!LASTDATE = DateValue(Now)
'            rsrs!LASTTIME = TimeValue(Now)
'            rsrs!SENDOK = False
'            rsrs.Update
'
'            rsrs.Close: Set rsrs = Nothing
'
'            iStufe = 8
'
'            If gcBedienerNr = "0" Then gcBedienerNr = ""
'        End If
'    End If

Exit Sub
LOKAL_ERROR:
    If err.Number = 3343 Then
        giUmleitgrund = 2 'Datenbankpfad muß rep
        sErrDabapfad = ""
        gcUmleittxt = "Ihre Datenbank ist beschädigt. " & sErrDabapfad & vbCrLf
        gcUmleittxt = gcUmleittxt & "Beenden Sie alle anderen Programme auf allen anderen Computern! " & vbCrLf & vbCrLf
        gcUmleittxt = gcUmleittxt & "Drücken Sie 'reparieren', um dann die Datenbank zu reparieren!" & vbCrLf
        
        frmWKL60.Show 1
        
    ElseIf err.Number = 3260 Then
        If ierrz < 5 Then
            ierrz = ierrz + 1
            Pause (1)
            Resume
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "Bestandsveraenderung"
            Fehler.gsFehlertext = "Bei der Änderung des Bestandes nach 5 sec ist ein Fehler aufgetreten. " & iStufe
            
            Fehlermeldung1
            Exit Sub
        End If
        
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "Bestandsveraenderung"
        Fehler.gsFehlertext = "Bei der Änderung des Bestandes ist ein Fehler aufgetreten. " & iStufe
        
        Fehlermeldung1
'        Resume Next
    End If
End Sub
Public Sub Artikelveraenderung(sBastARTNR As String, cWert As String, caenderung As String, ctabspalte As String, Optional sLinr As String = "")
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsRsBast As Recordset
    
    Dim bytefil As Byte
    Dim iStufe As Integer
    Dim ierrz As Integer
    
    
    If sBastARTNR = "" Then
        Exit Sub
    End If
    ierrz = 0
    
    iStufe = 1
    
    bytefil = CByte(gcFilNr)

    Select Case ctabspalte
        
        Case "LAGERP"
        
            If Val(cWert) > 30000 Then
                MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                Exit Sub
            ElseIf Val(cWert) < 0 Then
                MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                Exit Sub
            End If
    
            sSQL = "Delete from LAGERPLATZ where ARTNR = " & sBastARTNR
            gdBase.Execute sSQL, dbFailOnError

            sSQL = "Insert into LAGERPLATZ (ARTNR,LAGERP) Values (" & sBastARTNR & ", " & cWert & ") "
            gdBase.Execute sSQL, dbFailOnError
            Exit Sub
        Case "GRUPPE"
        
            If Val(cWert) > 999999 Then
                MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                Exit Sub
            ElseIf Val(cWert) < 0 Then
                MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                Exit Sub
            End If
    
            sSQL = "Delete from GRUPPE_ARTIKEL where ARTNR = " & sBastARTNR
            gdBase.Execute sSQL, dbFailOnError

            sSQL = "Insert into GRUPPE_ARTIKEL (ARTNR,GRUPPENNR) Values (" & sBastARTNR & ", " & cWert & ") "
            gdBase.Execute sSQL, dbFailOnError
            Exit Sub
        Case "MODELL"
        
            If Len(cWert) > 35 Then
                MsgBox Trim(Left(cWert, 35)) & " Achtung nur dieser Text wird gespeichert.", vbInformation, "Winkiss Hinweis:"
            End If
    
            If DatendrinSQL("select * from TEXTIL where artnr = " & sBastARTNR & "", gdBase) Then
                sSQL = "Update TEXTIL set MODELL = '" & cWert & "' where artnr = " & sBastARTNR & ""
                gdBase.Execute sSQL, dbFailOnError
            Else

                sSQL = "Insert into TEXTIL (ARTNR,MODELL) Values (" & sBastARTNR & ", '" & cWert & "') "
                gdBase.Execute sSQL, dbFailOnError
            End If
            Exit Sub
        Case "MATERIAL"
        
            If Len(cWert) > 35 Then
                MsgBox Trim(Left(cWert, 35)) & " Achtung nur dieser Text wird gespeichert.", vbInformation, "Winkiss Hinweis:"
            End If
    
            If DatendrinSQL("select * from TEXTIL where artnr = " & sBastARTNR & "", gdBase) Then
                sSQL = "Update TEXTIL set MATERIAL = '" & cWert & "' where artnr = " & sBastARTNR & ""
                gdBase.Execute sSQL, dbFailOnError
            Else

                sSQL = "Insert into TEXTIL (ARTNR,MATERIAL) Values (" & sBastARTNR & ", '" & cWert & "') "
                gdBase.Execute sSQL, dbFailOnError
            End If
            Exit Sub
        Case "FARBBEZ"
        
            If Len(cWert) > 35 Then
                MsgBox Trim(Left(cWert, 35)) & " Achtung nur dieser Text wird gespeichert.", vbInformation, "Winkiss Hinweis:"
            End If
    
            If DatendrinSQL("select * from TEXTIL where artnr = " & sBastARTNR & "", gdBase) Then
                sSQL = "Update TEXTIL set FARBBEZ = '" & cWert & "' where artnr = " & sBastARTNR & ""
                gdBase.Execute sSQL, dbFailOnError
            Else
                sSQL = "Insert into TEXTIL (ARTNR,FARBBEZ) Values (" & sBastARTNR & ", '" & cWert & "') "
                gdBase.Execute sSQL, dbFailOnError
            End If
            Exit Sub
    End Select
    
    'Altbestand ermitteln
    sSQL = "Select * from Artikel "
    sSQL = sSQL & " where artnr = " & sBastARTNR
    
    iStufe = 2
    Set rsRsBast = gdBase.OpenRecordset(sSQL)
    If Not rsRsBast.EOF Then
        rsRsBast.MoveFirst
        
        iStufe = 4
        rsRsBast.Edit
        Select Case ctabspalte
        
            Case "VKPR"
                rsRsBast!vkpr = CDbl(cWert)
            Case "LEKPR"
                rsRsBast!lekpr = CDbl(cWert)
            Case "LINR"
                If Val(cWert) > 999999 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Val(cWert) < 0 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!linr = Val(cWert)
            Case "GROESSE"
                If Len(cWert) > 10 Then
                    MsgBox Trim(Left(cWert, 10)) & " Achtung nur dieser Text wird gespeichert.", vbInformation, "Winkiss Hinweis:"
                   
                End If
                rsRsBast!GROESSE = UCase(Trim(Left(cWert, 10)))
            
            Case "LIBESNR"
                If Len(cWert) > 13 Then
                    MsgBox Trim(Left(cWert, 13)) & " Achtung nur dieser Text wird gespeichert.", vbInformation, "Winkiss Hinweis:"
                   
                End If
                rsRsBast!LIBESNR = UCase(Trim(Left(cWert, 13)))
            
            Case "KVKPR1"
                If Val(cWert) > 99999 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Val(cWert) < 0 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                If cWert <> "" Then
                
                    Dim dAlterwert As Double
                    dAlterwert = 0
                    If Not IsNull(rsRsBast!KVKPR1) Then
                        dAlterwert = rsRsBast!KVKPR1
                    End If
                    
                    If Round(dAlterwert, 2) <> Round(CDbl(cWert), 2) Then
                    
                        rsRsBast!KVKPR1 = CDbl(cWert)
                        If gbKL_LIVEKVKPR = True Then
                            If live_KVK_updaten(sBastARTNR, CDbl(cWert), CInt(gcFilNr)) = True Then
'                                MsgBox "Dieser Kassenpreis wurde im Kisslive gespeichert.", vbInformation, "Winkiss Hinweis:"
                            End If
                        End If
                        
                    
                        If gcBedienerNr = "" Then gcBedienerNr = "0"
                        'SchreibeProtokoll für EAN Veränderung
                        sSQL = "Insert into KVKPR1PROT (ARTNR ,KVKPR1, BEDIENER, "
                        sSQL = sSQL & " SYNSTATUS, AENART, Filiale, Lastdate, Lasttime )"
                        sSQL = sSQL & " Values "
                        sSQL = sSQL & " ( " & sBastARTNR & ", '" & cWert & " ', "
                        sSQL = sSQL & CLng(gcBedienerNr) & ", 'A' , '" & caenderung & " ', " & bytefil
                        sSQL = sSQL & ", '" & DateValue(Now) & "','" & TimeValue(Now) & "')"
                        gdBase.Execute sSQL, dbFailOnError
                        schreibeProtokollKVKPR1ablauf " " & sBastARTNR & Space(8 - Len(sBastARTNR)) & ermBezeichausWGN(sBastARTNR) & " neuer KVK: " & cWert & " Bediener: " & gcBedienerNr & " " & caenderung
                        If gcBedienerNr = "0" Then gcBedienerNr = ""
                    Else
                        rsRsBast.Close
                        Exit Sub
                    End If
                    
                End If
            Case "AGN"
                If Val(cWert) > 30000 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Val(cWert) < 0 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!AGN = Val(cWert)
            Case "PGN" 'Byte 256
                If Val(cWert) > 255 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Val(cWert) < 0 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!PGN = Val(cWert)
                
            Case "AWM"
                If Val(cWert) > 19 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Val(cWert) < 0 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                
                
                If gbKL_LIVEFarbe = True Then
                    If live_Artikelfarbe_updaten(sBastARTNR, CInt(cWert)) = True Then
                        MsgBox "Diese Artikelfarbe wurde im Kisslive gespeichert.", vbInformation, "Winkiss Hinweis:"
                    End If
                End If
                
                
                
                schreibeProtokollAWMablauf " " & sBastARTNR & Space(8 - Len(sBastARTNR)) & ermBezeichausWGN(sBastARTNR) & " neue Farbe: " & cWert & " Bediener: " & gcBedienerNr & " " & caenderung
                rsRsBast!AWM = Val(cWert)
                
                
                
            Case "LPZ"
                If Val(cWert) > 1000 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Val(cWert) < 0 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!LPZ = Val(cWert)
            Case "MINBEST"
                If Val(cWert) > 1000 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Val(cWert) < 0 Then
                    MsgBox Val(cWert) & " Dieser Wert wird nicht gespeichert.", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!MINBEST = Val(cWert)
            Case "NOTIZEN"
                If Len(cWert) > 25 Then
                    MsgBox Trim(Left(cWert, 25)) & " Achtung nur dieser Text wird gespeichert.", vbInformation, "Winkiss Hinweis:"
                End If
                rsRsBast!NOTIZEN = Trim(Left(cWert, 25))
            Case "BEZEICH"
                If Len(cWert) > 35 Then
                    MsgBox Trim(Left(cWert, 35)) & " Achtung nur dieser Text wird gespeichert.", vbInformation, "Winkiss Hinweis:"
                End If
                rsRsBast!BEZEICH = Trim(Left(cWert, 35))
            Case "EAN"
                If Len(cWert) > 13 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(zu groß)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!EAN = Trim(cWert)
                
                If gcBedienerNr = "" Then gcBedienerNr = "0"
                'SchreibeProtokoll für EAN Veränderung
                sSQL = "Insert into EANPROT (ARTNR ,EAN, BEDIENER, "
                sSQL = sSQL & " SYNSTATUS, AENART, Filiale, Lastdate, Lasttime )"
                sSQL = sSQL & " Values "
                sSQL = sSQL & " ( " & sBastARTNR & ", '" & cWert & " ', "
                sSQL = sSQL & CLng(gcBedienerNr) & ", 'A' , '" & caenderung & " ', " & bytefil
                sSQL = sSQL & ", '" & DateValue(Now) & "','" & TimeValue(Now) & "')"
                schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
                schreibeProtokollEANablauf " " & sBastARTNR & " EAN: " & cWert & " Bediener: " & gcBedienerNr & " " & caenderung
                If gcBedienerNr = "0" Then gcBedienerNr = ""
                
            Case "EAN2"
                If Len(cWert) > 13 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(zu groß)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!EAN2 = Trim(cWert)
                
                If gcBedienerNr = "" Then gcBedienerNr = "0"
                'SchreibeProtokoll für EAN Veränderung
                sSQL = "Insert into EANPROT (ARTNR ,EAN, BEDIENER, "
                sSQL = sSQL & " SYNSTATUS, AENART, Filiale, Lastdate, Lasttime )"
                sSQL = sSQL & " Values "
                sSQL = sSQL & " ( " & sBastARTNR & ", '" & cWert & " ', "
                sSQL = sSQL & CLng(gcBedienerNr) & ", 'A' , '" & caenderung & " ', " & bytefil
                sSQL = sSQL & ", '" & DateValue(Now) & "','" & TimeValue(Now) & "')"
                schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
                schreibeProtokollEANablauf " " & sBastARTNR & " EAN: " & cWert & " Bediener: " & gcBedienerNr & " " & caenderung
                If gcBedienerNr = "0" Then gcBedienerNr = ""
                
            Case "EAN3"
                If Len(cWert) > 13 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(zu groß)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!EAN3 = Trim(cWert)
                
                If gcBedienerNr = "" Then gcBedienerNr = "0"
                'SchreibeProtokoll für EAN Veränderung
                sSQL = "Insert into EANPROT (ARTNR ,EAN, BEDIENER, "
                sSQL = sSQL & " SYNSTATUS, AENART, Filiale, Lastdate, Lasttime )"
                sSQL = sSQL & " Values "
                sSQL = sSQL & " ( " & sBastARTNR & ", '" & cWert & " ', "
                sSQL = sSQL & CLng(gcBedienerNr) & ", 'A' , '" & caenderung & " ', " & bytefil
                sSQL = sSQL & ", '" & DateValue(Now) & "','" & TimeValue(Now) & "')"
                schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
                schreibeProtokollEANablauf " " & sBastARTNR & " EAN: " & cWert & " Bediener: " & gcBedienerNr & " " & caenderung
                If gcBedienerNr = "0" Then gcBedienerNr = ""
                
            Case "PREISSCHU"
                If Len(cWert) > 1 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(J oder N sind zulässig)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Trim(cWert) = "" Then
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!PREISSCHU = UCase(Trim(cWert))
                
            Case "GEFUEHRT"
                If Len(cWert) > 1 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(J oder N sind zulässig)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Trim(cWert) = "" Then
                    rsRsBast.Close
                    Exit Sub
                End If
                
                
                If gbKL_LIVEGefSperr = True Then
                
                    Dim bSperre As Boolean
                    
                    If cWert = "N" Then
                        bSperre = True
                    ElseIf cWert = "J" Then
                        bSperre = False
                    End If
                    
                    If live_ArtikelSperren_updaten(sBastARTNR, CInt(gcFilNr), bSperre) = True Then
                    
                        If cWert = "N" Then
                            MsgBox "Das Sperrmerkmal wurde im Kisslive gesetzt.", vbInformation, "Winkiss Hinweis:"
                        ElseIf cWert = "J" Then
                            MsgBox "Das Sperrmerkmal wurde im Kisslive aufgehoben.", vbInformation, "Winkiss Hinweis:"
                        End If
                        
                    End If
                End If
                
                
                
                rsRsBast!GEFUEHRT = UCase(Trim(cWert))
                
                
                
                
                
            Case "RKZ"
                If Len(cWert) > 1 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(J oder N sind zulässig)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Trim(cWert) = "" Then
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!RKZ = UCase(Trim(cWert))
                
            Case "RABATT_OK"
                If Len(cWert) > 1 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(J oder N sind zulässig)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Trim(cWert) = "" Then
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!RABATT_OK = UCase(Trim(cWert))
            Case "MWST"
                If Len(cWert) > 1 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(V,E oder O sind zulässig)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Trim(cWert) = "" Then
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!MWST = UCase(Trim(cWert))
            Case "BONUS_OK"
                If Len(cWert) > 1 Then
                    MsgBox cWert & " Dieser Wert wird nicht gespeichert.(J oder N sind zulässig)", vbInformation, "Winkiss Hinweis:"
                    rsRsBast.Close
                    Exit Sub
                ElseIf Trim(cWert) = "" Then
                    rsRsBast.Close
                    Exit Sub
                End If
                rsRsBast!BONUS_OK = UCase(Trim(cWert))
            
        End Select
            
        rsRsBast!LASTDATE = DateValue(Now)
        rsRsBast!LASTTIME = TimeValue(Now)
        rsRsBast.Update
    iStufe = 5
        
    End If
    rsRsBast.Close
    
    If Val(sLinr) > 0 Then
    
        Select Case ctabspalte
            Case "LEKPR"
                ArtikelLieferantenveraenderung sBastARTNR, cWert, caenderung, ctabspalte, sLinr
            Case "LINR"
                ArtikelLieferantenveraenderung sBastARTNR, cWert, caenderung, ctabspalte, sLinr
            Case "LIBESNR"
                ArtikelLieferantenveraenderung sBastARTNR, cWert, caenderung, ctabspalte, sLinr
        End Select
    End If
    
    iStufe = 6
    

    

Exit Sub
LOKAL_ERROR:
    If err.Number = 3343 Then
        giUmleitgrund = 2 'Datenbankpfad muß rep
        sErrDabapfad = ""
        gcUmleittxt = "Ihre Datenbank ist beschädigt. " & sErrDabapfad & vbCrLf
        gcUmleittxt = gcUmleittxt & "Beenden Sie alle anderen Programme auf allen anderen Computern! " & vbCrLf & vbCrLf
        gcUmleittxt = gcUmleittxt & "Drücken Sie 'reparieren', um dann die Datenbank zu reparieren!" & vbCrLf
        
        frmWKL60.Show 1
        
    ElseIf err.Number = 3260 Then
        If ierrz < 5 Then
            ierrz = ierrz + 1
            Pause (1)
            Resume
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "Artikelveraenderung"
            Fehler.gsFehlertext = "Bei der Änderung des Kassenpreises nach 5 sec ist ein Fehler aufgetreten. " & iStufe
            
            Fehlermeldung1
            Exit Sub
        End If
        
    Else
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "Artikelveraenderung"
        Fehler.gsFehlertext = "Bei der Änderung des Kassenpreises ist ein Fehler aufgetreten. " & iStufe
        
        Fehlermeldung1
    End If
End Sub
Public Sub ArtikelLieferantenveraenderung(sBastARTNR As String, cWert As String, caenderung As String, ctabspalte As String, sLiefnr As String)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Update ARTLIEF Set "
    sSQL = sSQL & ctabspalte & " = '" & cWert & "'"
    sSQL = sSQL & " where artnr = " & sBastARTNR
    sSQL = sSQL & " and linr = " & sLiefnr
    gdBase.Execute sSQL, dbFailOnError
    
    Dim ierrz As Integer
    ierrz = 0

Exit Sub
LOKAL_ERROR:
    If err.Number = 3343 Then
        giUmleitgrund = 2 'Datenbankpfad muß rep
        sErrDabapfad = ""
        gcUmleittxt = "Ihre Datenbank ist beschädigt. " & sErrDabapfad & vbCrLf
        gcUmleittxt = gcUmleittxt & "Beenden Sie alle anderen Programme auf allen anderen Computern! " & vbCrLf & vbCrLf
        gcUmleittxt = gcUmleittxt & "Drücken Sie 'reparieren', um dann die Datenbank zu reparieren!" & vbCrLf
        
        frmWKL60.Show 1
        
    ElseIf err.Number = 3260 Then
        If ierrz < 5 Then
            ierrz = ierrz + 1
            Pause (1)
            Resume
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "ArtikelLieferantenveraenderung"
            Fehler.gsFehlertext = "Bei der Änderung des Kassenpreises nach 5 sec ist ein Fehler aufgetreten."
            
            Fehlermeldung1
            Exit Sub
        End If
        
    Else
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "ArtikelLieferantenveraenderung"
        Fehler.gsFehlertext = "Bei der Änderung des Kassenpreises ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub BestandsminiOrMaxi(sBastARTNR As String, lMenge As Long, caenderung As String, sTime As String, sbed As String, sFil As String)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsRsBast As Recordset
    Dim bytefil As Byte
    Dim iStufe As Integer
    Dim caenderGRUND As String
    caenderGRUND = ""
    
    iStufe = 1
   
    bytefil = CByte(sFil)
    
    'Altbestand ermitteln
    sSQL = "Select * from Artikel where artnr = " & sBastARTNR
    
    iStufe = 2
    Set rsRsBast = gdBase.OpenRecordset(sSQL)
    If Not rsRsBast.EOF Then
        rsRsBast.MoveFirst
        
        rsRsBast.Edit
        If Not IsNull(rsRsBast!BESTAND) Then
            rsRsBast!BESTAND = rsRsBast!BESTAND - (lMenge)
        Else
            rsRsBast!BESTAND = 0 - (lMenge)
        End If
        rsRsBast!LASTDATE = DateValue(Now)
        rsRsBast!LASTTIME = TimeValue(Now)
        rsRsBast.Update
        
    End If
    rsRsBast.Close
    
    iStufe = 6
    
    If gbOhnebestProt Then
    
    Else
        If Trim(caenderung) = "Kassiervorgang" Then
        
        Else
            'Insert an die Protokolltabelle BESTPROT
            sSQL = "Insert into BESTPROT (ARTNR ,UMENGE, BEDIENER, "
            sSQL = sSQL & " SYNSTATUS, AENART, AENGRUND,Filiale, Lastdate, Lasttime )"
            sSQL = sSQL & " Values "
            sSQL = sSQL & " ( " & sBastARTNR & ", " & lMenge & ", "
            sSQL = sSQL & CLng(sbed) & ", 'A' , '" & caenderung & "','" & caenderGRUND & "', " & bytefil
            sSQL = sSQL & ", '" & DateValue(Now) & "','" & sTime & "')"
            gdBase.Execute sSQL, dbFailOnError
        End If
    End If
    
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3260 Then
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "BestandsminiOrMaxi"
        Fehler.gsFehlertext = "Bei der Änderung des Bestandes ist ein Fehler aufgetreten. " & iStufe & " " & sBastARTNR
        
        Fehlermeldung1
    
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "BestandsminiOrMaxi"
        Fehler.gsFehlertext = "Bei der Änderung des Bestandes ist ein Fehler aufgetreten. " & iStufe
        
        Fehlermeldung1
        Resume Next
    End If
End Sub
Public Function checkMail() As String
    On Error GoTo LOKAL_ERROR
    Dim cPfad As String
    
    checkMail = ""
    
    If gbLokalModus Then Exit Function
    
    cPfad = gcDBPfad        'Datenbankpfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    cPfad = cPfad & "Mail"
    
    frmWKL00.File3.Path = cPfad
    frmWKL00.File3.Pattern = "*.kmd"
    frmWKL00.File3.Refresh
    
    If frmWKL00.File3.ListCount > 0 Then
        checkMail = "Sie haben eine neue Email"
    End If
    
    Exit Function
LOKAL_ERROR:
    If err.Number = 68 Then
        Exit Function
        
    ElseIf err.Number = 76 Then
       
        Exit Function
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "checkMail"
        Fehler.gsFehlertext = "Bei der Prüfung auf Emails "
        
        Fehlermeldung1
    End If
End Function
Public Function unistatweek(txtStatus As TextBox, picprogress As PictureBox) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim gcKW        As String   'Kalenderwoche
    Dim cPfad       As String
    Dim dabaStat    As Database
    Dim ws          As Workspace
    Dim DateHeut    As Date
    Dim sSQL        As String
    Dim iJahr       As Integer
    Dim cDatname    As String
    Dim cFil        As String
    Dim cKW         As String
    Dim t           As Byte
    Dim Task        As String
    Dim hProcess    As Double
    Dim result      As Double
    
    Dim iStufe      As Integer
    
    iStufe = 0
    
    Screen.MousePointer = 11
    unistatweek = False
    iJahr = Year(Now)
    
    iStufe = 1
    
    DateHeut = DateValue(Now)
    gcKW = DatePart("ww", DateHeut)
    If CInt(gcKW) = 1 Then
        gcKW = "53"
        iJahr = iJahr - 1
    ElseIf CInt(gcKW) = 2 And iJahr = 2011 Then
        gcKW = "53"
        iJahr = iJahr - 1
    Else
        gcKW = CInt(gcKW) - 1
    End If
    
    iStufe = 2
    
    cPfad = gcDBPfad        'Datenbankpfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
hier:
    
    If Len(Trim(gcFilNr)) = 1 Then
        cFil = "0" & Trim(gcFilNr)
    ElseIf Len(Trim(gcFilNr)) = 2 Then
        cFil = Trim(gcFilNr)
    Else
        cFil = "XX"
    End If
    
    iStufe = 3
    
    If Len(Trim(gcKW)) = 1 Then
        cKW = "0" & Trim(gcKW)
    ElseIf Len(Trim(gcKW)) = 2 Then
        cKW = Trim(gcKW)
    Else
        cKW = "XX"
    End If
    
    iStufe = 4
    
    If gsStatZusatz <> "" Then
        cDatname = "W" & cKW & Left(gsStatkundnr, 3) & gsStatZusatz
    Else
        cDatname = "W" & cKW & Left(gsStatkundnr, 3) & cFil
    End If
    
    iStufe = 5
    
    loeschNEW cDatname, gdBase
    
    iStufe = 6
    
    
    
    
    
    sSQL = "Select "
    sSQL = sSQL & " ARTNR as ARTIKELNUMMER"
    sSQL = sSQL & " ,BEZEICH as ARTIKELBEZEICHNUNG"
    sSQL = sSQL & " ,LINR as LIEFERANTENNUMMER"
    sSQL = sSQL & " ,Bezeich as LIEFERANTENBEZEICHNUNG "
    sSQL = sSQL & " ,LPZ as LINIENNUMMER"
    sSQL = sSQL & " ,Bezeich as LINIENBEZEICHNUNG "
    sSQL = sSQL & " ,Menge as VERKAUFSMENGE"
    sSQL = sSQL & " ,VKPR as VERKAUFSPREIS"
    sSQL = sSQL & " ,Preis as VERKAUFSWERT"
    sSQL = sSQL & " ,EAN "
    sSQL = sSQL & " ,AGN "
    sSQL = sSQL & " ,Best1 as BESTAND "
    sSQL = sSQL & " ,ADATE as VERKAUFSDATUM "
    sSQL = sSQL & " ,Azeit as KUNDNR"
    sSQL = sSQL & " ,Filiale "
    sSQL = sSQL & " ,KK_ART as AUSWERTUNGSWOCHE "
    sSQL = sSQL & " ,ADATE as AUSWERTUNGSTAG "
    sSQL = sSQL & " into " & cDatname
    sSQL = sSQL & " from Kassjour "
    sSQL = sSQL & " WHERE ((DatePart('ww',kassjour.adate)= " & gcKW & "))"
    sSQL = sSQL & " and year(adate)= " & iJahr
    sSQL = sSQL & " and filiale = " & gcFilNr
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 8
    
    'schrittweise Updaten
    
    'Liefbezeich
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set LIEFERANTENBEZEICHNUNG = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 9
    
    sSQL = " Update " & cDatname & " inner join LISRT on " & cDatname & ".LIEFERANTENNUMMER = LISRT.LINR "
    sSQL = sSQL & " set " & cDatname & ".LIEFERANTENBEZEICHNUNG = LISRT.LIEFBEZ "
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 10
    
    'Linienbezeich
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set LINIENBEZEICHNUNG = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 11
    
    sSQL = " Update " & cDatname & " inner join LINBEZ on " & cDatname & ".LINIENNUMMER = LINBEZ.LPZ "
    sSQL = sSQL & " and " & cDatname & ".LIEFERANTENNUMMER = LINBEZ.LINR "
    sSQL = sSQL & " set " & cDatname & ".LINIENBEZEICHNUNG = LINBEZ.LINBEZEICH "
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 12
    'bestand
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set BESTAND = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 13
    
    sSQL = " Update " & cDatname & " inner join ARTIKEL on " & cDatname & ".ARTIKELNUMMER = ARTIKEL.ARTNR "
    sSQL = sSQL & " set " & cDatname & ".BESTAND = ARTIKEL.BESTAND "
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 14
    
    'KUNDNR
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set KUNDNR = " & Left(gsStatkundnr, 3)
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 15
    
    'AUSWERTUNGSWOCHE
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set AUSWERTUNGSWOCHE = " & gcKW
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 16
    
    'AUSWERTUNGSTAG
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set AUSWERTUNGSTAG = datevalue(now) "
    gdBase.Execute sSQL, dbFailOnError
    
    iStufe = 17
    
    If gcKW = "53" And Year(DateValue(Now)) = 2011 Then
    
    ElseIf gcKW = "53" Then
        If Not Datendrin(cDatname, gdBase) Then
            loeschNEW cDatname, gdBase
            gcKW = "52"
            GoTo hier
        End If
    End If
    
    iStufe = 18
    
    Kill cPfad & "Stat\" & cDatname & ".mdb"
    
    iStufe = 19
        
    Set ws = DBEngine.Workspaces(0)
    Set dabaStat = ws.CreateDatabase(cPfad & "Stat\" & cDatname & ".mdb", dbLangGeneral, dbVersion40)
        TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cDatname
    dabaStat.Close
    
    iStufe = 20
    
'    t = 2
'    Do Until t = 5
'        Task = Shell("LHA" & " a" & Space(1) & cPfad & "Stat\" & cDatname & ".lzh" & Space(1) & cPfad & "Stat\" & cDatname & ".mdb")
'
'        hProcess = OpenProcess(SYNCHRONIZE, False, Task)
'        Result = WaitForSingleObject(hProcess, INFINITE)
'        Result = CloseHandle(hProcess)
'        t = 5
'    Loop
    
    zipDllcheck
    Zip_Files "", cPfad & "Stat\" & cDatname & ".mdb", cPfad & "Stat\" & cDatname & ".lzh", txtStatus
    
    iStufe = 21
        
    loeschNEW cDatname, gdBase
    Kill cPfad & "Stat\" & cDatname & ".mdb"
    
    iStufe = 22
    
'    schickStatistikPerMail cPfad & "Stat\" & cDatname & ".lzh"
    
    unistatweek = True
    Screen.MousePointer = 0
    
Exit Function
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "unistatweek"
        Fehler.gsFehlertext = "Beim Erstellen der Statistik ist ein Fehler aufgetreten. " & iStufe
        
        Fehlermeldung1
'        Resume Next
    End If
    
End Function
Public Function unistatweek_new(txtStatus As TextBox, picprogress As PictureBox) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim gcKW        As String   'Kalenderwoche
    Dim cPfad       As String
    Dim dabaStat    As Database
    Dim ws          As Workspace
    Dim DateHeut    As Date
    Dim sSQL        As String
    Dim iJahr       As Integer
    Dim cDatname    As String
    Dim cFil        As String
    Dim cKW         As String
    Dim t           As Byte
    Dim Task        As String
    Dim hProcess    As Double
    Dim result      As Double
    
    Screen.MousePointer = 11
    unistatweek_new = False
    iJahr = Year(Now)
    
    DateHeut = DateValue(Now)
    gcKW = DatePart("ww", DateHeut)
    If CInt(gcKW) = 1 Then
        gcKW = "53"
        iJahr = iJahr - 1
    Else
        gcKW = CInt(gcKW) - 1
    End If
    
    cPfad = gcDBPfad        'Datenbankpfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
hier:
    
    If Len(Trim(gcFilNr)) = 1 Then
        cFil = "0" & Trim(gcFilNr)
    ElseIf Len(Trim(gcFilNr)) = 2 Then
        cFil = Trim(gcFilNr)
    Else
        cFil = "XX"
    End If
    
    If Len(Trim(gcKW)) = 1 Then
        cKW = "0" & Trim(gcKW)
    ElseIf Len(Trim(gcKW)) = 2 Then
        cKW = Trim(gcKW)
    Else
        cKW = "XX"
    End If
    
    cDatname = "W" & cKW & Left(gsStatkundnr, 3) & cFil
    
    loeschNEW cDatname, gdBase
    sSQL = "Select "
    sSQL = sSQL & " ARTNR as ARTIKELNUMMER"
    sSQL = sSQL & " ,BEZEICH as ARTIKELBEZEICHNUNG"
    sSQL = sSQL & " ,LINR as LIEFERANTENNUMMER"
    sSQL = sSQL & " ,Bezeich as LIEFERANTENBEZEICHNUNG "
    sSQL = sSQL & " ,LPZ as LINIENNUMMER"
    sSQL = sSQL & " ,Bezeich as LINIENBEZEICHNUNG "
    sSQL = sSQL & " ,Menge as VERKAUFSMENGE"
    sSQL = sSQL & " ,VKPR as VERKAUFSPREIS"
    sSQL = sSQL & " ,Preis as VERKAUFSWERT"
    sSQL = sSQL & " ,EAN "
    sSQL = sSQL & " ,AGN "
    sSQL = sSQL & " ,Best1 as BESTAND "
    sSQL = sSQL & " ,ADATE as VERKAUFSDATUM "
    sSQL = sSQL & " ,Azeit as KUNDNR"
    sSQL = sSQL & " ,Filiale "
    sSQL = sSQL & " ,KK_ART as AUSWERTUNGSWOCHE "
    sSQL = sSQL & " ,ADATE as AUSWERTUNGSTAG "
    sSQL = sSQL & " into " & cDatname
    sSQL = sSQL & " from Kassjour "
    sSQL = sSQL & " WHERE ((DatePart('ww',kassjour.adate)= " & gcKW & "))"
    sSQL = sSQL & " and year(adate)= " & iJahr
    sSQL = sSQL & " and filiale = " & gcFilNr
    gdBase.Execute sSQL, dbFailOnError
    
    'schrittweise Updaten
    
    'Liefbezeich
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set LIEFERANTENBEZEICHNUNG = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = " Update " & cDatname & " inner join LISRT on " & cDatname & ".LIEFERANTENNUMMER = LISRT.LINR "
    sSQL = sSQL & " set " & cDatname & ".LIEFERANTENBEZEICHNUNG = LISRT.LIEFBEZ "
    gdBase.Execute sSQL, dbFailOnError
    
    'Linienbezeich
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set LINIENBEZEICHNUNG = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = " Update " & cDatname & " inner join LINBEZ on " & cDatname & ".LINIENNUMMER = LINBEZ.LPZ "
    sSQL = sSQL & " and " & cDatname & ".LIEFERANTENNUMMER = LINBEZ.LINR "
    sSQL = sSQL & " set " & cDatname & ".LINIENBEZEICHNUNG = LINBEZ.LINBEZEICH "
    gdBase.Execute sSQL, dbFailOnError
    
    'bestand
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set BESTAND = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = " Update " & cDatname & " inner join ARTIKEL on " & cDatname & ".ARTIKELNUMMER = ARTIKEL.ARTNR "
    sSQL = sSQL & " set " & cDatname & ".BESTAND = ARTIKEL.BESTAND "
    gdBase.Execute sSQL, dbFailOnError
    
    'KUNDNR
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set KUNDNR = " & Left(gsStatkundnr, 3)
    gdBase.Execute sSQL, dbFailOnError
    
    'AUSWERTUNGSWOCHE
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set AUSWERTUNGSWOCHE = " & gcKW
    gdBase.Execute sSQL, dbFailOnError
    
    'AUSWERTUNGSTAG
    sSQL = " Update " & cDatname
    sSQL = sSQL & " set AUSWERTUNGSTAG = datevalue(now) "
    gdBase.Execute sSQL, dbFailOnError
    
    If gcKW = "53" Then
        If Not Datendrin(cDatname, gdBase) Then
            loeschNEW cDatname, gdBase
            gcKW = "52"
            GoTo hier
        End If
    End If
    
    Kill cPfad & "Stat\" & cDatname & ".mdb"
        
    Set ws = DBEngine.Workspaces(0)
    Set dabaStat = ws.CreateDatabase(cPfad & "Stat\" & cDatname & ".mdb", dbLangGeneral, dbVersion40)
        TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cDatname
    dabaStat.Close
    
'    t = 2
'    Do Until t = 5
'        Task = Shell("LHA" & " a" & Space(1) & cPfad & "Stat\" & cDatname & ".lzh" & Space(1) & cPfad & "Stat\" & cDatname & ".mdb")
'
'        hProcess = OpenProcess(SYNCHRONIZE, False, Task)
'        Result = WaitForSingleObject(hProcess, INFINITE)
'        Result = CloseHandle(hProcess)
'        t = 5
'    Loop

    zipDllcheck
    Zip_Files "", cPfad & "Stat\" & cDatname & ".mdb", cPfad & "Stat\" & cDatname & ".lzh", txtStatus
    
    schickStatistikPerMail cPfad & "Stat\" & cDatname & ".lzh"
        
    loeschNEW cDatname, gdBase
    Kill cPfad & "Stat\" & cDatname & ".mdb"
    
    unistatweek_new = True
    Screen.MousePointer = 0
    
Exit Function
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "unistatweek_new"
        Fehler.gsFehlertext = "Beim Erstellen der Statistik ist ein Fehler aufgetreten."
        
        Fehlermeldung1
'        Resume Next
    End If
    
End Function
Public Function unistatMonat() As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim gcMo        As String   'Monat
    Dim cPfad       As String
    Dim dabaStat    As Database
    Dim ws          As Workspace
    Dim DateHeut    As Date
    Dim sSQL        As String
    Dim iJahr       As Integer
    Dim cDatname    As String
    Dim cKJname     As String
    Dim cZUname     As String
    Dim cABname     As String
    Dim cGAname     As String
    Dim cFil        As String
    Dim cMo         As String
    Dim t           As Byte
    Dim Task        As String
    Dim hProcess    As Double
    Dim result      As Double
    Dim rsrs        As Recordset
    Dim lDate       As Long
    
    Screen.MousePointer = 11
    unistatMonat = False
    iJahr = Year(Now)
    
    gcMo = Month(DateValue(Now))
    If gcMo = 1 Then
        gcMo = "12"
        iJahr = iJahr - 1
    Else
        gcMo = CInt(gcMo) - 1
    End If
    
    cPfad = gcDBPfad        'Datenbankpfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    If Len(Trim(gcFilNr)) = 1 Then
        cFil = "0" & Trim(gcFilNr)
    ElseIf Len(Trim(gcFilNr)) = 2 Then
        cFil = Trim(gcFilNr)
    Else
        cFil = "XX"
    End If
    
    If Len(Trim(gcMo)) = 1 Then
        cMo = "0" & Trim(gcMo)
    ElseIf Len(Trim(gcMo)) = 2 Then
        cMo = Trim(gcMo)
    Else
        cMo = "XX"
    End If
    
    cDatname = "M" & cMo & Left(gsMStatkundnr, 3) & cFil
    
    Kill cPfad & "Stat\" & cDatname & ".mdb"
        
    Set ws = DBEngine.Workspaces(0)
    Set dabaStat = ws.CreateDatabase(cPfad & "Stat\" & cDatname & ".mdb", dbLangGeneral, dbVersion40)
    
    'Kassjour
    
    cKJname = "K" & cMo & Left(gsMStatkundnr, 3) & cFil
    
    loeschNEW cKJname, gdBase
    
    sSQL = "Create Table " & cKJname
    sSQL = sSQL & "("
    sSQL = sSQL & " ARTNR LONG "
    sSQL = sSQL & ", BEZEICH TEXT(35) "
    sSQL = sSQL & ", MENGE INTEGER "
    sSQL = sSQL & ", PREIS SINGLE "
    sSQL = sSQL & ", ADATE DATETIME "
    sSQL = sSQL & ", AZEIT Text(8) "
    sSQL = sSQL & ", KUNDNR LONG "
    sSQL = sSQL & ", FILIALE BYTE "
    sSQL = sSQL & ", KASNUM BYTE "
    sSQL = sSQL & ", LINR long"
    sSQL = sSQL & ", LPZ INTEGER"
    sSQL = sSQL & ", AGN Long "
    sSQL = sSQL & ", EAN Text(13)"
    sSQL = sSQL & ", MWST Text(1)"
    sSQL = sSQL & ", EKPR SINGLE "
    sSQL = sSQL & ", VKPR SINGLE "
    sSQL = sSQL & ", MOPREIS SINGLE "
    sSQL = sSQL & ", BELEGNR INTEGER "
    sSQL = sSQL & ", BEST1 INTEGER "
    sSQL = sSQL & ", RABKENN Text(1)"
    sSQL = sSQL & ", KK_ART Text(2)"
    sSQL = sSQL & ", BEDIENER integer "
    sSQL = sSQL & ", UMS_OK Text(1)"
    sSQL = sSQL & ", ZBONNR integer"
    sSQL = sSQL & ", ABOK BIT"
    sSQL = sSQL & ")"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into " & cKJname & " Select * from Kassjour"
    sSQL = sSQL & " WHERE  Month(adate) = " & gcMo & " "
    sSQL = sSQL & " and year(adate)= " & iJahr
    gdBase.Execute sSQL, dbFailOnError
    
    TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cKJname
    
    'Kassjour Ende
    
    'Artikel Bestand
    cABname = "AB" & cMo & Left(gsMStatkundnr, 3) & cFil
    
    loeschNEW cABname, gdBase
    
    sSQL = "Create Table " & cABname
    sSQL = sSQL & "("
    sSQL = sSQL & " ARTNR LONG "
    sSQL = sSQL & ", Bestand LONG "
    sSQL = sSQL & ")"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into " & cABname & " Select ARTNR,BESTAND from ARTIKEL "
    sSQL = sSQL & " WHERE  Bestand > 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cABname
    'Ende Artikel Bestand
    
    'GANALYSE
    
    cGAname = "GA" & cMo & Left(gsMStatkundnr, 3) & cFil
    
    loeschNEW cGAname, gdBase
    
    sSQL = "select top 1 datum from GANALYSEALL order by datum desc"
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!Datum) Then
            lDate = rsrs!Datum
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    sSQL = "select * into " & cGAname & " from GANALYSEALL "
    sSQL = sSQL & " WHERE  datum = " & lDate
    gdBase.Execute sSQL, dbFailOnError
    
    
    TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cGAname
    
    'Ende GANALYSE
    
    'Zugang
    
    If DateValue(Now) < #12/15/2008# Then
        
        cZUname = "ZU" & cMo & Left(gsMStatkundnr, 3) & cFil
        
        loeschNEW cZUname, gdBase
        
        sSQL = "Create Table " & cZUname
        sSQL = sSQL & " ( "
        sSQL = sSQL & " ARTNR LONG"
        sSQL = sSQL & ", BEZEICH TEXT(35)"
        sSQL = sSQL & ", LINR LONG"
        sSQL = sSQL & ", LFNR LONG"
        sSQL = sSQL & ", EAN TEXT(13)"
        sSQL = sSQL & ", LIBESNR TEXT(13)"
        sSQL = sSQL & ", ADATE DATETIME"
        sSQL = sSQL & ", UHRZEIT TEXT(8)"
        sSQL = sSQL & ", BEDNU LONG"
        sSQL = sSQL & ", BEDNAME TEXT(35)"
        sSQL = sSQL & ", FILIALNR LONG"
        sSQL = sSQL & ", BESTANDALT LONG"
        sSQL = sSQL & ", BEWEGUNG LONG"
        sSQL = sSQL & ", BESTANDNEU LONG"
        sSQL = sSQL & ", EKPR SINGLE"
        sSQL = sSQL & ", REK SINGLE"
        sSQL = sSQL & ", LS TEXT(20)"
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into " & cZUname & " Select * from ZUGANG"
        sSQL = sSQL & " WHERE adate >= #01/01/2007# "
        gdBase.Execute sSQL, dbFailOnError
        
        TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cZUname
    
    Else
    
        cZUname = "ZU" & cMo & Left(gsMStatkundnr, 3) & cFil
        
        loeschNEW cZUname, gdBase
        
        sSQL = "Create Table " & cZUname
        sSQL = sSQL & " ( "
        sSQL = sSQL & " ARTNR LONG"
        sSQL = sSQL & ", BEZEICH TEXT(35)"
        sSQL = sSQL & ", LINR LONG"
        sSQL = sSQL & ", LFNR LONG"
        sSQL = sSQL & ", EAN TEXT(13)"
        sSQL = sSQL & ", LIBESNR TEXT(13)"
        sSQL = sSQL & ", ADATE DATETIME"
        sSQL = sSQL & ", UHRZEIT TEXT(8)"
        sSQL = sSQL & ", BEDNU LONG"
        sSQL = sSQL & ", BEDNAME TEXT(35)"
        sSQL = sSQL & ", FILIALNR LONG"
        sSQL = sSQL & ", BESTANDALT LONG"
        sSQL = sSQL & ", BEWEGUNG LONG"
        sSQL = sSQL & ", BESTANDNEU LONG"
        sSQL = sSQL & ", EKPR SINGLE"
        sSQL = sSQL & ", REK SINGLE"
        sSQL = sSQL & ", LS TEXT(20)"
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into " & cZUname & " Select * from ZUGANG"
        sSQL = sSQL & " WHERE  Month(adate) = " & gcMo & " "
        sSQL = sSQL & " and year(adate)= " & iJahr
        gdBase.Execute sSQL, dbFailOnError
        
        TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cZUname
        
    End If
    'ZUgang Ende
    
    loeschNEW cDatname, gdBase
    sSQL = "Select "
    sSQL = sSQL & " Datum "
    sSQL = sSQL & " ,Umsg1 "
    sSQL = sSQL & " ,Umsv1 "
    sSQL = sSQL & " ,Umse1 "
    sSQL = sSQL & " ,Umso1"
    sSQL = sSQL & " ,Kunz1 "
    sSQL = sSQL & " ,Ekpr1 "
    sSQL = sSQL & " ,Kred1 "
    sSQL = sSQL & " into " & cDatname
    sSQL = sSQL & " from Umsatz "
    sSQL = sSQL & " WHERE  Month(Datum) = " & gcMo & " "
    sSQL = sSQL & " and year(Datum)= " & iJahr
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cDatname
    dabaStat.Close
        
    loeschNEW cKJname, gdBase
    loeschNEW cDatname, gdBase
    
    loeschNEW cABname, gdBase
    loeschNEW cGAname, gdBase
    
    unistatMonat = True
    Screen.MousePointer = 0
    
Exit Function
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "unistatMonat"
        Fehler.gsFehlertext = "Beim Erstellen der Statistik ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Function
Public Function unistatMonat1Mal(txtStatus As TextBox, picprogress As PictureBox) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim gcMo        As String   'Monat
    Dim cPfad       As String
    Dim dabaStat    As Database
    Dim ws          As Workspace
    Dim DateHeut    As Date
    Dim sSQL        As String
    Dim iJahr       As Integer
    Dim cDatname    As String
    Dim cKJname     As String
    Dim cZUname     As String
    Dim cFil        As String
    Dim cMo         As String
    Dim t           As Byte
    Dim Task        As String
    Dim hProcess    As Double
    Dim result      As Double
    
    Screen.MousePointer = 11
    unistatMonat1Mal = False
    iJahr = Year(Now)
    
    cPfad = gcDBPfad        'Datenbankpfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    If Len(Trim(gcFilNr)) = 1 Then
        cFil = "0" & Trim(gcFilNr)
    ElseIf Len(Trim(gcFilNr)) = 2 Then
        cFil = Trim(gcFilNr)
    Else
        cFil = "XX"
    End If
    
    cDatname = "M00" & Left(gsMStatkundnr, 3) & cFil
    
    Kill cPfad & "Stat\" & cDatname & ".mdb"
        
    Set ws = DBEngine.Workspaces(0)
    Set dabaStat = ws.CreateDatabase(cPfad & "Stat\" & cDatname & ".mdb", dbLangGeneral, dbVersion40)
    
    'Kassjour
    cKJname = "K00" & Left(gsMStatkundnr, 3) & cFil
    
    loeschNEW cKJname, gdBase
    
    sSQL = "Create Table " & cKJname
    sSQL = sSQL & "("
    sSQL = sSQL & " ARTNR LONG "
    sSQL = sSQL & ", BEZEICH TEXT(35) "
    sSQL = sSQL & ", MENGE INTEGER "
    sSQL = sSQL & ", PREIS SINGLE "
    sSQL = sSQL & ", ADATE DATETIME "
    sSQL = sSQL & ", AZEIT Text(8) "
    sSQL = sSQL & ", KUNDNR LONG "
    sSQL = sSQL & ", FILIALE BYTE "
    sSQL = sSQL & ", KASNUM BYTE "
    sSQL = sSQL & ", LINR long"
    sSQL = sSQL & ", LPZ INTEGER"
    sSQL = sSQL & ", AGN Long "
    sSQL = sSQL & ", EAN Text(13)"
    sSQL = sSQL & ", MWST Text(1)"
    sSQL = sSQL & ", EKPR SINGLE "
    sSQL = sSQL & ", VKPR SINGLE "
    sSQL = sSQL & ", MOPREIS SINGLE "
    sSQL = sSQL & ", BELEGNR INTEGER "
    sSQL = sSQL & ", BEST1 INTEGER "
    sSQL = sSQL & ", RABKENN Text(1)"
    sSQL = sSQL & ", KK_ART Text(2)"
    sSQL = sSQL & ", BEDIENER integer "
    sSQL = sSQL & ", UMS_OK Text(1)"
    sSQL = sSQL & ", ZBONNR integer"
    sSQL = sSQL & ", ABOK BIT"
    sSQL = sSQL & ")"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into " & cKJname & " Select * from Kassjour"
    sSQL = sSQL & " WHERE adate >= #01/01/2008# "
    gdBase.Execute sSQL, dbFailOnError
    
    TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cKJname
    
    'Kassjour Ende
    
    'Zugang
    cZUname = "ZU" & cMo & Left(gsMStatkundnr, 3) & cFil
    
    loeschNEW cZUname, gdBase
    
    sSQL = "Create Table " & cZUname
    sSQL = sSQL & " ( "
    sSQL = sSQL & " ARTNR LONG"
    sSQL = sSQL & ", BEZEICH TEXT(35)"
    sSQL = sSQL & ", LINR LONG"
    sSQL = sSQL & ", LFNR LONG"
    sSQL = sSQL & ", EAN TEXT(13)"
    sSQL = sSQL & ", LIBESNR TEXT(13)"
    sSQL = sSQL & ", ADATE DATETIME"
    sSQL = sSQL & ", UHRZEIT TEXT(8)"
    sSQL = sSQL & ", BEDNU LONG"
    sSQL = sSQL & ", BEDNAME TEXT(35)"
    sSQL = sSQL & ", FILIALNR LONG"
    sSQL = sSQL & ", BESTANDALT LONG"
    sSQL = sSQL & ", BEWEGUNG LONG"
    sSQL = sSQL & ", BESTANDNEU LONG"
    sSQL = sSQL & ", EKPR SINGLE"
    sSQL = sSQL & ", REK SINGLE"
    sSQL = sSQL & ", LS TEXT(20)"
    sSQL = sSQL & " ) "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into " & cZUname & " Select * from ZUGANG"
    sSQL = sSQL & " WHERE adate >= #01/01/2008# "
    gdBase.Execute sSQL, dbFailOnError
    
    TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cZUname
    
    'ZUgang Ende
    
    loeschNEW cDatname, gdBase
    
    sSQL = "Select "
    sSQL = sSQL & " Datum "
    sSQL = sSQL & " ,Umsg1 "
    sSQL = sSQL & " ,Umsv1 "
    sSQL = sSQL & " ,Umse1 "
    sSQL = sSQL & " ,Umso1"
    sSQL = sSQL & " ,Kunz1 "
    sSQL = sSQL & " ,Ekpr1 "
    sSQL = sSQL & " ,Kred1 "
    sSQL = sSQL & " into " & cDatname
    sSQL = sSQL & " from Umsatz "
    sSQL = sSQL & " WHERE Datum >= #01/01/2008# "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    
    TransferTab gdBase, cPfad & "Stat\" & cDatname & ".mdb", cDatname
    dabaStat.Close
    
    Kill cPfad & "Stat\" & cDatname & ".lzh"
    
    zipDllcheck
    Zip_Files "", cPfad & "Stat\" & cDatname & ".mdb", cPfad & "Stat\" & cDatname & ".lzh", txtStatus
    
    Kill cPfad & "Stat\" & cDatname & ".mdb"
    
    loeschNEW cKJname, gdBase
    loeschNEW cDatname, gdBase

    unistatMonat1Mal = True
    Screen.MousePointer = 0
    
Exit Function
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "unistatMonat1Mal"
        Fehler.gsFehlertext = "Beim Erstellen der Statistik ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Function
Public Function rechnername() As String
    On Error GoTo LOKAL_ERROR

    Dim RetVal      As Long
    Dim Puffer      As String * 256
    
    rechnername = ""
    
    RetVal = GetComputerName(Puffer, Len(Puffer))
    If RetVal <> 0 Then
        rechnername = Left$(Puffer, InStr(1, Puffer, vbNullChar) - 1)
        rechnername = SwapStr(rechnername, ".", "")
        rechnername = SwapStr(rechnername, "'", "")
        rechnername = SwapStr(rechnername, "!", "")
        rechnername = SwapStr(rechnername, "-", "")
        rechnername = SwapStr(rechnername, " ", "")
        rechnername = SwapStr(rechnername, "  ", "")
        rechnername = SwapStr(rechnername, "   ", "")
        rechnername = SwapStr(rechnername, "_", "")
        rechnername = SwapStr(rechnername, "Ü", "UE")
        rechnername = SwapStr(rechnername, "ü", "ue")
    End If
    
    Exit Function
LOKAL_ERROR:
   
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "rechnername"
    Fehler.gsFehlertext = "Beim Ermitteln des Computernamens ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Sub schreibeProtokollgArtikel(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim ctmp        As String
    Dim cZeil       As String
    Dim sRechner    As String
    
    sRechner = rechnername
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM.YY")
    
    cdatei = "geloeschteArtikel"
    
    cZeil = ""
    cSatz = cPfad & cdatei & ".txt"
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    cZeil = ctmp & Space(1) & sTime & Space(1) & sRechner & Space(1) & gcUserName & "(" & gcBedienerNr & ")" & vbCrLf & sZeile & vbCrLf
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cZeil & vbCrLf
    
    
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "schreibeProtokollgArtikel"
    Fehler.gsFehlertext = "Beim Erstellen des allgemeinen Protokolls ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub schreibeProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim sRechner    As String
    Dim ctmp        As String
    Dim cZeil       As String
    
    sRechner = rechnername
    sRechner = SwapStr(sRechner, ".", "")
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM.YY")
    
    cdatei = "WK" & ctmp
    cdatei = SwapStr(cdatei, ".", "")
    
    cZeil = ""
    cSatz = cPfad & cdatei & ".RTF"
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    cZeil = sTime & Space(1) & sRechner & Space(1) & sZeile
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cZeil & vbCrLf
    
    
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreibeProtokoll"
        Fehler.gsFehlertext = "Beim Erstellen des allgemeinen Protokolls ist ein Fehler aufgetreten."
        
        Fehlermeldung1
End Sub
Public Sub schreibeProtokollFTP(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim sRechner    As String
    Dim ctmp        As String
    Dim cZeil       As String
    
    sRechner = rechnername
    sRechner = SwapStr(sRechner, ".", "")
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM.YY")
    
    cdatei = "FTP" & ctmp
    cdatei = SwapStr(cdatei, ".", "")
    
    cZeil = ""
    cSatz = cPfad & cdatei & ".TXT"
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    cZeil = sTime & Space(1) & sRechner & Space(1) & sZeile
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cZeil & vbCrLf
    
    
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreibeProtokollFTP"
        Fehler.gsFehlertext = "Beim Erstellen des allgemeinen Protokolls ist ein Fehler aufgetreten."
        
        Fehlermeldung1
End Sub
Public Sub schreibeProtowaage(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    
    Dim ctmp        As String
    Dim cZeil       As String
    
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = App.Path
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    

    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM.YY")
    
    cdatei = "WAAGE.txt"
    
    
    cZeil = ""
    cSatz = cPfad & cdatei
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    cZeil = sTime & Space(1) & sZeile
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cZeil & vbCrLf
    
    
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreibeProtowaage"
        Fehler.gsFehlertext = "Beim Erstellen des allgemeinen Protokolls ist ein Fehler aufgetreten."
        
        Fehlermeldung1
End Sub
Public Sub schreibeBEDProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim sRechner    As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sRechner = rechnername
    sRechner = SwapStr(sRechner, ".", "")
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "BEDPRO\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cdatei = gcUserName & "(" & gcBedienerNr & ")"
    cdatei = SwapStr(cdatei, ".", "")
    
    
    cSatz = cPfad & cdatei & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & " am PC: " & sRechner
    cZeile1 = cZeile1 & Space(50 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        
        
        Close iFileNr
        
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeBEDProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Bediener - Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeProtoAbschluss(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "ABPRO\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "ABPROTO.TXT"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime
    cZeile1 = cZeile1 & Space(2) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    ElseIf err.Number = 76 Then
        Exit Sub
        
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreibeProtoAbschluss"
        Fehler.gsFehlertext = "Beim Erstellen des Abschlussprotokolls ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub schreibeProtoREMAbschluss(sTab As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "ABPRO\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    cDatum = SwapStr(cDatum, ".", "")
    cSatz = cPfad & "Z" & cDatum & ".TXT"
    
    
    

    Dim ctmp As String
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim dWert As Double
    Dim dSumme As Double
    Dim dUmsatz As Double
   
    Dim cMWSK As String
    
    Dim dKunden As Double
    Dim dScheck As Double
    Dim dKredit As Double
    Dim dKarte As Double
    Dim dLast As Double
    Dim dUmsBar As Double
    Dim dUmsScheck As Double
    Dim dZhlgGutsch As Double
    Dim Datvon As String
    Dim Datbis As String
    
    Dim GESU        As Single 'Gesamtumsatz
    Dim UvMWST      As Single
    Dim UeMWST      As Single
    Dim kredU       As Single
    Dim Kundenz     As Long
    Dim StornoW     As Single
    Dim Kuschnitt   As Single
    
    UvMWST = 0
    UeMWST = 0
    
    Datvon = ""
    Set rsrs = gdBase.OpenRecordset("Select min(adate)  as auswert  from " & sTab)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!auswert) Then
            Datvon = Format$(rsrs!auswert, "DD.MM.YY")
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Datbis = ""
    Set rsrs = gdBase.OpenRecordset("Select max(adate)  as auswert  from " & sTab)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!auswert) Then
            Datbis = Format$(rsrs!auswert, "DD.MM.YY")
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    cSQL = "Select "
    cSQL = cSQL & " SUM(UMS_BAR) as SUMS_BAR"
    cSQL = cSQL & ", SUM(UMS_KRED) as SUMS_KRED"
    cSQL = cSQL & ", SUM(UMS_KARTE) as SUMS_KARTE"
    cSQL = cSQL & ", SUM(UMS_SCHECK) as SUMS_SCHEC"
    cSQL = cSQL & ", SUM(UMS_LAST) as SUMS_LAST"
    cSQL = cSQL & ", SUM(STORNO_GES) as SSTORNO_GE"
    cSQL = cSQL & ", SUM(ZHLGGUTSCH) as SZHLGGUTSC"
    cSQL = cSQL & ", SUM(KUNDENZAHL) as SKUNDENZAH"
    cSQL = cSQL & " from " & sTab
    Set rsrs = gdBase.OpenRecordset(cSQL)
    
    If Not rsrs.EOF Then
        rsrs.MoveFirst
    
        dLast = 0
        If Not IsNull(rsrs!SUMS_LAST) Then
            dLast = rsrs!SUMS_LAST
        End If
       
        dUmsBar = 0
        If Not IsNull(rsrs!SUMS_BAR) Then
            dUmsBar = rsrs!SUMS_BAR
        End If
        
        dUmsScheck = 0
        If Not IsNull(rsrs!SUMS_SCHEC) Then
            dUmsScheck = rsrs!SUMS_SCHEC
        End If
        
        dKredit = 0
        If Not IsNull(rsrs!SUMS_KRED) Then
            dKredit = rsrs!SUMS_KRED
            kredU = dKredit
        End If
        
        dKarte = 0
        If Not IsNull(rsrs!SUMS_KARTE) Then
            dKarte = rsrs!SUMS_KARTE
        End If
        
        dZhlgGutsch = 0
        If Not IsNull(rsrs!SZHLGGUTSC) Then
            dZhlgGutsch = rsrs!SZHLGGUTSC
        End If
        GESU = dZhlgGutsch + dKarte + dKredit + dUmsScheck + dUmsBar + dLast
        
        Kundenz = 0
        If Not IsNull(rsrs!SKUNDENZAH) Then
            Kundenz = rsrs!SKUNDENZAH
        End If
       
        If Kundenz = 0 Then Kundenz = 1
        Kuschnitt = GESU / Kundenz
    
        StornoW = 0
        If Not IsNull(rsrs!SSTORNO_GE) Then
            StornoW = rsrs!SSTORNO_GE
        End If
        
        
    End If
    rsrs.Close: Set rsrs = Nothing

    cSQL = "Select AMWSK, SUM(APREIS) as UMSATZ from AFCBSUM "
    cSQL = cSQL & "where  AARTNR <> 666666 and UMS_OK <> 'N' group by AMWSK "
    
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        Do While Not rsrs.EOF
            If Not IsNull(rsrs!AMWSK) Then
                cMWSK = rsrs!AMWSK
            End If
            
            If Not IsNull(rsrs!UMSATZ) Then
                dUmsatz = rsrs!UMSATZ
            Else
                dUmsatz = 0
            End If
            
            Select Case cMWSK
                Case Is = "V"
                    UvMWST = dUmsatz
                    
                Case Is = "E"
                    UeMWST = dUmsatz
                Case Is = "O"
                    
                Case Else
                
            End Select
            rsrs.MoveNext
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Dim cZeileX(9)  As String
    Dim k           As Integer
    
    GESU = UvMWST + UeMWST
    
    cZeileX(0) = "Kassenstatistik von " & Datvon & " bis " & Datbis
    cZeileX(2) = "Gesamtumsatz:     " & Space(20 - Len(Format$(GESU, "########.00 " & gcWaehrung))) & Format$(GESU, "########.00 " & gcWaehrung)
    cZeileX(3) = "U_v.MwSt:         " & Space(20 - Len(Format$(UvMWST, "########.00 " & gcWaehrung))) & Format$(UvMWST, "########.00 " & gcWaehrung)
    cZeileX(4) = "U_e.Mwst:         " & Space(20 - Len(Format$(UeMWST, "########.00 " & gcWaehrung))) & Format$(UeMWST, "########.00 " & gcWaehrung)
    cZeileX(5) = "Kreditumsatz:     " & Space(20 - Len(Format$(kredU, "########.00 " & gcWaehrung))) & Format$(kredU, "########.00 " & gcWaehrung)
    cZeileX(6) = "Storno:           " & Space(20 - Len(Format$(StornoW, "########.00 " & gcWaehrung))) & Format$(StornoW, "########.00 " & gcWaehrung)
    cZeileX(7) = "Kundenzahl:       " & Space(16 - Len(Format$(Kundenz, "########00"))) & Format$(Kundenz, "########00")
    cZeileX(8) = "Kundenschnitt:    " & Space(20 - Len(Format$(Kuschnitt, "########.00 " & gcWaehrung))) & Format$(Kuschnitt, "########.00 " & gcWaehrung)
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
    For k = 0 To 9
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeileX(k) & vbCrLf
    Next k
    Close iFileNr
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    ElseIf err.Number = 76 Then
        Exit Sub
        
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreibeProtoREMAbschluss"
        Fehler.gsFehlertext = "Beim Erstellen des Abschlussprotokolls ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub schreibeBEDIdentProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim sRechner    As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sRechner = rechnername
    sRechner = SwapStr(sRechner, ".", "")
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "BEDPRO\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cdatei = gcIdentUserName & "(" & gcIdentBedienerNr & ")"
    cdatei = SwapStr(cdatei, ".", "")
    
    
    cSatz = cPfad & cdatei & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & " am PC: " & sRechner
    cZeile1 = cZeile1 & Space(50 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        
        
        Close iFileNr
        
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeBEDIdentProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Bediener - Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeFProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "FProtokoll" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeFProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeWVEingangProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "WarenVerteilungen" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeWVEingangProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeWVExpressProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "WarenExpress" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeWVExpressProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeYProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "YProtokoll" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeYProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeProtokollUNITXT(sZeile As String, stxtDatname As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim ctmp        As String
    Dim cZeil       As String
    Dim sRechner    As String

    sRechner = rechnername
    
    sTime = TimeValue(Now)
    sTime = Right$(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM.YY")
    
    cdatei = stxtDatname
    
    cZeil = ""
    cSatz = cPfad & cdatei & ".TXT"
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    cZeil = ctmp & Space(1) & sTime & Space(2) & sRechner & vbCrLf & sZeile & vbCrLf
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cZeil & vbCrLf
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul2"
    Fehler.gsFunktion = "schreibeProtokollUNITXT"
    Fehler.gsFehlertext = "Beim Erstellen des allgemeinen Protokolls ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub schreibeProtokollMonitorTXT(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim ctmp        As String
    Dim cZeil       As String
    
    sTime = TimeValue(Now)
    sTime = Right$(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM.YY")
    
    cdatei = "Monitor"
    
    cZeil = ""
    cSatz = cPfad & cdatei & ".TXT"
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    cZeil = ctmp & Space(1) & sTime & Space(2) & sZeile
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cZeil & vbCrLf
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul2"
    Fehler.gsFunktion = "schreibeProtokollMonitorTXT"
    Fehler.gsFehlertext = "Beim Erstellen des allgemeinen Protokolls ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub schreibeProtokollVPNTXT(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim ctmp        As String
    Dim cZeil       As String
    
    sTime = TimeValue(Now)
    sTime = Right$(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM.YY")
    
    cdatei = "VPN_Unterbrechnung"
    
    cZeil = ""
    cSatz = cPfad & cdatei & ".TXT"
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    cZeil = ctmp & Space(1) & sTime & Space(2) & sZeile
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cZeil & vbCrLf
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul2"
    Fehler.gsFunktion = "schreibeProtokollVPNTXT"
    Fehler.gsFehlertext = "Beim Erstellen des allgemeinen Protokolls ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub schreibeKBProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "BonusPro" & ".rtf"
    
    cZeile1 = ""
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    ElseIf err.Number = 76 Then
        Exit Sub
        
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "schreibeKBProtokoll"
        Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub schreibeUEProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "UEProtokoll" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1)
    cZeile1 = cZeile1 & Space(40 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeUEProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeSUProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    
    
    
    cSatz = cPfad & "SUProtokoll" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeSUProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeIProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "IProtokoll" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeIProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeStreckeProtokoll(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "StreckeProtokoll" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeStreckeProtokoll"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Sub schreibeFilProt(sZeile As String, cdat As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & cdat & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeFilProt"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub

Public Sub schreibeKUPKZProt(sZeile As String)
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim lWert       As Long
    Dim cSatz       As String
    Dim cPfad       As String
    Dim sTime       As String
    Dim cDatum      As String
    Dim cZeile1     As String
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "LPROTOK\"

    lWert = DateValue(Now)
    cDatum = Format$(lWert, "DD.MM.YY")
    
    cSatz = cPfad & "KuPkzPROT" & ".txt"
    cZeile1 = ""
    
    cZeile1 = cDatum & Space(1) & sTime & Space(1) & gcUserName
    cZeile1 = cZeile1 & Space(60 - Len(cZeile1)) & sZeile
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    Dim cZeile2 As String
    If LOF(iFileNr) > 0 Then
        cZeile2 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile2
        Close iFileNr
    Else
        Close iFileNr
        Kill cSatz
        
    End If
    
    Kill cSatz
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        Put #iFileNr, lPos, cZeile1 & vbCrLf
    
        lPos = LOF(iFileNr)
        lPos = lPos + 1
        
        Put #iFileNr, lPos, cZeile2
        
    Close iFileNr
    
  Exit Sub
LOKAL_ERROR:
        If err.Number = 53 Then
            Resume Next
        ElseIf err.Number = 76 Then
            Exit Sub
            
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "schreibeKUPKZProt"
            Fehler.gsFehlertext = "Beim Erstellen des Protokolls ist ein Fehler aufgetreten."
            
            Fehlermeldung1
        End If
End Sub
Public Function OpenBEDProtokoll(cUser As String, cbednu As String) As String
    On Error GoTo LOKAL_ERROR
    
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim cSatz       As String
    Dim cdatei      As String
    Dim cPfad       As String
    Dim cZeile1     As String
    
    OpenBEDProtokoll = ""
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    cPfad = cPfad & "BEDPRO\"

    cdatei = cUser & "(" & cbednu & ")"
    cdatei = SwapStr(cdatei, ".", "")
    
    
    cSatz = cPfad & cdatei & ".txt"
    cZeile1 = ""
    
    iFileNr = FreeFile
    Open cSatz For Binary As #iFileNr
    
    If LOF(iFileNr) > 0 Then
        cZeile1 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cZeile1
        Close iFileNr
        OpenBEDProtokoll = cZeile1
    Else
        Close iFileNr
        Kill cSatz
        OpenBEDProtokoll = ""
    End If
  Exit Function
LOKAL_ERROR:
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "OpenBEDProtokoll"
        Fehler.gsFehlertext = "Beim Öffnen des Bediener - Protokolls ist ein Fehler aufgetreten."
        
        Fehlermeldung1
End Function
Public Sub SchreibeWKVersionen()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim cFirma      As String
    Dim rsrs        As Recordset
    Dim cPfad       As String
    Dim cPfad1      As String
    Dim ws          As Workspace
    Dim WKV         As Database
    Dim sRechner    As String
    
    cPfad = gcDBPfad        'Datenbankpfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "Protok\WKV.mdb"
    
    Kill cPfad
    
    Set WKV = CreateDatabase(cPfad, dbLangGeneral, dbVersion40)
    WKV.Close
'
'    If NewTableSuchenDBKombi("WKVERSIONEN", gdBase) = False Then
'        CreateTable "WKVERSIONEN", gdBase
'    End If
    

    
    sRechner = rechnername
    sRechner = SwapStr(sRechner, ".", "")
    
    sSQL = "Delete from WKVERSIONEN where Datum < " & CLng(DateValue(Now) - 90)
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Delete from WKVERSIONEN where PCNAME = '" & sRechner & "'"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Select * from FIRMA"
    Set rsrs = gdBase.OpenRecordset(sSQL)
    
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!name) Then
            cFirma = rsrs!name
        Else
            cFirma = "keine Angabe"
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    cFirma = SwapStr(cFirma, "'", "")
    cFirma = SwapStr(cFirma, Chr(34), " ")
    
    sSQL = "Insert into WKVERSIONEN (Firma,Filiale,PCNAME,WKVERS,Datum)"
    sSQL = sSQL & " values ('" & cFirma & "'," & CByte(gcFilNr) & ",'" & sRechner & "'," & WKVersion & " , '" & DateValue(Now) & "')"
    gdBase.Execute sSQL, dbFailOnError
    
    TransferTab gdBase, cPfad, "WKVERSIONEN"
    
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SchreibeWKVersionen"
        Fehler.gsFehlertext = "Beim Erstellen der Tabelle WKVERSIONEN ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub SchreibeLOG()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim cFirma      As String
    Dim rsrs        As Recordset
    Dim cPfad       As String
    Dim cPfad1      As String
    Dim ws          As Workspace
    Dim WKV         As Database
    
    cPfad = gcDBPfad        'Datenbankpfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "Protok\LOGWK.mdb"
    
    Kill cPfad
    
    Set WKV = CreateDatabase(cPfad, dbLangGeneral, dbVersion40)
    WKV.Close
    
    loeschNEW "LOGWK", gdBase
    CreateTable "LOGWK", gdBase
    
    sSQL = "Select * from FIRMA"
    Set rsrs = gdBase.OpenRecordset(sSQL)
    
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!name) Then
            cFirma = rsrs!name
        Else
            cFirma = "keine Angabe"
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    cFirma = SwapStr(cFirma, "'", "")
    cFirma = SwapStr(cFirma, Chr(34), " ")
    
    sSQL = "Insert into LOGWK Select * from LOG where DATUM between #03/01/2005# and #03/31/2005#"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update LOGWK set Firma =  '" & cFirma & "'"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update LOGWK set Filiale = " & CByte(gcFilNr)
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    TransferTab gdBase, cPfad, "LOGWK"
    
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SchreibeLOG"
        Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub SchreibRechnerProtokoll()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsrs        As Recordset
    Dim cPfad       As String
    Dim RetVal      As Long
    Dim Puffer      As String * 256
    Dim iFileNr     As Integer
    Dim lPos        As Long
    Dim cSatz       As String
    Dim cQuelle     As String
    Dim cZiel       As String
    Dim lRet        As Long
    Dim lfail       As Long
    Dim i           As Long
    Dim sysInfo     As Systeminfo
    Dim höhe        As Integer
    Dim Breite      As Integer
    Dim ctmp        As String
    Dim lWert       As Long
    Dim cdatei      As String
    Dim FileName    As String
    Dim DateiNr     As Integer
    Dim rsERROR     As Recordset
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "PROTOK\"
    
    cSatz = rechnername
    cSatz = SwapStr(cSatz, ".", "")
    
    cdatei = cPfad & cSatz & ".RTF"
    Kill cdatei
    
    iFileNr = FreeFile
    Open cdatei For Binary As #iFileNr
    'winkiss version
    
    cSatz = "Winkissversion:                " & WKVersion
    
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = ""
    
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    'Ort der Betriebsysteminstallation
    RetVal = GetWindowsDirectory(Puffer, Len(Puffer))
    If RetVal <> 0 Then
        cSatz = Trim(Left$(Puffer, RetVal))
        cQuelle = gcDBPfad & "\LHA.exe"
        cZiel = cSatz & "\LHA.exe"
        lRet = CopyFile(cQuelle, cZiel, lfail)
    End If
    
    cSatz = "Windowsinstallationspfad:      " & cSatz
    
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    'Computername
    RetVal = GetComputerName(Puffer, Len(Puffer))
    If RetVal <> 0 Then
    cSatz = "Der Computername lautet:       " & Left$(Puffer, InStr(1, Puffer, vbNullChar) - 1)
    End If
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    GetSystemInfo sysInfo
    cSatz = "Prozessortyp:                  " & sysInfo.dwProcessorType
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Anzahl der Prozessoren :       " & sysInfo.dwNumberOfProcessors
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    höhe = Screen.Height \ Screen.TwipsPerPixelY
    Breite = Screen.Width \ Screen.TwipsPerPixelX
    cSatz = "Auflösung:                     " & Breite & " X " & höhe & " Pixel"
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf

    
    'Datumsformat
    ctmp = GetEntry(LOCALE_SSHORTDATE)
'    If Len(cTmp) > 8 Then
'    MsgBox "Mecker"
'    End If
    
    cSatz = "kurzes Datumsformat(dd.mm.yy): " & ctmp
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Betriebssystem:                " & Get_OS
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Anwendungspfad :               " & App.Path
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Datenbankpfad :                " & gcDBPfad
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    'Firmenname
    
    sSQL = "Select * from FIRMA"
    Set rsrs = gdBase.OpenRecordset(sSQL)
    
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!name) Then
            cSatz = "Firmenname:                    " & rsrs!name
        Else
            
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Filialnummer:                  " & gcFilNr
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Kassennummer:                  " & gcKasNum
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Hier folgen ein paar rechnerspezifische Einstellungsinformationen bezüglich der Warenwirtschaft."
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Programmname:                  " & gsPname
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Updatepfad:                    " & gsUpdPfad
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Kassendateienpfad(Eingang):    " & gsKinPfad
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Kassendateienpfad(Ausgang):    " & gsZoutPfad
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Pfad für Warenverteilungen:    " & gsZinPfad
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Welches MDE - Gerät?:          " & gsMDEGERAET
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
   
    cSatz = "Ist dies der FTP - Rechner:    " & gbFtpYes
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Lokaler Sicherheitsmodus:      " & gbLocalSec
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Auto Lokalsicherheitsmodus:    " & gbAutoLokalModus
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Tägliche Sicherung:            " & gbSichernYes
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Sicherungspfad:                " & gsSicherPfad
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Akt.intervall lokal.mdb:       " & glLokalAktuZeit
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Nächst freie Artnr beginnt ab: " & glArtNrBeg
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "EC - Terminal an diesem PC:    " & gbEcash
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "EC - Cash Partner:             " & gsEPartner
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Hier folgen ein paar unternehmensspezifische Einstellungsinformationen bezüglich der Warenwirtschaft."
    lPos = LOF(iFileNr)
    lPos = lPos + 1
    Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Bonusgrenze:                   " & gdBonusGrenze
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Nettospannen basierend auf:    " & gsSpanne
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Gutscheinnr. selbst vergeben:  " & gbGutsch
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Sonderpreise rabattierfähig:   " & gbSondRab
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Kassenpasswort:                " & gsKassPass
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Kundenadresse im Bon:          " & gbKUNDENA
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf

    cSatz = "Teilnahme an Wochenstatistik:  " & gbUnistatWeek
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "KISS - Kundennummer:           " & gsStatkundnr
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf

    cSatz = "Aktualisierungsversuche:       " & glUPDCOUNT
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Zeit zwischen den A.Versuchen: " & glUPDTime & " Millisekunden"
    lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    cSatz = "Bestandsfehlerdetails:": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    cSatz = "______________________": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    cSatz = "": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    
    
    cSatz = "": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    cSatz = "Programmfehlerauflistung:": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    cSatz = "_________________________": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    cSatz = "": lPos = LOF(iFileNr): lPos = lPos + 1: Put #iFileNr, lPos, cSatz & vbCrLf
    
    Close iFileNr
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SchreibRechnerProtokoll"
        Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
       
End Sub
Public Function datumspruefung(sVon As String, sBis As String) As String
    On Error GoTo LOKAL_ERROR
    
    datumspruefung = ""
    
    If Len(sVon) <> 10 Or Len(sBis) <> 10 Then
        datumspruefung = "Bitte geben Sie das Datum im richtigen Format ein z.B.: 03.11.2014"
        Exit Function
    End If

    
    If CLng(DateValue(sVon)) = 0 Then
        datumspruefung = "Bitte geben Sie ein sinnvolles Datum ein!"
        Exit Function
    End If
    
    If CLng(DateValue(sBis)) = 0 Then
        datumspruefung = "Bitte geben Sie ein sinnvolles Datum ein!"
        Exit Function
    End If
    
    If CLng(DateValue(sVon)) > CLng(DateValue(sBis)) Then
        datumspruefung = "Der Zeitraumbeginn ist größer als das Zeitraumende."
        Exit Function
    End If
    
    Exit Function
LOKAL_ERROR:
    If err.Number = 13 Then
        datumspruefung = "Bitte geben Sie ein sinnvolles Datum ein!"
        Exit Function
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "datumspruefung"
        Fehler.gsFehlertext = "Beim der Datumsüberprüfung ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Function
'Public Sub DeleteGutscheinsofort(cGutschnr As String)
'    On Error GoTo LOKAL_ERROR
'
'    Dim cSQL    As String
'
'    cSQL = "Delete from GUTSCH where GUTSCHNR = " & cGutschnr
'    gdBase.Execute cSQL, dbFailOnError
'
'Exit Sub
'LOKAL_ERROR:
'    Fehler.gsDescr = err.Description
'    Fehler.gsNumber = err.Number
'    Fehler.gsFormular = "Modul5"
'    Fehler.gsFunktion = "DeleteGutscheinsofort"
'    Fehler.gsFehlertext = "Beim Löschen eines Gutscheines ist ein Fehler aufgetreten."
'
'    Fehlermeldung1
'End Sub
Public Sub Einkaufsumsatzkorrektur(cLinr As String, sKorr As String, lDat As Long)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL    As String
    
    If Trim(cLinr) = "" Then
        Exit Sub
    End If
    
    cSQL = " Insert into zugang (Artnr,Bezeich,rek,linr,bewegung,adate) values ( 999999 , 'Korrekturwert' ,'" & sKorr & "', '" & cLinr & "', 1 , " & lDat & ") "
    gdBase.Execute cSQL, dbFailOnError
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Einkaufsumsatzkorrektur"
    Fehler.gsFehlertext = "Bei der Korrektur des Einkaufsumsatzes ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function LAGEREKermittlung(cLinr As String) As Double
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL    As String
    Dim rsrs    As Recordset
    Dim dtmp    As Double
    Dim iStufe As Integer
    
    If Trim(cLinr) = "" Then
        Exit Function
    End If
    
    iStufe = 1
    
    loeschNEW "L" & srechnertab, gdBase
    
    iStufe = 2

    cSQL = "Select A.Artnr,A.bestand , B.LEKPR into L" & srechnertab
    cSQL = cSQL & " from ARTIKEL A inner join ARTLIEF B on A.ARTNR = B.ARTNR "
    cSQL = cSQL & " where (A.SYNSTATUS = 'E' or A.SYNSTATUS = 'A' or A.SYNSTATUS is null) "
    cSQL = cSQL & " and B.LINR = " & cLinr & " "
    cSQL = cSQL & " and A.BESTAND > 0 "
    gdBase.Execute cSQL, dbFailOnError
    
    iStufe = 3
    
'    cSQL = "Update  L" & srechnertab
'    cSQL = cSQL & " inner join  ARTIKEL on  L" & srechnertab & ".ARTNR = artikel.artnr "
'    cSQL = cSQL & " set L" & srechnertab & ".BESTAND = artikel.bestand "
'    cSQL = cSQL & " where Artikel.BESTAND > 0 "
'    gdBase.Execute cSQL, dbFailOnError
    
'    cSQL = "Update  L" & srechnertab
'    cSQL = cSQL & " inner join  ARTIKEL on  L" & srechnertab & ".ARTNR = artikel.artnr "
'    cSQL = cSQL & " set L" & srechnertab & ".EKPR = artikel.EKPR "
'    gdBase.Execute cSQL, dbFailOnError
    


    
    iStufe = 4
    
    
    cSQL = "Delete from L" & srechnertab
    cSQL = cSQL & " where BESTAND <= 0 "
    gdBase.Execute cSQL, dbFailOnError
    
    
    iStufe = 8
    
'    cSQL = "Select SUM(EKPR * Bestand) as EAKJahr from L" & srechnertab
    
    cSQL = "Select SUM(LEKPR * Bestand) as EAKJahr from L" & srechnertab
    
    iStufe = 5
    
    LAGEREKermittlung = 0
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        iStufe = 6
        If Not IsNull(rsrs!EAKJahr) Then
            LAGEREKermittlung = rsrs!EAKJahr
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
   
    iStufe = 7
    
    loeschNEW "L" & srechnertab, gdBase
    
    
    
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "LAGEREKermittlung"
    Fehler.gsFehlertext = "Bei der Ermittlung des Lagereinkaufswertes ist ein Fehler aufgetreten. " & iStufe
    
    Fehlermeldung1
        
End Function
Public Function LAGERBestand(cLinr As String) As Long
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL    As String
    Dim rsrs    As Recordset
    Dim dtmp    As Double
    Dim iStufe As Integer
    
    If Trim(cLinr) = "" Then
        Exit Function
    End If
    
    iStufe = 1
    
    loeschNEW "L" & srechnertab, gdBase
    
    iStufe = 2

    cSQL = "Select ARTLIEF.Artnr,artikel.bestand  into L" & srechnertab
    cSQL = cSQL & " from ARTLIEF inner join Artikel on artlief.artnr = artikel.artnr "
    cSQL = cSQL & " Where ARTLIEF.LINR = " & cLinr & " "
    cSQL = cSQL & " and Artikel.BESTAND > 0 "
    gdBase.Execute cSQL, dbFailOnError
    

    
    LAGERBestand = 0
    If Datendrin("L" & srechnertab, gdBase) Then
        
        LAGERBestand = 1
    End If
    
    
    
    

    
    loeschNEW "L" & srechnertab, gdBase
    
    
    
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "LAGERBestand"
    Fehler.gsFehlertext = "Bei der Ermittlung des Lagerbestandes ist ein Fehler aufgetreten. " & iStufe
    
    Fehlermeldung1
        
End Function
Public Function ohneArtikel(cLinr As String) As Long
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL    As String
    Dim rsrs    As Recordset
    
    ohneArtikel = 0
    
    If Trim(cLinr) = "" Then
        Exit Function
    End If
    
    cSQL = "Select count(artnr) as maxi from ARTLIEF "
    cSQL = cSQL & " Where ARTLIEF.LINR = " & cLinr & " "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!maxi) Then
            ohneArtikel = rsrs!maxi
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ohneArtikel"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten. "
    
    Fehlermeldung1
        
End Function
Public Sub leseadtopt()
    On Error GoTo LOKAL_ERROR
    
    Dim rsrs As Recordset
    
    gADTclientId = 0
    
    If NewTableSuchenDBKombi("ADTOPT", gdApp) Then

        Set rsrs = gdApp.OpenRecordset("select * from ADTOPT")
        If Not rsrs.EOF Then
            If Not IsNull(rsrs!Verfahren) Then
                gsAdtVerfahren = rsrs!Verfahren
            Else
                gsAdtVerfahren = "INOUT"
            End If
            
            If gsAdtVerfahren = "INOUT" Then
        
                If Not IsNull(rsrs!clientID) Then
                    gADTclientId = rsrs!clientID
                Else
                    gADTclientId = ""
                End If
                
                If Not IsNull(rsrs!Limit) Then
                    gADTLimit = rsrs!Limit
                Else
                    gADTLimit = 0
                End If
                
                If Not IsNull(rsrs!bezahlart) Then
                    gADTbezahlart = rsrs!bezahlart
                Else
                    gADTbezahlart = ""
                End If
                
                If Not IsNull(rsrs!ADTioPfad) Then
                    gADTioPfad = rsrs!ADTioPfad
                Else
                    gADTioPfad = ""
                End If
                
                If Not IsNull(rsrs!termid) Then
                    gADTtermId = rsrs!termid
                Else
                    gADTtermId = ""
                End If
                
                If Not IsNull(rsrs!DINERS) Then
                    gbADTDI = rsrs!DINERS
                Else
                    gbADTDI = False
                End If
                
                If Not IsNull(rsrs!VISA) Then
                    gbADTVI = rsrs!VISA
                Else
                    gbADTVI = False
                End If
                
                If Not IsNull(rsrs!Euro) Then
                    gbADTEU = rsrs!Euro
                Else
                    gbADTEU = False
                End If
                
                If Not IsNull(rsrs!AMEX) Then
                    gbADTAE = rsrs!AMEX
                Else
                    gbADTAE = False
                End If
            ElseIf gsAdtVerfahren = "XML" Then
            
                If Not IsNull(rsrs!clientID) Then
                    gADTclientId = rsrs!clientID
                Else
                    gADTclientId = ""
                End If
                
                If Not IsNull(rsrs!Limit) Then
                    gADTLimit = rsrs!Limit
                Else
                    gADTLimit = 0
                End If
        
                If Not IsNull(rsrs!termid) Then
                    gADTtermId = rsrs!termid
                Else
                    gADTtermId = ""
                End If
                
                If Not IsNull(rsrs!DINERS) Then
                    gbADTDI = rsrs!DINERS
                Else
                    gbADTDI = False
                End If
                
                If Not IsNull(rsrs!VISA) Then
                    gbADTVI = rsrs!VISA
                Else
                    gbADTVI = False
                End If
                
                If Not IsNull(rsrs!Euro) Then
                    gbADTEU = rsrs!Euro
                Else
                    gbADTEU = False
                End If
                
                If Not IsNull(rsrs!AMEX) Then
                    gbADTAE = rsrs!AMEX
                Else
                    gbADTAE = False
                End If
                
                If Not IsNull(rsrs!IPADRESS) Then
                    gADTipAdress = rsrs!IPADRESS
                Else
                    gADTipAdress = ""
                End If
                
                If Not IsNull(rsrs!Port) Then
                    gADTport = rsrs!Port
                Else
                    gADTport = ""
                End If
                
            Else
                gADTclientId = "0"
                gADTtermId = ""
                gADTioPfad = ""
                gADTbezahlart = ""
                gADTLimit = 0
                gbADTAE = False
                gbADTVI = False
                gbADTDI = False
                gbADTEU = False
                gADTipAdress = ""
                gADTport = ""
            End If
            
            
        End If
        rsrs.Close: Set rsrs = Nothing
    Else
        gADTclientId = "0"
        gADTtermId = ""
        gADTioPfad = ""
        gADTbezahlart = ""
        gADTLimit = 0
        gbADTAE = False
        gbADTVI = False
        gbADTDI = False
        gbADTEU = False
    End If
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "leseadtopt"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub sortierenGrid(grid As MSFlexGrid)
    On Error GoTo LOKAL_ERROR
    Dim lcol            As Long
    
    With grid
    
        
        If byteSortReihen = 1 Then
        
            lcol = .Col
            .Col = lcol
            .sOrt = 2

            byteSortReihen = 2
            
        ElseIf byteSortReihen = 2 Then
            lcol = .Col
            .Col = lcol
            .sOrt = 1
            byteSortReihen = 1
        End If
    End With
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "sortierenGrid"
    Fehler.gsFehlertext = "Beim Sortieren der Tabelle ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub sortierenHGrid(grid As MSHFlexGrid)
    On Error GoTo LOKAL_ERROR
    Dim lcol            As Long
    
    With grid
        If byteSortReihen = 1 Then
        
            lcol = .Col
            .Col = lcol
            .sOrt = 2
            byteSortReihen = 2
            
        ElseIf byteSortReihen = 2 Then
            lcol = .Col
            .Col = lcol
            .sOrt = 1
            byteSortReihen = 1
        End If
    End With
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "sortierenHGrid"
    Fehler.gsFehlertext = "Beim Sortieren der Tabelle ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function ErmittleNSProz(sArt As String) As Single
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL    As String
    Dim rsArt   As Recordset
    Dim se      As String
    Dim sKVKPR  As String
    Dim sArtnr  As String
    ErmittleNSProz = 0
    
    sSQL = "Select * from Artikel where artnr = " & sArt
    Set rsArt = gdBase.OpenRecordset(sSQL)
    If Not rsArt.EOF Then
        If gsSpanne = "LEK" Then    'basierend auf LEK oder SEK
            If Not IsNull(rsArt!lekpr) Then
                se = rsArt!lekpr
            Else
                se = ""
            End If
        ElseIf gsSpanne = "SEK" Then
            If Not IsNull(rsArt!ekpr) Then
                se = rsArt!ekpr
            Else
                se = ""
            End If
        End If
        
        If Not IsNull(rsArt!MWST) Then 'Mehrwertsteuer
            gcMwSt = Trim(rsArt!MWST)
        Else
            gcMwSt = ""
        End If
        
        If Not IsNull(rsArt!KVKPR1) Then 'Kassenverkaufspreis
            sKVKPR = Trim(rsArt!KVKPR1)
        Else
            sKVKPR = ""
        End If
    End If
    rsArt.Close: Set rsArt = Nothing
    
    If se <> "" And sKVKPR <> "" And gcMwSt <> "" Then
        
        ErmittleNSProz = CSng(NettospanneInProzent(sKVKPR, se, gcMwSt))
    Else

    End If
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ErmittleNSProz"
    Fehler.gsFehlertext = "Im Programmteil Ermittlung der Nettospanne ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ErmittleNSEuro(sArt As String) As Single
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL    As String
    Dim rsArt   As Recordset
    Dim se      As String
    Dim sKVKPR  As String
    Dim sArtnr  As String
    ErmittleNSEuro = 0
    
    sSQL = "Select * from Artikel where artnr = " & sArt
    Set rsArt = gdBase.OpenRecordset(sSQL)
    If Not rsArt.EOF Then
        If gsSpanne = "LEK" Then    'basierend auf LEK oder SEK
            If Not IsNull(rsArt!lekpr) Then
                se = rsArt!lekpr
            Else
                se = ""
            End If
        ElseIf gsSpanne = "SEK" Then
            If Not IsNull(rsArt!ekpr) Then
                se = rsArt!ekpr
            Else
                se = ""
            End If
        End If
        
        If Not IsNull(rsArt!MWST) Then 'Mehrwertsteuer
            gcMwSt = Trim(rsArt!MWST)
        Else
            gcMwSt = ""
        End If
        
        If Not IsNull(rsArt!KVKPR1) Then 'Kassenverkaufspreis
            sKVKPR = Trim(rsArt!KVKPR1)
        Else
            sKVKPR = ""
        End If
    End If
    
    rsArt.Close: Set rsArt = Nothing
    If se <> "" And sKVKPR <> "" And gcMwSt <> "" Then
        ErmittleNSEuro = CSng(NettospanneInEuro(sKVKPR, se, gcMwSt))
    Else

    End If
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ErmittleNSEuro"
    Fehler.gsFehlertext = "Im Programmteil Ermittlung der Nettospanne ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Sub Tabcheck(stabelle As String)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL    As String
    Dim rsrs    As Recordset
    Dim rsrs1   As Recordset
    
    Dim sSpaltenname(0 To 59)       As String
    Dim sSpaltenbez(0 To 59)        As String
    Dim sAliase(0 To 59)            As String
    Dim byReihenfolge(0 To 59)      As Byte
    Dim sAnzeige(0 To 59)           As String
    Dim i                           As Byte
    
    If UCase$(stabelle) = "ZBON" Then
        sSQL = " Select * from ZBONlay where tabname = '" & stabelle & "'"
    Else
        sSQL = " Select * from Tablay" & srechnertab & " where tabname = '" & stabelle & "'"
    End If
    
    Set rsrs = gdBase.OpenRecordset(sSQL)
    
    If rsrs.EOF Then
        If stabelle = "Einkauf" Then
            
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Lieferant"
            sSpaltenname(3) = "Datum"
            sSpaltenname(4) = "Uhrzeit"
            sSpaltenname(5) = "Bestand alt"
            sSpaltenname(6) = "Bewegung"
            sSpaltenname(7) = "Bestand neu"
            sSpaltenname(8) = "Bed.Nr."
            sSpaltenname(9) = "Bediener"
            sSpaltenname(10) = "Filiale"
            sSpaltenname(11) = "EAN"
            sSpaltenname(12) = "Schnitt - EK"
            sSpaltenname(13) = "Lieferantenbestnr."
            sSpaltenname(14) = "EK - Wert"
            sSpaltenname(15) = "Lieferschein"
            sSpaltenname(16) = "Kassen - VK"
            sSpaltenname(17) = "Listen - EK"
            sSpaltenname(18) = "akt. Bestand"
            sSpaltenname(19) = "le.Re. - EK"
        
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Linr"
            sSpaltenbez(3) = "aDate"
            sSpaltenbez(4) = "Uhrzeit"
            sSpaltenbez(5) = "Bestandalt"
            sSpaltenbez(6) = "Bewegung"
            sSpaltenbez(7) = "Bestandneu"
            sSpaltenbez(8) = "Bednu"
            sSpaltenbez(9) = "Bedname"
            sSpaltenbez(10) = "Filialnr"
            sSpaltenbez(11) = "Ean"
            sSpaltenbez(12) = "EKPR"
            sSpaltenbez(13) = "Libesnr"
            sSpaltenbez(14) = "EKWERT"
            sSpaltenbez(15) = "LS"
            sSpaltenbez(16) = "KVKPR"
            sSpaltenbez(17) = "LEKPR"
            sSpaltenbez(18) = "Bestand"
            sSpaltenbez(19) = "REK"
        
            For i = 0 To 19
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 19
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('Einkauf',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "NVK" Then
        
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Bed."
            sSpaltenname(3) = "Filiale"
            sSpaltenname(4) = "Datum"
            sSpaltenname(5) = "Zeitpunkt"
            sSpaltenname(6) = "Menge"
            sSpaltenname(7) = "Notizen"
            sSpaltenname(8) = "Grund"
            sSpaltenname(9) = "Col"
            sSpaltenname(10) = "Letzter VK"
            sSpaltenname(11) = "RKZ"
            sSpaltenname(12) = "UW"
            sSpaltenname(13) = "MB"
            sSpaltenname(14) = "B in 1"
            sSpaltenname(15) = "lfNr"
            sSpaltenname(16) = "B vor Ort"
            sSpaltenname(17) = "in Be"
        
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "BEDNU"
            sSpaltenbez(3) = "FILIALE"
            sSpaltenbez(4) = "ADATE"
            sSpaltenbez(5) = "AZEIT"
            sSpaltenbez(6) = "MENGE"
            sSpaltenbez(7) = "Notizen"
            sSpaltenbez(8) = "NEINART"
            sSpaltenbez(9) = "Farbe"
            sSpaltenbez(10) = "LASTVK"
            sSpaltenbez(11) = "RKZ"
            sSpaltenbez(12) = "UW"
            sSpaltenbez(13) = "MB"
            sSpaltenbez(14) = "BESTAND"
            sSpaltenbez(15) = "lfNr"
            sSpaltenbez(16) = "BESTANDO"
            sSpaltenbez(17) = "inBE"
            
            For i = 0 To 17
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 17
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('NVK',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "LIEFSTAT" Then
        
            sSpaltenname(0) = "LiNr"
            sSpaltenname(1) = "Lieferant"
            sSpaltenname(2) = "Menge"
            sSpaltenname(3) = "Menge VJ"
            sSpaltenname(4) = "Ums akt"
            sSpaltenname(5) = "Ums VJ ZR"
            sSpaltenname(6) = "Diff Ums Eur"
            sSpaltenname(7) = "Diff Ums %"
            sSpaltenname(8) = "Ums akt EK"
            sSpaltenname(9) = "Ums VJ ZR EK"
            sSpaltenname(10) = "Diff Ums Eur EK"
            sSpaltenname(11) = "Diff Ums % EK"
            sSpaltenname(12) = "Ertrag akt"
            sSpaltenname(13) = "Ertrag VJ"
            sSpaltenname(14) = "NSP akt"
            sSpaltenname(15) = "NSP VJ"
            sSpaltenname(16) = "LAGER(Stück)"
            sSpaltenname(17) = "Penner(Stück)"
            sSpaltenname(18) = "Panteil Stück in %"
            sSpaltenname(19) = "LAGER(SEK)"
            sSpaltenname(20) = "Penner(SEK)"
            sSpaltenname(21) = "Panteil SEK in %"

            sSpaltenbez(0) = "LINR"
            sSpaltenbez(1) = "LIEFBEZ"
            sSpaltenbez(2) = "ANZAHL"
            sSpaltenbez(3) = "ANZAHLVJ"
            sSpaltenbez(4) = "UMSATZ"
            sSpaltenbez(5) = "UmsatzVKVJ"
            sSpaltenbez(6) = "DIFFUMSEUR"
            sSpaltenbez(7) = "DIFFUMSPROZ"
            sSpaltenbez(8) = "EINKPREIS"
            sSpaltenbez(9) = "UmsatzEKVJ"
            sSpaltenbez(10) = "DIFFUMSEUREK"
            sSpaltenbez(11) = "DIFFUMSPROZEK"
            sSpaltenbez(12) = "ERTRAGakt"
            sSpaltenbez(13) = "ERTRAGvj"
            sSpaltenbez(14) = "NSPakt"
            sSpaltenbez(15) = "NSPvj"
            sSpaltenbez(16) = "LAGERST"
            sSpaltenbez(17) = "PENNERST"
            sSpaltenbez(18) = "PENANTEILST"
            sSpaltenbez(19) = "LAGERWSEK"
            sSpaltenbez(20) = "PENNERWSEK"
            sSpaltenbez(21) = "PENANTEILSEK"

            For i = 0 To 21
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 21
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf UCase$(stabelle) = "KB" Then
        
            sSpaltenname(0) = "ausg"
            sSpaltenname(1) = "Kund Nr."
            sSpaltenname(2) = "Name"
            sSpaltenname(3) = "Umsatz"
            sSpaltenname(4) = "Stückzahl"
            sSpaltenname(5) = "Rohertrag"
            sSpaltenname(6) = "NS"
            sSpaltenname(7) = "lf Nr."
            sSpaltenname(8) = "Provision"
            
            sSpaltenbez(0) = "ausg"
            sSpaltenbez(1) = "Kundnr"
            sSpaltenbez(2) = "name"
            sSpaltenbez(3) = "Preis"
            sSpaltenbez(4) = "Menge"
            sSpaltenbez(5) = "Ertrag"
            sSpaltenbez(6) = "ENS"
            sSpaltenbez(7) = "LFNR"
            sSpaltenbez(8) = "PROV"
            
            For i = 0 To 8
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 8
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf UCase$(stabelle) = "ARTLUG" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "EAN"
            sSpaltenname(3) = "LUG"
            sSpaltenname(4) = "Best"
            sSpaltenname(5) = "LEK"
            sSpaltenname(6) = "LEK-Wert"
            sSpaltenname(7) = "KVK"
            sSpaltenname(8) = "KVK-Wert"
            sSpaltenname(9) = "LiefNr."
            sSpaltenname(10) = "Lieferant"
            sSpaltenname(11) = "Linie"
            sSpaltenname(12) = "Aufnahme"
            sSpaltenname(13) = "LiefBestNr"
            sSpaltenname(14) = "Räumdatum"
            sSpaltenname(15) = "RKZ"
            sSpaltenname(16) = "Col"
            sSpaltenname(17) = "AGN"
            sSpaltenname(18) = "PGN"
            sSpaltenname(19) = "Marke"
            sSpaltenname(20) = "Linienbezeichnung"
            sSpaltenname(21) = "le WE"
            sSpaltenname(22) = "le VK"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "EAN"
            sSpaltenbez(3) = "LUG"
            sSpaltenbez(4) = "BESTAND"
            sSpaltenbez(5) = "LEKPR"
            sSpaltenbez(6) = "LEKWERT"
            sSpaltenbez(7) = "KVKPR1"
            sSpaltenbez(8) = "KVKWERT"
            sSpaltenbez(9) = "LINR"
            sSpaltenbez(10) = "Liefbez"
            sSpaltenbez(11) = "LPZ"
            sSpaltenbez(12) = "aufdat"
            sSpaltenbez(13) = "libesnr"
            sSpaltenbez(14) = "exdat"
            sSpaltenbez(15) = "RKZ"
            sSpaltenbez(16) = "Farbnr"
            sSpaltenbez(17) = "AGN"
            sSpaltenbez(18) = "PGN"
            sSpaltenbez(19) = "Marke"
            sSpaltenbez(20) = "LINBEZ"
            sSpaltenbez(21) = "LAST_ZU"
            sSpaltenbez(22) = "LAST_VK"
            
            For i = 0 To 22
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 22
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        
        '    cSQL = cSQL & "(ARTNR int "
'            cSQL = cSQL & ", BEZEICH varchar(35) "
'            cSQL = cSQL & ", LEKPR real "
'            cSQL = cSQL & ", LVKPR real "
'            cSQL = cSQL & ", KVKPR1 float "
'            cSQL = cSQL & ", BESTAND int "
'            cSQL = cSQL & ", ZUGANGSMENGE int "
'            cSQL = cSQL & ", VERKAUFSMENGE int "

        ElseIf UCase$(stabelle) = "VERKAUFNZU" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "LEK"
            sSpaltenname(3) = "LVK"
            sSpaltenname(4) = "KVK"
            sSpaltenname(5) = "BESTAND"
            sSpaltenname(6) = "ZU MENGE"
            sSpaltenname(7) = "VK MENGE"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "LEKPR"
            sSpaltenbez(3) = "LVKPR"
            sSpaltenbez(4) = "KVKPR1"
            sSpaltenbez(5) = "Bestand"
            sSpaltenbez(6) = "ZUGANGSMENGE"
            sSpaltenbez(7) = "VERKAUFSMENGE"
            
            For i = 0 To 7
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 7
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        
        ElseIf UCase$(stabelle) = "MDH" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Best"
            sSpaltenname(3) = "KVK"
            sSpaltenname(4) = "MDH"
            sSpaltenname(5) = "Col"
            sSpaltenname(6) = "EAN"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "BESTAND"
            sSpaltenbez(3) = "KVKPR1"
            sSpaltenbez(4) = "MDHDAT"
            sSpaltenbez(5) = "Farbnr"
            sSpaltenbez(6) = "EAN"
            
            For i = 0 To 6
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 6
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf UCase$(stabelle) = "LEKVERGLEICH" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "LEK 1"
            sSpaltenname(3) = "LEK 2"
            sSpaltenname(4) = "Differenz"
            sSpaltenname(5) = "KVK"
            sSpaltenname(6) = "Bestand"
            sSpaltenname(7) = "HS 1"
            sSpaltenname(8) = "HS 2"
            sSpaltenname(9) = "EX 1"
            sSpaltenname(10) = "EX 2"
            sSpaltenname(11) = "EAN"
            sSpaltenname(12) = "le. VK"
           
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "LEK_1"
            sSpaltenbez(3) = "LEK_2"
            sSpaltenbez(4) = "Differenz"
            sSpaltenbez(5) = "KVKPR1"
            sSpaltenbez(6) = "Bestand"
            sSpaltenbez(7) = "HS_1"
            sSpaltenbez(8) = "HS_2"
            sSpaltenbez(9) = "RKZ_1"
            sSpaltenbez(10) = "RKZ_2"
            sSpaltenbez(11) = "EAN"
            sSpaltenbez(12) = "lastvk"
            
            
            For i = 0 To 12
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 12
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf UCase$(stabelle) = "VERGLEICH" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Best 1"
            sSpaltenname(3) = "Best 2"
            sSpaltenname(4) = "Differenz"
           
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "BESTAND_1"
            sSpaltenbez(3) = "BESTAND_2"
            sSpaltenbez(4) = "Differenz"
            
            
            For i = 0 To 4
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 4
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf UCase$(stabelle) = "TERMDEL" Then
                
            sSpaltenname(0) = "Löschdatum"
            sSpaltenname(1) = "Löschzeit"
            sSpaltenname(2) = "gelöscht, wer?"
            sSpaltenname(3) = "Kund Nr"
            sSpaltenname(4) = "Grund"
            sSpaltenname(5) = "Dauer"
            sSpaltenname(6) = "Termin Datum"
            sSpaltenname(7) = "Termin Zeit"
            sSpaltenname(8) = "Kundenname"
            sSpaltenname(9) = "Ersteller"
            
            
            sSpaltenbez(0) = "ADATE"
            sSpaltenbez(1) = "AZEIT"
            sSpaltenbez(2) = "BEDNAME"
            sSpaltenbez(3) = "KUNDNR"
            sSpaltenbez(4) = "GRUND"
            sSpaltenbez(5) = "DAUER"
            sSpaltenbez(6) = "BEGINDAT"
            sSpaltenbez(7) = "BEGINZEIT"
            sSpaltenbez(8) = "NAME"
            sSpaltenbez(9) = "ERSTBEDNAME"
            
            
    
            
            For i = 0 To 9
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 9
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "REWEWGR" Then
            
            sSpaltenname(0) = "Sortiment"
            sSpaltenname(1) = "Anzahl Artikel"
            sSpaltenname(2) = "auswählen"
            
            sSpaltenbez(0) = "REWEWGRTEXT"
            sSpaltenbez(1) = "ANZAHL"
            sSpaltenbez(2) = "AKTGEW"
            
            For i = 0 To 2
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 2
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "EDEKAGRUPPE" Then
            
            sSpaltenname(0) = "WGN"
            sSpaltenname(1) = "WGN Bezeichnung"
            sSpaltenname(2) = "Anz Artikel L"
            sSpaltenname(3) = "auswählen L"
            sSpaltenname(4) = "Anz Artikel S"
            sSpaltenname(5) = "auswählen S"
            
            sSpaltenbez(0) = "WGN"
            sSpaltenbez(1) = "WGNTEXT"
            sSpaltenbez(2) = "ANZ_L"
            sSpaltenbez(3) = "AUSGEWAEHLT_L"
            sSpaltenbez(4) = "ANZ_S"
            sSpaltenbez(5) = "AUSGEWAEHLT_S"
            
            
            For i = 0 To 5
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 5
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "KALKLINR" Then
            
            sSpaltenname(0) = "LINR"
            sSpaltenname(1) = "Kürzel"
            sSpaltenname(2) = "Lieferant"
            sSpaltenname(3) = "NS z.Zeit"
            sSpaltenname(4) = "hinterlegte NS"
            sSpaltenname(5) = "Anz Artikel"
            
            sSpaltenbez(0) = "LINR"
            sSpaltenbez(1) = "KUERZEL"
            sSpaltenbez(2) = "LIEFBEZ"
            sSpaltenbez(3) = "DNS"
            sSpaltenbez(4) = "NS"
            sSpaltenbez(5) = "ANZARTIKEL"
            
            For i = 0 To 5
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 5
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "KALKARTIKEL" Then
            
            sSpaltenname(0) = "ArtNr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "KVK vor"
            sSpaltenname(3) = "KVK neu"
            
            sSpaltenbez(0) = "ARTNR"
            sSpaltenbez(1) = "BEZEICH"
            sSpaltenbez(2) = "PREISVOR"
            sSpaltenbez(3) = "PREISNACH"
            
            
            For i = 0 To 3
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 3
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "KALKAGN" Then
            
            sSpaltenname(0) = "AGN"
            sSpaltenname(1) = "Artikelgruppe"
            sSpaltenname(2) = "NS z.Zeit"
            sSpaltenname(3) = "hinterlegte NS"
            sSpaltenname(4) = "Anz Artikel"
            
            sSpaltenbez(0) = "AGN"
            sSpaltenbez(1) = "AGNBEZ"
            sSpaltenbez(2) = "DNS"
            sSpaltenbez(3) = "NS"
            sSpaltenbez(4) = "ANZARTIKEL"
            
            For i = 0 To 4
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 4
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "DATEV" Then
            
            sSpaltenname(0) = "Konto"
            sSpaltenname(1) = "Kontobezeichnung"
            sSpaltenname(2) = "Wert in EUR"
            
            sSpaltenbez(0) = "KONTONR"
            sSpaltenbez(1) = "KONTOBEZ"
            sSpaltenbez(2) = "GELDWERT"
            
            
            For i = 0 To 2
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 2
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf UCase$(stabelle) = "OFPO" Then
        
            sSpaltenname(0) = "Re-Datum"
            sSpaltenname(1) = "Re-Nr"
            sSpaltenname(2) = "Re-Summe"
            sSpaltenname(3) = "Zhl-Ziel"
            sSpaltenname(4) = "überschritten"
            sSpaltenname(5) = "bezahlt J/N"
            sSpaltenname(6) = "Zahlungsinfo"
            sSpaltenname(7) = "KdNr"
            sSpaltenname(8) = "Kundenname"
            sSpaltenname(9) = "Firma"
            sSpaltenname(10) = "STRASSE"
            sSpaltenname(11) = "PLZ"
            sSpaltenname(12) = "ORT"
            
            sSpaltenbez(0) = "REDATUM"
            sSpaltenbez(1) = "RENR"
            sSpaltenbez(2) = "RESUMME"
            sSpaltenbez(3) = "ZAHLUNGSZIEL"
            sSpaltenbez(4) = "UEBERSCHREITUNG"
            sSpaltenbez(5) = "STATUSBEZ"
            sSpaltenbez(6) = "ZAHLUNGSINFO"
            sSpaltenbez(7) = "KUNDNR"
            sSpaltenbez(8) = "KDNAME1"
            sSpaltenbez(9) = "KDNAME2"
            sSpaltenbez(10) = "STRASSE"
            sSpaltenbez(11) = "PLZ"
            sSpaltenbez(12) = "ORT"
            
            For i = 0 To 12
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 12
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf UCase$(stabelle) = "BB" Then
                
            sSpaltenname(0) = "Bed.Nr."
            sSpaltenname(1) = "Bediener"
            sSpaltenname(2) = "Umsatz"
            sSpaltenname(3) = "Stückzahl"
            sSpaltenname(4) = "Rohertrag"
            sSpaltenname(5) = "NS"
            sSpaltenname(6) = "Anz Kunden"
            sSpaltenname(7) = "K. Schnitt"
            sSpaltenname(8) = "lf Nr."
            sSpaltenname(9) = "Provision"
            sSpaltenname(10) = "Umsatz EK"
            sSpaltenname(11) = "Ums pro Stück"
            sSpaltenname(12) = "Ums pro Kunde"
            
            sSpaltenbez(0) = "Bednu"
            sSpaltenbez(1) = "Bedname"
            sSpaltenbez(2) = "Preis"
            sSpaltenbez(3) = "Menge"
            sSpaltenbez(4) = "Ertrag"
            sSpaltenbez(5) = "ENS"
            sSpaltenbez(6) = "Anzkunden"
            sSpaltenbez(7) = "KUSCHNI"
            sSpaltenbez(8) = "LFNR"
            sSpaltenbez(9) = "PROV"
            sSpaltenbez(10) = "UmsEK"
            sSpaltenbez(11) = "UmsST"
            sSpaltenbez(12) = "UmsKU"
            
            For i = 0 To 12
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 12
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            

        ElseIf UCase$(stabelle) = "MBFEST" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Bestand"
            sSpaltenname(3) = "K-VK"
            sSpaltenname(4) = "L-VK."
            sSpaltenname(5) = "L-EK"
            sSpaltenname(6) = "Schnitt-EK"
            sSpaltenname(7) = "LiefNr."
            sSpaltenname(8) = "LiefBestNr"
            sSpaltenname(9) = "EAN"
            sSpaltenname(10) = "2.EAN"
            sSpaltenname(11) = "3.EAN"
            sSpaltenname(12) = "Linie"
            sSpaltenname(13) = "RKZ"
            sSpaltenname(14) = "MWST"
            sSpaltenname(15) = "MinBestell"
            sSpaltenname(16) = "MinBestand"
            sSpaltenname(17) = "Inhalt"
            sSpaltenname(18) = "Einheit"
            sSpaltenname(19) = "Grundpreis"
            sSpaltenname(20) = "Rabatt"
            sSpaltenname(21) = "Geführt"
            sSpaltenname(22) = "Bonus"
            sSpaltenname(23) = "AGN"
            sSpaltenname(24) = "AWM"
            sSpaltenname(25) = "Lagerumschlag"
            sSpaltenname(26) = "Aufnahme"
            sSpaltenname(27) = "geräumt"
            sSpaltenname(28) = "PGN"
            sSpaltenname(29) = "Marke"
            sSpaltenname(30) = "LagerNr"
            
            
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Bestand"
            sSpaltenbez(3) = "KVKPR1"
            sSpaltenbez(4) = "VKPR"
            sSpaltenbez(5) = "LEKPR"
            sSpaltenbez(6) = "EKPR"
            sSpaltenbez(7) = "LINR"
            sSpaltenbez(8) = "LIBESNR"
            sSpaltenbez(9) = "EAN"
            sSpaltenbez(10) = "EAN2"
            sSpaltenbez(11) = "EAN3"
            sSpaltenbez(12) = "LPZ"
            sSpaltenbez(13) = "RKZ"
            sSpaltenbez(14) = "MWST"
            sSpaltenbez(15) = "MINMEN"
            sSpaltenbez(16) = "MINBEST"
            sSpaltenbez(17) = "INHALT"
            sSpaltenbez(18) = "INHALTBEZ"
            sSpaltenbez(19) = "Grundpreis"
            sSpaltenbez(20) = "Rabatt_ok"
            sSpaltenbez(21) = "Gefuehrt"
            sSpaltenbez(22) = "Bonus_ok"
            sSpaltenbez(23) = "AGN"
            sSpaltenbez(24) = "AWM"
            sSpaltenbez(25) = "LagerU"
            sSpaltenbez(26) = "Aufdat"
            sSpaltenbez(27) = "EXDAT"
            sSpaltenbez(28) = "PGN"
            sSpaltenbez(29) = "Marke"
            sSpaltenbez(30) = "Lagerp"
            
            For i = 0 To 30
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 30
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "REPSATZ" Then
            
            sSpaltenname(0) = "Auftrag Nr"
            sSpaltenname(1) = "Artnr defekt"
            sSpaltenname(2) = "Bezeichnung defekt"
            sSpaltenname(3) = "Artnr DL"
            sSpaltenname(4) = "Bezeichnung DL"
            sSpaltenname(5) = "Serien Nr"
            sSpaltenname(6) = "Bemerkung"
            sSpaltenname(7) = "Menge def"
            sSpaltenname(8) = "Menge DL"
            sSpaltenname(9) = "Mängel"
            sSpaltenname(10) = "Zubehör"
            sSpaltenname(11) = "Kassen - VK"
        
            sSpaltenbez(0) = "AUFTRAGNR"
            sSpaltenbez(1) = "ARTNRDEF"
            sSpaltenbez(2) = "BEZEICHDEF"
            sSpaltenbez(3) = "ARTNRDIE"
            sSpaltenbez(4) = "BEZEICHDIE"
            sSpaltenbez(5) = "SERIENNR"
            sSpaltenbez(6) = "BEMERK"
            sSpaltenbez(7) = "MENGEDEF"
            sSpaltenbez(8) = "MENGEDIE"
            sSpaltenbez(9) = "Mangel"
            sSpaltenbez(10) = "ZUBEH"
            sSpaltenbez(11) = "KVKPR1"
            
            For i = 0 To 11
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 11
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "KUNDBEST" Then
            
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Bestand"
            sSpaltenname(3) = "K-VK"
            sSpaltenname(4) = "L-VK"
            sSpaltenname(5) = "Ihr Preis"
            sSpaltenname(6) = "Schnitt-EK"
            sSpaltenname(7) = "LiefNr."
            sSpaltenname(8) = "LiefBestNr"
            sSpaltenname(9) = "EAN"
            sSpaltenname(10) = "2.EAN"
            sSpaltenname(11) = "3.EAN"
            sSpaltenname(12) = "Linie"
            sSpaltenname(13) = "RKZ"
            sSpaltenname(14) = "MWST"
            sSpaltenname(15) = "MinBestell"
            sSpaltenname(16) = "MinBestand"
            sSpaltenname(17) = "Inhalt"
            sSpaltenname(18) = "Einheit"
            sSpaltenname(19) = "Grundpreis"
            sSpaltenname(20) = "Rabatt"
            sSpaltenname(21) = "Geführt"
            sSpaltenname(22) = "Bonus"
            sSpaltenname(23) = "AGN"
            sSpaltenname(24) = "AWM"
            sSpaltenname(25) = "Aufnahme"
            sSpaltenname(26) = "geräumt"
            sSpaltenname(27) = "PGN"
            sSpaltenname(28) = "Marke"
            sSpaltenname(29) = "LagerNr"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Bestand"
            sSpaltenbez(3) = "KVKPR1"
            sSpaltenbez(4) = "VKPR"
            sSpaltenbez(5) = "KUPR"
            sSpaltenbez(6) = "EKPR"
            sSpaltenbez(7) = "LINR"
            sSpaltenbez(8) = "LIBESNR"
            sSpaltenbez(9) = "EAN"
            sSpaltenbez(10) = "EAN2"
            sSpaltenbez(11) = "EAN3"
            sSpaltenbez(12) = "LPZ"
            sSpaltenbez(13) = "RKZ"
            sSpaltenbez(14) = "MWST"
            sSpaltenbez(15) = "MINMEN"
            sSpaltenbez(16) = "MINBEST"
            sSpaltenbez(17) = "INHALT"
            sSpaltenbez(18) = "INHALTBEZ"
            sSpaltenbez(19) = "Grundpreis"
            sSpaltenbez(20) = "Rabatt_ok"
            sSpaltenbez(21) = "Gefuehrt"
            sSpaltenbez(22) = "Bonus_ok"
            sSpaltenbez(23) = "AGN"
            sSpaltenbez(24) = "AWM"
            sSpaltenbez(25) = "Aufdat"
            sSpaltenbez(26) = "EXDAT"
            sSpaltenbez(27) = "PGN"
            sSpaltenbez(28) = "Marke"
            sSpaltenbez(29) = "Lagerp"
            
            For i = 0 To 29
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 29
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "REPKOPF" Then
            
            sSpaltenname(0) = "Auftrag Nr"
            sSpaltenname(1) = "Kundnr"
            sSpaltenname(2) = "Kundenname"
            sSpaltenname(3) = "KV Datum"
            sSpaltenname(4) = "Auftr. Datum"
            sSpaltenname(5) = "Bed Nr."
            sSpaltenname(6) = "WS Nr"
            sSpaltenname(7) = "Werkstatt"
            sSpaltenname(8) = "Status Autr."
            sSpaltenname(9) = "Status KV"
            
            sSpaltenbez(0) = "AUFTRAGNR"
            sSpaltenbez(1) = "KUNDNR"
            sSpaltenbez(2) = "NACHNAME"
            sSpaltenbez(3) = "KVDATE"
            sSpaltenbez(4) = "AUTRDATE"
            sSpaltenbez(5) = "Bednu"
            sSpaltenbez(6) = "LINR"
            sSpaltenbez(7) = "LIEFBEZ"
            sSpaltenbez(8) = "STATUSAUTR"
            sSpaltenbez(9) = "STATUSKV"
            
            For i = 0 To 9
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 9
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "RECHNUNG" Then
            
            sSpaltenname(0) = "Linr"
            sSpaltenname(1) = "Lieferant"
            sSpaltenname(2) = "RechNr"
            sSpaltenname(3) = "Lieferschein"
            sSpaltenname(4) = "Rechnungsdatum"
            sSpaltenname(5) = "fällig am"
            sSpaltenname(6) = "Betrag v MwSt"
            sSpaltenname(7) = "Betrag e MwSt"
            sSpaltenname(8) = "Betrag o MwSt"
            sSpaltenname(9) = "MwSt Anteil v"
            sSpaltenname(10) = "MwSt Anteil e"
            sSpaltenname(11) = "Netto v MWST"
            sSpaltenname(12) = "Netto e MWST"
            sSpaltenname(13) = "Bemerkung"
            sSpaltenname(14) = "Status"
            sSpaltenname(15) = "Pos"
        
            sSpaltenbez(0) = "LiNr"
            sSpaltenbez(1) = "LiefBez"
            sSpaltenbez(2) = "RechNr"
            sSpaltenbez(3) = "LiefSNr"
            sSpaltenbez(4) = "Rechdat"
            sSpaltenbez(5) = "faellig"
            sSpaltenbez(6) = "RechBTv"
            sSpaltenbez(7) = "RechBTe"
            sSpaltenbez(8) = "RechBTo"
            sSpaltenbez(9) = "Anteilv"
            sSpaltenbez(10) = "Anteile"
            sSpaltenbez(11) = "RechBTnV"
            sSpaltenbez(12) = "RechBTnE"
            sSpaltenbez(13) = "Bemerk"
            sSpaltenbez(14) = "Status"
            sSpaltenbez(15) = "Autopos"
        
            For i = 0 To 15
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 15
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "BEALIEF" Then
            
            sSpaltenname(0) = "LiefNr."
            sSpaltenname(1) = "Kürzel"
            sSpaltenname(2) = "Lieferant"
            sSpaltenname(3) = "Straße"
            sSpaltenname(4) = "PLZ"
            sSpaltenname(5) = "Ort"
            sSpaltenname(6) = "Telefon"
            sSpaltenname(7) = "Fax"
            sSpaltenname(8) = "Zusatz"
            sSpaltenname(9) = "KundNr"
            sSpaltenname(10) = "Notiz"
            sSpaltenname(11) = "A-Wert"
            sSpaltenname(12) = "LUG"
            sSpaltenname(13) = "LAGER(SEK)"
            sSpaltenname(14) = "EINKAUF akt Jahr"
            sSpaltenname(15) = "EINKAUF vor Jahr"
            sSpaltenname(16) = "UMSATZ Br akt Jahr"
            sSpaltenname(17) = "UMSATZ Br vor Jahr"
            sSpaltenname(18) = "UMSATZ SEK akt Jahr"
            sSpaltenname(19) = "UMSATZ SEK vor Jahr"
            
            sSpaltenname(20) = "UMS Br l. 12M"
            sSpaltenname(21) = "UMS Br l. 12M VJZR"
            sSpaltenname(22) = "UMS SEK l. 12M"
            sSpaltenname(23) = "UMS SEK l. 12M VJZR"
            
            sSpaltenname(24) = "DIFF UMS BR 12M "
            sSpaltenname(25) = "DIFF UMS BR 12M %"
            sSpaltenname(26) = "DIFF UMS SEK 12M "
            sSpaltenname(27) = "DIFF UMS SEK 12M %"
            sSpaltenname(28) = "LAGER(Stück)"
            sSpaltenname(29) = "Penner(SEK)"
            sSpaltenname(30) = "Penner(Stück)"
            
            sSpaltenname(31) = "Panteil Stück in %"
            sSpaltenname(32) = "Panteil SEK in %"
           
        
            sSpaltenbez(0) = "Linr"
            sSpaltenbez(1) = "Kuerzel"
            sSpaltenbez(2) = "liefbez"
            sSpaltenbez(3) = "Strasse"
            sSpaltenbez(4) = "PLZ"
            sSpaltenbez(5) = "Stadt"
            sSpaltenbez(6) = "TEL"
            sSpaltenbez(7) = "Fax"
            sSpaltenbez(8) = "Zusatz"
            sSpaltenbez(9) = "KundNr"
            sSpaltenbez(10) = "Notiz"
            sSpaltenbez(11) = "Awert"
            sSpaltenbez(12) = "LUG"
            sSpaltenbez(13) = "LAGERWSEK"
            sSpaltenbez(14) = "EKaktJahr"
            
            sSpaltenbez(15) = "EKvorJahr"
            sSpaltenbez(16) = "UmsBraktJahr"
            sSpaltenbez(17) = "UmsBrvorJahr"
            sSpaltenbez(18) = "UmsSEKaktJahr"
            sSpaltenbez(19) = "UmsSEKvorJahr"
            
            sSpaltenbez(20) = "UmsBrakt12M"
            sSpaltenbez(21) = "UmsBrvor12M"
            sSpaltenbez(22) = "UmsSEKakt12"
            sSpaltenbez(23) = "UmsSEKvor12"
            
            sSpaltenbez(24) = "UmsBr12MDIFFabs"
            sSpaltenbez(25) = "UmsBr12MDIFFrela"
            sSpaltenbez(26) = "UmsSEK12MDIFFabs"
            sSpaltenbez(27) = "UmsSEK12MDIFFrela"
            sSpaltenbez(28) = "LAGERST"
            sSpaltenbez(29) = "PENNERWSEK"
            sSpaltenbez(30) = "PENNERST"
            sSpaltenbez(31) = "PENANTEILST"
            sSpaltenbez(32) = "PENANTEILSEK"
            
            For i = 0 To 32
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 32
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
           
        ElseIf stabelle = "BEALPZ" Then
            
            sSpaltenname(0) = "Linie"
            sSpaltenname(1) = "Linienbezeichnung"
            sSpaltenname(2) = "Marke"
            sSpaltenname(3) = "LUG"
            sSpaltenname(4) = "LAGER(SEK)"
            sSpaltenname(5) = "EINKAUF akt Jahr"
            sSpaltenname(6) = "EINKAUF vor Jahr"
            sSpaltenname(7) = "UMSATZ Br akt Jahr"
            sSpaltenname(8) = "UMSATZ Br vor Jahr"
            sSpaltenname(9) = "UMSATZ SEK akt Jahr"
            sSpaltenname(10) = "UMSATZ SEK vor Jahr"
            
            sSpaltenname(11) = "UMS Br l. 12M"
            sSpaltenname(12) = "UMS Br l. 12M VJZR"
            sSpaltenname(13) = "UMS SEK l. 12M"
            sSpaltenname(14) = "UMS SEK l. 12M VJZR"
            
            sSpaltenname(15) = "DIFF UMS BR 12M "
            sSpaltenname(16) = "DIFF UMS BR 12M %"
            sSpaltenname(17) = "DIFF UMS SEK 12M "
            sSpaltenname(18) = "DIFF UMS SEK 12M %"
           
            sSpaltenname(19) = "LAGER(Stück)"
            sSpaltenname(20) = "Penner(SEK)"
            sSpaltenname(21) = "Penner(Stück)"
            
            sSpaltenname(22) = "Panteil Stück in %"
            sSpaltenname(23) = "Panteil SEK in %"
        
            sSpaltenbez(0) = "LPZ"
            sSpaltenbez(1) = "LINBEZEICH"
            sSpaltenbez(2) = "MARKE"
            
            sSpaltenbez(3) = "LUG"
            sSpaltenbez(4) = "LAGERWSEK"
            sSpaltenbez(5) = "EKaktJahr"
            
            sSpaltenbez(6) = "EKvorJahr"
            sSpaltenbez(7) = "UmsBraktJahr"
            sSpaltenbez(8) = "UmsBrvorJahr"
            sSpaltenbez(9) = "UmsSEKaktJahr"
            sSpaltenbez(10) = "UmsSEKvorJahr"
            
            sSpaltenbez(11) = "UmsBrakt12M"
            sSpaltenbez(12) = "UmsBrvor12M"
            sSpaltenbez(13) = "UmsSEKakt12"
            sSpaltenbez(14) = "UmsSEKvor12"
            
            sSpaltenbez(15) = "UmsBr12MDIFFabs"
            sSpaltenbez(16) = "UmsBr12MDIFFrela"
            sSpaltenbez(17) = "UmsSEK12MDIFFabs"
            sSpaltenbez(18) = "UmsSEK12MDIFFrela"
            
            sSpaltenbez(19) = "LAGERST"
            sSpaltenbez(20) = "PENNERWSEK"
            sSpaltenbez(21) = "PENNERST"
            sSpaltenbez(22) = "PENANTEILST"
            sSpaltenbez(23) = "PENANTEILSEK"
            
            For i = 0 To 23
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 23
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "BEAMARKE" Then
            

            sSpaltenname(0) = "Kürzel"
            sSpaltenname(1) = "Marke"
            sSpaltenname(2) = "LUG"
            sSpaltenname(3) = "LAGER(SEK)"
            sSpaltenname(4) = "EINKAUF akt Jahr"
            sSpaltenname(5) = "EINKAUF vor Jahr"
            sSpaltenname(6) = "UMSATZ Br akt Jahr"
            sSpaltenname(7) = "UMSATZ Br vor Jahr"
            sSpaltenname(8) = "UMSATZ SEK akt Jahr"
            sSpaltenname(9) = "UMSATZ SEK vor Jahr"
            
            sSpaltenname(10) = "UMS Br l. 12M"
            sSpaltenname(11) = "UMS Br l. 12M VJZR"
            sSpaltenname(12) = "UMS SEK l. 12M"
            sSpaltenname(13) = "UMS SEK l. 12M VJZR"
            
            sSpaltenname(14) = "DIFF UMS BR 12M "
            sSpaltenname(15) = "DIFF UMS BR 12M %"
            sSpaltenname(16) = "DIFF UMS SEK 12M "
            sSpaltenname(17) = "DIFF UMS SEK 12M %"
           
            sSpaltenname(18) = "LAGER(Stück)"
            sSpaltenname(19) = "Penner(SEK)"
            sSpaltenname(20) = "Penner(Stück)"
            
            sSpaltenname(21) = "Panteil Stück in %"
            sSpaltenname(22) = "Panteil SEK in %"
        

            sSpaltenbez(0) = "Kuerzel"
            sSpaltenbez(1) = "MARKENBEZ"
            
            sSpaltenbez(2) = "LUG"
            sSpaltenbez(3) = "LAGERWSEK"
            sSpaltenbez(4) = "EKaktJahr"
            
            sSpaltenbez(5) = "EKvorJahr"
            sSpaltenbez(6) = "UmsBraktJahr"
            sSpaltenbez(7) = "UmsBrvorJahr"
            sSpaltenbez(8) = "UmsSEKaktJahr"
            sSpaltenbez(9) = "UmsSEKvorJahr"
            
            sSpaltenbez(10) = "UmsBrakt12M"
            sSpaltenbez(11) = "UmsBrvor12M"
            sSpaltenbez(12) = "UmsSEKakt12"
            sSpaltenbez(13) = "UmsSEKvor12"
            
            sSpaltenbez(14) = "UmsBr12MDIFFabs"
            sSpaltenbez(15) = "UmsBr12MDIFFrela"
            sSpaltenbez(16) = "UmsSEK12MDIFFabs"
            sSpaltenbez(17) = "UmsSEK12MDIFFrela"
            
            sSpaltenbez(18) = "LAGERST"
            sSpaltenbez(19) = "PENNERWSEK"
            sSpaltenbez(20) = "PENNERST"
            sSpaltenbez(21) = "PENANTEILST"
            sSpaltenbez(22) = "PENANTEILSEK"
            
            For i = 0 To 22
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 22
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "BEALIEFX" Then
            
            sSpaltenname(0) = "LiefNr."
            sSpaltenname(1) = "Kürzel"
            sSpaltenname(2) = "Lieferant"
            sSpaltenname(3) = "Straße"
            sSpaltenname(4) = "PLZ"
            sSpaltenname(5) = "Ort"
            sSpaltenname(6) = "Telefon"
            sSpaltenname(7) = "Fax"
            sSpaltenname(8) = "Zusatz"
            sSpaltenname(9) = "KundNr"
            sSpaltenname(10) = "Notiz"
            sSpaltenname(11) = "A-Wert"
            sSpaltenname(12) = "LUG"
            sSpaltenname(13) = "LAGER(SEK)"
            sSpaltenname(14) = "EINKAUF akt Jahr"
            sSpaltenname(15) = "EINKAUF vor Jahr"
            sSpaltenname(16) = "UMSATZ Br akt Jahr"
            sSpaltenname(17) = "UMSATZ Br vor Jahr"
            sSpaltenname(18) = "UMSATZ SEK akt Jahr"
            sSpaltenname(19) = "UMSATZ SEK vor Jahr"
            
            sSpaltenname(20) = "UMS Br l. 12M"
            sSpaltenname(21) = "UMS Br l. 12M VJZR"
            sSpaltenname(22) = "UMS SEK l. 12M"
            sSpaltenname(23) = "UMS SEK l. 12M VJZR"
            
            sSpaltenname(24) = "DIFF UMS BR 12M "
            sSpaltenname(25) = "DIFF UMS BR 12M %"
            sSpaltenname(26) = "DIFF UMS SEK 12M "
            sSpaltenname(27) = "DIFF UMS SEK 12M %"
            sSpaltenname(28) = "LAGER(Stück)"
            sSpaltenname(29) = "Penner(SEK)"
            sSpaltenname(30) = "Penner(Stück)"
            
            sSpaltenname(31) = "Panteil Stück in %"
            sSpaltenname(32) = "Panteil SEK in %"
           
        
            sSpaltenbez(0) = "Linr"
            sSpaltenbez(1) = "Kuerzel"
            sSpaltenbez(2) = "liefbez"
            sSpaltenbez(3) = "Strasse"
            sSpaltenbez(4) = "PLZ"
            sSpaltenbez(5) = "Stadt"
            sSpaltenbez(6) = "TEL"
            sSpaltenbez(7) = "Fax"
            sSpaltenbez(8) = "Zusatz"
            sSpaltenbez(9) = "KundNr"
            sSpaltenbez(10) = "Notiz"
            sSpaltenbez(11) = "Awert"
            sSpaltenbez(12) = "LUG"
            sSpaltenbez(13) = "LAGERWSEK"
            sSpaltenbez(14) = "EKaktJahr"
            
            sSpaltenbez(15) = "EKvorJahr"
            sSpaltenbez(16) = "UmsBraktJahr"
            sSpaltenbez(17) = "UmsBrvorJahr"
            sSpaltenbez(18) = "UmsSEKaktJahr"
            sSpaltenbez(19) = "UmsSEKvorJahr"
            
            sSpaltenbez(20) = "UmsBrakt12M"
            sSpaltenbez(21) = "UmsBrvor12M"
            sSpaltenbez(22) = "UmsSEKakt12"
            sSpaltenbez(23) = "UmsSEKvor12"
            
            sSpaltenbez(24) = "UmsBr12MDIFFabs"
            sSpaltenbez(25) = "UmsBr12MDIFFrela"
            sSpaltenbez(26) = "UmsSEK12MDIFFabs"
            sSpaltenbez(27) = "UmsSEK12MDIFFrela"
            sSpaltenbez(28) = "LAGERST"
            sSpaltenbez(29) = "PENNERWSEK"
            sSpaltenbez(30) = "PENNERST"
            sSpaltenbez(31) = "PENANTEILST"
            sSpaltenbez(32) = "PENANTEILSEK"
            
            
            For i = 0 To 32
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 32
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "BEALPZX" Then
            
            sSpaltenname(0) = "Linie"
            sSpaltenname(1) = "Linienbezeichnung"
            sSpaltenname(2) = "Marke"
            sSpaltenname(3) = "LUG"
            sSpaltenname(4) = "LAGER(SEK)"
            sSpaltenname(5) = "EINKAUF akt Jahr"
            sSpaltenname(6) = "EINKAUF vor Jahr"
            sSpaltenname(7) = "UMSATZ Br akt Jahr"
            sSpaltenname(8) = "UMSATZ Br vor Jahr"
            sSpaltenname(9) = "UMSATZ SEK akt Jahr"
            sSpaltenname(10) = "UMSATZ SEK vor Jahr"
            
            sSpaltenname(11) = "UMS Br l. 12M"
            sSpaltenname(12) = "UMS Br l. 12M VJZR"
            sSpaltenname(13) = "UMS SEK l. 12M"
            sSpaltenname(14) = "UMS SEK l. 12M VJZR"
            
            sSpaltenname(15) = "DIFF UMS BR 12M "
            sSpaltenname(16) = "DIFF UMS BR 12M %"
            sSpaltenname(17) = "DIFF UMS SEK 12M "
            sSpaltenname(18) = "DIFF UMS SEK 12M %"
           
            sSpaltenname(19) = "LAGER(Stück)"
            sSpaltenname(20) = "Penner(SEK)"
            sSpaltenname(21) = "Penner(Stück)"
            
            sSpaltenname(22) = "Panteil Stück in %"
            sSpaltenname(23) = "Panteil SEK in %"
        
            sSpaltenbez(0) = "LPZ"
            sSpaltenbez(1) = "LINBEZEICH"
            sSpaltenbez(2) = "MARKE"
            
            sSpaltenbez(3) = "LUG"
            sSpaltenbez(4) = "LAGERWSEK"
            sSpaltenbez(5) = "EKaktJahr"
            
            sSpaltenbez(6) = "EKvorJahr"
            sSpaltenbez(7) = "UmsBraktJahr"
            sSpaltenbez(8) = "UmsBrvorJahr"
            sSpaltenbez(9) = "UmsSEKaktJahr"
            sSpaltenbez(10) = "UmsSEKvorJahr"
            
            sSpaltenbez(11) = "UmsBrakt12M"
            sSpaltenbez(12) = "UmsBrvor12M"
            sSpaltenbez(13) = "UmsSEKakt12"
            sSpaltenbez(14) = "UmsSEKvor12"
            
            sSpaltenbez(15) = "UmsBr12MDIFFabs"
            sSpaltenbez(16) = "UmsBr12MDIFFrela"
            sSpaltenbez(17) = "UmsSEK12MDIFFabs"
            sSpaltenbez(18) = "UmsSEK12MDIFFrela"
            
            sSpaltenbez(19) = "LAGERST"
            sSpaltenbez(20) = "PENNERWSEK"
            sSpaltenbez(21) = "PENNERST"
            sSpaltenbez(22) = "PENANTEILST"
            sSpaltenbez(23) = "PENANTEILSEK"
            
            For i = 0 To 23
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 23
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "BEAMARKEX" Then
            

            sSpaltenname(0) = "Kürzel"
            sSpaltenname(1) = "Marke"
            sSpaltenname(2) = "LUG"
            sSpaltenname(3) = "LAGER(SEK)"
            sSpaltenname(4) = "EINKAUF akt Jahr"
            sSpaltenname(5) = "EINKAUF vor Jahr"
            sSpaltenname(6) = "UMSATZ Br akt Jahr"
            sSpaltenname(7) = "UMSATZ Br vor Jahr"
            sSpaltenname(8) = "UMSATZ SEK akt Jahr"
            sSpaltenname(9) = "UMSATZ SEK vor Jahr"
            
            sSpaltenname(10) = "UMS Br l. 12M"
            sSpaltenname(11) = "UMS Br l. 12M VJZR"
            sSpaltenname(12) = "UMS SEK l. 12M"
            sSpaltenname(13) = "UMS SEK l. 12M VJZR"
            
            sSpaltenname(14) = "DIFF UMS BR 12M "
            sSpaltenname(15) = "DIFF UMS BR 12M %"
            sSpaltenname(16) = "DIFF UMS SEK 12M "
            sSpaltenname(17) = "DIFF UMS SEK 12M %"
           
            sSpaltenname(18) = "LAGER(Stück)"
            sSpaltenname(19) = "Penner(SEK)"
            sSpaltenname(20) = "Penner(Stück)"
            
            sSpaltenname(21) = "Panteil Stück in %"
            sSpaltenname(22) = "Panteil SEK in %"
        

            sSpaltenbez(0) = "Kuerzel"
            sSpaltenbez(1) = "MARKENBEZ"
            
            sSpaltenbez(2) = "LUG"
            sSpaltenbez(3) = "LAGERWSEK"
            sSpaltenbez(4) = "EKaktJahr"
            
            sSpaltenbez(5) = "EKvorJahr"
            sSpaltenbez(6) = "UmsBraktJahr"
            sSpaltenbez(7) = "UmsBrvorJahr"
            sSpaltenbez(8) = "UmsSEKaktJahr"
            sSpaltenbez(9) = "UmsSEKvorJahr"
            
            sSpaltenbez(10) = "UmsBrakt12M"
            sSpaltenbez(11) = "UmsBrvor12M"
            sSpaltenbez(12) = "UmsSEKakt12"
            sSpaltenbez(13) = "UmsSEKvor12"
            
            sSpaltenbez(14) = "UmsBr12MDIFFabs"
            sSpaltenbez(15) = "UmsBr12MDIFFrela"
            sSpaltenbez(16) = "UmsSEK12MDIFFabs"
            sSpaltenbez(17) = "UmsSEK12MDIFFrela"
            
            sSpaltenbez(18) = "LAGERST"
            sSpaltenbez(19) = "PENNERWSEK"
            sSpaltenbez(20) = "PENNERST"
            sSpaltenbez(21) = "PENANTEILST"
            sSpaltenbez(22) = "PENANTEILSEK"
            
            For i = 0 To 22
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 22
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf UCase$(stabelle) = "BESTELLUNG" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "BVO"
            sSpaltenname(3) = "Bestand"
            sSpaltenname(4) = "K VKPR"
            sSpaltenname(5) = "L VKPR"
            sSpaltenname(6) = "L EKPR"
            sSpaltenname(7) = "S EKPR"
            sSpaltenname(8) = "LiefBestNr"
            sSpaltenname(9) = "EAN"
            sSpaltenname(10) = "VK VM"
            sSpaltenname(11) = "VK LM"
            sSpaltenname(12) = "Linie"
            sSpaltenname(13) = "ger"
            sSpaltenname(14) = "min Best"
            sSpaltenname(15) = "VPE"
            
            sSpaltenname(16) = "Notizen"
            sSpaltenname(17) = "AGN"
            sSpaltenname(18) = "Farbe"
            sSpaltenname(19) = "in Be"
            sSpaltenname(20) = "VK VJ"
            sSpaltenname(21) = "VK LJ"
            sSpaltenname(22) = "Rabatt"
            sSpaltenname(23) = "U Lief"
            sSpaltenname(24) = "FB II"
            sSpaltenname(25) = "Merk"
            sSpaltenname(26) = "PGN"
            sSpaltenname(27) = "SoK"
            sSpaltenname(28) = "Größe"
            sSpaltenname(29) = "Pin"
            sSpaltenname(30) = "Shop"
            sSpaltenname(31) = "HS"
            sSpaltenname(32) = "BV Proben"
            sSpaltenname(33) = "BV Tester"
            sSpaltenname(34) = "Plus NatRab"
            
            
            
            
            sAliase(0) = "Artikelnummer"
            sAliase(1) = "Artikelbezeichnung"
            sAliase(2) = "Bestellvorschlagszahl"
            sAliase(3) = "Bestand"
            sAliase(4) = "Kassenverkaufspreis"
            sAliase(5) = "Listenverkaufspreis"
            sAliase(6) = "Listeneinkaufspreis"
            sAliase(7) = "Schnitteinkaufspreis"
            sAliase(8) = "Bestellnummer beim Lieferanten"
            sAliase(9) = "Strichcode auf der Verpackung"
            sAliase(10) = "Verkäufe des Vormonats"
            sAliase(11) = "Verkäufe des laufenden Monats"
            sAliase(12) = "Linie eines Lieferantens"
            sAliase(13) = "Artikel geräumt"
            sAliase(14) = "Mindestbestand"
            sAliase(15) = "Verpackungseinheit / Mindestbestellmenge"
            sAliase(16) = "Notizen"
            sAliase(17) = "Artikelgruppennummer"
            sAliase(18) = "Farbkennzeichnung eines Artikels"
            sAliase(19) = "in Bestellung"
            sAliase(20) = "Verkäufe des Vorjahres"
            sAliase(21) = "Verkäufe des laufenden Jahres"
            sAliase(22) = "Unterschied zwischen KVK und LVK"
            sAliase(23) = "Unterlieferant"
            sAliase(24) = "2. Farbkennzeichnung eines Artikels"
            sAliase(25) = "zusätzliches Merkmal"
            sAliase(26) = "Produktgruppennummer"
            sAliase(27) = "Sonderkontingent"
            sAliase(28) = "Größe"
            sAliase(29) = "Pin"
            sAliase(30) = "Shop"
            sAliase(31) = "HS"
            sAliase(32) = "Bestellmenge Proben"
            sAliase(33) = "Bestellmenge Tester"
            sAliase(34) = "Menge Naturalrabatt"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "BESTVOR"
            sSpaltenbez(3) = "Bestand"
            sSpaltenbez(4) = "KVKPR1"
            sSpaltenbez(5) = "VKPR"
            sSpaltenbez(6) = "LEKPR"
            sSpaltenbez(7) = "EKPR"
            sSpaltenbez(8) = "LIBESNR"
            sSpaltenbez(9) = "EAN"
            sSpaltenbez(10) = "VKVMO1"
            sSpaltenbez(11) = "VKAMO1"
            sSpaltenbez(12) = "LPZ"
            sSpaltenbez(13) = "RKZ"
            sSpaltenbez(14) = "MINBEST"
            sSpaltenbez(15) = "MINMEN"
            
            sSpaltenbez(16) = "NOTIZEN"
            sSpaltenbez(17) = "AGN"
            sSpaltenbez(18) = "AWM"
            sSpaltenbez(19) = "INBEST"
            sSpaltenbez(20) = "VKVJ1"
            sSpaltenbez(21) = "VKLJ1"
            sSpaltenbez(22) = "RAB"
            sSpaltenbez(23) = "MOPREIS"
            sSpaltenbez(24) = "AWM2"
            sSpaltenbez(25) = "MERK"
            sSpaltenbez(26) = "PGN"
            sSpaltenbez(27) = "SOKO"
            sSpaltenbez(28) = "GROESSE"
            sSpaltenbez(29) = "PIN"
            sSpaltenbez(30) = "SHOP"
            sSpaltenbez(31) = "HS"
            sSpaltenbez(32) = "BESTVOR_PROBEN"
            sSpaltenbez(33) = "BESTVOR_TESTER"
            sSpaltenbez(34) = "BESTVOR_NR"
            
            For i = 0 To 34
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 34
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
            sSQL = "Delete from TABALI" & srechnertab
            gdBase.Execute sSQL, dbFailOnError
            
            For i = 0 To 34
                sSQL = "Insert into TABALI" & srechnertab & " (Tabname,Spaltenna,Spaltenali) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sAliase(i) & "')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
         

        ElseIf UCase$(stabelle) = "ZBON" Then
        
            sSpaltenname(0) = "Umsatz gesamt:"
            sSpaltenname(1) = "+ Bar"
            sSpaltenname(2) = "+ Schecks"
            sSpaltenname(3) = "+ Kredite"
            sSpaltenname(4) = "+ Kreditkarte"
            sSpaltenname(5) = "+ Umsatz aus Gutscheinen:"
            sSpaltenname(6) = "+ Lastschrift"
            sSpaltenname(7) = "+ Dukaten"
            sSpaltenname(8) = "Kassensoll:"
            sSpaltenname(9) = "+ Bargeld:"
            sSpaltenname(10) = "+ Einzahlungen:"
            sSpaltenname(11) = "+ Barverkäufe"
            sSpaltenname(12) = "+ GutschVk Bar"
            sSpaltenname(13) = "+ Tilgung Bar"
            sSpaltenname(14) = "+ Wechselgeld:"
            sSpaltenname(15) = "- Abschöpfung:"
            sSpaltenname(16) = "- Gutscheinauszahlungen:"
            sSpaltenname(17) = "- Auszahlungen:"
            sSpaltenname(18) = "+ Schecks:"
            sSpaltenname(19) = "Kredit-Tilgungen"
            sSpaltenname(20) = "+ Tilgung in Bar"
            sSpaltenname(21) = "+ Tilgung per Scheck"
            sSpaltenname(22) = "+ Tilgung per Gutschein"
            sSpaltenname(23) = "+ Tilgung per Karte"
            sSpaltenname(24) = "eingereichte Gutscheine:"
            sSpaltenname(25) = "daraus Fremdgutscheine:"
            sSpaltenname(26) = "daraus Rest-Gutscheine:"
            sSpaltenname(27) = "Kundenzahl:"
            sSpaltenname(28) = "Kundenschnitt:"
            sSpaltenname(29) = "Sonderpreise:"
            sSpaltenname(30) = "Sonderpreise Anz.:"
            sSpaltenname(31) = "Schublade geöffnet:"
            sSpaltenname(32) = "Artikelrabatt:"
            sSpaltenname(33) = "Gesamtrabatt:"
            sSpaltenname(34) = "Gesamtrabatt Anz.:"
            sSpaltenname(35) = "Stornosumme:"
            sSpaltenname(36) = "Storno Anz.:"
            sSpaltenname(37) = "Gutschein-Verkäufe:"
            sSpaltenname(38) = "+ Gutscheine über Bar"
            sSpaltenname(39) = "+ Gutscheine über Scheck"
            sSpaltenname(40) = "+ Gutscheine über Kredite"
            sSpaltenname(41) = "+ Gutscheine über Karte"
            sSpaltenname(42) = "+ Gutscheine über Lastschrift"
            sSpaltenname(43) = "+ Gutscheine über Gutscheine"
            sSpaltenname(44) = "Umsatz volle MWSt:"
            sSpaltenname(45) = "Betrag volle MWSt:"
            sSpaltenname(46) = "Umsatz erm. MWSt:"
            sSpaltenname(47) = "Betrag erm. MWSt:"
            sSpaltenname(48) = "Umsatz ohne MWSt:"
            sSpaltenname(49) = "Differenz jetzt:"
            sSpaltenname(50) = "Differenz summiert"
            sSpaltenname(51) = "Kreditkarte gesamt"
            sSpaltenname(52) = "Artikelrabatt Anz.:"
            sSpaltenname(53) = "Gesamtumsatz:"
            
            
            
            sSpaltenbez(0) = "Umsatz gesamt:"
            sSpaltenbez(1) = "+ Bar"
            sSpaltenbez(2) = "+ Schecks"
            sSpaltenbez(3) = "+ Kredite"
            sSpaltenbez(4) = "+ Kreditkarte"
            sSpaltenbez(5) = "+ Umsatz aus Gutscheinen:"
            sSpaltenbez(6) = "+ Lastschrift"
            sSpaltenbez(7) = "+ Dukaten"
            sSpaltenbez(8) = "Kassensoll:"
            sSpaltenbez(9) = "+ Bargeld:"
            sSpaltenbez(10) = "+ Einzahlungen:"
            sSpaltenbez(11) = "+ Barverkäufe"
            sSpaltenbez(12) = "+ GutschVk Bar"
            sSpaltenbez(13) = "+ Tilgung Bar"
            sSpaltenbez(14) = "+ Wechselgeld:"
            sSpaltenbez(15) = "- Abschöpfung:"
            sSpaltenbez(16) = "- Gutscheinauszahlungen:"
            sSpaltenbez(17) = "- Auszahlungen:"
            sSpaltenbez(18) = "+ Schecks:"
            sSpaltenbez(19) = "Kredit-Tilgungen"
            sSpaltenbez(20) = "+ Tilgung in Bar"
            sSpaltenbez(21) = "+ Tilgung per Scheck"
            sSpaltenbez(22) = "+ Tilgung per Gutschein"
            sSpaltenbez(23) = "+ Tilgung per Karte"
            sSpaltenbez(24) = "eingereichte Gutscheine:"
            sSpaltenbez(25) = "daraus Fremdgutscheine:"
            sSpaltenbez(26) = "daraus Rest-Gutscheine:"
            sSpaltenbez(27) = "Kundenzahl:"
            sSpaltenbez(28) = "Kundenschnitt:"
            sSpaltenbez(29) = "Sonderpreise:"
            sSpaltenbez(30) = "Sonderpreise Anz.:"
            sSpaltenbez(31) = "Schublade geöffnet:"
            sSpaltenbez(32) = "Artikelrabatt:"
            sSpaltenbez(33) = "Gesamtrabatt:"
            sSpaltenbez(34) = "Gesamtrabatt Anz.:"
            sSpaltenbez(35) = "Stornosumme:"
            sSpaltenbez(36) = "Storno Anz.:"
            sSpaltenbez(37) = "Gutschein-Verkäufe:"
            sSpaltenbez(38) = "+ Gutscheine über Bar"
            sSpaltenbez(39) = "+ Gutscheine über Scheck"
            sSpaltenbez(40) = "+ Gutscheine über Kredite"
            sSpaltenbez(41) = "+ Gutscheine über Karte"
            sSpaltenbez(42) = "+ Gutscheine über Lastschrift"
            sSpaltenbez(43) = "+ Gutscheine über Gutscheine"
            sSpaltenbez(44) = "Umsatz volle MWSt:"
            sSpaltenbez(45) = "Betrag volle MWSt:"
            sSpaltenbez(46) = "Umsatz erm. MWSt:"
            sSpaltenbez(47) = "Betrag erm. MWSt:"
            sSpaltenbez(48) = "Umsatz ohne MWSt:"
            sSpaltenbez(49) = "Differenz jetzt:"
            sSpaltenbez(50) = "Differenz summiert"
            sSpaltenbez(51) = "Kreditkarte gesamt"
            sSpaltenbez(52) = "Artikelrabatt Anz.:"
            sSpaltenbez(53) = "Gesamtumsatz:"
            
            For i = 0 To 53
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 53
                sSQL = "Insert into ZBONLAY (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('ZBON',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i

        ElseIf UCase$(stabelle) = "BEAKU" Then
            sSpaltenname(0) = "KdNr."
            sSpaltenname(1) = "Stern Bewertung"
            sSpaltenname(2) = "Nachname"
            sSpaltenname(3) = "Vorname"
            sSpaltenname(4) = "Straße"
            sSpaltenname(5) = "Plz"
            sSpaltenname(6) = "Ort"
            sSpaltenname(7) = "Kürzel"
            sSpaltenname(8) = "Firma"
            sSpaltenname(9) = "Titel"
            sSpaltenname(10) = "Telefon"
            sSpaltenname(11) = "Fax"
            sSpaltenname(12) = "Handy"
            sSpaltenname(13) = "Email"
            sSpaltenname(14) = "Anrede"
            sSpaltenname(15) = "Merkmal"
            sSpaltenname(16) = "Geb.Datum"
            sSpaltenname(17) = "angelegt"
            sSpaltenname(18) = "Filiale"
            sSpaltenname(19) = "Umsatz LJ"
            sSpaltenname(20) = "Umsatz VJ"
            sSpaltenname(21) = "Rabatt"
            sSpaltenname(22) = "gesperrt"
            sSpaltenname(23) = "Farbe"
            sSpaltenname(24) = "Bonus"
            sSpaltenname(25) = "BE"
            sSpaltenname(26) = "K.Karte"
            sSpaltenname(27) = "noch offen"
            sSpaltenname(28) = "offene KB"
            sSpaltenname(29) = "aktiv"
            sSpaltenname(30) = "Ge"
            sSpaltenname(31) = "EC KARTE"
            sSpaltenname(32) = "Land"
            
            sSpaltenbez(0) = "KUNDNR"
            sSpaltenbez(1) = "Sterne"
            sSpaltenbez(2) = "NAME"
            sSpaltenbez(3) = "VORNAME"
            sSpaltenbez(4) = "STRASSE"
            sSpaltenbez(5) = "PLZ"
            sSpaltenbez(6) = "STADT"
            sSpaltenbez(7) = "KUERZEL"
            sSpaltenbez(8) = "FIRMA"
            sSpaltenbez(9) = "TITEL"
            sSpaltenbez(10) = "TEL"
            sSpaltenbez(11) = "FAXNR"
            sSpaltenbez(12) = "MOBILTEL"
            sSpaltenbez(13) = "EMAIL"
            sSpaltenbez(14) = "ANREDE"
            sSpaltenbez(15) = "MERKMAL"
            sSpaltenbez(16) = "DATUM1"
            sSpaltenbez(17) = "DATUM2"
            sSpaltenbez(18) = "FILIALNR"
            sSpaltenbez(19) = "UMSLJ"
            sSpaltenbez(20) = "UMSVJ"
            sSpaltenbez(21) = "RABATT"
            sSpaltenbez(22) = "GESPERRT"
            sSpaltenbez(23) = "AWM"
            sSpaltenbez(24) = "BONUS"
            sSpaltenbez(25) = "BE"
            sSpaltenbez(26) = "KUNDKART"
            sSpaltenbez(27) = "OSUM"
            sSpaltenbez(28) = "OKB"
            sSpaltenbez(29) = "aktiv"
            sSpaltenbez(30) = "GESCHLECHT"
            sSpaltenbez(31) = "ECIDENT"
            sSpaltenbez(32) = "KURZTEXT1"
            
            For i = 0 To 32
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 32
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf UCase$(stabelle) = "KUNDEXC" Then
                
            sSpaltenname(0) = "KdNr."
            sSpaltenname(1) = "Kürzel"
            sSpaltenname(2) = "Ge"
            sSpaltenname(3) = "Firma"
            sSpaltenname(4) = "Titel"
            sSpaltenname(5) = "Nachname"
            sSpaltenname(6) = "Vorname"
            sSpaltenname(7) = "Straße"
            sSpaltenname(8) = "Plz"
            sSpaltenname(9) = "Ort"
            sSpaltenname(10) = "Telefon"
            sSpaltenname(11) = "Fax"
            sSpaltenname(12) = "Handy"
            sSpaltenname(13) = "Email"
            sSpaltenname(14) = "Anrede"
            sSpaltenname(15) = "Merkmal"
            sSpaltenname(16) = "Geb.Datum"
            sSpaltenname(17) = "angelegt"
            sSpaltenname(18) = "Filiale"
            sSpaltenname(19) = "Umsatz LJ"
            sSpaltenname(20) = "Umsatz VJ"
            sSpaltenname(21) = "Rabatt"
            sSpaltenname(22) = "gesperrt"
            sSpaltenname(23) = "Farbe"
            sSpaltenname(24) = "Bonus"
            sSpaltenname(25) = "BE"
            sSpaltenname(26) = "K.Karte"
            sSpaltenname(27) = "noch offen"
            sSpaltenname(28) = "offene KB"
            sSpaltenname(29) = "aktiv"
            sSpaltenname(30) = "Tag/Geburtstag"
            sSpaltenname(31) = "Mon/Geburtstag"
            
            sSpaltenbez(0) = "KUNDNR"
            sSpaltenbez(1) = "KUERZEL"
            sSpaltenbez(2) = "GESCHLECHT"
            sSpaltenbez(3) = "FIRMA"
            sSpaltenbez(4) = "TITEL"
            sSpaltenbez(5) = "NAME"
            sSpaltenbez(6) = "VORNAME"
            sSpaltenbez(7) = "STRASSE"
            sSpaltenbez(8) = "PLZ"
            sSpaltenbez(9) = "STADT"
            sSpaltenbez(10) = "TEL"
            sSpaltenbez(11) = "FAXNR"
            sSpaltenbez(12) = "MOBILTEL"
            sSpaltenbez(13) = "EMAIL"
            sSpaltenbez(14) = "ANREDE"
            sSpaltenbez(15) = "MERKMAL"
            sSpaltenbez(16) = "DATUM1"
            sSpaltenbez(17) = "DATUM2"
            sSpaltenbez(18) = "FILIALNR"
            sSpaltenbez(19) = "UMSLJ"
            sSpaltenbez(20) = "UMSVJ"
            sSpaltenbez(21) = "RABATT"
            sSpaltenbez(22) = "GESPERRT"
            sSpaltenbez(23) = "AWM"
            sSpaltenbez(24) = "BONUS"
            sSpaltenbez(25) = "BE"
            sSpaltenbez(26) = "KUNDKART"
            sSpaltenbez(27) = "OSUM"
            sSpaltenbez(28) = "OKB"
            sSpaltenbez(29) = "aktiv"
            sSpaltenbez(30) = "Day(Datum1) as TAG"
            sSpaltenbez(31) = "Month(Datum1) as MON"
            
            For i = 0 To 31
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 31
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
'
        
        ElseIf UCase$(stabelle) = "BEAART" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Best"
            sSpaltenname(3) = "HS"
            sSpaltenname(4) = "K VKPR"
            sSpaltenname(5) = "L VKPR"
            sSpaltenname(6) = "PGN"
            sSpaltenname(7) = "S EKPR"
            sSpaltenname(8) = "EAN"
            sSpaltenname(9) = "EAN2"
            sSpaltenname(10) = "EAN3"
            sSpaltenname(11) = "Linie"
            sSpaltenname(12) = "gef"
            sSpaltenname(13) = "Ex"
            sSpaltenname(14) = "min Best"
            sSpaltenname(15) = "Notizen"
            sSpaltenname(16) = "AGN"
            sSpaltenname(17) = "Farbe"
            sSpaltenname(18) = "in Bestellung"
            sSpaltenname(19) = "Lieferant"
            sSpaltenname(20) = "L EKPR"
            sSpaltenname(21) = "LiefbestNr"
            sSpaltenname(22) = "PS"
            sSpaltenname(23) = "Rab"
            sSpaltenname(24) = "LagerP"
            sSpaltenname(25) = "Merk"
            sSpaltenname(26) = "spez KVK"
            sSpaltenname(27) = "LUG"
            sSpaltenname(28) = "LUG D"
            sSpaltenname(29) = "Lagerw"
            
            
            sSpaltenname(30) = "LAGER(SEK)"
            sSpaltenname(31) = "EINKAUF akt Jahr"
            sSpaltenname(32) = "EINKAUF vor Jahr"
            sSpaltenname(33) = "UMSATZ Br akt Jahr"
            sSpaltenname(34) = "UMSATZ Br vor Jahr"
            sSpaltenname(35) = "UMSATZ SEK akt Jahr"
            sSpaltenname(36) = "UMSATZ SEK vor Jahr"
            sSpaltenname(37) = "UMS Br l. 12M"
            sSpaltenname(38) = "UMS Br l. 12M VJZR"
            sSpaltenname(39) = "DIFF UMS BR 12M "
            sSpaltenname(40) = "DIFF UMS BR 12M %"
            sSpaltenname(41) = "UMS SEK l. 12M"
            sSpaltenname(42) = "UMS SEK l. 12M VJZR"
            sSpaltenname(43) = "DIFF UMS SEK 12M "
            sSpaltenname(44) = "DIFF UMS SEK 12M %"
            sSpaltenname(45) = "Größe"
            sSpaltenname(46) = "Ex am"
            sSpaltenname(47) = "Shop"
            sSpaltenname(48) = "Bonif"
            sSpaltenname(49) = "le. WE"
            sSpaltenname(50) = "Modell"
            sSpaltenname(51) = "Material"
            sSpaltenname(52) = "Farbbez"
            sSpaltenname(53) = "Gruppe"
            sSpaltenname(54) = "MwSt"
            sSpaltenname(55) = "le. VK"
            
            sSpaltenname(56) = "VKM akt Jahr"
            sSpaltenname(57) = "VKM vor Jahr"
            sSpaltenname(58) = "VKM l. 12M"
            sSpaltenname(59) = "VKM l. 12M VJZR"

            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Bestand"
            sSpaltenbez(3) = "HS"
            sSpaltenbez(4) = "KVKPR1"
            sSpaltenbez(5) = "VKPR"
            sSpaltenbez(6) = "PGN"
            sSpaltenbez(7) = "EKPR"
            sSpaltenbez(8) = "EAN"
            sSpaltenbez(9) = "EAN2"
            sSpaltenbez(10) = "EAN3"
            sSpaltenbez(11) = "LPZ"
            sSpaltenbez(12) = "gefuehrt"
            sSpaltenbez(13) = "RKZ"
            sSpaltenbez(14) = "MINBEST"
            sSpaltenbez(15) = "NOTIZEN"
            sSpaltenbez(16) = "AGN"
            sSpaltenbez(17) = "AWM"
            sSpaltenbez(18) = "MINMEN"
            sSpaltenbez(19) = "LINR"
            sSpaltenbez(20) = "LEKPR"
            sSpaltenbez(21) = "LIBESNR"
            sSpaltenbez(22) = "Preisschu"
            sSpaltenbez(23) = "Rabatt_OK"
            sSpaltenbez(24) = "Lagerp"
            sSpaltenbez(25) = "Merk"
            sSpaltenbez(26) = "SPEZKVK"
            sSpaltenbez(27) = "LUG"
            sSpaltenbez(28) = "LUGD"
            sSpaltenbez(29) = "LRW"
            
            sSpaltenbez(30) = "LAGERWSEK"
            sSpaltenbez(31) = "EKaktJahr"
            sSpaltenbez(32) = "EKvorJahr"
            sSpaltenbez(33) = "UmsBraktJahr"
            sSpaltenbez(34) = "UmsBrvorJahr"
            sSpaltenbez(35) = "UmsSEKaktJahr"
            sSpaltenbez(36) = "UmsSEKvorJahr"
            sSpaltenbez(37) = "UmsBrakt12M"
            sSpaltenbez(38) = "UmsBrvor12M"
            sSpaltenbez(39) = "UmsBr12MDIFFabs"
            sSpaltenbez(40) = "UmsBr12MDIFFrela"
            sSpaltenbez(41) = "UmsSEKakt12"
            sSpaltenbez(42) = "UmsSEKvor12"
            sSpaltenbez(43) = "UmsSEK12MDIFFabs"
            sSpaltenbez(44) = "UmsSEK12MDIFFrela"
            sSpaltenbez(45) = "GROESSE"
            sSpaltenbez(46) = "EXDAT"
            sSpaltenbez(47) = "SHOP"
            sSpaltenbez(48) = "BONUS_OK"
            sSpaltenbez(49) = "LWE"
            sSpaltenbez(50) = "MODELL"
            sSpaltenbez(51) = "MATERIAL"
            sSpaltenbez(52) = "FARBBEZ"
            sSpaltenbez(53) = "GRUPPENNR"
            sSpaltenbez(54) = "MWST"
            sSpaltenbez(55) = "LVK"
            
            sSpaltenbez(56) = "VKMaktJahr"
            sSpaltenbez(57) = "VKMvorJahr"
            sSpaltenbez(58) = "VKMakt12M"
            sSpaltenbez(59) = "VKMvor12M"
            
            For i = 0 To 59
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            
            
            For i = 0 To 59
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf UCase$(stabelle) = "PROC" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Best"
            sSpaltenname(3) = "K VKPR"
            sSpaltenname(4) = "L VKPR"
            sSpaltenname(5) = "PGN"
            sSpaltenname(6) = "S EKPR"
            sSpaltenname(7) = "EAN"
            sSpaltenname(8) = "EAN2"
            sSpaltenname(9) = "EAN3"
            sSpaltenname(10) = "Linie"
            sSpaltenname(11) = "gef"
            sSpaltenname(12) = "ger"
            sSpaltenname(13) = "Rab"
            sSpaltenname(14) = "Notizen"
            sSpaltenname(15) = "AGN"
            sSpaltenname(16) = "Farbe"
            sSpaltenname(17) = "in Bestellung"
            sSpaltenname(18) = "Lieferant"
            sSpaltenname(19) = "L EKPR"
            sSpaltenname(20) = "LiefbestNr"
            sSpaltenname(21) = "Faktor"
            sSpaltenname(22) = "Verpackungs EAN"
            sSpaltenname(23) = "Gültigkeit"
           
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Bestand"
            sSpaltenbez(3) = "KVKPR1"
            sSpaltenbez(4) = "VKPR"
            sSpaltenbez(5) = "PGN"
            sSpaltenbez(6) = "EKPR"
            sSpaltenbez(7) = "EAN"
            sSpaltenbez(8) = "EAN2"
            sSpaltenbez(9) = "EAN3"
            sSpaltenbez(10) = "LPZ"
            sSpaltenbez(11) = "gefuehrt"
            sSpaltenbez(12) = "RKZ"
            sSpaltenbez(13) = "Rabatt_OK"
            sSpaltenbez(14) = "NOTIZEN"
            sSpaltenbez(15) = "AGN"
            sSpaltenbez(16) = "AWM"
            sSpaltenbez(17) = "MINMEN"
            sSpaltenbez(18) = "LINR"
            sSpaltenbez(19) = "LEKPR"
            sSpaltenbez(20) = "LIBESNR"
            sSpaltenbez(21) = "FAKTOR"
            sSpaltenbez(22) = "GPEAN"
            sSpaltenbez(23) = "GULTIG"
            
            For i = 0 To 23
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 23
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf UCase$(stabelle) = "ARTEX" Then
                
            sSpaltenname(0) = "ArtNr."
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Best"
            sSpaltenname(3) = "K VKPR"
            sSpaltenname(4) = "L VKPR"
            sSpaltenname(5) = "PGN"
            sSpaltenname(6) = "S EKPR"
            sSpaltenname(7) = "EAN"
            sSpaltenname(8) = "EAN2"
            sSpaltenname(9) = "EAN3"
            sSpaltenname(10) = "Linie"
            sSpaltenname(11) = "geführt"
            sSpaltenname(12) = "geräumt"
            sSpaltenname(13) = "min Best"
            sSpaltenname(14) = "Notizen"
            sSpaltenname(15) = "AGN"
            sSpaltenname(16) = "Farbe"
            sSpaltenname(17) = "in Bestellung"
            sSpaltenname(18) = "Lieferant"
            sSpaltenname(19) = "L EKPR"
            sSpaltenname(20) = "LiefbestNr"
            sSpaltenname(21) = "Preisschutz"
            sSpaltenname(22) = "Rabatt"
            sSpaltenname(23) = "Lagerplatz"
            sSpaltenname(24) = "Größe"
            sSpaltenname(25) = "le. WE"
            sSpaltenname(26) = "MwSt"
            sSpaltenname(27) = "Modell"
            sSpaltenname(28) = "Material"
            sSpaltenname(29) = "Farbbez."
            sSpaltenname(30) = "EINKAUF akt Jahr"
            sSpaltenname(31) = "EINKAUF vor Jahr"
            sSpaltenname(32) = "Inhalt"
            sSpaltenname(33) = "Inhaltbez"
            
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Bestand"
            sSpaltenbez(3) = "KVKPR1"
            sSpaltenbez(4) = "VKPR"
            sSpaltenbez(5) = "PGN"
            sSpaltenbez(6) = "EKPR"
            sSpaltenbez(7) = "EAN"
            sSpaltenbez(8) = "EAN2"
            sSpaltenbez(9) = "EAN3"
            sSpaltenbez(10) = "LPZ"
            sSpaltenbez(11) = "gefuehrt"
            sSpaltenbez(12) = "RKZ"
            sSpaltenbez(13) = "MINBEST"
            sSpaltenbez(14) = "NOTIZEN"
            sSpaltenbez(15) = "AGN"
            sSpaltenbez(16) = "AWM"
            sSpaltenbez(17) = "MINMEN"
            sSpaltenbez(18) = "LINR"
            sSpaltenbez(19) = "LEKPR"
            sSpaltenbez(20) = "LIBESNR"
            sSpaltenbez(21) = "Preisschu"
            sSpaltenbez(22) = "Rabatt_OK"
            sSpaltenbez(23) = "Lagerp"
            sSpaltenbez(24) = "GROESSE"
            sSpaltenbez(25) = "LWE"
            sSpaltenbez(26) = "MWST"
            sSpaltenbez(27) = "MODELL"
            sSpaltenbez(28) = "MATERIAL"
            sSpaltenbez(29) = "FARBBEZ"
            sSpaltenbez(30) = "EKaktJahr"
            sSpaltenbez(31) = "EKvorJahr"
            sSpaltenbez(32) = "Inhalt"
            sSpaltenbez(33) = "Inhaltbez"
            
            
            
            For i = 0 To 33
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 33
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "WAEINGEM" Then
        
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "AGN"
            sSpaltenname(3) = "Lieferant"
            sSpaltenname(4) = "LPZ"
            sSpaltenname(5) = "Lieferantenbestnr."
            sSpaltenname(6) = "EAN"
            sSpaltenname(7) = "RKZ"
            sSpaltenname(8) = "Notizen"
            sSpaltenname(9) = "Bestand"
            sSpaltenname(10) = "Kassen - Preis"
            sSpaltenname(11) = "kalkulieren"
            sSpaltenname(12) = "Listen - EK"
            sSpaltenname(13) = "Nettospanne"
            sSpaltenname(14) = "Menge"
            sSpaltenname(15) = "Reihenfolge"
            sSpaltenname(16) = "Status"
            
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "bezeich"
            sSpaltenbez(2) = "AGN"
            sSpaltenbez(3) = "Linr"
            sSpaltenbez(4) = "LPZ"
            sSpaltenbez(5) = "Libesnr"
            sSpaltenbez(6) = "EAN"
            sSpaltenbez(7) = "RKZ"
            sSpaltenbez(8) = "Notizen"
            sSpaltenbez(9) = "Bestand"
            sSpaltenbez(10) = "KVKPR"
            sSpaltenbez(11) = "Etimerk"
            sSpaltenbez(12) = "LEK"
            sSpaltenbez(13) = "NSN"
            sSpaltenbez(14) = "Menge"
            sSpaltenbez(15) = "Reihenf"
            sSpaltenbez(16) = "Status"
            
            For i = 0 To 16
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            
            
            For i = 0 To 16
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('WAEINGEM',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i

            
        ElseIf stabelle = "KUEX" Then
            
            sSpaltenname(0) = "KdNr."
            sSpaltenname(1) = "Kürzel"
            sSpaltenname(2) = "Firma"
            sSpaltenname(3) = "Titel"
            sSpaltenname(4) = "Nachname"
            sSpaltenname(5) = "Vorname"
            sSpaltenname(6) = "Strasse"
            sSpaltenname(7) = "Plz"
            sSpaltenname(8) = "Ort"
            sSpaltenname(9) = "Telefon"
            sSpaltenname(10) = "Fax Nr."
            sSpaltenname(11) = "Merkmal 1"
            sSpaltenname(12) = "Anrede"
            sSpaltenname(13) = "Anrede BA"
            sSpaltenname(14) = "Merkmal 2"
            sSpaltenname(15) = "Geburtstag"
            sSpaltenname(16) = "Datum 2"
            sSpaltenname(17) = "Umsatz lf. Jahr"
            sSpaltenname(18) = "Umsatz Vorjahr"
            sSpaltenname(19) = "Rabatt"
            sSpaltenname(20) = "FilialNr."
            sSpaltenname(21) = "Geschlecht"
            sSpaltenname(22) = "Kundenkarte"
            sSpaltenname(23) = "Bonus"
            sSpaltenname(24) = "Preiskennzeichen"
            sSpaltenname(25) = "angelegt am"
            sSpaltenname(26) = "Ertrag"
            sSpaltenname(27) = "Umsatz"
            sSpaltenname(28) = "Tag/Geburtstag"
            sSpaltenname(29) = "Mon/Geburtstag"
            sSpaltenname(30) = "Email"
            sSpaltenname(31) = "3% vom Umsatz"
            sSpaltenname(32) = "5% vom Umsatz"
            sSpaltenname(33) = "Land"
            sSpaltenname(34) = "Mobil"
            sSpaltenname(35) = "FarbNr"
            sSpaltenname(36) = "DS unterschrieben"
            
            sSpaltenbez(0) = "Knummer"
            sSpaltenbez(1) = "KUERZEL"
            sSpaltenbez(2) = "FIRMA"
            sSpaltenbez(3) = "TITEL"
            sSpaltenbez(4) = "NAME"
            sSpaltenbez(5) = "VORNAME"
            sSpaltenbez(6) = "STRASSE"
            sSpaltenbez(7) = "PLZ"
            sSpaltenbez(8) = "STADT"
            sSpaltenbez(9) = "TEL"
            sSpaltenbez(10) = "FAXNR"
            sSpaltenbez(11) = "MERKMAL"
            sSpaltenbez(12) = "ANREDE"
            sSpaltenbez(13) = "ANREDE_BA"
            sSpaltenbez(14) = "MERKMAL2"
            sSpaltenbez(15) = "DATUM1"
            sSpaltenbez(16) = "DATUM2"
            sSpaltenbez(17) = "UMSLJ"
            sSpaltenbez(18) = "UMSVJ"
            sSpaltenbez(19) = "RABATT"
            sSpaltenbez(20) = "FILIALNR"
            sSpaltenbez(21) = "GESCHLECHT"
            sSpaltenbez(22) = "KUNDKART"
            sSpaltenbez(23) = "BONUS"
            sSpaltenbez(24) = "PREISKZ"
            sSpaltenbez(25) = "Angelegt"
            sSpaltenbez(26) = "Ertrag"
            sSpaltenbez(27) = "Umsatz"
            sSpaltenbez(28) = "Day(Datum1) as TAG"
            sSpaltenbez(29) = "Month(Datum1) as MON"
            sSpaltenbez(30) = "Email"
            sSpaltenbez(31) = "3*Umsatz/100 as P3"
            sSpaltenbez(32) = "5*Umsatz/100 as P5"
            sSpaltenbez(33) = "Kurztext1"
            sSpaltenbez(34) = "MOBILTEL"
            sSpaltenbez(35) = "AWM"
            sSpaltenbez(36) = "DS"
            
            
            For i = 0 To 36
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 36
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('KUEX',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "ARTUEB" Then
            
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "AGN"
            sSpaltenname(3) = "Lieferant"
            sSpaltenname(4) = "LPZ"
            sSpaltenname(5) = "Lieferantenbestnr."
            sSpaltenname(6) = "EAN"
            sSpaltenname(7) = "RKZ"
            sSpaltenname(8) = "Notizen"
            sSpaltenname(9) = "Bestand"
            sSpaltenname(10) = "Geführt"
            sSpaltenname(11) = "KVK - Preis alt"
            sSpaltenname(12) = "KVK - Preis neu"
            sSpaltenname(13) = "Diff KVK in Euro"
            sSpaltenname(14) = "Diff KVK in %"
            sSpaltenname(15) = "kalkulieren"
            sSpaltenname(16) = "Listen - EK"
            sSpaltenname(17) = "Schnitt - EK"
            sSpaltenname(18) = "Nettospanne alt"
            sSpaltenname(19) = "Nettospanne neu"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "bezeich"
            sSpaltenbez(2) = "AGN"
            sSpaltenbez(3) = "Linr"
            sSpaltenbez(4) = "LPZ"
            sSpaltenbez(5) = "Libesnr"
            sSpaltenbez(6) = "EAN"
            sSpaltenbez(7) = "RKZ"
            sSpaltenbez(8) = "Notizen"
            sSpaltenbez(9) = "Bestand"
            sSpaltenbez(10) = "Gefuehrt"
            sSpaltenbez(11) = "KVKA"
            sSpaltenbez(12) = "KVKN"
            sSpaltenbez(13) = "DiffKVKE"
            sSpaltenbez(14) = "DiffKVKP"
            sSpaltenbez(15) = "Etimerk"
            sSpaltenbez(16) = "LEK"
            sSpaltenbez(17) = "SEK"
            sSpaltenbez(18) = "NSA"
            sSpaltenbez(19) = "NSN"
    
            For i = 0 To 19
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 19
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('Artueb',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
               
        ElseIf stabelle = "FEIERTAGE" Then
        
            sSpaltenname(0) = "Datum"
            sSpaltenname(1) = "Feiertag"
            sSpaltenname(2) = "bundesweit"
            sSpaltenname(3) = "anwenden"
            
            sSpaltenbez(0) = "DATUM"
            sSpaltenbez(1) = "FEIERTAGBEZ"
            sSpaltenbez(2) = "BUNDESWEIT"
            sSpaltenbez(3) = "ANWENDEN"
            
            For i = 0 To 3
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 4
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('FEIERTAGE',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "TERM_STD" Then
            
            sSpaltenname(0) = "Nr."
            sSpaltenname(1) = "Gliederung"
            sSpaltenname(2) = "Bezeichnung"
            sSpaltenname(3) = "Dauer"
            sSpaltenname(4) = "Artnr"
            
            
            sSpaltenbez(0) = "NR"
            sSpaltenbez(1) = "GLIEDERUNG"
            sSpaltenbez(2) = "BEZEICH"
            sSpaltenbez(3) = "DAUER"
            sSpaltenbez(4) = "ARTNR"
            
            For i = 0 To 4
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 4
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('TERM_STD',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "ARTTERM" Then
            
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "AGN"
            sSpaltenname(3) = "Lieferant"
            sSpaltenname(4) = "LPZ"
            sSpaltenname(5) = "Lieferantenbestnr."
            sSpaltenname(6) = "EAN"
            sSpaltenname(7) = "RKZ"
            sSpaltenname(8) = "Notizen"
            sSpaltenname(9) = "Bestand"
            sSpaltenname(10) = "gef"
            sSpaltenname(11) = "KVK regulär"
            sSpaltenname(12) = "KVK Aktion"
            sSpaltenname(13) = "Diff KVK in Euro"
            sSpaltenname(14) = "Diff KVK in %"
            sSpaltenname(15) = "Aktion"
            sSpaltenname(16) = "Listen - EK"
            sSpaltenname(17) = "Schnitt - EK"
            sSpaltenname(18) = "PGN"
            sSpaltenname(19) = "ger"
            sSpaltenname(20) = "Farbe"
            sSpaltenname(21) = "PS"
            sSpaltenname(22) = "Rab"
            
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "bezeich"
            sSpaltenbez(2) = "AGN"
            sSpaltenbez(3) = "Linr"
            sSpaltenbez(4) = "LPZ"
            sSpaltenbez(5) = "Libesnr"
            sSpaltenbez(6) = "EAN"
            sSpaltenbez(7) = "RKZ"
            sSpaltenbez(8) = "Notizen"
            sSpaltenbez(9) = "Bestand"
            sSpaltenbez(10) = "Gefuehrt"
            sSpaltenbez(11) = "KVKA"
            sSpaltenbez(12) = "KVKN"
            sSpaltenbez(13) = "DiffKVKE"
            sSpaltenbez(14) = "DiffKVKP"
            sSpaltenbez(15) = "Etimerk"
            sSpaltenbez(16) = "LEKPR"
            sSpaltenbez(17) = "SEK"
            sSpaltenbez(18) = "PGN"
            sSpaltenbez(19) = "RKZ"
            sSpaltenbez(20) = "AWM"
            sSpaltenbez(21) = "Preisschu"
            sSpaltenbez(22) = "Rabatt_OK"
            
    
            For i = 0 To 22
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 22
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('ARTTERM',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
            
        ElseIf stabelle = "STADAPRI" Then
                
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Lieferant"
            sSpaltenname(3) = "Linie"
            sSpaltenname(4) = "Lieferantenbestnr."
            sSpaltenname(5) = "Listen - EK"
            sSpaltenname(6) = "Listen - VK"
            sSpaltenname(7) = "KVK alt"
            sSpaltenname(8) = "KVK neu"
            sSpaltenname(9) = "AGN"
            sSpaltenname(10) = "RKZ"
            sSpaltenname(11) = "EAN"
            sSpaltenname(12) = "MinMen"
            sSpaltenname(13) = "MinBest"
            sSpaltenname(14) = "Geführt"
            sSpaltenname(15) = "Rabatt"
            sSpaltenname(16) = "Preisschutz"
            sSpaltenname(17) = "MWST"
            sSpaltenname(18) = "Notizen alt"
            sSpaltenname(19) = "Notizen neu"
            sSpaltenname(20) = "Größe"
            sSpaltenname(21) = "Farbnr"
            sSpaltenname(22) = "Anfangsdatum"
            sSpaltenname(23) = "Endedatum"
            sSpaltenname(24) = "Bestand"
            sSpaltenname(25) = "Inhalt"
            sSpaltenname(26) = "Inhaltbez"
            sSpaltenname(27) = "PGN"
            sSpaltenname(28) = "MENGE"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Linr"
            sSpaltenbez(3) = "LPZ"
            sSpaltenbez(4) = "Libesnr"
            sSpaltenbez(5) = "LEKPR"
            sSpaltenbez(6) = "VKPR"
            sSpaltenbez(7) = "KVKALT"
            sSpaltenbez(8) = "KVKNEU"
            sSpaltenbez(9) = "AGN"
            sSpaltenbez(10) = "RKZ"
            sSpaltenbez(11) = "EAN"
            sSpaltenbez(12) = "MinMen"
            sSpaltenbez(13) = "MinBest"
            sSpaltenbez(14) = "Gefuehrt"
            sSpaltenbez(15) = "Rabatt_OK"
            sSpaltenbez(16) = "Preisschu"
            sSpaltenbez(17) = "MWST"
            sSpaltenbez(18) = "Notizen"
            sSpaltenbez(19) = "MNotizen"
            sSpaltenbez(20) = "Groesse"
            sSpaltenbez(21) = "Farbnr"
            sSpaltenbez(22) = "AUFDAT"
            sSpaltenbez(23) = "EXDAT"
            sSpaltenbez(24) = "Bestand"
            sSpaltenbez(25) = "Inhalt"
            sSpaltenbez(26) = "Inhaltbez"
            sSpaltenbez(27) = "PGN"
            sSpaltenbez(28) = "Menge"
            
            For i = 0 To 28
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 28
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
            
        ElseIf stabelle = "STADAPRIB" Then
                
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Lieferant"
            sSpaltenname(3) = "Linie"
            sSpaltenname(4) = "Lieferantenbestnr."
            sSpaltenname(5) = "Listen - EK"
            sSpaltenname(6) = "Listen - VK"
            sSpaltenname(7) = "KVK alt"
            sSpaltenname(8) = "KVK neu"
            sSpaltenname(9) = "AGN"
            sSpaltenname(10) = "RKZ"
            sSpaltenname(11) = "EAN"
            sSpaltenname(12) = "MinMen"
            sSpaltenname(13) = "MinBest"
            sSpaltenname(14) = "Geführt"
            sSpaltenname(15) = "Rabatt"
            sSpaltenname(16) = "Preisschutz"
            sSpaltenname(17) = "MWST"
            sSpaltenname(18) = "Notizen alt"
            sSpaltenname(19) = "Notizen neu"
            sSpaltenname(20) = "Größe"
            sSpaltenname(21) = "Farbnr"
            sSpaltenname(22) = "Anfangsdatum"
            sSpaltenname(23) = "Endedatum"
            sSpaltenname(24) = "Bestand"
            sSpaltenname(25) = "Inhalt"
            sSpaltenname(26) = "Inhaltbez"
            sSpaltenname(27) = "PGN"
            sSpaltenname(28) = "Grundpreis"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Linr"
            sSpaltenbez(3) = "LPZ"
            sSpaltenbez(4) = "Libesnr"
            sSpaltenbez(5) = "LEKPR"
            sSpaltenbez(6) = "VKPR"
            sSpaltenbez(7) = "KVKALT"
            sSpaltenbez(8) = "KVKNEU"
            sSpaltenbez(9) = "AGN"
            sSpaltenbez(10) = "RKZ"
            sSpaltenbez(11) = "EAN"
            sSpaltenbez(12) = "MinMen"
            sSpaltenbez(13) = "MinBest"
            sSpaltenbez(14) = "Gefuehrt"
            sSpaltenbez(15) = "Rabatt_OK"
            sSpaltenbez(16) = "Preisschu"
            sSpaltenbez(17) = "MWST"
            sSpaltenbez(18) = "Notizen"
            sSpaltenbez(19) = "MNotizen"
            sSpaltenbez(20) = "Groesse"
            sSpaltenbez(21) = "Farbnr"
            sSpaltenbez(22) = "AUFDAT"
            sSpaltenbez(23) = "EXDAT"
            sSpaltenbez(24) = "Bestand"
            sSpaltenbez(25) = "Inhalt"
            sSpaltenbez(26) = "Inhaltbez"
            sSpaltenbez(27) = "PGN"
            sSpaltenbez(28) = "GRUNDPREIS"
            
            For i = 0 To 28
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 28
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        
        ElseIf stabelle = "MASTEMP" Then
                
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Lieferant"
            sSpaltenname(3) = "Linie"
            sSpaltenname(4) = "Lieferantenbestnr."
            sSpaltenname(5) = "Listen - EK"
            sSpaltenname(6) = "Listen - VK"
            sSpaltenname(7) = "LVK alt"
            sSpaltenname(8) = "KVK alt"
            sSpaltenname(9) = "KVK neu"
            sSpaltenname(10) = "Diff KVK"
            sSpaltenname(11) = "Diff VK"
            sSpaltenname(12) = "AGN"
            sSpaltenname(13) = "RKZ"
            sSpaltenname(14) = "EAN"
            sSpaltenname(15) = "MinMen"
            sSpaltenname(16) = "MinBest"
            sSpaltenname(17) = "Geführt"
            sSpaltenname(18) = "Rabatt"
            sSpaltenname(19) = "Preisschutz"
            sSpaltenname(20) = "MWST"
            sSpaltenname(21) = "Notizen alt"
            sSpaltenname(22) = "Notizen neu"
            sSpaltenname(23) = "PGN"
            sSpaltenname(24) = "AWM"
            sSpaltenname(25) = "Shop"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Linr"
            sSpaltenbez(3) = "LPZ"
            sSpaltenbez(4) = "Libesnr"
            sSpaltenbez(5) = "LEKPR"
            sSpaltenbez(6) = "VKPR"
            sSpaltenbez(7) = "LVKALT"
            sSpaltenbez(8) = "KVKALT"
            sSpaltenbez(9) = "KVKPR1"
            sSpaltenbez(10) = "DIFFKVK"
            sSpaltenbez(11) = "DIFFVK"
            sSpaltenbez(12) = "AGN"
            sSpaltenbez(13) = "RKZ"
            sSpaltenbez(14) = "EAN"
            sSpaltenbez(15) = "MinMen"
            sSpaltenbez(16) = "MinBest"
            sSpaltenbez(17) = "Gefuehrt"
            sSpaltenbez(18) = "Rabatt_OK"
            sSpaltenbez(19) = "Preisschu"
            sSpaltenbez(20) = "MWST"
            sSpaltenbez(21) = "Notizen"
            sSpaltenbez(22) = "MNotizen"
            sSpaltenbez(23) = "PGN"
            sSpaltenbez(24) = "AWM"
            sSpaltenbez(25) = "SHOP"
            
            For i = 0 To 25
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 25
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "WEBEST" Then
        
                
            sSpaltenname(0) = "ArtNr"
            sSpaltenname(1) = "LiefBestNr"
            sSpaltenname(2) = "Artikelbezeichnung"
            sSpaltenname(3) = "Bestellt"
            sSpaltenname(4) = "Geliefert"
            sSpaltenname(5) = "Berechnet"
            sSpaltenname(6) = "LEK"
            sSpaltenname(7) = "KVK"
            sSpaltenname(8) = "Lieferbetrag"
            sSpaltenname(9) = "Zeilenrabatt"
            sSpaltenname(10) = "Zeilenwert"
            sSpaltenname(11) = "Rechn.Rabatt"
            sSpaltenname(12) = "Rechn.Wert"
            sSpaltenname(13) = "Stückpreis"
            sSpaltenname(14) = "HLieferant"
            sSpaltenname(15) = "Lieferant"
            sSpaltenname(16) = "Linie"
            sSpaltenname(17) = "AWM"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Libesnr"
            sSpaltenbez(2) = "BEZEICH"
            sSpaltenbez(3) = "BESTELLT"
            sSpaltenbez(4) = "GELIEFERT"
            sSpaltenbez(5) = "BERECHNET"
            sSpaltenbez(6) = "LEKPR"
            sSpaltenbez(7) = "KVKPR1"
            sSpaltenbez(8) = "LIEFBETRAG"
            sSpaltenbez(9) = "ZEILEN_RAB"
            sSpaltenbez(10) = "ZEILENWERT"
            sSpaltenbez(11) = "RECHN_RAB"
            sSpaltenbez(12) = "RECHN_WERT"
            sSpaltenbez(13) = "STCK_PREIS"
            sSpaltenbez(14) = "MOPREIS"
            sSpaltenbez(15) = "LINR"
            sSpaltenbez(16) = "LPZ"
            sSpaltenbez(17) = "AWM"
            
            For i = 0 To 17
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 17
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "ARTSUCH" Then
                
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Bestand"
            sSpaltenname(3) = "Linie"
            sSpaltenname(4) = "Lieferantenbestnr."
            sSpaltenname(5) = "Listen - EK"
            sSpaltenname(6) = "Listen - VK"
            sSpaltenname(7) = "Kassenpreis"
            sSpaltenname(8) = "Schnitt - EK"
            sSpaltenname(9) = "AGN"
            sSpaltenname(10) = "RKZ"
            sSpaltenname(11) = "EAN"
            sSpaltenname(12) = "MinMen"
            sSpaltenname(13) = "MinBest"
            sSpaltenname(14) = "Geführt"
            sSpaltenname(15) = "Rabatt"
            sSpaltenname(16) = "Preisschutz"
            sSpaltenname(17) = "MWST"
            sSpaltenname(18) = "PGN"
            sSpaltenname(19) = "Farbe"
            sSpaltenname(20) = "Lieferant"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "BESTAND"
            sSpaltenbez(3) = "LPZ"
            sSpaltenbez(4) = "Libesnr"
            sSpaltenbez(5) = "LEKPR"
            sSpaltenbez(6) = "VKPR"
            sSpaltenbez(7) = "KVKPR1"
            sSpaltenbez(8) = "EKPR"
            sSpaltenbez(9) = "AGN"
            sSpaltenbez(10) = "RKZ"
            sSpaltenbez(11) = "EAN"
            sSpaltenbez(12) = "MinMen"
            sSpaltenbez(13) = "MinBest"
            sSpaltenbez(14) = "Gefuehrt"
            sSpaltenbez(15) = "Rabatt_OK"
            sSpaltenbez(16) = "Preisschu"
            sSpaltenbez(17) = "MWST"
            sSpaltenbez(18) = "PGN"
            sSpaltenbez(19) = "AWM"
            sSpaltenbez(20) = "LINR"
            
            
            For i = 0 To 20
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 20
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        ElseIf stabelle = "BESTMAN" Then
                
            sSpaltenname(0) = "Artnr"
            sSpaltenname(1) = "Artikelbezeichnung"
            sSpaltenname(2) = "Lieferant"
            sSpaltenname(3) = "Linie"
            sSpaltenname(4) = "Lieferantenbestnr."
            sSpaltenname(5) = "Listen - EK"
            sSpaltenname(6) = "Listen - VK"
            sSpaltenname(7) = "Kassen - VK"
            sSpaltenname(8) = "bestellen"
            sSpaltenname(9) = "AGN"
            sSpaltenname(10) = "RKZ"
            sSpaltenname(11) = "EAN"
            sSpaltenname(12) = "MinMen"
            sSpaltenname(13) = "MinBest"
            sSpaltenname(14) = "Geführt"
            sSpaltenname(15) = "Rabatt"
            sSpaltenname(16) = "Preisschutz"
            sSpaltenname(17) = "MWST"
            sSpaltenname(18) = "Notizen"
            sSpaltenname(19) = "in Bestellung"
            sSpaltenname(20) = "Bestand"
            sSpaltenname(21) = "Col"
            
            sSpaltenbez(0) = "Artnr"
            sSpaltenbez(1) = "Bezeich"
            sSpaltenbez(2) = "Linr"
            sSpaltenbez(3) = "LPZ"
            sSpaltenbez(4) = "Libesnr"
            sSpaltenbez(5) = "LEKPR"
            sSpaltenbez(6) = "VKPR"
            sSpaltenbez(7) = "KVKPR1"
            sSpaltenbez(8) = "ZuBest"
            sSpaltenbez(9) = "AGN"
            sSpaltenbez(10) = "RKZ"
            sSpaltenbez(11) = "EAN"
            sSpaltenbez(12) = "MinMen"
            sSpaltenbez(13) = "MinBest"
            sSpaltenbez(14) = "Gefuehrt"
            sSpaltenbez(15) = "Rabatt_OK"
            sSpaltenbez(16) = "Preisschu"
            sSpaltenbez(17) = "MWST"
            sSpaltenbez(18) = "Notizen"
            sSpaltenbez(19) = "INBEST"
            sSpaltenbez(20) = "Bestand"
            sSpaltenbez(21) = "AWM"
            
            For i = 0 To 21
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 21
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        
        ElseIf stabelle = "KOPFMAIL" Then
                
            sSpaltenname(0) = "Status": sSpaltenname(1) = "Absender"
            sSpaltenname(2) = "Betreff": sSpaltenname(3) = "erhalten am:"
            sSpaltenname(4) = "erstellt am:"
            sSpaltenname(5) = "Anhang": sSpaltenname(6) = "Haupttext"
            
            sSpaltenbez(0) = "STATUS": sSpaltenbez(1) = "ABSALIAS"
            sSpaltenbez(2) = "BETREFF": sSpaltenbez(3) = "ERHALT"
            sSpaltenbez(4) = "CREATEDAY"
            sSpaltenbez(5) = "ANHANG": sSpaltenbez(6) = "HAUPTTEXT"
            
            For i = 0 To 6
                byReihenfolge(i) = i
                sAnzeige(i) = "J"
            Next i
            
            For i = 0 To 6
                sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
                sSQL = sSQL & " values ('" & stabelle & "',  '" & sSpaltenname(i) & "' ,'" & sSpaltenbez(i) & "'," & byReihenfolge(i) & ",'" & sAnzeige(i) & "', 'N')"
                gdBase.Execute sSQL, dbFailOnError
            Next i
        
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Tabcheck"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AutocompleteCombo(KeyCode As Integer, Shift As Integer, cbo As ComboBox)
    On Error GoTo LOKAL_ERROR

    Dim llen As Long
    Dim Res As Long
   
    ' Eingaben nur für Zahlen und Buchstapen prüfen
    If KeyCode >= vbKey0 And KeyCode <= vbKeyZ Then
       ' der ByVal Aufruf des Suchstrings ist eine Eigenheit von Windows/VB
       ' bezüglich der Stringpointer. Nur so wird ein gültiger Pointer auf den
       ' String übergeben. Ohne ByVal geht's nicht!!!
       With cbo
          ' Eintrag suchen: Die CB_SELECTSTRING Message ist dafür ungeignet,
          ' da sie den String sofort einträgt und komplett markiert
          Res = SendMessage(.hwnd, CB_FINDSTRING, -1, ByVal .Text)
            If Res >= 0 Then     ' Eintrag gefunden
            
             llen = Len(.Text)  ' Laenge des eingegeben Textes
             .ListIndex = Res   ' Listindex auf gefunden Text setzen
             .Text = .list(Res) ' gefunden Text in Textfeld eintragen
             .SelStart = llen   ' Textende markieren, damit es bei neuer Eingabe gleich wieder gelöscht wird
             .SelLength = Len(.Text) - llen
             
            
            End If
        End With
    End If
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AutocompleteCombo"
    Fehler.gsFehlertext = "Bei der Autovervollständigung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
   
End Sub
Public Function Identi(IZugrinr As Integer) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    Dim iIdenti As Integer
    
    Identi = False

    sSQL = "Select * from BEDZUGRI where zugriffnr = " & IZugrinr
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!Identi) Then
            iIdenti = rsrs!Identi
        Else
            iIdenti = 0
        End If
    Else
        iIdenti = 0
    
    End If
    rsrs.Close: Set rsrs = Nothing
    
    If iIdenti = 1 Then Identi = True
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Identi"
    Fehler.gsFehlertext = "Bei der Ermittlung des I-Status ist ein Fehler aufgetreten. " & IZugrinr
    
    Fehlermeldung1
End Function
Public Sub schreibalias(sBestname As String, sAlias As String)
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

sSQL = "Select * from BXALIAS where TABNAME = '" & sBestname & "'"
Set rsrs = gdApp.OpenRecordset(sSQL)
If Not rsrs.EOF Then
    rsrs.Edit
Else
    rsrs.AddNew
    rsrs!tabname = sBestname
End If

rsrs!tabALIAS = sAlias
rsrs.Update
rsrs.Close: Set rsrs = Nothing





Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "schreibalias"
    Fehler.gsFehlertext = "Im Programmteil Bestellung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function ermXALIAS(sTabname As String) As String
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    ermXALIAS = ""

    sSQL = " select * from BXALIAS where TABNAME = '" & sTabname & "'"
    Set rsrs = gdApp.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!tabALIAS) Then
            ermXALIAS = rsrs!tabALIAS
        End If
    End If
    rsrs.Close: Set rsrs = Nothing

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermXALIAS"
    Fehler.gsFehlertext = "Beim Ermitteln des Dateialias ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function BistDuEinSonderkontingent(sArt As String) As Boolean
    On Error GoTo LOKAL_ERROR
    
    BistDuEinSonderkontingent = False
    
    If DatendrinSQL("select * from KONTIN where ARTNR = " & sArt, gdBase) Then
        BistDuEinSonderkontingent = True
    End If
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "BistDuEinSonderkontingent"
    Fehler.gsFehlertext = "Beim Ermitteln des Dateialias ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub CreateTable(sTab As String, db As Database)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim ierrz As Integer
    ierrz = 0
    
    Select Case sTab
        
        Case Is = "KREDITZAPRINT"
            cSQL = "Create Table KREDITZAPRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", KREADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BEDNU smallint"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Menge smallint"
            cSQL = cSQL & ", Preis float"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "PRINTGUTSCH"
            cSQL = "Create Table PRINTGUTSCH ( "
            cSQL = cSQL & " Gutschnr int "
            cSQL = cSQL & ", Gutschtext varchar(100) "
            cSQL = cSQL & ", Bemerk varchar(100) "
            cSQL = cSQL & ", Preistext varchar(100) "
            cSQL = cSQL & ", GUPreis float "
            cSQL = cSQL & ", Datum DATETIME "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", BARCODE varchar(18) "
            cSQL = cSQL & " ) "
     
        Case Is = "DETAIL"
            cSQL = "Create Table DETAIL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Bediener int"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", Preis real"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", BEDNAME varchar(32)"
            cSQL = cSQL & ", Ertrag real"
            cSQL = cSQL & ", Ekwert real"
            cSQL = cSQL & ", mindat DATETIME"
            cSQL = cSQL & ", maxdat DATETIME"
            cSQL = cSQL & ", auswahl varchar(255)"
            cSQL = cSQL & ", auswahlLINR varchar(255)"
            cSQL = cSQL & ", auswahlLPZ varchar(255)"
            cSQL = cSQL & ", auswahlAGN varchar(255)"
            cSQL = cSQL & " ) "
        
        
            
        
        Case Is = "ZUGANGF"
            cSQL = "Create Table ZUGANGF"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", BEDNU int"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", FILIALNR int"
            cSQL = cSQL & ", BESTANDALT int"
            cSQL = cSQL & ", BEWEGUNG int"
            cSQL = cSQL & ", BESTANDNEU int"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", REK real"
            cSQL = cSQL & ", LS varchar(20)"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & " ) "
        Case Is = "REPPRINTKU"
            cSQL = "Create Table REPPRINTKU ( "
            cSQL = cSQL & " AUFTRAGNR int "
            cSQL = cSQL & ", ARTNRDEF int "
            cSQL = cSQL & ", ARTNRDIE int "
            cSQL = cSQL & ", BEZEICHDEF varchar(35) "
            cSQL = cSQL & ", BEZEICHDIE varchar(35) "
            cSQL = cSQL & ", SERIENNR varchar(100) "
            cSQL = cSQL & ", BEMERK varchar(100) "
            cSQL = cSQL & ", MENGEDEF int "
            cSQL = cSQL & ", MENGEDIE int "
            cSQL = cSQL & ", STATUSKV varchar(35) "
            cSQL = cSQL & ", STATUSAUTR varchar(35) "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", Bednu int "
            cSQL = cSQL & ", KVDATE DATETIME "
            cSQL = cSQL & ", AUTRDATE DATETIME "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Mangel varchar(255) "
            cSQL = cSQL & ", ZUBEH varchar(255) "
            cSQL = cSQL & ", GARANTIE BIT "
            
            cSQL = cSQL & ", KUNACHNAME varchar(35) "
            cSQL = cSQL & ", KUVORNAME varchar(35) "
            cSQL = cSQL & ", KUTITEL varchar(35) "
            cSQL = cSQL & ", KUPLZ varchar(7) "
            cSQL = cSQL & ", KUSTADT varchar(35) "
            cSQL = cSQL & ", KUANREDE varchar(20) "
            cSQL = cSQL & ", KUGESCHLECHT varchar(35) "
            cSQL = cSQL & ", KUFIRMA varchar(35) "
            cSQL = cSQL & ", KUSTRASSE varchar(35) "
            
            cSQL = cSQL & ", LIBEZEICH varchar(35) "
            cSQL = cSQL & ", LIPLZ varchar(7) "
            cSQL = cSQL & ", LISTADT varchar(35) "
            cSQL = cSQL & ", LISTRASSE varchar(35) "
            
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", ANREDTIT varchar(35) "
            cSQL = cSQL & ", NameFirma varchar(70) "
            
            cSQL = cSQL & ", Belegart varchar(35) "
            
            cSQL = cSQL & " )"
        Case Is = "ALLARTLUKOPF"
            cSQL = "Create Table ALLARTLUKOPF ( "
            cSQL = cSQL & " LUG varchar(30) "
            cSQL = cSQL & ", LUGVJ varchar(30) "
            cSQL = cSQL & ", LUGVVJ varchar(30) "
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", GRUNDL varchar(255) "
            cSQL = cSQL & ", ANZAHLg int "
            cSQL = cSQL & ", ANZAHL int "
            cSQL = cSQL & " )"
        
                        
        Case "DVKART"
            cSQL = "Create Table DVKART "
            cSQL = cSQL & "( JAHR smallint"
            cSQL = cSQL & ", MONAT tinyint"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", DVK real"
            cSQL = cSQL & ") "
            
        Case Is = "EAPRINT"
            cSQL = "Create Table EAPRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KASNUM tinyint"
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", bedname varchar(35)"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ", ART varchar(12)"
            cSQL = cSQL & ", BEZEICH varchar(50)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Betrag float"
            cSQL = cSQL & " ) "
    
        Case Is = "STOPRINT"
            cSQL = "Create Table STOPRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", BEDNU1 smallint "
            cSQL = cSQL & ", BEDNAME1 varchar(35)"
            cSQL = cSQL & ", BEDNU2 smallint "
            cSQL = cSQL & ", BEDNAME2 varchar(35)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "ZEITVMP"
            cSQL = "Create Table ZEITVMP ( "
            cSQL = cSQL & " TAG varchar(10) "
            cSQL = cSQL & ", ZEIT varchar(8) "
            cSQL = cSQL & " )"
            
        Case Is = "TAGVMP"
            cSQL = "Create Table TAGVMP ( "
            cSQL = cSQL & " TAG varchar(10) "
            cSQL = cSQL & " )"
        Case Is = "KAT1"
            cSQL = "Create Table KAT1 ( "
            cSQL = cSQL & " BEZEICH varchar(50) "
            cSQL = cSQL & " )"
        Case Is = "KAT2"
            cSQL = "Create Table KAT2 ( "
            cSQL = cSQL & " BEZEICH varchar(50) "
            cSQL = cSQL & " )"
    
        Case Is = "MASTERPRO"
            cSQL = "Create Table MASTERPRO ( "
            cSQL = cSQL & " KW smallint "
            cSQL = cSQL & ", Dateiname varchar(20) "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", Jahr smallint "
            cSQL = cSQL & " )"
            
           
    
        Case Is = "REPARATURKOPF"
            cSQL = "Create Table REPARATURKOPF ( "
            cSQL = cSQL & " AUFTRAGNR int "
            cSQL = cSQL & ", STATUSKV varchar(35) "
            cSQL = cSQL & ", STATUSAUTR varchar(35) "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", Bednu int "
            cSQL = cSQL & ", NACHNAME varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", KVDATE DATETIME "
            cSQL = cSQL & ", AUTRDATE DATETIME "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & " )"
            
        Case Is = "REPARATUR"
            cSQL = "Create Table REPARATUR ( "
            cSQL = cSQL & " AUFTRAGNR int "
            cSQL = cSQL & ", ARTNRDEF int "
            cSQL = cSQL & ", ARTNRDIE int "
            cSQL = cSQL & ", BEZEICHDEF varchar(35) "
            cSQL = cSQL & ", BEZEICHDIE varchar(35) "
            cSQL = cSQL & ", SERIENNR varchar(100) "
            cSQL = cSQL & ", BEMERK varchar(100) "
            cSQL = cSQL & ", MENGEDEF int "
            cSQL = cSQL & ", MENGEDIE int "
            cSQL = cSQL & ", STATUSKV varchar(35) "
            cSQL = cSQL & ", STATUSAUTR varchar(35) "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", Bednu int "
            cSQL = cSQL & ", NACHNAME varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", KVDATE DATETIME "
            cSQL = cSQL & ", AUTRDATE DATETIME "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Mangel varchar(255) "
            cSQL = cSQL & ", ZUBEH varchar(255) "
            cSQL = cSQL & ", GARANTIE BIT "
            cSQL = cSQL & ", AUTOPOS Int IDENTITY"
            cSQL = cSQL & " )"
        Case Is = "REPARATURSATZ"
            cSQL = "Create Table REPARATURSATZ ( "
            cSQL = cSQL & " AUFTRAGNR int "
            cSQL = cSQL & ", ARTNRDEF int "
            cSQL = cSQL & ", ARTNRDIE int "
            cSQL = cSQL & ", BEZEICHDEF varchar(35) "
            cSQL = cSQL & ", BEZEICHDIE varchar(35) "
            cSQL = cSQL & ", SERIENNR varchar(100) "
            cSQL = cSQL & ", BEMERK varchar(100) "
            cSQL = cSQL & ", MENGEDEF int "
            cSQL = cSQL & ", MENGEDIE int "
            cSQL = cSQL & ", STATUSKV varchar(35) "
            cSQL = cSQL & ", STATUSAUTR varchar(35) "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", Bednu int "
            cSQL = cSQL & ", NACHNAME varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", KVDATE DATETIME "
            cSQL = cSQL & ", AUTRDATE DATETIME "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Mangel varchar(255) "
            cSQL = cSQL & ", ZUBEH varchar(255) "
            cSQL = cSQL & ", GARANTIE BIT "
            cSQL = cSQL & ", AUTOPOS Int IDENTITY"
            cSQL = cSQL & " )"
        Case Is = "ALLARTLU"
            cSQL = "Create Table ALLARTLU ( "
            cSQL = cSQL & " artnummer int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", LINBEZEICH varchar(35) "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ", LUGVJ real "
            cSQL = cSQL & ", LUGVVJ real "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", gefuehrt varchar(1) "
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", Filiale float "
            cSQL = cSQL & " )"
        Case Is = "VKKUUMS"
            cSQL = "Create table VKKUUMS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Nr tinyint "
            cSQL = cSQL & ", Monat tinyint "
            cSQL = cSQL & ", Monatname varchar(15) "
            cSQL = cSQL & ", Jahr int "
            cSQL = cSQL & ", UMSNULL real "
            cSQL = cSQL & ", UMSKU real "
            cSQL = cSQL & ", MENGENULL real "
            cSQL = cSQL & ", MENGEKU real "
            cSQL = cSQL & ", UMSNULLProz real "
            cSQL = cSQL & ", UMSKUProz real "
            cSQL = cSQL & ", UMSNULLkunden int "
            cSQL = cSQL & ", UMSKUkunden int "
            cSQL = cSQL & ", UMSNULLproKauf real "
            cSQL = cSQL & ", UMSKUproKauf real "
            cSQL = cSQL & ", UMSNULLschnitt real "
            cSQL = cSQL & ", UMSKUschnitt real "
            cSQL = cSQL & " ) "
        Case Is = "PRIRECH"
            cSQL = "Create table PRIRECH"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " RechNr varchar(30) "
            cSQL = cSQL & ", LiefSNr varchar(30) "
            cSQL = cSQL & ", RechBTv float "
            cSQL = cSQL & ", RechBTe float "
            cSQL = cSQL & ", RechBTo float "
            cSQL = cSQL & ", Anteilv float "
            cSQL = cSQL & ", Anteile float "
            cSQL = cSQL & ", RechBTnV float "
            cSQL = cSQL & ", RechBTnE float "
            cSQL = cSQL & ", Bemerk varchar(50) "
            cSQL = cSQL & ", Rechdat Datetime "
            cSQL = cSQL & ", faellig Datetime "
            cSQL = cSQL & ", LiNr int "
            cSQL = cSQL & ", LiefBez varchar(35) "
            cSQL = cSQL & ", Bezahlt Bit "
            cSQL = cSQL & ", Status varchar(15) "
            cSQL = cSQL & ", AUTOPOS int"
            cSQL = cSQL & ", DRUCKMARK Bit "
            cSQL = cSQL & ", Einzug varchar(1) "
            cSQL = cSQL & " ) "
            
        Case Is = "PRIRECH2"
            cSQL = "Create table PRIRECH2"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " RechNr varchar(30) "
            cSQL = cSQL & ", LiefSNr varchar(30) "
            cSQL = cSQL & ", RechBTv float "
            cSQL = cSQL & ", RechBTe float "
            cSQL = cSQL & ", RechBTo float "
            cSQL = cSQL & ", Anteilv float "
            cSQL = cSQL & ", Anteile float "
            cSQL = cSQL & ", RechBTnV float "
            cSQL = cSQL & ", RechBTnE float "
            cSQL = cSQL & ", Bemerk varchar(50) "
            cSQL = cSQL & ", Rechdat Datetime "
            cSQL = cSQL & ", faellig Datetime "
            cSQL = cSQL & ", LiNr int "
            cSQL = cSQL & ", LiefBez varchar(35) "
            cSQL = cSQL & ", Bezahlt Bit "
            cSQL = cSQL & ", Status varchar(15) "
            cSQL = cSQL & ", AUTOPOS int"
            cSQL = cSQL & ", POS Int IDENTITY"
            cSQL = cSQL & ", DRUCKMARK Bit "
            cSQL = cSQL & ", SummeNetto float "
            cSQL = cSQL & ", Einzug varchar(1) "
            cSQL = cSQL & " ) "
            
        Case Is = "BUTTON"
            cSQL = "Create table BUTTON"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " BUTTONNR tinyint "
            cSQL = cSQL & ", INDEXNR tinyint "
            cSQL = cSQL & ", BUTTONTEXT varchar(40) "
            cSQL = cSQL & " ) "
    
        Case Is = "RECHUE"
            cSQL = "Create table RECHUE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " RechNr varchar(30) "
            cSQL = cSQL & ", LiefSNr varchar(30) "
            cSQL = cSQL & ", RechBTv float "
            cSQL = cSQL & ", RechBTe float "
            cSQL = cSQL & ", RechBTo float "
            cSQL = cSQL & ", Anteilv float "
            cSQL = cSQL & ", Anteile float "
            cSQL = cSQL & ", RechBTnV float "
            cSQL = cSQL & ", RechBTnE float "
            cSQL = cSQL & ", Bemerk varchar(50) "
            cSQL = cSQL & ", Rechdat Datetime "
            cSQL = cSQL & ", faellig Datetime "
            cSQL = cSQL & ", LiNr int "
            cSQL = cSQL & ", LiefBez varchar(35) "
            cSQL = cSQL & ", Bezahlt Bit "
            cSQL = cSQL & ", Status varchar(15) "
            cSQL = cSQL & ", AUTOPOS Int IDENTITY"
            cSQL = cSQL & " ) "
    
        Case Is = "MITKU" & srechnertab
            cSQL = "Create table MITKU" & srechnertab
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Anzahl int "
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILNR int "
            cSQL = cSQL & ", AnfangUMS real "
            cSQL = cSQL & " ) "
            
        Case Is = "MITKU"
            cSQL = "Create table MITKU"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Anzahl int "
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILNR int "
            cSQL = cSQL & ", AnfangUMS real "
            cSQL = cSQL & " ) "
        Case Is = "FIRMADRUCK"
            cSQL = "Create Table FIRMADRUCK "
            cSQL = cSQL & "("
            cSQL = cSQL & " NAME varchar(50)"
            cSQL = cSQL & ", STRASSE varchar(50)"
            cSQL = cSQL & ", PLZ varchar(7) "
            cSQL = cSQL & ", ORT varchar(50) "
            cSQL = cSQL & ", TEL varchar(50) "
            cSQL = cSQL & ", FAX varchar(50) "
            cSQL = cSQL & ", STEUERNR varchar(35) "
            cSQL = cSQL & ", EMAIL varchar(50) "
            cSQL = cSQL & ", KASNUM int "
            cSQL = cSQL & " )"
        Case Is = "NEUKU" & srechnertab
            cSQL = "Create Table NEUKU" & srechnertab
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Anzahl int "
            cSQL = cSQL & ", Thema varchar(20) "
            cSQL = cSQL & " ) "
        Case Is = "EMAIL"
            cSQL = "Create Table EMAIL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADRESSE varchar(150) "
            cSQL = cSQL & ", Alias varchar(150) "
            cSQL = cSQL & ", THEMA varchar(20) "
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & " ) "
        Case Is = "ZEITSTEU"
            cSQL = "Create Table ZEITSTEU"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADRESSE varchar(150) "
            cSQL = cSQL & ", Betreff varchar(150) "
            cSQL = cSQL & ", KDNR varchar(50) "
            cSQL = cSQL & ", Endung smallint "
            cSQL = cSQL & ", zLINR int "
            cSQL = cSQL & ", Art smallint "
            cSQL = cSQL & ", ZeitStart varchar(8) "
            cSQL = cSQL & " ) "
        Case Is = "KABUCH"
            cSQL = "Create Table KABUCH"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Datum Datetime "
            cSQL = cSQL & ", POS smallint "
            cSQL = cSQL & ", BEZUMS varchar(150) "
            cSQL = cSQL & ", EURUMS real "
            cSQL = cSQL & ", BEZBAR varchar(150) "
            cSQL = cSQL & ", EURBAR real "
            cSQL = cSQL & ", EURBANK real "
            cSQL = cSQL & ", KASNUM tinyint"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", AUTOPOS Int IDENTITY"
            cSQL = cSQL & " ) "
        Case Is = "WECHSEL"
            cSQL = "Create Table WECHSEL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Datum Datetime "
            cSQL = cSQL & ", EURWG real "
            cSQL = cSQL & ", KASNUM tinyint"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", AUTOPOS Int IDENTITY"
            cSQL = cSQL & " ) "
        Case Is = "PRINTQ"
            cSQL = "Create Table PRINTQ"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ZEILE varchar(200) "
            cSQL = cSQL & " ) "
        Case Is = "ARTMERK"
            cSQL = "Create Table ARTMERK"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", MERK varchar(4) "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "KULOESCH"
            cSQL = "Create Table KULOESCH"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(10) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & " ) "
        Case Is = "KUNDEDU"
            cSQL = "Create Table KUNDEDU "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEL varchar (35)"
            cSQL = cSQL & ", FAXNR varchar (35)"
            cSQL = cSQL & ", EMAIL varchar (50)"
            cSQL = cSQL & ", MOBILTEL varchar (35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", TITEL varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            cSQL = cSQL & ", NR Int IDENTITY "
            cSQL = cSQL & ", datum1 DATETIME "
            cSQL = cSQL & ") "
        Case Is = "E93"
            cSQL = "Create Table E93"
            cSQL = cSQL & "("
            cSQL = cSQL & " Bo1 bit"
            cSQL = cSQL & ", Bo2 bit"
            cSQL = cSQL & ", Bo3 bit"
            cSQL = cSQL & ", Bo4 bit"
            cSQL = cSQL & ", Bo5 bit"
            cSQL = cSQL & ", Bo6 bit"
            cSQL = cSQL & ", Bo7 bit"
            cSQL = cSQL & ", Bo8 bit"
            cSQL = cSQL & ", Bo9 bit"
            cSQL = cSQL & ")"
        Case Is = "E15A"
            cSQL = "Create Table E15A"
            cSQL = cSQL & "("
            cSQL = cSQL & " Bo1 bit"
            cSQL = cSQL & ", Bo2 bit"
            cSQL = cSQL & ", Bo3 bit"
            cSQL = cSQL & ", Bo4 bit"
            cSQL = cSQL & ", Bo5 bit"
            cSQL = cSQL & ", Bo6 bit"
            cSQL = cSQL & ", Bo7 bit"
            cSQL = cSQL & ", Bo8 bit"
            cSQL = cSQL & ", Bo9 bit"
            cSQL = cSQL & ", ETI varchar(20)"
            cSQL = cSQL & ")"
        Case Is = "E15B"
            cSQL = "Create Table E15B"
            cSQL = cSQL & "("
            cSQL = cSQL & " Bo1 bit"
            cSQL = cSQL & ", Bo2 bit"
            cSQL = cSQL & ")"
        Case Is = "KONTINP"
            cSQL = "Create Table KONTINP"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", Lastdate DATETIME"
            cSQL = cSQL & ", Lasttime varchar(8)"
            cSQL = cSQL & ", WPREIS real"
            cSQL = cSQL & ", MeldeMenge int"
            cSQL = cSQL & ", ABESTAND int"
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", Verfueg int"
            cSQL = cSQL & " ) "
        Case Is = "ARTFARB2"
            cSQL = "Create Table ARTFARB2"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", AWM2 varchar(2)"
            cSQL = cSQL & " ) "
        Case Is = "ABAGN"
            cSQL = "Create Table ABAGN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & " ) "
        Case Is = "ABAGNS"
            cSQL = "Create Table ABAGNS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Anteil real"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", aMenge int"
            cSQL = cSQL & ", aPREIS real"
            cSQL = cSQL & ", AGNBEZEICH varchar(35)"
            cSQL = cSQL & " ) "
        Case Is = "ABAGNC"
            cSQL = "Create Table ABAGNC"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " AGN int"
            cSQL = cSQL & ", aPREIS1 real"
            cSQL = cSQL & ", aPREIS2 real"
            cSQL = cSQL & ", aPREIS3 real"
            cSQL = cSQL & ", aPREISg real"
            cSQL = cSQL & ", AGNBEZEICH varchar(35)"
            cSQL = cSQL & ", UST real"
            cSQL = cSQL & ", DatText varchar(50) "
            cSQL = cSQL & ", ABS1 real"
            cSQL = cSQL & ", ABS2 real"
            cSQL = cSQL & ", ABS3 real"
            cSQL = cSQL & " ) "
        Case Is = "KONTIN"
            cSQL = "Create Table KONTIN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", Lastdate DATETIME"
            cSQL = cSQL & ", Lasttime varchar(8)"
            cSQL = cSQL & ", WPREIS real"
            cSQL = cSQL & ", MeldeMenge int"
            cSQL = cSQL & ", ABESTAND int"
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & " ) "
    
        Case Is = "BESTAKT"
            cSQL = "Create Table BESTAKT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", Lastdate DATETIME"
            cSQL = cSQL & ", Lasttime varchar(10)"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", AENART varchar(20)"
            cSQL = cSQL & " ) "
            
        Case Is = "BAT"
            cSQL = "Create Table BAT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", bedname varchar(35)"
            cSQL = cSQL & ", bediener smallint"
            cSQL = cSQL & ", mont varchar(35)"
            cSQL = cSQL & ", Preis real"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", NPreis real"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(10)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & " ) "
            
        Case Is = "KVKABW"
            cSQL = "Create Table KVKABW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", KVKALT real"
            cSQL = cSQL & ", KVKNEU real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", Bestand int"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", ABW real"
            cSQL = cSQL & " ) "
            
        Case Is = "ABWESEND"
            cSQL = "Create Table ABWESEND"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ABWESEND varchar(20)"
            cSQL = cSQL & " ) "
            
        Case Is = "MY" & srechnertab
            cSQL = "Create Table MY" & srechnertab
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & " ) "
        Case Is = "BEAUFNR"
            cSQL = "Create Table BEAUFNR"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", AUFNR int"
            cSQL = cSQL & ", Tabname varchar(35) "
            cSQL = cSQL & " ) "
        Case Is = "LGTBON"
            cSQL = "Create Table LGTBON ( "
            cSQL = cSQL & " LDATE DATETIME "
            cSQL = cSQL & " ) "
        Case Is = "KUNPFLGH"
            cSQL = "Create Table KUNPFLGH ( "
            cSQL = cSQL & " KUNDNR int "
            cSQL = cSQL & ", DATUM DATETIME "
            cSQL = cSQL & ", REINIGUNG varchar(250) "
            cSQL = cSQL & ", MASKEN varchar(250) "
            cSQL = cSQL & ", EXTRAS varchar(250) "
            cSQL = cSQL & ", TAGESPFLEG varchar(250) "
            cSQL = cSQL & ", BERATUNG varchar(250) "
            cSQL = cSQL & ", PROBEN varchar(250) "
            cSQL = cSQL & ", KAEUFE varchar(250) "
            cSQL = cSQL & ", TONIC varchar(250) "
            cSQL = cSQL & ", PEELING varchar(250) "
            cSQL = cSQL & ", MASSAGE varchar(250) "
            cSQL = cSQL & ", NAGELLACK varchar(250) "
            cSQL = cSQL & ", BEHANDLUNG varchar(50) "
            cSQL = cSQL & " ) "
        Case Is = "KUNPFLEG"
            cSQL = "Create Table KUNPFLEG ( "
            cSQL = cSQL & " KUNDNR int "
            cSQL = cSQL & ", VORGESCHM ntext "
            cSQL = cSQL & ", ALLERGIEN ntext "
            cSQL = cSQL & ", ERKRANK ntext "
            cSQL = cSQL & ", FINGERINFO varchar(250) "
            cSQL = cSQL & ", TIPTYP varchar(250) "
            cSQL = cSQL & ", VERPRONA varchar(250) "
            cSQL = cSQL & ", VERPROFU varchar(250) "
            cSQL = cSQL & ", NAGELINFO varchar(250) "
            cSQL = cSQL & ", FUSSINFO varchar(250) "
            cSQL = cSQL & ", SCHUHGR varchar(10) "
            cSQL = cSQL & ", VORGESCH varchar(250) "
            cSQL = cSQL & ", FNAGELD varchar(250) "
            cSQL = cSQL & ", FNAGEL varchar(50) "
            cSQL = cSQL & ", FUSS varchar(50) "
            cSQL = cSQL & ", RISIKEN varchar(10) "
            cSQL = cSQL & ", EINLAGEHERST bit "
            cSQL = cSQL & ", FETT tinyint "
            cSQL = cSQL & ", FEUCHT tinyint "
            cSQL = cSQL & ", POREN tinyint "
            cSQL = cSQL & ", SPANN tinyint "
            cSQL = cSQL & ", EMPFIND tinyint "
            cSQL = cSQL & ", ERSCHEIN tinyint "
            cSQL = cSQL & ", BEHAND tinyint "
            cSQL = cSQL & ", ENTHAAR tinyint "
            cSQL = cSQL & ", HAAR varchar(50) "
            cSQL = cSQL & ", AUGEN varchar(50) "
            cSQL = cSQL & ", TEINT varchar(50) "
            cSQL = cSQL & ", GESICHT varchar(50) "
            cSQL = cSQL & ", FARBEN varchar(50) "
            cSQL = cSQL & ", DUFT varchar(50) "
            cSQL = cSQL & ", MAKEUP varchar(50) "
            cSQL = cSQL & ", HAUTTYP varchar(50) "
            cSQL = cSQL & ", RAUCHER varchar(250) "
            cSQL = cSQL & ", WASSER varchar(250) "
            cSQL = cSQL & ", SPORT varchar(250) "
            cSQL = cSQL & ", SONNENBANK varchar(250) "
            cSQL = cSQL & ", KAFFEEGENUSS varchar(250) "
            cSQL = cSQL & " ) "
        Case Is = "KUNBHIST"
            cSQL = "Create Table KUNBHIST ( "
            cSQL = cSQL & " KUNDNR int "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", BEHANDLUNG varchar(50) "
            cSQL = cSQL & " ) "
        
        Case Is = "GARANTIE"
            cSQL = "Create Table GARANTIE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KASNUM tinyint"
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", SerienNr varchar(100)"
            cSQL = cSQL & ", Bemerk varchar(100)"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", Kundnr int"
            cSQL = cSQL & ", belegnr int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", GEDRUCKT BIT"
            cSQL = cSQL & ", lfnr Int IDENTITY "
            cSQL = cSQL & " ) "
        Case Is = "EAPRINT"
            cSQL = "Create Table EAPRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KASNUM tinyint"
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", bedname varchar(35)"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ", ART varchar(12)"
            cSQL = cSQL & ", BEZEICH varchar(50)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Betrag float"
            cSQL = cSQL & " ) "
            
        Case Is = srechnertab & "ASEEK"
            cSQL = "Create Table " & srechnertab & "ASEEK "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", SEEKMOD tinyint "
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & " ) "
        Case Is = "ART38"
            cSQL = "Create Table ART38 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & " ) "
            
        Case Is = "LINRZUO"
            cSQL = "Create Table LINRZUO "
            cSQL = cSQL & "(LINRKISS int "
            cSQL = cSQL & ", LINRDAT int "
            cSQL = cSQL & " ) "
    
        Case Is = "PROVISION"
            cSQL = "Create Table PROVISION"
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", ZBONNR smallint"
            cSQL = cSQL & ", ABOK BIT"
            cSQL = cSQL & ")"
            
        
        Case Is = "RETPRINT"
            cSQL = "Create table RETPRINT ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINBEZ varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", Menge int "
            cSQL = cSQL & ", Lfnr Int IDENTITY  "
            cSQL = cSQL & ", BESTANDNEU int "
            
            
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", KUNDNR varchar(15)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(30)"
            cSQL = cSQL & ", STRASSE varchar(30)"
            
            cSQL = cSQL & ", Firma_Name varchar(50)"
            cSQL = cSQL & ", Firma_Strasse varchar(50)"
            cSQL = cSQL & ", Firma_Plz varchar(7)"
            cSQL = cSQL & ", Firma_Ort varchar(50)"
            cSQL = cSQL & ")"
        Case Is = "ANZPROC"
            cSQL = "Create Table ANZPROC ("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", Bezeich varchar(35)"
            cSQL = cSQL & ", Bestand int"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", PGN int"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", gefuehrt varchar(1)"
            cSQL = cSQL & ", RABatt_ok varchar(1)"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", MINBEST int"
            cSQL = cSQL & ", NOTIZEN varchar(25)"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", MINMEN int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", GPEAN varchar(13) "
            cSQL = cSQL & ", Faktor int"
            cSQL = cSQL & ", GULTIG varchar(100)"
            cSQL = cSQL & " )"
            
        
            
        Case Is = "KASSBON"
            cSQL = "Create Table KASSBON ("
            cSQL = cSQL & " DATUM DATETIME"
            cSQL = cSQL & ", KASNUM float"
            cSQL = cSQL & ", BONNR float"
            cSQL = cSQL & ", BETRAG float"
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", BONTEXT ntext"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & " )"
            
        Case Is = "KASSBOND"
            cSQL = "Create Table KASSBOND ("
            cSQL = cSQL & " DATUM DATETIME"
            cSQL = cSQL & ", KASNUM float"
            cSQL = cSQL & ", BONNR float"
            cSQL = cSQL & ", BETRAG float"
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", BONTEXT ntext"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & " )"
            
        Case Is = "DIFFTA"
            cSQL = "Create Table DIFFTA ("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", Bezeich varchar(35)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", BESTSYS int"
            cSQL = cSQL & ", BESTHEUT int"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", LWEKheut float"
            cSQL = cSQL & ", LWEKSYS float"
            cSQL = cSQL & ", diffLWEK float"
            cSQL = cSQL & ", diffbest int"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & " )"
        Case Is = "DRUBRU"
            cSQL = "Create Table DRUBRU ("
            cSQL = cSQL & "FIRMANAME varchar(50)"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EAN varchar(8)"
            cSQL = cSQL & ", EAN1 varchar(13)"
            cSQL = cSQL & ", BARCODE varchar(11)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", NEPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", VKPR_EUR float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", GRUND_INH varchar(7)"
            cSQL = cSQL & ", GRUND_DM float"
            cSQL = cSQL & ", GRUND_EUR float"
            cSQL = cSQL & ", DRUCKDATUM varchar(5)"
            cSQL = cSQL & ") "
        Case Is = "DRUNET"
            cSQL = "Create Table DRUNET ("
            cSQL = cSQL & "FIRMANAME varchar(50)"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EAN varchar(8)"
            cSQL = cSQL & ", EAN1 varchar(13)"
            cSQL = cSQL & ", BARCODE varchar(11)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", NEPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", VKPR_EUR float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", GRUND_INH varchar(7)"
            cSQL = cSQL & ", GRUND_DM float"
            cSQL = cSQL & ", GRUND_EUR float"
            cSQL = cSQL & ", DRUCKDATUM varchar(5)"
            cSQL = cSQL & ") "
        Case Is = "DELSTADAL"
            cSQL = "Create Table DELSTADAL"
            cSQL = cSQL & " ( LINR int"
            cSQL = cSQL & ", BESCHR varchar(30) "
            cSQL = cSQL & ") "
            
        Case Is = "NOKALKL"
            cSQL = "Create Table NOKALKL"
            cSQL = cSQL & " ( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ") "
        
        Case Is = "ZENTHELP"
            cSQL = "Create Table ZENTHELP"
            cSQL = cSQL & " ( PTEIL varchar(100)"
            cSQL = cSQL & ", HILFE ntext "
            cSQL = cSQL & ") "
            
        Case Is = "NOTART"
            cSQL = "Create Table NOTART"
            cSQL = cSQL & " ( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", HILFE ntext "
            cSQL = cSQL & ") "
        Case Is = "PRINTART"
            cSQL = "Create Table PRINTART"
            cSQL = cSQL & " ( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", HILFE ntext "
            cSQL = cSQL & ") "
        Case Is = "PRINTHELP"
            cSQL = "Create Table PRINTHELP"
            cSQL = cSQL & " ( PTEIL varchar(100)"
            cSQL = cSQL & ", HILFE ntext "
            cSQL = cSQL & ") "
    
        Case Is = "VKFAV"
            cSQL = "Create Table VKFAV ("
            cSQL = cSQL & " ARTNR float "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LINBEZ varchar(35)"
            cSQL = cSQL & ", MARKE varchar(35)"
            
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            
            cSQL = cSQL & ", LEK_WERT float"
            cSQL = cSQL & ", KVK_WERT float"
            cSQL = cSQL & ", SEK_WERT float"
            cSQL = cSQL & ", LVK_WERT float"
            
            cSQL = cSQL & ", VKMENGE1 float"
            cSQL = cSQL & ", VKMENGE2 float"
            cSQL = cSQL & ", VKMENGE3 float"
            cSQL = cSQL & ", VKMENGE4 float"
            cSQL = cSQL & ", VKMENGE5 float"
            cSQL = cSQL & ", VKMENGE6 float"
            cSQL = cSQL & ", VKMENGE7 float"
            cSQL = cSQL & ", VKMENGE8 float"
            cSQL = cSQL & ", VKMENGE9 float"
            cSQL = cSQL & ", VKMENGE10 float"
            cSQL = cSQL & ", VKMENGE11 float"
            cSQL = cSQL & ", VKMENGE12 float"
            
            cSQL = cSQL & ", VKMENGE20 float"
            cSQL = cSQL & ", VKMENGE50 float"
            cSQL = cSQL & ", VKMENGE30 float"
            cSQL = cSQL & ", VKMENGE40 float"
            
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            
            
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ")"
            
        Case Is = "FAVKOPF"
            cSQL = "Create Table FAVKOPF ("
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", SORT varchar(60)"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", LINBEZ varchar(35)"
            cSQL = cSQL & ", sgef varchar(35)"
            cSQL = cSQL & ")"
    
         Case Is = "GROLIEF"
            cSQL = "Create Table GROLIEF"
            cSQL = cSQL & " (LINR int) "
        Case Is = "MA" & srechnertab
            cSQL = "Create Table MA" & srechnertab & " "
            cSQL = cSQL & " (Artnr int) "
        Case Is = "STATIST"
            cSQL = "Create Table STATIST"
            cSQL = cSQL & " (Lastausw DATETIME "
            cSQL = cSQL & " ,kisskundnr varchar(10)"
            cSQL = cSQL & " ,kissZusatz varchar(10)"
            cSQL = cSQL & " , ART varchar(1)  "
            cSQL = cSQL & " , PERMAIL BIT ) "
            
        
        Case Is = "LOGOS"
            cSQL = "Create Table LOGOS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " LOGO1 BIT"
            cSQL = cSQL & ", LOGO2 BIT"
            cSQL = cSQL & ", LOGO3 BIT"
            cSQL = cSQL & " ) "
        Case Is = "KAEINAUSF"
            cSQL = "Create Table KAEINAUSF"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KASNUM tinyint"
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ", ART varchar(12)"
            cSQL = cSQL & ", BEZEICH varchar(50)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Betrag float"
            cSQL = cSQL & " ) "
        Case Is = "EINAUSKB"
            cSQL = "Create Table EINAUSKB"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KASNUM tinyint"
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ", ART varchar(12)"
            cSQL = cSQL & ", BEZEICH varchar(50)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Betrag float"
            cSQL = cSQL & " ) "
        Case Is = "KAEINAUS"
            cSQL = "Create Table KAEINAUS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KASNUM tinyint"
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ", ART varchar(12)"
            cSQL = cSQL & ", BEZEICH varchar(50)"
            cSQL = cSQL & ", Betrag float"
            cSQL = cSQL & " ) "
        Case Is = "NEINVK"
            cSQL = "Create Table NEINVK"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", NOTIZEN varchar(50)"
            cSQL = cSQL & ", NEINART varchar(100)"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(8)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", ANZEI tinyint"
            cSQL = cSQL & " ) "
        Case Is = "FEEDB"
            cSQL = "Create Table FEEDB"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", EDATE DATETIME"
            cSQL = cSQL & ", EZEIT varchar(8)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", transpack float "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & " ) "
            
        Case Is = "FEEDBF"
            cSQL = "Create Table FEEDBF"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", EDATE DATETIME"
            cSQL = cSQL & ", EZEIT varchar(8)"
            cSQL = cSQL & ", ZIELFILIALE tinyint "
            cSQL = cSQL & ", VONFILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & " ) "
            
        Case Is = "ALTERG"
            cSQL = "Create Table ALTERG"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " AGNU Int IDENTITY "
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT real"
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
            
        
    
        Case Is = "BONUSNR"
            cSQL = "Create Table BONUSNR"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BONUSNR int"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "GEMZ"
            cSQL = "Create Table GEMZ"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "UNTERWF"
            cSQL = "Create Table UNTERWF"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", VONFILIALE tinyint "
            cSQL = cSQL & ", ZIELFILIALE tinyint "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "KASSBEDP"
            cSQL = "Create Table KASSBEDP"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", BEDNU smallint "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "KASSBPRINT"
            cSQL = "Create Table KASSBPRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", BEDNU smallint "
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
            
        Case Is = "ARTDET"
            cSQL = "Create Table ARTDET"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", SPALTE varchar(20) "
            cSQL = cSQL & ", WERT varchar(255) "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", BEDNU smallint "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
            
        Case Is = "STORNO2"
            cSQL = "Create Table STORNO2"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", BEDNU1 smallint "
            cSQL = cSQL & ", BEDNU2 smallint "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
            
        Case Is = "ABSCHOPF"
            cSQL = "Create Table ABSCHOPF"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", BEDNU smallint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
            
            
        Case Is = "GUHIS"
            cSQL = "Create Table GUHIS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(10) "
            cSQL = cSQL & ", BELEGNR int "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float "
            cSQL = cSQL & ", ART varchar(2) "
            cSQL = cSQL & ", GUTSCHNRO int "
            cSQL = cSQL & ", GUTSCHNRR int "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & " ) "
            
        Case Is = "KUNDEDEL"
            cSQL = "Create Table KUNDEDEL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(10) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & " ) "
            
            
        Case Is = "GUTZ"
            cSQL = "Create Table GUTZ"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", ART varchar(2) "
            cSQL = cSQL & ", GUTSCHNR int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & " ) "
            
        Case Is = "KKZAHL"
            cSQL = "Create Table KKZAHL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
            
        
            
        Case Is = "LASTZAHL"
            cSQL = "Create Table LASTZAHL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
    
        Case Is = "KREDITZA"
            cSQL = "Create Table KREDITZA"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", KREADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", BEDNU smallint"
            cSQL = cSQL & ", Menge smallint"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "KKZAHLTE"
            cSQL = "Create Table KKZAHLTE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "LASTZAHLTE"
            cSQL = "Create Table LASTZAHLTE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
            
            
        
            
        Case Is = "GEMZD"
            cSQL = "Create Table GEMZD"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & " ) "
    
        Case Is = "DTA"
            cSQL = "Create Table DTA "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " BELEGNR float "
            cSQL = cSQL & " , BETRAG float "
            cSQL = cSQL & " , BLZ float "
            cSQL = cSQL & " , DATUM DATETIME "
            cSQL = cSQL & " , EKONTO float "
            cSQL = cSQL & " , EMPF1 varchar(27) "
            cSQL = cSQL & " , EMPFAENGER varchar(27) "
            cSQL = cSQL & " , varcharA float "
            cSQL = cSQL & " , UHRZEIT varchar(8) "
            cSQL = cSQL & " , FILIALE smallint "
            cSQL = cSQL & " , SENDOK BIT "
            cSQL = cSQL & " , ZWECK1 varchar(27) "
            cSQL = cSQL & " , ZWECK2 varchar(27) "
            cSQL = cSQL & " , ZWECK3 varchar(27) "
            cSQL = cSQL & " , ZWECK4 varchar(27) "
            cSQL = cSQL & " , ZWECK5 varchar(27) "
            cSQL = cSQL & " , ZWECK6 varchar(27) "
            cSQL = cSQL & " , ZWECK7 varchar(27) "
            cSQL = cSQL & " , ZWECK8 varchar(27) "
            cSQL = cSQL & " , ZWECK9 varchar(27) "
            cSQL = cSQL & " , ZWECK10 varchar(27) "
            cSQL = cSQL & " , ZWECK11 varchar(27) "
            cSQL = cSQL & " , ZWECK12 varchar(27) "
            cSQL = cSQL & " , ZWECK13 varchar(27) "
            cSQL = cSQL & " , ZWECK14 varchar(27) "
            cSQL = cSQL & " )"
            
        Case Is = "DRU_BARG"
        
            cSQL = "Create Table DRU_BARG "
            cSQL = cSQL & "( FILIALE int"
            cSQL = cSQL & ", DATUM DateTime"
            cSQL = cSQL & ", WAEHRUNG varchar(3)"
            cSQL = cSQL & ", ART varchar(1)"
            cSQL = cSQL & ", NENNWERT float"
            cSQL = cSQL & ", ANZAHL float"
            cSQL = cSQL & " , SENDOK BIT "
            cSQL = cSQL & " )"
        
        Case Is = "BARGELD"
            cSQL = "Create Table BARGELD "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ANZAHL float "
            cSQL = cSQL & " , ART varchar(1) "
            cSQL = cSQL & " , DATUM DATETIME "
            cSQL = cSQL & " , FILIALE float "
            cSQL = cSQL & " , NENNWERT float "
            cSQL = cSQL & " , WAEHRUNG varchar(3) "
            cSQL = cSQL & " , SENDOK BIT "
            cSQL = cSQL & " )"
        
        Case Is = "ARTEXC1"
            cSQL = "Create Table ARTEXC1 "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KVKPR1 float "
            cSQL = cSQL & " , VKPR float "
            cSQL = cSQL & " , Bestand int "
            cSQL = cSQL & " , EAN varchar(13) "
            cSQL = cSQL & " , LPZ int "
            cSQL = cSQL & " , Artnr int "
            cSQL = cSQL & " , Bezeich varchar(35) "
            cSQL = cSQL & " , Libesnr varchar(13) "
            cSQL = cSQL & " , RKZ varchar(1)"
            cSQL = cSQL & " , GEFUEHRT varchar(1)"
            cSQL = cSQL & " )"
            
        Case Is = "ARTEXC2"
            cSQL = "Create Table ARTEXC2 "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KVKPR1 float "
            cSQL = cSQL & " , Bestand int "
            cSQL = cSQL & " , MINMEN int "
            cSQL = cSQL & " , LPZ int "
            cSQL = cSQL & " , Artnr int "
            cSQL = cSQL & " , Bezeich varchar(35) "
            cSQL = cSQL & " , Libesnr varchar(13) "
            cSQL = cSQL & " , EAN varchar(13) "
            cSQL = cSQL & " )"
    
    
        Case Is = "BEDNAME"
            cSQL = "Create Table BEDNAME "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " BEDCODE varchar(15) "
            cSQL = cSQL & " , BEDIENER int "
            cSQL = cSQL & " , BEDNAME varchar(32) "
            cSQL = cSQL & " , BEDNU int "
            cSQL = cSQL & " , PASSWORT varchar(10) "
            cSQL = cSQL & " , SYNSTATUS varchar(1) "
            cSQL = cSQL & " )"
    
        Case Is = "DRUCKBED"
            cSQL = "Create Table DRUCKBED "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " BEDCODE varchar(15) "
            cSQL = cSQL & " , BEDIENER int "
            cSQL = cSQL & " , BEDNAME varchar(32) "
            cSQL = cSQL & " , BEDNU int "
            cSQL = cSQL & " , PASSWORT varchar(10) "
            cSQL = cSQL & " , SYNSTATUS varchar(1) "
            cSQL = cSQL & " )"
            
        Case Is = "TABALI" & srechnertab
            cSQL = "Create Table TABALI" & srechnertab & " "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Tabname varchar(20) "
            cSQL = cSQL & " , Spaltenna varchar(20) "
            cSQL = cSQL & " , SpaltenAli varchar(50) "
            cSQL = cSQL & " ) "
        Case Is = "ZBONLAY"
            cSQL = "Create Table ZBONLAY "
            cSQL = cSQL & "("
            cSQL = cSQL & " Tabname varchar(20) "
            cSQL = cSQL & ", Spaltenna varchar(40) "
            cSQL = cSQL & ", Spaltenbez varchar(40) "
            cSQL = cSQL & ", Reihenf tinyint "
            cSQL = cSQL & ", Anzeige varchar(1) "
            cSQL = cSQL & ", Bearbeit varchar(1) "
            cSQL = cSQL & " ) "
        
           
        Case Is = "TEXTBLOCK"
            cSQL = "Create Table TEXTBLOCK "
            cSQL = cSQL & "("
            cSQL = cSQL & " KURZBESCHREIB varchar(35) "
            cSQL = cSQL & ", BESCHREIB ntext "
            cSQL = cSQL & ", TBNR Int IDENTITY "
            cSQL = cSQL & ", ART varchar(20) "
            cSQL = cSQL & " ) "
            
        Case Is = "ETI" & srechnertab
            cSQL = "Create Table ETI" & srechnertab
            cSQL = cSQL & " ( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & ") "
        
        Case Is = "SPEZIINFO"
            cSQL = "Create Table SPEZIINFO ( "
            cSQL = cSQL & " BUCHUNGSNR int "
            cSQL = cSQL & ", SPEZITEXT varchar(255) "
            cSQL = cSQL & ", gesehen BIT"
            cSQL = cSQL & " ) "
            
        Case Is = "BVOFARBE"
            cSQL = "Create Table BVOFARBE ( "
            cSQL = cSQL & " FARBWERT int "
            cSQL = cSQL & ", FARBBESCHREIB varchar(255) "
            cSQL = cSQL & " ) "
            
        Case Is = "BVOALI"
            cSQL = "Create Table BVOALI ( "
            cSQL = cSQL & " Spalte varchar(20)"
            cSQL = cSQL & ", Alias varchar(50) "
            cSQL = cSQL & ", sTab varchar(20) "
            cSQL = cSQL & " ) "
            
        Case Is = "KONDITIONEN"
            cSQL = "Create Table KONDITIONEN ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", KONDI smallint "
            cSQL = cSQL & ", FAKTOR smallint "
            cSQL = cSQL & " ) "
            
        Case Is = "KONDILEK"
            cSQL = "Create Table KONDILEK( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", KLEK real "
            cSQL = cSQL & " ) "
            
        Case Is = "LAGERPLATZ"
            cSQL = "Create Table LAGERPLATZ ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", LAGERP Long "
            cSQL = cSQL & " ) "
            
        
            
        Case Is = "LIEFPRINT"
            cSQL = "Create Table LIEFPRINT "
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", AWERT float"
            cSQL = cSQL & ", ZIELEK float"
            cSQL = cSQL & ", FAX varchar(30)"
            cSQL = cSQL & ", KTEXT varchar(50)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", NOTIZ ntext "
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(30)"
            cSQL = cSQL & ", STRASSE varchar(30)"
            cSQL = cSQL & ", TEL varchar(30)"
            cSQL = cSQL & ", Artikelanz int"
            cSQL = cSQL & ", Bestandsum int"
            cSQL = cSQL & ") "
            
        Case Is = "LIEFEXC"
            cSQL = "Create Table LIEFEXC "
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", AWERT float"
            cSQL = cSQL & ", ZIELEK float"
            cSQL = cSQL & ", FAX varchar(30)"
            cSQL = cSQL & ", KTEXT varchar(50)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", NOTIZ ntext "
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(30)"
            cSQL = cSQL & ", STRASSE varchar(30)"
            cSQL = cSQL & ", TEL varchar(30)"
            cSQL = cSQL & ") "
            
        Case Is = "LINTE"
            cSQL = "Create Table LINTE "
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LINBEZEICH varchar(30)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ") "
        
        Case Is = "MERKFARB"
            cSQL = "Create Table MERKFARB "
            cSQL = cSQL & "( "
            cSQL = cSQL & " artnr int"
            cSQL = cSQL & ", AWM varchar(2) "
            cSQL = cSQL & ") "
        Case Is = "NOTIZEN"
            cSQL = "Create Table NOTIZEN "
            cSQL = cSQL & "( "
            cSQL = cSQL & " NOTIZ varchar(250)"
            cSQL = cSQL & ", DATUM datetime "
            cSQL = cSQL & ") "
            
         Case Is = "TERM_STD"
            cSQL = "Create Table TERM_STD "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BEZEICH varchar(50)"
            cSQL = cSQL & ", DAUER float "
            cSQL = cSQL & ", NR float "
            cSQL = cSQL & ", GLIEDERUNG varchar(30)"
            cSQL = cSQL & ", artnr int"
            cSQL = cSQL & ") "
            
        Case Is = "PFLEGORT"
            cSQL = "Create Table PFLEGORT "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BEZEICH varchar(35)"
            cSQL = cSQL & " ,anzeigen bit"
            cSQL = cSQL & ") "
        
        Case Is = "FEHLZEIT"
            cSQL = "Create Table FEHLZEIT "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BEDNAME varchar(32)"
            cSQL = cSQL & ", BEDNU float"
            cSQL = cSQL & ", BEGRUEND float"
            cSQL = cSQL & ", BEGRUENDTX varchar(15)"
            cSQL = cSQL & ", DATUM_BIS datetime"
            cSQL = cSQL & ", DATUM_VON datetime"
            cSQL = cSQL & ", ZEIT_ART float"
            cSQL = cSQL & ", ZEIT_BIS varchar(5)"
            cSQL = cSQL & ", ZEIT_GUELT float"
            cSQL = cSQL & ", ZEIT_VON varchar(5)"
            cSQL = cSQL & ") "
        
        Case Is = "TERMINE"
            cSQL = "Create Table TERMINE "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BEDNAME varchar(32)"
            cSQL = cSQL & ", BEDNU float"
            cSQL = cSQL & ", BEHANDLUNG varchar(250)"
            cSQL = cSQL & ", BUCHUNGSNR float"
            cSQL = cSQL & ", DATUM float"
            cSQL = cSQL & ", KABINE varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", KUNDNR float"
            cSQL = cSQL & ", UHRZEIT varchar(10)"
            cSQL = cSQL & ", BEDEINTRAG smallint"
            cSQL = cSQL & ", neu bit"
            cSQL = cSQL & ") "
            
        Case Is = "TERMPRINT"
            cSQL = "Create Table TERMPRINT "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BEDNAME varchar(32)"
            cSQL = cSQL & ", BEDNU float"
            cSQL = cSQL & ", BEHANDLUNG varchar(250)"
            cSQL = cSQL & ", BUCHUNGSNR float"
            cSQL = cSQL & ", DATUM float"
            cSQL = cSQL & ", KABINE varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", KUNDNR float"
            
            cSQL = cSQL & ", TEL varchar (35)"
            cSQL = cSQL & ", MOBILTEL varchar (35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", NAME varchar(35)"
            
            cSQL = cSQL & ", UHRZEIT varchar(10)"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", von DATETIME"
            cSQL = cSQL & ", bis DATETIME"
            cSQL = cSQL & ", BEDEINTRAG smallint "
            cSQL = cSQL & ") "
        
        
        Case Is = "OPENINGS"
            cSQL = "Create Table OPENINGS "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BIS varchar(5)"
            cSQL = cSQL & ", LFDNR float"
            cSQL = cSQL & ", VON varchar(5)"
            cSQL = cSQL & ", WOTAG float"
            cSQL = cSQL & ", ZEITBLOCK float"
            cSQL = cSQL & ", TERMINANLAGE varchar(15)"
            cSQL = cSQL & ") "
        Case Is = "SONDDRU"
            cSQL = "Create Table SONDDRU "
            cSQL = cSQL & "( "
            cSQL = cSQL & " Ueber varchar(150)"
            cSQL = cSQL & ", Zeile1 varchar(150)"
            cSQL = cSQL & ", Zeile2 varchar(150)"
            cSQL = cSQL & ", altPr varchar(50)"
            cSQL = cSQL & ", neuPr varchar(50)"
            cSQL = cSQL & ", Zeile3 varchar(150)"
            
            cSQL = cSQL & ", UeberS int"
            cSQL = cSQL & ", Zeile1S int"
            cSQL = cSQL & ", Zeile2S int"
            cSQL = cSQL & ", altPrS int"
            cSQL = cSQL & ", neuPrS int"
            cSQL = cSQL & ", Zeile3S int"
            
            cSQL = cSQL & ", durchge Bit"
            cSQL = cSQL & ") "
            
        Case Is = "SONDTEXT"
            cSQL = "Create Table SONDTEXT "
            cSQL = cSQL & "( Name varchar (35) "
            cSQL = cSQL & ", Ueber varchar(150)"
            cSQL = cSQL & ", Zeile1 varchar(150)"
            cSQL = cSQL & ", Zeile2 varchar(150)"
            cSQL = cSQL & ", altPr varchar(50)"
            cSQL = cSQL & ", neuPr varchar(50)"
            cSQL = cSQL & ", Zeile3 varchar(150)"
            cSQL = cSQL & ", UeberS int"
            cSQL = cSQL & ", Zeile1S int"
            cSQL = cSQL & ", Zeile2S int"
            cSQL = cSQL & ", altPrS int"
            cSQL = cSQL & ", neuPrS int"
            cSQL = cSQL & ", Zeile3S int"
            cSQL = cSQL & ", durchge Bit"
            cSQL = cSQL & ") "
        Case Is = "RECHAB"
            cSQL = "Create Table RECHAB "
            cSQL = cSQL & "("
            cSQL = cSQL & " PCNAME varchar(35) "
            cSQL = cSQL & ", KASSENR varchar(2)"
            cSQL = cSQL & ") "
            
        
            
        Case Is = "KUOKB"
            cSQL = "Create Table KUOKB "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", FARBE varchar(2)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", STATUSARTIKEL varchar(35)"
            cSQL = cSQL & ", STATUSKUNDE varchar(35)"
            cSQL = cSQL & ", BESTELLTAM DATETIME "
            cSQL = cSQL & ", BESTELLTUM varchar(10) "
            cSQL = cSQL & ", BESTELLTPREIS real "
            cSQL = cSQL & ", BESTELLTMENGE smallint "
            
            cSQL = cSQL & ", TEL varchar (35)"
            cSQL = cSQL & ", FAXNR varchar (35)"
            cSQL = cSQL & ", EMAIL varchar (50)"
            cSQL = cSQL & ", MOBILTEL varchar (35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", TITEL varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            
            cSQL = cSQL & ") "
        

        Case Is = "KUNDD1"
            cSQL = "Create Table KUNDD1 "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEL varchar (35)"
            cSQL = cSQL & ", FAXNR varchar (35)"
            cSQL = cSQL & ", EMAIL varchar (50)"
            cSQL = cSQL & ", MOBILTEL varchar (35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", TITEL varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            cSQL = cSQL & ") "
            
        Case Is = "KUNDAUSLIEF"
            cSQL = "Create Table KUNDAUSLIEF "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", FARBE varchar(2)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", STATUSARTIKEL varchar(35)"
            cSQL = cSQL & ", STATUSKUNDE varchar(35)"
            cSQL = cSQL & ", BESTELLTAM DATETIME "
            cSQL = cSQL & ", BESTELLTUM varchar(10) "
            cSQL = cSQL & ", BESTELLTPREIS real "
            cSQL = cSQL & ", BESTELLTMENGE smallint "
            cSQL = cSQL & ", MBBLOCK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "KUNDAUSLIEFPRINT"
            cSQL = "Create Table KUNDAUSLIEFPRINT "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", NAME varchar(35) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", FARBE varchar(2)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", STATUSARTIKEL varchar(35)"
            cSQL = cSQL & ", STATUSKUNDE varchar(35)"
            cSQL = cSQL & ", BESTELLTAM DATETIME "
            cSQL = cSQL & ", BESTELLTUM varchar(10) "
            cSQL = cSQL & ", BESTELLTPREIS real "
            cSQL = cSQL & ", BESTELLTMENGE smallint "
            cSQL = cSQL & ", MBBLOCK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "KUNDBEST"
            cSQL = "Create Table KUNDBEST "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", FARBE varchar(2)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", STATUSARTIKEL varchar(35)"
            cSQL = cSQL & ", STATUSKUNDE varchar(35)"
            cSQL = cSQL & ", BESTELLTAM DATETIME "
            cSQL = cSQL & ", BESTELLTUM varchar(10) "
            cSQL = cSQL & ", BESTELLTPREIS real "
            cSQL = cSQL & ", BESTELLTMENGE smallint "
            cSQL = cSQL & ", MBBLOCK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "KUNDBERR"
            cSQL = "Create Table KUNDBERR "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", FARBE varchar(2)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", STATUSARTIKEL varchar(35)"
            cSQL = cSQL & ", STATUSKUNDE varchar(35)"
            cSQL = cSQL & ", BESTELLTAM DATETIME "
            cSQL = cSQL & ", BESTELLTUM varchar(10) "
            cSQL = cSQL & ", BESTELLTPREIS real "
            cSQL = cSQL & ", BESTELLTMENGE smallint "
            cSQL = cSQL & ", MBBLOCK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "KBERRS"
            cSQL = "Create Table KBERRS "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", ZULAM DATETIME "
            cSQL = cSQL & ", ZULUM varchar(10) "
            cSQL = cSQL & ", ZULMENGE smallint "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ") "
            
        Case Is = "EANKOML"
            cSQL = "Create Table EANKOML "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", Artikelbezeichnung varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LINBEZ varchar(35)"
            cSQL = cSQL & ", FARBE varchar(1)"
            cSQL = cSQL & ") "
        Case Is = "TOPIA"
            cSQL = "Create Table TOPIA "
            cSQL = cSQL & "("
            cSQL = cSQL & " MAXI float"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", von varchar(10)"
            cSQL = cSQL & ", bis varchar(10)"
            cSQL = cSQL & ", fil varchar(30)"
            cSQL = cSQL & ") "
        Case Is = "TOPI" & srechnertab
            cSQL = "Create Table TOPI" & srechnertab
            cSQL = cSQL & "("
            cSQL = cSQL & " MAXI float"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", von varchar(10)"
            cSQL = cSQL & ", bis varchar(10)"
            cSQL = cSQL & ", fil varchar(30)"
            cSQL = cSQL & ") "


        Case Is = "ERT"
            cSQL = "Create Table ERT"
            cSQL = cSQL & "( "
            
            cSQL = cSQL & " Preis float"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", RErtrag float"
            cSQL = cSQL & ", LINR int"
            
            cSQL = cSQL & ") "
            
        Case Is = "ARTSUCH"
            cSQL = "Create Table ARTSUCH ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", Preisschu varchar(1)"
            cSQL = cSQL & ", Rabatt_OK varchar(1)"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", MinMen int"
            cSQL = cSQL & ", MinBest int"
            cSQL = cSQL & " ) "
        Case Is = "LIEFENT"
            cSQL = " Create Table LIEFENT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " MONAT smallint  "
            cSQL = cSQL & " , UEKA real  "
            cSQL = cSQL & " , UEKR real "
            cSQL = cSQL & " , UEKAvv real  "
            cSQL = cSQL & " , UEKAAJ real  "
            cSQL = cSQL & " , UEKRAJ real "
            cSQL = cSQL & " ) "
        Case Is = "KRA"
            cSQL = " Create Table KRA"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KUNDNR int "
            cSQL = cSQL & " , OFFEN real "
            cSQL = cSQL & " , ADATE DATETIME "
            cSQL = cSQL & " , KUERZEL varchar(5) "
            cSQL = cSQL & " , Name varchar(35) "
            cSQL = cSQL & " , Vorname varchar(35) "
            cSQL = cSQL & " , Strasse varchar(35) "
            cSQL = cSQL & " , Plz varchar(8) "
            cSQL = cSQL & " , STADT varchar(35) "
            cSQL = cSQL & " ) "
        Case Is = "ZADRESS"
            cSQL = " Create Table ZADRESS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " AdressID smallint "
            cSQL = cSQL & " ,Firma varchar(35) "
            cSQL = cSQL & " , Anrede varchar(10) "
            cSQL = cSQL & " , Name varchar(35) "
            cSQL = cSQL & " , Vorname varchar(35) "
            cSQL = cSQL & " , Strasse varchar(35) "
            cSQL = cSQL & " , Plz varchar(8) "
            cSQL = cSQL & " , Ort varchar(35) "
            cSQL = cSQL & " , Titel varchar(35) "
            cSQL = cSQL & " ) "
        Case Is = "KASQL"
            cSQL = "Create Table KASQL "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KAName varchar(50) "
            cSQL = cSQL & ", Bdate Datetime "
            cSQL = cSQL & ", Geschlecht varchar(1) "
            cSQL = cSQL & ", KdNumVon int "
            cSQL = cSQL & ", KdnumBis int "
            cSQL = cSQL & ", PlzVon varchar(7)"
            cSQL = cSQL & ", KaufdatVon varchar(8)"
            cSQL = cSQL & ", KaufdatBis varchar(8)"
            cSQL = cSQL & ", BowertVon float"
            cSQL = cSQL & ", BowertBis float"
            cSQL = cSQL & ", ErtragVon float"
            cSQL = cSQL & ", ErtragBis float"
            cSQL = cSQL & ", UmsatzVon float"
            cSQL = cSQL & ", UmsatzBis float"
            cSQL = cSQL & ", Dat1Von varchar(8)"
            cSQL = cSQL & ", Dat1Bis varchar(8)"
            cSQL = cSQL & ", Dat2Von varchar(8)"
            cSQL = cSQL & ", Dat2Bis varchar(8)"
            cSQL = cSQL & ", Kredit varchar(1) "
            cSQL = cSQL & ", GEBMONAT tinyint "
            cSQL = cSQL & ", AWM varchar(2) "
            cSQL = cSQL & ", DS BIT "
            cSQL = cSQL & " ) "
        Case Is = "KUNDDRUCK"
            cSQL = "Create table KUNDDRUCK ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", GEWICHT real"
            cSQL = cSQL & ", PREISPER real "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ")"
        
        Case Is = "KASSWAAG"
            cSQL = "Create table KASSWAAG ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", GEWICHT real"
            cSQL = cSQL & ", PREISPER real "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ")"
        Case Is = "AINV"
            cSQL = "Create table AINV ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINBEZ varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ")"
            
        Case Is = srechnertab & "ATO"
        
            cSQL = "Create Table " & srechnertab & "ATO"
            cSQL = cSQL & " ( ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", EAN2 varchar(13) "
            cSQL = cSQL & ", EAN3 varchar(13) "
            cSQL = cSQL & ", lfnr Int IDENTITY "
            cSQL = cSQL & ")"
            
        Case Is = srechnertab & "O"
        
            cSQL = "Create Table " & srechnertab & "O"
            cSQL = cSQL & " ( ARTNR int "
            cSQL = cSQL & ")"

        Case Is = "AGNDBF"
            cSQL = "Create table AGNDBF ( "
            cSQL = cSQL & " AGN float "
            cSQL = cSQL & ", AGTEXT varchar(30)"
            cSQL = cSQL & ", INVAB float "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", LASTTIME varchar(10) )"
        Case Is = "TABLAY"
            cSQL = "Create table TABLAY ( "
            cSQL = cSQL & " TABNAME varchar(20) "
            cSQL = cSQL & ", SPALTENNA varchar(20)"
            cSQL = cSQL & ", SPALTENBEZ varchar(20)"
            cSQL = cSQL & ", REIHENF tinyint"
            cSQL = cSQL & ", ANZEIGE varchar(1)"
            cSQL = cSQL & ", BEARBEIT varchar(1)"
            cSQL = cSQL & " )"
            
        Case Is = "BXALIAS"
            cSQL = "Create table BXALIAS ( "
            cSQL = cSQL & " TABNAME varchar(10) "
            cSQL = cSQL & ", TABALIAS varchar(20)"
            cSQL = cSQL & " )"
             
        Case Is = "ZUORDEAN"
            cSQL = "Create table ZUORDEAN ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", Faktor smallint"
            cSQL = cSQL & ", GPEAN varchar(13) )"
             
        Case Is = "ART61"
            cSQL = "Create Table ART61 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", FILIALE int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", ERTRAG float "
            cSQL = cSQL & ", VKPREIS float "
            cSQL = cSQL & ", VKMENGE int "
            cSQL = cSQL & ", SERTRAG float "
            cSQL = cSQL & ", SPREIS float "
            cSQL = cSQL & ", SMENGE int "
            cSQL = cSQL & ", Rabatt float "
            cSQL = cSQL & ", Bonus float "
            cSQL = cSQL & ", Nachname varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", Vorname varchar(35) "
            cSQL = cSQL & ", SORTI varchar(15) "
            cSQL = cSQL & " ) "
            
        Case Is = "AKUNDLI"
            cSQL = "Create Table AKUNDLI "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEL varchar (35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", TITEL varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            cSQL = cSQL & ", RABATT float"
            cSQL = cSQL & ", DATUM1 DATETIME"
            cSQL = cSQL & ") "

        Case Is = "ART59"
            cSQL = "Create Table ART59 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", FILIALE int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", ERTRAG float "
            cSQL = cSQL & ", VKPREIS float "
            cSQL = cSQL & ", VKMENGE int "
            cSQL = cSQL & ", SERTRAG float "
            cSQL = cSQL & ", SPREIS float "
            cSQL = cSQL & ", SMENGE int "
            cSQL = cSQL & ", Rabatt float "
            cSQL = cSQL & ", Nachname varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", Vorname varchar(35) "
            cSQL = cSQL & ", SORTI varchar(15) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART61a"
            cSQL = "Create Table ART61a "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", FILIALE int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", ERTRAG float "
            cSQL = cSQL & ", VKPREIS float "
            cSQL = cSQL & ", VKMENGE int "
            cSQL = cSQL & ", SERTRAG float "
            cSQL = cSQL & ", SPREIS float "
            cSQL = cSQL & ", SMENGE int "
            cSQL = cSQL & ", Rabatt float "
            cSQL = cSQL & ", Nachname varchar(35) "
            cSQL = cSQL & ", KNUMMER int "
            cSQL = cSQL & ", Vorname varchar(35) "
            cSQL = cSQL & ", SORTI varchar(15) "
            cSQL = cSQL & " ) "
             
            
        Case Is = "TOPBEDP2"
            cSQL = "Create Table TOPBEDP2 "
            cSQL = cSQL & "( BEDIENER smallint"
            cSQL = cSQL & ", SPreis real"
            cSQL = cSQL & ", BONANZ int"
            cSQL = cSQL & ", KUCUT real"
            cSQL = cSQL & ") "
             
            
        Case Is = "TOPBEDP3"
            cSQL = "Create Table TOPBEDP3 "
            cSQL = cSQL & "( BEDIENER smallint"
            cSQL = cSQL & ", SErtrag real"
            cSQL = cSQL & ", BONANZ int"
            cSQL = cSQL & ", KUCUT real"
            cSQL = cSQL & ") "
             
        Case Is = "TOPBED"
            cSQL = "Create Table TOPBED "
            cSQL = cSQL & "( BEDIENER smallint"
            cSQL = cSQL & ", SMENGE int"
            cSQL = cSQL & ", BONANZ int"
            cSQL = cSQL & ", KUCUT real"
            cSQL = cSQL & ") "
             
        Case Is = "TOPBED1"
            cSQL = "Create Table TOPBED1 "
            cSQL = cSQL & "( BEDIENER smallint"
            cSQL = cSQL & ", SMENGE int"
            cSQL = cSQL & ", BONANZ int"
            cSQL = cSQL & ", KUCUT real"
            cSQL = cSQL & ") "
             
            
        Case Is = "TOPBED2"
            cSQL = "Create Table TOPBED2 "
            cSQL = cSQL & "( BEDIENER smallint"
            cSQL = cSQL & ", SMENGE int"
            cSQL = cSQL & ", BONANZ int"
            cSQL = cSQL & ", KUCUT real"
            cSQL = cSQL & ") "
             
        Case Is = "TOP4"
            cSQL = "Create Table TOP4 "
            cSQL = cSQL & "("
            cSQL = cSQL & " KUCUT float"
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", TMenge int"
            cSQL = cSQL & ", TANZKU int "
            cSQL = cSQL & ", MONT varchar(20) "
            
            cSQL = cSQL & ") "
             
        Case Is = "TOPP4"
            cSQL = "Create Table TOPP4 "
            cSQL = cSQL & "("
            cSQL = cSQL & " KUCUT float"
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", TPreis float"
            cSQL = cSQL & ", TANZKU int "
            cSQL = cSQL & ", MONT varchar(20) "
            
            cSQL = cSQL & ") "
             
        Case Is = "TOPP6"
            cSQL = "Create Table TOPP6 "
            cSQL = cSQL & "("
            cSQL = cSQL & " KUCUT float"
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", TErtrag float"
            cSQL = cSQL & ", TANZKU int "
            cSQL = cSQL & ", MONT varchar(20) "
            
            cSQL = cSQL & ") "
             
        Case Is = "TOP5"
            cSQL = "Create Table TOP5 "
            cSQL = cSQL & "("
            cSQL = cSQL & " BEDIENER int"
            cSQL = cSQL & ", BEDNAME varchar(35) "
            
            cSQL = cSQL & ", KUCUT1 float"
            cSQL = cSQL & ", TMenge1 int"
            cSQL = cSQL & ", TANZKU1 int "
            cSQL = cSQL & ", MONT1 varchar(20) "
            
            cSQL = cSQL & ", KUCUT2 float"
            cSQL = cSQL & ", TMenge2 int"
            cSQL = cSQL & ", TANZKU2 int "
            cSQL = cSQL & ", MONT2 varchar(20) "
            
            cSQL = cSQL & ", KUCUT3 float"
            cSQL = cSQL & ", TMenge3 int"
            cSQL = cSQL & ", TANZKU3 int "
            cSQL = cSQL & ", MONT3 varchar(20) "
            
            cSQL = cSQL & ", KUCUT4 float"
            cSQL = cSQL & ", TMenge4 int"
            cSQL = cSQL & ", TANZKU4 int "
            cSQL = cSQL & ", MONT4 varchar(20) "
            
            cSQL = cSQL & ", KUCUT5 float"
            cSQL = cSQL & ", TMenge5 int"
            cSQL = cSQL & ", TANZKU5 int "
            cSQL = cSQL & ", MONT5 varchar(20) "
            
            cSQL = cSQL & ", KUCUT6 float"
            cSQL = cSQL & ", TMenge6 int"
            cSQL = cSQL & ", TANZKU6 int "
            cSQL = cSQL & ", MONT6 varchar(20) "
            
            cSQL = cSQL & ", KUCUTS float"
            cSQL = cSQL & ") "
             

        Case Is = "BESTPROT"
            cSQL = "Create Table BESTPROT "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", UMENGE int "
            cSQL = cSQL & ", NEWBEST int"
            cSQL = cSQL & ", OLDBEST int"
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", AENART varchar(20)"
            cSQL = cSQL & ", AENGRUND varchar(20)"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "EANPROT"
            cSQL = "Create Table EANPROT "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", AENART varchar(20)"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "EANPDRU"
            cSQL = "Create Table EANPDRU "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", AENART varchar(20)"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "KVKPR1PROT"
            cSQL = "Create Table KVKPR1PROT "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", AENART varchar(20)"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "KVKPR1PDRU"
            cSQL = "Create Table KVKPR1PDRU "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", AENART varchar(20)"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "


        Case Is = "BESTAEND"
            cSQL = "Create Table BESTAEND "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", Jahr smallint "
            cSQL = cSQL & ", Monat tinyint"
            cSQL = cSQL & ", Bestand smallint"
           
            cSQL = cSQL & ", LEKPR real"
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
             
        Case Is = "KUK"
            cSQL = "Create Table KUK "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BEDIENER smallint"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
             

        Case Is = "KUNDKASS"
            cSQL = "Create Table KUNDKASS "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEDNR smallint"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "KUNDAZE"
            cSQL = "Create Table KUNDAZE "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEDNR smallint"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", PGN int"
            cSQL = cSQL & ", Marke varchar(20) "
            cSQL = cSQL & ") "

        Case Is = "LOG"
            cSQL = "Create table LOG ("
            cSQL = cSQL & " frmName varchar(20) "
            cSQL = cSQL & " , Datum Datetime "
            cSQL = cSQL & " , Uhrzeit Datetime "
            cSQL = cSQL & " ) "
             
        Case Is = "ABSCHLUSS"
            cSQL = "Create Table ABSCHLUSS ("
            cSQL = cSQL & " ZBONNR smallint "
            cSQL = cSQL & " , Datum Datetime "
            cSQL = cSQL & " , Uhrzeit Datetime "
            cSQL = cSQL & " , KASNUM tinyint "
            cSQL = cSQL & " ) "
             
        Case Is = "TAUSCH"
            cSQL = "Create Table TAUSCH ( "
            cSQL = cSQL & " SENDOK BIT"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(10) "
            cSQL = cSQL & ", MENGE float "
            cSQL = cSQL & ", ARTNR float "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", FIL_VON float "
            cSQL = cSQL & ", FIL_AN float "
            cSQL = cSQL & ", KASNUM float "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", VKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", TRANSPACK float "
            cSQL = cSQL & " ) "
             
        Case Is = "ARBEIT"
            cSQL = "Create Table ARBEIT "
            cSQL = cSQL & "(BEDNU float"
            cSQL = cSQL & ", BEDNAME varchar(32) "
            cSQL = cSQL & ", DATUM DATETIME "
            cSQL = cSQL & ", ZEIT varchar(8) "
            cSQL = cSQL & ", ART varchar(5) "
            cSQL = cSQL & " ) "
             
        Case Is = "BANKEN"
            cSQL = "Create Table BANKEN "
            cSQL = cSQL & "(BLZ varchar(8)"
            cSQL = cSQL & ", BANKNAME varchar(58) "
            cSQL = cSQL & ", PLZ varchar(5) "
            cSQL = cSQL & ", ORT varchar(30) "
            cSQL = cSQL & " ) "
             
        Case Is = "PROTO"
            cSQL = "Create Table PROTO "
            cSQL = cSQL & "(SCHLUESSEL varchar(35) "
            cSQL = cSQL & ", WERT varchar(35) "
            cSQL = cSQL & ", Datum Datetime "
            cSQL = cSQL & " ) "
             
        Case Is = "ART58"
            cSQL = "Create Table ART58 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", VKLEKWERT float "
            cSQL = cSQL & ", BeLEKWERT float "
            cSQL = cSQL & ", AWERT float "
            cSQL = cSQL & ", MBestWERT float "
            cSQL = cSQL & ", InBeLEKWERT float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", INBEST int "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & ", VKMENGE int "
            cSQL = cSQL & " ) "
             
        Case Is = "KUHIST"
            cSQL = "Create Table KUHIST "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", adate Datetime "
            cSQL = cSQL & ", azeit varchar(10) "
            cSQL = cSQL & ", Menge smallint "
            cSQL = cSQL & ", preis real "
            cSQL = cSQL & ", Filiale tinyint "
            
            cSQL = cSQL & ", Firma varchar(35) "
            cSQL = cSQL & ", Titel varchar(20) "
            cSQL = cSQL & ", Name varchar(35) "
            cSQL = cSQL & ", Vorname varchar(35) "
            cSQL = cSQL & ", Kundnr int "
            
            cSQL = cSQL & " ) "
             
        Case Is = "BONTEXT"
            cSQL = "Create Table BONTEXT (ZEILENNR smallint, ZEILENTEXT varchar(32))"
             
        Case Is = "SORTI"
            cSQL = "Create Table SORTI (SORT tinyint)"
             
        Case Is = "INVLITE"
            cSQL = "Create Table INVLITE "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(30)"
            cSQL = cSQL & ", VKWERT float"
            cSQL = cSQL & ", EKWERT float"
            cSQL = cSQL & ", STSPANNE float"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ") "
             
            
        Case Is = "BEFEHLE"
            cSQL = "Create Table BEFEHLE "
            cSQL = cSQL & "( BTEXT ntext"
            cSQL = cSQL & ", BNR Int IDENTITY "
            cSQL = cSQL & ", BBESCHREIB varchar(254)"
            cSQL = cSQL & ", zuletzt DATETIME"
            cSQL = cSQL & ", BKURZ varchar(35)"
            cSQL = cSQL & ") "
             
    
        Case Is = "RETOURE"
            cSQL = "Create Table RETOURE "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & ", ADATE Datetime"
            cSQL = cSQL & ", AZEIT varchar(8)"
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", FILIALE smallint"
            cSQL = cSQL & ", KASNUM tinyint"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MOPPREIS real"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", IN_BESTELL smallint"
            cSQL = cSQL & ", BEST1 smallint"
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", AENGRUND varchar(20)"
            cSQL = cSQL & ") "
             
        
        Case Is = "KOLLVERK"
            cSQL = "Create Table KOLLVERK ( "
            cSQL = cSQL & " SENDOK BIT "
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & ", ADATE Datetime"
            cSQL = cSQL & ", AZEIT varchar(8)"
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", FILIALE smallint"
            cSQL = cSQL & ", KASNUM tinyint"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MOPPREIS real"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", IN_BESTELL smallint"
            cSQL = cSQL & ", BEST1 smallint"
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ") "
             
        Case Is = "AFCAUFBON"
            cSQL = "Create Table AFCAUFBON "
            cSQL = cSQL & "("
            cSQL = cSQL & " AArtnr int"
            cSQL = cSQL & ", AMenge float"
            cSQL = cSQL & ", azeit varchar(10)"
            cSQL = cSQL & ") "
        
        Case Is = "AFCNU"
            cSQL = "Create Table AFCNU "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINR int"
            cSQL = cSQL & ", AArtnr int"
            cSQL = cSQL & ", ABEZEICH varchar(35)"
            cSQL = cSQL & ", AMenge float"
            cSQL = cSQL & ", APREIS float"
            cSQL = cSQL & ", ALEKPR float"
            cSQL = cSQL & ", bestand int"
            cSQL = cSQL & ", ABEDNU int"
            cSQL = cSQL & ", azeit varchar(10)"
            cSQL = cSQL & ", belegnr int"
            cSQL = cSQL & ", kasnum int"
            cSQL = cSQL & ", kk_art varchar(2)"

            cSQL = cSQL & ") "
        
             
            
        Case Is = "AFCD4"
        
            cSQL = "Create Table AFCD4 "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINR int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", AArtnr int"
            cSQL = cSQL & ", ABEZEICH varchar(35)"
            cSQL = cSQL & ", AMenge float"
            cSQL = cSQL & ", APREIS float"
            cSQL = cSQL & ", ALEKPR float"
            cSQL = cSQL & ", bestand int"
            cSQL = cSQL & ", ABEDNU int"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(10)"
            cSQL = cSQL & ", belegnr int"
            cSQL = cSQL & ", kasnum int"
            cSQL = cSQL & ", kk_art varchar(2)"
            cSQL = cSQL & ", zhlggutsch float"
            cSQL = cSQL & ") "
        
        Case Is = "AFCD03"
        
            cSQL = "Create Table AFCD03 "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINR int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", AArtnr int"
            cSQL = cSQL & ", ABEZEICH varchar(35)"
            cSQL = cSQL & ", AMeng float"
            cSQL = cSQL & ", APREI float"
            cSQL = cSQL & ", ALEKPR float"
            cSQL = cSQL & ", bestand int"
            
            cSQL = cSQL & ", NE real"
            cSQL = cSQL & ", NP real"
            cSQL = cSQL & ", AMWST varchar(1)"
            cSQL = cSQL & ", nettopreis real"
            cSQL = cSQL & ") "
            
        Case Is = "AFCD3"
        
            cSQL = "Create Table AFCD3 "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINR int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", AArtnr int"
            cSQL = cSQL & ", ABEZEICH varchar(35)"
            cSQL = cSQL & ", AMenge float"
            cSQL = cSQL & ", APREIS float"
            cSQL = cSQL & ", ALEKPR float"
            cSQL = cSQL & ", bestand int"
            cSQL = cSQL & ", WGN int"
            cSQL = cSQL & ", Gbestand int"
            
            cSQL = cSQL & ", NETTOPR real"
            cSQL = cSQL & ", NSE real"
            cSQL = cSQL & ", NSP real"
            cSQL = cSQL & ", AMWST varchar(1)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            
            
            cSQL = cSQL & ") "
        
             
    
    
    
             
        Case Is = "AFCD2"
        
            cSQL = "Create Table AFCD2 "
            cSQL = cSQL & "("
            cSQL = cSQL & " AGN int"
            cSQL = cSQL & ", agtext varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", AArtnr int"
            cSQL = cSQL & ", ABEZEICH varchar(35)"
            cSQL = cSQL & ", AMenge float"
            cSQL = cSQL & ", Avkpr float"
            cSQL = cSQL & ", bestand int"
            cSQL = cSQL & ") "
            
        Case Is = "AFCD5"
            cSQL = "Create Table AFCD5 "
            cSQL = cSQL & "("
            cSQL = cSQL & " Artnr int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Menge smallint"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", FIL_AN int"
            cSQL = cSQL & ", KASNUM int"
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(8)"
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & ", vkpr real"
            cSQL = cSQL & ", lekpr real"
            cSQL = cSQL & ", ekpr real"
            cSQL = cSQL & ", Bestand int"
            cSQL = cSQL & ", Bediener smallint"
            cSQL = cSQL & ") "

'        Case Is = "AFCD1"
'            cSQL = "Create Table AFCD1 "
'            cSQL = cSQL & "("
'            cSQL = cSQL & " LINR int"
'            cSQL = cSQL & ", LIEFBEZ varchar(35)"
'            cSQL = cSQL & ", EAN varchar(13)"
'            cSQL = cSQL & ", AArtnr int"
'            cSQL = cSQL & ", ABEZEICH varchar(35)"
'            cSQL = cSQL & ", AMenge float"
'            cSQL = cSQL & ", Apreis float"
'            cSQL = cSQL & ", bestand int"
'            cSQL = cSQL & ") "
        Case Is = "DRU_ALKR"
            cSQL = "Create Table DRU_ALKR "
            cSQL = cSQL & "("
            cSQL = cSQL & " REDATUM varchar (10)"
            cSQL = cSQL & ", RENR varchar(15)"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", RESUMME float"
            cSQL = cSQL & ", STATUS varchar(1)"
            cSQL = cSQL & ") "
        
             
        
        Case Is = "AFCSTAT"
            cSQL = "Create Table AFCSTAT "
            cSQL = cSQL & "( ADATE DATETIME"
            cSQL = cSQL & ", KASNUM float"
            cSQL = cSQL & ", UMS_BAR float"
            cSQL = cSQL & ", UMS_KRED float"
            cSQL = cSQL & ", UMS_SCHECK float"
            cSQL = cSQL & ", UMS_KARTE float"
            cSQL = cSQL & ", UMS_LAST float"
            cSQL = cSQL & ", SPREIS_ANZ float"
            cSQL = cSQL & ", SPREIS_GES float"
            cSQL = cSQL & ", ANZSCHECK float"
            cSQL = cSQL & ", KUNDENZAHL float"
            cSQL = cSQL & ", GELDFACH float"
            cSQL = cSQL & ", ARTRAB_ANZ float"
            cSQL = cSQL & ", ARTRAB_GES float"
            cSQL = cSQL & ", GESRAB_ANZ float"
            cSQL = cSQL & ", GESRAB_GES float"
            cSQL = cSQL & ", STORNO_ANZ float"
            cSQL = cSQL & ", STORNO_GES float"
            cSQL = cSQL & ", EINZAHLUNG float"
            cSQL = cSQL & ", AUSZAHLUNG float"
            cSQL = cSQL & ", GUTSCHEIN float"
            cSQL = cSQL & ", BELEGNR float"
            cSQL = cSQL & ", ZHLGGUTSCH float"
            cSQL = cSQL & ", GUTSCHBAR float"
            cSQL = cSQL & ", GUTSCHSCH float"
            cSQL = cSQL & ", GUTSCHKRE float"
            cSQL = cSQL & ", GUTSCHKAR float"
            cSQL = cSQL & ", GUTSCHLAST float"
            cSQL = cSQL & ", GUTSCHGUTSCH float"
            cSQL = cSQL & ", ABSCHOPF float"
            cSQL = cSQL & ", KDIFF float"
            cSQL = cSQL & ", TDIFF float"
            cSQL = cSQL & ", DUKA float"
            cSQL = cSQL & ", WECHSEL float"
            cSQL = cSQL & ", BARVERKAUF float"
            cSQL = cSQL & ", SCHVERKAUF float"
            cSQL = cSQL & ", TILGBAR float"
            cSQL = cSQL & ", TILGSCH float"
            cSQL = cSQL & ", TILGGUT float"
            cSQL = cSQL & ", TILGKAR float"
            cSQL = cSQL & ", EINRGUTSCH float"
            cSQL = cSQL & ", RESTGUTSCH float"
            cSQL = cSQL & ", AUSZGUTSCH float"
            cSQL = cSQL & ", NUMSKARTE float"
            cSQL = cSQL & ") "
        Case Is = "AFCSUM"
            cSQL = "Create Table AFCSUM "
            cSQL = cSQL & "( ADATE DATETIME"
            cSQL = cSQL & ", KASNUM float"
            cSQL = cSQL & ", UMS_BAR float"
            cSQL = cSQL & ", UMS_KRED float"
            cSQL = cSQL & ", UMS_SCHECK float"
            cSQL = cSQL & ", UMS_KARTE float"
            cSQL = cSQL & ", UMS_LAST float"
            cSQL = cSQL & ", SPREIS_ANZ float"
            cSQL = cSQL & ", SPREIS_GES float"
            cSQL = cSQL & ", ANZSCHECK float"
            cSQL = cSQL & ", KUNDENZAHL float"
            cSQL = cSQL & ", GELDFACH float"
            cSQL = cSQL & ", ARTRAB_ANZ float"
            cSQL = cSQL & ", ARTRAB_GES float"
            cSQL = cSQL & ", GESRAB_ANZ float"
            cSQL = cSQL & ", GESRAB_GES float"
            cSQL = cSQL & ", STORNO_ANZ float"
            cSQL = cSQL & ", STORNO_GES float"
            cSQL = cSQL & ", EINZAHLUNG float"
            cSQL = cSQL & ", AUSZAHLUNG float"
            cSQL = cSQL & ", GUTSCHEIN float"
            cSQL = cSQL & ", BELEGNR float"
            cSQL = cSQL & ", ZHLGGUTSCH float"
            cSQL = cSQL & ", GUTSCHBAR float"
            cSQL = cSQL & ", GUTSCHSCH float"
            cSQL = cSQL & ", GUTSCHKRE float"
            cSQL = cSQL & ", GUTSCHKAR float"
            cSQL = cSQL & ", GUTSCHLAST float"
            cSQL = cSQL & ", GUTSCHGUTSCH float"
            cSQL = cSQL & ", ABSCHOPF float"
            cSQL = cSQL & ", KDIFF float"
            cSQL = cSQL & ", TDIFF float"
            cSQL = cSQL & ", DUKA float"
            cSQL = cSQL & ", WECHSEL float"
            cSQL = cSQL & ", BARVERKAUF float"
            cSQL = cSQL & ", SCHVERKAUF float"
            cSQL = cSQL & ", TILGBAR float"
            cSQL = cSQL & ", TILGSCH float"
            cSQL = cSQL & ", TILGGUT float"
            cSQL = cSQL & ", TILGKAR float"
            cSQL = cSQL & ", EINRGUTSCH float"
            cSQL = cSQL & ", RESTGUTSCH float"
            cSQL = cSQL & ", AUSZGUTSCH float"
            cSQL = cSQL & ") "
        Case Is = "ZZKOPF"
            cSQL = "Create Table ZZKopf "
            cSQL = cSQL & "( Monat int"
            cSQL = cSQL & ", Jahr int"
            cSQL = cSQL & ", DatVon DATETIME"
            cSQL = cSQL & ", DatBis DATETIME"
            cSQL = cSQL & ", K0 BIT"
            cSQL = cSQL & ", K1 BIT"
            cSQL = cSQL & ", K2 BIT"
            cSQL = cSQL & ", K3 BIT"
            cSQL = cSQL & ", K4 BIT"
            cSQL = cSQL & ", K5 BIT"
            cSQL = cSQL & ", K6 BIT"
            cSQL = cSQL & ", K7 BIT )"
            
        Case Is = "DRUAKTION"
            cSQL = "Create Table DRUAKTION "
            cSQL = cSQL & "( ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", DAT_BIS DATETIME"
            cSQL = cSQL & ", DAT_VON DATETIME"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KVKPR1ALT float"
            cSQL = cSQL & ", KVKPR1NEU float"
            cSQL = cSQL & ", PREISNR int "
            cSQL = cSQL & ", STATUS float"
            cSQL = cSQL & ", Pos int "
            cSQL = cSQL & ") "
            
        Case Is = "DRUAKTIONA"
            cSQL = "Create Table DRUAKTIONA "
            cSQL = cSQL & "( ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", DAT_BIS DATETIME"
            cSQL = cSQL & ", DAT_VON DATETIME"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KVKPR1ALT float"
            cSQL = cSQL & ", KVKPR1NEU float"
            cSQL = cSQL & ", PREISNR int "
            cSQL = cSQL & ", STATUS float"
            cSQL = cSQL & ", MWST varchar(1)"
            
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREIS float"
            cSQL = cSQL & ", MENGE float"
            cSQL = cSQL & ", ERTRAG float "
            cSQL = cSQL & ", NSP float"
            
            cSQL = cSQL & ", EKPRZR float"
            cSQL = cSQL & ", PREISZR float"
            cSQL = cSQL & ", MENGEZR float"
            cSQL = cSQL & ", ERTRAGZR float "
            cSQL = cSQL & ", NSPZR float"
            
            cSQL = cSQL & ", DAT_BISZR DATETIME"
            cSQL = cSQL & ", DAT_VONZR DATETIME"
            cSQL = cSQL & ") "
            
        Case Is = "PRSTERM"
            cSQL = "Create Table PRSTERM "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", KVKPR1ALT real"
            cSQL = cSQL & ", KVKPR1NEU real"
            cSQL = cSQL & ", STATUS smallint"
            cSQL = cSQL & ", DAT_VON DATETIME "
            cSQL = cSQL & ", DAT_BIS DATETIME"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", Preisschu varchar(1)"
            cSQL = cSQL & ", PREISNR smallint"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Pos int "
            cSQL = cSQL & ") "
            
        Case Is = "PREISTERM"
            cSQL = "Create Table PREISTERM "
            cSQL = cSQL & "( PREISNAME varchar(100)"
            cSQL = cSQL & ", PREISNR smallint"
            cSQL = cSQL & ", PREISBESCH ntext"
            cSQL = cSQL & ", VON DATETIME "
            cSQL = cSQL & ", BIS DATETIME"
            cSQL = cSQL & ") "
            
        Case Is = "DRUAKTIONK"
            cSQL = "Create Table DRUAKTIONK "
            cSQL = cSQL & "( PREISNAME varchar(100)"
            cSQL = cSQL & ", PREISNR smallint"
            cSQL = cSQL & ", PREISBESCH ntext"
            cSQL = cSQL & ", VON DATETIME "
            cSQL = cSQL & ", BIS DATETIME"
            cSQL = cSQL & ") "
        
             
''        Case Is = "DRUMBAE"
''            cSQL = "Create Table DRUMBAE "
''            cSQL = cSQL & "( ARTNR int"
''            cSQL = cSQL & ", BEZEICH varchar(35)"
''            cSQL = cSQL & ", LINR int"
''            cSQL = cSQL & ", LPZ smallint"
''            cSQL = cSQL & ", VKMENGE smallint"
''            cSQL = cSQL & ", BESTAND smallint"
''            cSQL = cSQL & ", OLDMB smallint"
''            cSQL = cSQL & ", NEWMB smallint"
''            cSQL = cSQL & ") "
            
        Case Is = "DRUMBAE"
            cSQL = "Create Table DRUMBAE "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", VKMENGE int"
            cSQL = cSQL & ", VKWO real"
            cSQL = cSQL & ", OLDMB smallint"
            cSQL = cSQL & ", NEWMB smallint"
            cSQL = cSQL & ") "
            
        Case Is = "DRUMBAE1"
            cSQL = "Create Table DRUMBAE1 "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", VKMENGE int"
            cSQL = cSQL & ", VKWO real"
            cSQL = cSQL & ", OLDMB smallint"
            cSQL = cSQL & ", NEWMB smallint"
            cSQL = cSQL & ") "
        
        Case Is = "WKL048"
            cSQL = "Create Table WKL048 "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", BEWEGUNG int"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ")"
             
        Case Is = "VORSCHLZ"
            cSQL = "Create Table VORSCHLZ "
            cSQL = cSQL & "( ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", PGN float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", AWM2 varchar(2)"
            cSQL = cSQL & ", MERK varchar(4)"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", MINBEST int"
            cSQL = cSQL & ", BESTVOR float"
            cSQL = cSQL & ", SOKO int"
            cSQL = cSQL & ", FAKTOR float"
            cSQL = cSQL & ", LPZ_VON int"
            cSQL = cSQL & ", LPZ_BIS int"
            cSQL = cSQL & ", EINDECK int"
            cSQL = cSQL & ", BEVORRAT float"
            cSQL = cSQL & ", INBEST int"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKAMo1 float"
            cSQL = cSQL & ", VKVMo1 float"
            cSQL = cSQL & ", VKLJ1 float"
            cSQL = cSQL & ", VKVJ1 float"
            cSQL = cSQL & ", MITTEILUNG varchar(250)"
            cSQL = cSQL & ", ANZEIGE smallint"
            cSQL = cSQL & ", NOTIZEN varchar(25)"
            cSQL = cSQL & ", LJ1 smallint"
            cSQL = cSQL & ", LJ2 smallint"
            cSQL = cSQL & ", LJ3 smallint"
            cSQL = cSQL & ", LJ4 smallint"
            cSQL = cSQL & ", LJ5 smallint"
            cSQL = cSQL & ", LJ6 smallint"
            cSQL = cSQL & ", LJ7 smallint"
            cSQL = cSQL & ", LJ8 smallint"
            cSQL = cSQL & ", LJ9 smallint"
            cSQL = cSQL & ", LJ10 smallint"
            cSQL = cSQL & ", LJ11 smallint"
            cSQL = cSQL & ", LJ12 smallint"
            cSQL = cSQL & ", VJ1 smallint"
            cSQL = cSQL & ", VJ2 smallint"
            cSQL = cSQL & ", VJ3 smallint"
            cSQL = cSQL & ", VJ4 smallint"
            cSQL = cSQL & ", VJ5 smallint"
            cSQL = cSQL & ", VJ6 smallint"
            cSQL = cSQL & ", VJ7 smallint"
            cSQL = cSQL & ", VJ8 smallint"
            cSQL = cSQL & ", VJ9 smallint"
            cSQL = cSQL & ", VJ10 smallint"
            cSQL = cSQL & ", VJ11 smallint"
            cSQL = cSQL & ", VJ12 smallint"
            cSQL = cSQL & ", SORTI smallint"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", PIN varchar(1)"
            cSQL = cSQL & ", SHOP varchar(1)"
            cSQL = cSQL & ", HS float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", BESTVOR_PROBEN int"
            cSQL = cSQL & ", BESTVOR_TESTER int"
            cSQL = cSQL & ", BESTVOR_NR int"
            cSQL = cSQL & ") "
            
        
        Case Is = "FILA"
            cSQL = "create table FILA (fil varchar(2))"
             
        Case Is = "RESTERR"
            cSQL = "Create Table RESTERR "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", BESTVOR int "
            cSQL = cSQL & ", DATEINAME varchar(12) "
            cSQL = cSQL & ", BEST_DATUM DATETIME "
            cSQL = cSQL & ", UPD_DATUM DATETIME "
            cSQL = cSQL & " ) "
             
        
        Case Is = "ZZZ"
            cSQL = "Create Table ZZZ "
            cSQL = cSQL & "("
            cSQL = cSQL & " BEZEICH varchar(35) "
            cSQL = cSQL & " ) "
             
    
        Case Is = "ART56"
            cSQL = "Create Table ART56 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & ", VKMENGE int "
            cSQL = cSQL & " ) "
            
        Case Is = "ART56A"
            cSQL = "Create Table ART56A "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & ", VKMENGE int "
            
            cSQL = cSQL & ", VKPR float "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART56B"
            cSQL = "Create Table ART56B "
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", BESTAND1 int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", VKMENGE1 int "
            cSQL = cSQL & ", ANZ int "
            cSQL = cSQL & " ) "
             
        Case Is = "ART55W"
            cSQL = "Create Table ART55W "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART55X"
            cSQL = "Create Table ART55X "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART55Y"
            cSQL = "Create Table ART55Y "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART55B"
        
            cSQL = "Create Table ART55B "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", SEKPR float "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
'            cSQL = "Create Table ART55B "
'            cSQL = cSQL & "(ARTNR int "
'            cSQL = cSQL & ", BEZEICH varchar(35) "
'            cSQL = cSQL & ", LINR int "
'            cSQL = cSQL & ", LPZ float "
'            cSQL = cSQL & ", LIBESNR varchar(13) "
'            cSQL = cSQL & ", LEKPR float "
'            cSQL = cSQL & ", KVKPR1 float "
'            cSQL = cSQL & ", RKZ varchar(1) "
'            cSQL = cSQL & ", BESTAND int "
'            cSQL = cSQL & ", liefbez varchar(35) "
'            cSQL = cSQL & ", AUFDAT DATETIME "
'            cSQL = cSQL & ", EXDAT DATETIME "
'            cSQL = cSQL & ", LASTVK DATETIME "
'            cSQL = cSQL & ", LASTZU DATETIME "
'            cSQL = cSQL & ", Monat varchar(30) "
'            cSQL = cSQL & ", FARBTEXT varchar(35)"
'            cSQL = cSQL & ", FARBwert int "
'            cSQL = cSQL & ", FARBwertS int "
'            cSQL = cSQL & ", FARBNR smallint "
'            cSQL = cSQL & " ) "
        Case Is = "ART55C"
            cSQL = "Create Table ART55C "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKWERT float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", ERSTDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
'            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
        Case Is = "ART55"
            cSQL = "Create Table ART55 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
        Case Is = "ART551"
            cSQL = "Create Table ART551 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
             
            
            
        Case Is = "ARTT23"
            cSQL = "Create Table ARTT23 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", PGN int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", VKPR float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", RABATT_OK varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", MINMEN int "
            cSQL = cSQL & ", MINBEST int "
            cSQL = cSQL & ", GEFUEHRT varchar(1) "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", NOTIZEN varchar(40) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", EAN2 varchar(13) "
            cSQL = cSQL & ", EAN3 varchar(13) "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", AWM varchar(2) "
            cSQL = cSQL & ", INHALT float "
            cSQL = cSQL & ", INHALTBEZ varchar(3) "
            cSQL = cSQL & ", GRUNDPREIS varchar(1) "
            cSQL = cSQL & ", PREISSCHU varchar(1) "
            cSQL = cSQL & ", KVKA float"
            cSQL = cSQL & ", KVKN float"
            cSQL = cSQL & ", DiffKVKE float"
            cSQL = cSQL & ", DiffKVKP float"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", LEK float"
            cSQL = cSQL & ", SEK float"
            cSQL = cSQL & ", Pos Int IDENTITY"
            cSQL = cSQL & " ) "
             
        Case Is = "KOPF55"
            cSQL = "Create Table KOPF55 "
            cSQL = cSQL & "( "
            cSQL = cSQL & " Auswahl int "
            cSQL = cSQL & ", Restbestand int "
            cSQL = cSQL & ", SEKWertg float "
            cSQL = cSQL & ", LEKWertg float "
            cSQL = cSQL & ", KVKWertg float "
            cSQL = cSQL & ", SEKWertT float "
            cSQL = cSQL & ", LEKWertT float "
            cSQL = cSQL & ", KVKWertT float "
            cSQL = cSQL & " ) "
             
'        Case "KO23"
'            cSQL = "Create Table KO23 ( "
'            cSQL = cSQL & " dat varchar(20)"
'            cSQL = cSQL & " ) "
'
        Case "NACHT"
            cSQL = "Create Table NACHT ( "
            cSQL = cSQL & " NACHTSTART varchar(8)"
            cSQL = cSQL & ", PCAUS BIT "
            cSQL = cSQL & ", INTERV smallint "
            cSQL = cSQL & ", STARTMIN smallint "
            cSQL = cSQL & ", UPRO BIT "
            cSQL = cSQL & ", USTADA BIT "
            cSQL = cSQL & ", USTAT BIT "
            cSQL = cSQL & ", KOMP BIT "
            cSQL = cSQL & ", UKDAT BIT "
            cSQL = cSQL & ", EKDAT BIT "
            cSQL = cSQL & ", BR BIT "
            cSQL = cSQL & ", KABSCH BIT "
            cSQL = cSQL & ", UMSATZNEU BIT "
            cSQL = cSQL & ", STAMDA BIT "
            cSQL = cSQL & ", EXTSICH BIT "
            cSQL = cSQL & ", MB BIT "
            cSQL = cSQL & ", WKAUS BIT "
            cSQL = cSQL & " ) "
            
        Case "ABREPORT"
            cSQL = "Create Table ABREPORT ( "
            cSQL = cSQL & " ARTKUM BIT "
            cSQL = cSQL & ", KK BIT "
            cSQL = cSQL & ", EA BIT "
            cSQL = cSQL & ", TAGFILT BIT "
            cSQL = cSQL & ", MITDRUCK BIT "
            cSQL = cSQL & ", ARTKUM_OHNEWGN BIT "
            cSQL = cSQL & " ) "
             
        Case "TABANZEIGE"
            cSQL = "Create Table TABANZEIGE ( "
            cSQL = cSQL & " TABNAME varchar(10) "
            cSQL = cSQL & ", TABDATE  DATETIME "
            cSQL = cSQL & ", LIEFBEZ  varchar(35) "
            cSQL = cSQL & ", Kurzinfo  varchar(35) "
            cSQL = cSQL & ", Auftragsnr  int "
            cSQL = cSQL & ", AUFWERT float "
            cSQL = cSQL & " ) "
            
        Case "TABDATUM"
            cSQL = "Create Table TABDATUM ( "
            cSQL = cSQL & " TABNAME varchar(10)"
            cSQL = cSQL & ", TABDATE  DATETIME"
            cSQL = cSQL & ", LIEFBEZ  varchar(35)"
            cSQL = cSQL & ", Kurzinfo  varchar(35)"
            cSQL = cSQL & ", Auftragsnr  int"
            cSQL = cSQL & " ) "
             
        Case Is = "AGNKOPF"
            cSQL = "Create Table AGNKOPF "
            cSQL = cSQL & "("
            cSQL = cSQL & " AGNTEXT ntext "
            cSQL = cSQL & ") "
            
        Case Is = "PLKOPF"
            cSQL = "Create Table PLKOPF "
            cSQL = cSQL & "("
            cSQL = cSQL & " AuswahlTEXT ntext "
            cSQL = cSQL & ", SHEAD1 varchar(50) "
            cSQL = cSQL & ", SHEAD2 varchar(50) "
            cSQL = cSQL & ", SHEAD3 varchar(50) "
            cSQL = cSQL & ", SHEAD4 varchar(50) "
            cSQL = cSQL & ", SSort varchar(15) "
            cSQL = cSQL & ") "
             
            
        Case "MDEINH"
            cSQL = "create table MDEINH "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " eancode varchar(13) "
            cSQL = cSQL & " , menge int "
            cSQL = cSQL & " ) "
             
        Case Is = "PREISLZU"
    
            cSQL = "Create Table PREISLZU "
            cSQL = cSQL & "("
            cSQL = cSQL & " Umsatz float"
            cSQL = cSQL & ", NettoUmsatz float"
            cSQL = cSQL & ", NSP float"
            cSQL = cSQL & ", ERTRAG float"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PreislText varchar(30)"
            cSQL = cSQL & ", PreislNR int"
            
            cSQL = cSQL & ") "
             

        Case Is = "ERTRAGTE"
            cSQL = "Create Table ERTRAGTE "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Preis float"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", KVKP float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", RErtrag float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ") "
             

        Case Is = "PREISKASS"
            cSQL = "Create Table PREISKASS "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", NPreis float"
            cSQL = cSQL & ", Preis float"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", KVKP float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", RErtrag float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", PreislText varchar(30)"
            cSQL = cSQL & ", PreislNR int"
            cSQL = cSQL & ") "
             
        Case Is = "PREISKASST"
            cSQL = "Create Table PREISKASST "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Preis float"
            cSQL = cSQL & ", NPreis float"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", KVKP float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", RErtrag float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ") "
             

        Case Is = "PREISLGU"
            cSQL = "Create Table PREISLGU "
            cSQL = cSQL & "("
            cSQL = cSQL & " Umsatz float"
            cSQL = cSQL & ", UmsatzNetto float"
            cSQL = cSQL & ", GESNSP float"
            cSQL = cSQL & ", ERTRAG float"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", von varchar(10)"
            cSQL = cSQL & ", bis varchar(10)"
            cSQL = cSQL & ", fil varchar(30)"
            cSQL = cSQL & ", prausw varchar(30)"
            cSQL = cSQL & ") "
             
        Case "PREISL"
            cSQL = "Create Table PREISL ( "
            cSQL = cSQL & " vonP real"
            cSQL = cSQL & ", bisP real "
            cSQL = cSQL & ", lfnr tinyint"
            cSQL = cSQL & " ) "
             
        Case Is = "NOEURO"
            cSQL = "Create Table NOEURO "
            cSQL = cSQL & "("
            cSQL = cSQL & " bednu int "
            cSQL = cSQL & ", Lastdate DATETIME "
            cSQL = cSQL & ", Bedname varchar(20) "
            cSQL = cSQL & ", WKUERZEL varchar(5) "
            cSQL = cSQL & ", WBEZEICH varchar(30) "
            cSQL = cSQL & ", UKURSEUR real "
            cSQL = cSQL & " )"
             
        Case Is = "ZEITUNG"
            cSQL = "Create Table ZEITUNG "
            cSQL = cSQL & "("
            cSQL = cSQL & " abezeich varchar(35) "
            cSQL = cSQL & ", belegnr int "
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", azeit varchar(8) "
            cSQL = cSQL & ", amenge int "
            cSQL = cSQL & ", eh_nr varchar(10) "
            cSQL = cSQL & " )"
             

        Case "DEVLPZ"
            cSQL = "Create Table DEVLPZ "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINBEZeich varchar(30) "
            
            cSQL = cSQL & " ) "
             
        
        Case Is = "Z_OUT"
            cSQL = "Create Table Z_OUT "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BESTAND smallint "
            cSQL = cSQL & ", MINBEST smallint "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & " ) "
             
    
        Case Is = "DRU_ZEI"
            cSQL = "Create Table DRU_ZEI "
            cSQL = cSQL & "("
            cSQL = cSQL & " TAG tinyint "
            cSQL = cSQL & ", TAGNAME varchar(2) "
            cSQL = cSQL & ", VON Datetime "
            cSQL = cSQL & ", BIS Datetime "
            cSQL = cSQL & ", UNTERB Datetime "
            cSQL = cSQL & ", PAUSENA Datetime "
            cSQL = cSQL & ", GESAMT Datetime "
            cSQL = cSQL & ", GGESAMT varchar(10) "
            cSQL = cSQL & ", NACHNAME varchar(35) "
            cSQL = cSQL & ", MONAT varchar(15) "
            cSQL = cSQL & ", BEDNU smallint "
            cSQL = cSQL & ", JAHR smallint "
            cSQL = cSQL & ", UTEXT varchar(35) "
            cSQL = cSQL & ", DATUM Datetime "
            cSQL = cSQL & " ) "
             
        Case Is = "PAUSENZ"
            cSQL = "Create Table PAUSENZ "
            cSQL = cSQL & "("
            cSQL = cSQL & " PAUSENZ Datetime "
            cSQL = cSQL & ", KRIT Datetime "
            cSQL = cSQL & ", llfnr Int IDENTITY "
            cSQL = cSQL & " ) "
             
    
        Case Is = "LOGY"
            cSQL = "Create Table LOGY "
            cSQL = cSQL & "("
            cSQL = cSQL & " Datname varchar(15) "
            cSQL = cSQL & ", Datum Datetime "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & " ) "
             
            
        Case Is = "LOGWK"
            cSQL = "Create table LOGWK ("
            cSQL = cSQL & " frmName varchar(20) "
            cSQL = cSQL & " , Datum Datetime "
            cSQL = cSQL & " , Uhrzeit Datetime "
            cSQL = cSQL & " , Firma varchar(35) "
            cSQL = cSQL & " , Filiale tinyint "
            cSQL = cSQL & " ) "
             
            
        Case Is = "ZBESTAND"
            cSQL = "Create Table ZBESTAND "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", FILIALNR tinyint "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", MINBEST int "
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", RABATT_OK varchar(1) "
            cSQL = cSQL & ", BONUS_OK varchar(1) "
            cSQL = cSQL & ", LASTDATE Datetime "
            cSQL = cSQL & ", LASTTIME varchar(8)"
            cSQL = cSQL & " ) "
             
    
        Case Is = "ANGEBOTNOW"
            cSQL = "Create Table ANGEBOTNOW "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", Bestand int "
            cSQL = cSQL & ", Anzahl int "
            cSQL = cSQL & ", kundnr int "
            cSQL = cSQL & ", adressnr int "
            cSQL = cSQL & ", KTnr int "
            cSQL = cSQL & ", KTnr1 int "
            cSQL = cSQL & ", Posinr int "
            cSQL = cSQL & ", artrab real "
            cSQL = cSQL & ", Status varchar(3) "
            cSQL = cSQL & ", BEDnr int "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", lfnr int "
            cSQL = cSQL & ", datname varchar(35) "
            cSQL = cSQL & ", datart varchar(15) "
            cSQL = cSQL & ", lastbeaDate Datetime "
            cSQL = cSQL & ", ausgebucht varchar(1)"
            cSQL = cSQL & ", mopreis real "
            cSQL = cSQL & " ) "
             
                
                
                
        Case Is = "DAGKOPF"
            cSQL = "Create Table DAGKOPF "
            cSQL = cSQL & "("
            cSQL = cSQL & " kundnr int "
            cSQL = cSQL & ", PrintFiTiAnVoNa varchar(200) "
            cSQL = cSQL & ", Name varchar(35) "
            cSQL = cSQL & ", Titel varchar(35) "
            cSQL = cSQL & ", stadt varchar(35) "
            cSQL = cSQL & ", Plz varchar(7) "
            cSQL = cSQL & ", Vorname varchar(35) "
            cSQL = cSQL & ", Firma varchar(35) "
            cSQL = cSQL & ", strasse varchar(35) "
            cSQL = cSQL & ", anrede varchar(35) "
            cSQL = cSQL & ", Ztext ntext "
            cSQL = cSQL & ", Ztext1 ntext "
            cSQL = cSQL & ", datname varchar(35) "
            cSQL = cSQL & ", BEDname varchar(35) "
            cSQL = cSQL & ", USTV float "
            cSQL = cSQL & ", USTE float "
            cSQL = cSQL & " ) "
             
        Case Is = "AGNTEK"
            cSQL = "Create Table AGNTEK "
            cSQL = cSQL & "("
            cSQL = cSQL & " von varchar(10) "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", LINR varchar(6) "
            cSQL = cSQL & ", AGN varchar(6) "
            cSQL = cSQL & " ) "
             
        Case Is = "AGNTE"
            cSQL = "Create Table AGNTE "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", agtext varchar(35) "
            cSQL = cSQL & ") "
            
        Case Is = "PGNTEK"
            cSQL = "Create Table PGNTEK "
            cSQL = cSQL & "("
            cSQL = cSQL & " von varchar(10) "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", LINR varchar(6) "
            cSQL = cSQL & ", PGN varchar(6) "
            cSQL = cSQL & " ) "
             
        Case Is = "PGNTE"
            cSQL = "Create Table PGNTE "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", PGN int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", Pgnbezeich varchar(35) "
            cSQL = cSQL & ") "
        
        Case Is = "LPZTEK"
            cSQL = "Create Table LPZTEK "
            cSQL = cSQL & "("
            cSQL = cSQL & " von varchar(10) "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", LINR varchar(6) "
            cSQL = cSQL & ", LPZ varchar(20) "
            cSQL = cSQL & " ) "
             
        Case Is = "LPZTE"
            cSQL = "Create Table LPZTE "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", LINbezeich varchar(35) "
            cSQL = cSQL & ") "
             
        Case Is = "MARKETEK"
            cSQL = "Create Table MARKETEK "
            cSQL = cSQL & "("
            cSQL = cSQL & " von varchar(10) "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", LINR varchar(6) "
            cSQL = cSQL & ", Marke varchar(20) "
            cSQL = cSQL & ", FILIALE varchar(35) "
            cSQL = cSQL & ", gesU real "
            cSQL = cSQL & ", gesM real "
            cSQL = cSQL & ", gesE real"
            cSQL = cSQL & " ) "
            
        Case Is = "MARKETE"
            cSQL = "Create Table MARKETE "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINBEZEICH varchar(35) "
            cSQL = cSQL & ", Marke varchar(20) "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", NETTOV real "
            cSQL = cSQL & ", NETTOE real "
            cSQL = cSQL & ", NETTOO real "
            cSQL = cSQL & ", ERTRAG real "
            cSQL = cSQL & ", UMSEK real "
            cSQL = cSQL & ", REDU real "
            cSQL = cSQL & ", ERZNETTOSP real "
            cSQL = cSQL & ") "
             
        Case Is = "SGHEAD"
            cSQL = "Create Table SGHEAD "
            cSQL = cSQL & "( vondate DATETIME"
            cSQL = cSQL & ", bisdate DATETIME "
            cSQL = cSQL & ", GUMSAKT real "
            cSQL = cSQL & ", GUMSAKT_NETTO real "
            cSQL = cSQL & ", GUMSAKT_V real "
            cSQL = cSQL & ", GUMSAKT_E real "
            cSQL = cSQL & ", GUMSAKT_O real "
            cSQL = cSQL & ", GMENGAKT real "
            cSQL = cSQL & ", GEKPRAKT real "
            cSQL = cSQL & ") "
            
        Case Is = "SGHEAD1"
            cSQL = "Create Table SGHEAD1 "
            cSQL = cSQL & "( vondatevj DATETIME"
            cSQL = cSQL & ", bisdatevj DATETIME "
            
            
            cSQL = cSQL & ", GUMSvj_V real "
            cSQL = cSQL & ", GUMSvj_E real "
            cSQL = cSQL & ", GUMSvj_O real "
            
            
            cSQL = cSQL & ", GUMSvj real "
            cSQL = cSQL & ", GUMSvj_Netto real "
            
            cSQL = cSQL & ", GMENGvj real "
            cSQL = cSQL & ", GEKPRvj real "
            cSQL = cSQL & ", KUNDENakt int "
            cSQL = cSQL & ", KUNDENvj int "
            cSQL = cSQL & ", LUGAVG real "
            cSQL = cSQL & ", ZUNAME varchar(100) "
            cSQL = cSQL & ") "
            
        Case Is = "ALLLUG"
            cSQL = "Create Table ALLLUG "
            cSQL = cSQL & "( artnr int"
            cSQL = cSQL & ", LAWVKNETTO real "
            cSQL = cSQL & ", LAW real "
            cSQL = cSQL & ", Bestand int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ") "
            
        Case Is = "SORTMET"
            cSQL = "Create Table SORTMET "
            cSQL = cSQL & "( WGN int"
            cSQL = cSQL & ", WGNTEXT varchar(35) "
            cSQL = cSQL & ", EKPRakt real "
            cSQL = cSQL & ", NUMSakt real "
            cSQL = cSQL & ", UMSakt real "
            cSQL = cSQL & ", MENGakt real "
            cSQL = cSQL & ", NSP real "
            cSQL = cSQL & ", NSE real "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ", LAGERW real "
            
            cSQL = cSQL & ", nettoUmsVakt real "
            cSQL = cSQL & ", nettoUmsEakt real "
            cSQL = cSQL & ", nettoUmsOakt real "
            
            cSQL = cSQL & ") "
            
        Case Is = "SORTME"
            cSQL = "Create Table SORTME "
            cSQL = cSQL & "( WGN int"
            cSQL = cSQL & ", WGNTEXT varchar(35) "
            cSQL = cSQL & ", EKPRakt real "
            cSQL = cSQL & ", NUMSakt real "
            cSQL = cSQL & ", UMSakt real "
            cSQL = cSQL & ", MENGakt real "
            cSQL = cSQL & ", EKPRvj real "
            cSQL = cSQL & ", UMSvj real "
            cSQL = cSQL & ", NUMSvj real "
            cSQL = cSQL & ", MENGvj real "
            cSQL = cSQL & ", NSP real "
            cSQL = cSQL & ", NSE real "
            cSQL = cSQL & ", NSPvj real "
            cSQL = cSQL & ", NSEvj real "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ", LAGERW real "
            
            cSQL = cSQL & ", nettoUmsVakt real "
            cSQL = cSQL & ", nettoUmsEakt real "
            cSQL = cSQL & ", nettoUmsOakt real "
            
            cSQL = cSQL & ", nettoUmsV real "
            cSQL = cSQL & ", nettoUmsE real "
            cSQL = cSQL & ", nettoUmsO real "
            
            cSQL = cSQL & ") "
             
        Case Is = "GODE"
            cSQL = "Create Table GODE "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LagerVK real "
            cSQL = cSQL & ", LagerEK real "
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ") "
             
        
        Case Is = "LIEFEWZ"
            cSQL = "Create Table LIEFEWZ "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", gZRVK real"
            cSQL = cSQL & ", gZREK real"
            cSQL = cSQL & ") "
             
        Case Is = "LIEFEWP"
            cSQL = "Create Table LIEFEWP "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", UMSATZ real"
            cSQL = cSQL & ", adate DATETIME "
            
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", gVJZRVK real"
            cSQL = cSQL & ", gVRZREK real"
            
            cSQL = cSQL & ") "
             
        Case Is = "LIEFEW"
            cSQL = "Create Table LIEFEW "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", UMSATZ real"
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", von DATETIME"
            cSQL = cSQL & ", bis DATETIME"
            cSQL = cSQL & ", vrvon DATETIME"
            cSQL = cSQL & ", vrbis DATETIME"
            cSQL = cSQL & ") "
             
        Case Is = "LIEFLW"
            cSQL = "Create Table LIEFLW "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", LagerVK real"
            cSQL = cSQL & ", LagerEK real"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ") "
             
             
        Case Is = "LIEFPLUS"
            cSQL = "Create Table LIEFPLUS "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", ANZAHLvj int"
            cSQL = cSQL & ", UMSATZ real"
            cSQL = cSQL & ", UmsatzVKVJ real"
            cSQL = cSQL & ", DIFFUMSEUR real"
            cSQL = cSQL & ", DIFFUMSPROZ real"
            cSQL = cSQL & ", EINKPREIS real"
            cSQL = cSQL & ", UmsatzEKVJ real"
            cSQL = cSQL & ", DIFFUMSEUREK real"
            cSQL = cSQL & ", DIFFUMSPROZEK real"
            cSQL = cSQL & ", ERTRAGakt real"
            cSQL = cSQL & ", ERTRAGvj real"
            cSQL = cSQL & ", NSPakt real"
            cSQL = cSQL & ", NSPvj real"
            cSQL = cSQL & ", MINDAT varchar(10)"
            cSQL = cSQL & ", MAXDAT varchar(10)"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", FAUSWAHL varchar(35)"
            
            cSQL = cSQL & ", LAGERWSEK float "
            cSQL = cSQL & ", LAGERST int "
            cSQL = cSQL & ", PENNERWSEK float "
            cSQL = cSQL & ", PENNERST int "
            cSQL = cSQL & ", PENANTEILST float "
            cSQL = cSQL & ", PENANTEILSEK float"
            
            cSQL = cSQL & ", UMSATZNETTOakt real"
            cSQL = cSQL & ", UMSATZNETTOvj real"
            cSQL = cSQL & ") "


             
        
        Case Is = "LIEFSTAT"
            cSQL = "Create Table LIEFSTAT "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", UMSATZ real"
            cSQL = cSQL & ", EINKPREIS real"
            cSQL = cSQL & ", ERTRAG real"
            cSQL = cSQL & ", MINDAT varchar(10)"
            cSQL = cSQL & ", MAXDAT varchar(10)"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            
            cSQL = cSQL & ") "
             
        
        Case Is = "UMS_ARTF"
            cSQL = "Create Table UMS_ARTF "
            cSQL = cSQL & "( FILIALNR tinyint"
            cSQL = cSQL & ", JAHR smallint"
            cSQL = cSQL & ", MONAT tinyint"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", UMSATZ real"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ") "
             
        
        Case Is = "KOPF271"
            cSQL = "Create Table KOPF271 ( "
            cSQL = cSQL & " MOPREIS varchar(10) ) "
        
        Case Is = "KOPF277"
            cSQL = "Create Table KOPF277 ( "
            cSQL = cSQL & " von varchar(10) "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", wKassen varchar(255) "
            cSQL = cSQL & ", PGNWahl ntext "
            cSQL = cSQL & ", Bednu int"
            cSQL = cSQL & ", Bedname varchar(32)"
            cSQL = cSQL & " ) "
             
            
        Case Is = "DIFFLIST"
            cSQL = "Create Table DIFFLIST ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", Bestsoll int "
            cSQL = cSQL & ", Bestist int "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", LEKPR real  "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", EKPR real  "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", Datname varchar(5)"
            cSQL = cSQL & " )"
             
             
        
            
        Case Is = "RKZART"
            cSQL = "Create Table RKZART ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LAGERP float "
            cSQL = cSQL & ", LINBEZ varchar(35) "
            cSQL = cSQL & ", MARKE varchar(35) "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", LEKPR real  "
            cSQL = cSQL & " )"
             
        Case Is = "REDART"
            cSQL = "Create Table REDART ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEK real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & " )"
             
        Case Is = "FARBMERK"
            cSQL = "Create Table FARBMERK ( "
            cSQL = cSQL & " FARBNR int "
            cSQL = cSQL & ", FARBTEXT varchar(35) "
            cSQL = cSQL & " )"
            
        Case Is = "FARBKU"
            cSQL = "Create Table FARBKU ( "
            cSQL = cSQL & " FARBNR int "
            cSQL = cSQL & ", FARBTEXT varchar(35) "
            cSQL = cSQL & " )"
        Case Is = "BANKKU"
            cSQL = "Create Table BANKKU ( "
            cSQL = cSQL & " KUNDNR int "
            cSQL = cSQL & ", BLZ varchar(8) "
            cSQL = cSQL & ", KTNR varchar(10) "
            cSQL = cSQL & " )"
             
        Case Is = "NEGART"
            cSQL = "Create Table NEGART ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & " )"
            
        Case Is = "NEGART"
            cSQL = "Create Table NEGART ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & " )"
             
        Case Is = "VKPRO"
            cSQL = "Create Table VKPRO ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", Preis real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", EKPR real  "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", UMS_OK varchar(1) "
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", Best1 int "
            cSQL = cSQL & ", Rabkenn varchar(1) )"
             
             
'        Case Is = "BESTPDRU"
'            cSQL = "Create Table BESTPDRU ( "
'            cSQL = cSQL & " ARTNR int "
'            cSQL = cSQL & ", BEZEICH varchar(35) "
'            cSQL = cSQL & ", UMENGE smallint "
'            cSQL = cSQL & ", NEWBEST int "
'            cSQL = cSQL & ", OLDBEST int "
'            cSQL = cSQL & ", Bediener int "
'            cSQL = cSQL & ", SYNSTATUS varchar(1) "
'            cSQL = cSQL & ", AENART varchar(20) "
'            cSQL = cSQL & ", AENGRUND varchar(20) "
'            cSQL = cSQL & ", Filiale tinyint "
'            cSQL = cSQL & ", LASTDATE DATETIME "
'            cSQL = cSQL & ", LASTTIME varchar(10) "
'            cSQL = cSQL & ", SENDOK BIT "
'            cSQL = cSQL & ", BEDNAME varchar(35) "
'
'            cSQL = cSQL & ", FARBTEXT varchar(35)"
'            cSQL = cSQL & ", FARBwert int "
'            cSQL = cSQL & ", FARBwertS int "
'            cSQL = cSQL & ", FARBNR smallint "
'            cSQL = cSQL & ", EKPR real "
'
'            cSQL = cSQL & ", LINR int "
'            cSQL = cSQL & ", LPZ smallint"
'            cSQL = cSQL & ", MARKE varchar(20)"
'            cSQL = cSQL & ", LINBEZ varchar(35)"
'            cSQL = cSQL & " )"
             
        Case Is = "ALITE"
            cSQL = "Create Table ALITE ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", EAN2 varchar(13) "
            
            cSQL = cSQL & ", EAN3 varchar(13) "
            cSQL = cSQL & ", ETIMERK varchar(1) "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", NOTIZEN varchar(25) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", VKMENGE int "
            cSQL = cSQL & ", VKDATUM datetime "
            
            cSQL = cSQL & ", MINMEN int "
            cSQL = cSQL & ", INHALT int "
            cSQL = cSQL & ", INHALTBEZ varchar(3) "
            cSQL = cSQL & ", GRUNDPREIS varchar(1) "
            cSQL = cSQL & ", MINBEST int "
            cSQL = cSQL & ", RABATT_OK varchar(1) "
            cSQL = cSQL & ", GEFUEHRT varchar(1) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", EKPR real "
            
            cSQL = cSQL & ", PREISSCHU varchar(1) "
            cSQL = cSQL & ", BONUS_OK varchar(1) "
            cSQL = cSQL & ", UMS_OK varchar(1) "
            cSQL = cSQL & ", AWM varchar(2) "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT  DATETIME "
            cSQL = cSQL & ", FARBNR int "
            
            cSQL = cSQL & ", MARKE varchar(35) "
            cSQL = cSQL & ", GROESSE varchar(10) "
            cSQL = cSQL & ", SPANNE real "
            cSQL = cSQL & ", AUFSCHLAG real "
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", VKMLF int "
            cSQL = cSQL & ", VKMVM int "
            cSQL = cSQL & ", VKWLF real "
            cSQL = cSQL & ", VKWVM real "
            
            cSQL = cSQL & ", VKMZR int "
            cSQL = cSQL & ", VKWZR real "
            cSQL = cSQL & ", LEKPR2 real"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & " )"
             
        Case Is = "DRULI46"
        
            cSQL = "Create Table DRULI46 ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", EAN varchar(8)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", BARCODE varchar(11)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", BESTAND smallint "
            cSQL = cSQL & ", adate Datetime "
            cSQL = cSQL & ", Datname varchar(5)"
            cSQL = cSQL & ", lfnr Int IDENTITY ) "
             

        Case Is = "VK271"
            cSQL = "Create Table VK271 ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & " ) "
            
        Case Is = "VK278"
            cSQL = "Create Table VK278 ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", KK_ARTDE varchar(2)"
            cSQL = cSQL & ", GELDWERT float "
            cSQL = cSQL & " ) "
            
        Case Is = "VK277"
            cSQL = "Create Table VK277 ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", sumMENGE smallint "
            cSQL = cSQL & ", sumPreis real "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", PGN smallint "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", Liefbez varchar(50) "
            cSQL = cSQL & ", LUG real "
            
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & " ) "
             
        Case Is = "VK272"
            cSQL = "Create Table VK272 ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", KUNAME varchar(35) "
            cSQL = cSQL & ", KUVNAME varchar(35) "
            cSQL = cSQL & " ) "
             
        Case Is = "FLIST"
            cSQL = "Create Table FLIST "
            cSQL = cSQL & " ( Datname varchar(12) "
            cSQL = cSQL & " , adate datetime "
            cSQL = cSQL & " , azeit varchar(8) "
            cSQL = cSQL & " ) "
             
        Case Is = "MANUB"
            cSQL = "Create Table MANUB "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", ZUBEST int "
            cSQL = cSQL & ", MINBEST tinyint "
            cSQL = cSQL & ", GEFUEHRT varchar(1) "
            cSQL = cSQL & ", RABATT_OK varchar(1) "
            cSQL = cSQL & ", PREISSCHU varchar(1) "
            cSQL = cSQL & ", NOTIZEN varchar(25) "
            cSQL = cSQL & ", AGN smallint "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", MINMEN smallint "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", MNOTIZEN varchar(25) "
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", ETIMERK varchar(1) "
            cSQL = cSQL & ", SPANNE real "
            cSQL = cSQL & ", INBEST int "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & " ) "
             
        
        Case Is = "FWVLFNR"
            cSQL = "Create Table FWVLFNR "
            cSQL = cSQL & "( "
            cSQL = cSQL & " lfnr int "
            cSQL = cSQL & ", Datum DateTime "
            cSQL = cSQL & ", Zeit varchar(10) "
            cSQL = cSQL & ", Filiale int "
            cSQL = cSQL & ") "
             
        Case Is = "ANFILM"
            cSQL = "Create table ANFILM "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR float"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", lfnr Int IDENTITY "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & " ) "
             
        
            
        Case Is = "KORREKB"
            cSQL = "Create table KORREKB "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR int"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", BESTANDN int"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", Status varchar(30)"
            cSQL = cSQL & ", lfnr Int IDENTITY  "
            cSQL = cSQL & " ) "
             
        Case Is = "Umvteil"
            cSQL = "Create table Umvteil "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR int"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", Status varchar(30)"
            cSQL = cSQL & ", lfnr Int IDENTITY  "
            cSQL = cSQL & " ) "
             
            
        Case Is = "UMVENX"
            cSQL = "Create table UMVENX "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " IND tinyint "
            cSQL = cSQL & " ) "
            
        Case Is = "BEKENX"
            cSQL = "Create table BEKENX "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " IND tinyint "
            cSQL = cSQL & " ,IND2 tinyint "
            cSQL = cSQL & " ) "
        Case Is = "E112X"
            cSQL = "Create table E112X "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " IND tinyint "
            cSQL = cSQL & " ) "
        Case Is = "E100X"
            cSQL = "Create table E100X "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " IND tinyint "
            cSQL = cSQL & " ) "
        Case Is = "BEDTERM"
            cSQL = "Create table BEDTERM "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " BEDNAME varchar(32) "
            cSQL = cSQL & ", BEDNU float "
            cSQL = cSQL & ", FARBCODE float "
            cSQL = cSQL & ", FARBE varchar(20) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & " ) "
        
        Case Is = "BEDZUGRI"
            cSQL = "Create table BEDZUGRI "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ProTeil varchar(100) "
            cSQL = cSQL & ", Zugriff tinyint "
            cSQL = cSQL & ", ZugriffNr tinyint "
            cSQL = cSQL & ", Identi smallint "
            cSQL = cSQL & " ) "
             
        Case Is = "BONPAUSE"
            cSQL = "Create table BONPAUSE "
            cSQL = cSQL & "("
            cSQL = cSQL & " LFDNR float "
            cSQL = cSQL & ", BEDNR varchar(3) "
            cSQL = cSQL & ", ZSUM varchar(9) "
            cSQL = cSQL & ", GRABATT varchar(5) "
            cSQL = cSQL & ", KDNAME varchar(35) "
            cSQL = cSQL & ", KDNR varchar(10) "
            cSQL = cSQL & ", LBZEILE float "
            cSQL = cSQL & ", LBTEXT varchar(200) "
            cSQL = cSQL & ", Art varchar(10) "
            cSQL = cSQL & ", ADATE Datetime"
            cSQL = cSQL & ", AZeit varchar(8) "
            cSQL = cSQL & ")"
            
        Case Is = "ARTAUSWAHL"
            cSQL = "Create table ARTAUSWAHL "
            cSQL = cSQL & "("
            cSQL = cSQL & " LFDNR float "
            cSQL = cSQL & ", BEDNR varchar(3) "
            cSQL = cSQL & ", ZSUM varchar(9) "
            cSQL = cSQL & ", GRABATT varchar(5) "
            cSQL = cSQL & ", KDNAME varchar(35) "
            cSQL = cSQL & ", KDNR varchar(10) "
            cSQL = cSQL & ", LBZEILE float "
            cSQL = cSQL & ", LBTEXT varchar(200) "
            cSQL = cSQL & ", Art varchar(10) "
            cSQL = cSQL & ", ADATE Datetime"
            cSQL = cSQL & ")"
        Case Is = "BONSTORNO"
            cSQL = "Create table BONSTORNO "
            cSQL = cSQL & "("
            cSQL = cSQL & " LFDNR float "
            cSQL = cSQL & ", BEDNR varchar(3) "
            cSQL = cSQL & ", ZSUM varchar(9) "
            cSQL = cSQL & ", GRABATT varchar(5) "
            cSQL = cSQL & ", KDNAME varchar(35) "
            cSQL = cSQL & ", KDNR varchar(10) "
            cSQL = cSQL & ", LBZEILE float "
            cSQL = cSQL & ", LBTEXT varchar(200) "
            cSQL = cSQL & ")"
             
        Case Is = "ScanPCom"
            cSQL = "Create table ScanPCom "
            cSQL = cSQL & "("
            cSQL = cSQL & " com tinyint "
            cSQL = cSQL & ")"
             
        
        Case Is = "DABAUSER"
            cSQL = "Create table DABAUSER "
            cSQL = cSQL & "("
            cSQL = cSQL & " PCNAME varchar(35) "
            cSQL = cSQL & ", AKTION varchar(20) "
            cSQL = cSQL & ", STATUS BIT "
            cSQL = cSQL & ")"
             
        
        Case Is = "USERSAFE"
            cSQL = "Create table USERSAFE "
            cSQL = cSQL & "("
            cSQL = cSQL & " PCNAME varchar(50) "
            cSQL = cSQL & ", DABASTATUS varchar(20) "
            cSQL = cSQL & ", BEDNR smallint"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", Datum Datetime"
            cSQL = cSQL & ", Zeit Datetime"
            cSQL = cSQL & ")"
             
            
        Case Is = "STEMPEL"
            cSQL = "Create Table Stempel ( "
            cSQL = cSQL & "  llfnr Int IDENTITY"
            cSQL = cSQL & ", Bednu int"
            cSQL = cSQL & ", Bedname varchar(32)"
            cSQL = cSQL & ", Datum Datetime"
            cSQL = cSQL & ", Zeit Datetime"
            cSQL = cSQL & ", Art varchar(10)"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & " ) "
             
        Case Is = "KALKHEAD"
            cSQL = "Create Table KALKHEAD ( "
            cSQL = cSQL & " NettoSProz varchar(10)"
            cSQL = cSQL & ", AufschlagProz varchar(10)"
            cSQL = cSQL & ", AufschlagEuro varchar(10)"
            cSQL = cSQL & ", ErsetzungEuro varchar(10)"
            cSQL = cSQL & ", Kalkkrit varchar(35)"
            cSQL = cSQL & ", Rundkrit varchar(20)"
            cSQL = cSQL & ", abru varchar(20)"
            cSQL = cSQL & ", aufru varchar(20)"
            cSQL = cSQL & " ) "
             
        Case Is = "FFE"
            cSQL = "Create Table FFE ( "
            cSQL = cSQL & " ARTNRV float"
            cSQL = cSQL & ", ARTNRB float"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", AGNHOFF int "
            cSQL = cSQL & ", AGNVEDE int "
            cSQL = cSQL & ", RAB BIT"
            cSQL = cSQL & ", REWE BIT"
            cSQL = cSQL & ", LUENING BIT"
            cSQL = cSQL & ", EANNULLEN BIT"
            cSQL = cSQL & ", KEINDEL BIT"
            cSQL = cSQL & ", VERGLEICH int"
            cSQL = cSQL & ", Hoffdoppel BIT"
            cSQL = cSQL & ", Vededoppel BIT"
            cSQL = cSQL & ", Hoffhof BIT"
            cSQL = cSQL & ", AGNZEITUNGe int "
            cSQL = cSQL & ", AGNZEITUNGv int "
            cSQL = cSQL & ", agnTUBZigaretten int "
            cSQL = cSQL & ", agnTUBZigarren int "
            cSQL = cSQL & ", agnTUBTabak int "
            cSQL = cSQL & ", agnTUBPfeifentabak int "
            cSQL = cSQL & ", agnTUBFeinschnitt int "
            cSQL = cSQL & ", agnTUBRBA int "
            cSQL = cSQL & ", AGNGERRY int "
            cSQL = cSQL & ", AGNLUE int "
        
            cSQL = cSQL & " ) "
             
        Case Is = "BTELISRT"
            cSQL = "Create Table BTELISRT ( "
            cSQL = cSQL & " LINR float"
            cSQL = cSQL & ", BTELINR float"
            cSQL = cSQL & " ) "
             
        Case Is = "TCHIBOIN"
            cSQL = "Create Table TCHIBOIN ( "
           
            cSQL = cSQL & " A varchar(1)"
            cSQL = cSQL & ", B varchar(10)"
            cSQL = cSQL & ", C varchar(10)"
            cSQL = cSQL & ", D varchar(10)"
            cSQL = cSQL & ", E varchar(10)"
            cSQL = cSQL & ", F varchar(13)"
            cSQL = cSQL & ", G varchar(20)"
            cSQL = cSQL & ", H varchar(255)"
            cSQL = cSQL & ", I varchar(255)"
            cSQL = cSQL & ", J varchar(1)"
            cSQL = cSQL & ", K varchar(10)"
            cSQL = cSQL & ", L varchar(5)"
            cSQL = cSQL & ", M float )"
            
             
        Case Is = "IMPORTPRI"
            cSQL = "Create Table IMPORTPRI ( "
           
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKMENGE float"
            cSQL = cSQL & ", VKDATUM DateTime"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", MINBEST float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LASTDATE DateTime"
            cSQL = cSQL & ", LASTTIME varchar(10)"
            cSQL = cSQL & ", AUFDAT DateTime"
            cSQL = cSQL & ", EXDAT DateTime"
            cSQL = cSQL & ", FARBNR varchar(20)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", AUFSCHLAG float"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & ", MNOTIZEN varchar(40)"
            cSQL = cSQL & ", KVKALT float"
            cSQL = cSQL & ", KVKNEU float"
            cSQL = cSQL & ", LFNR int"
            cSQL = cSQL & " ) "
             
            
        Case Is = "ARTTOINV"
            cSQL = "Create Table ARTTOINV ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", NOTIZEN varchar(25)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKMENGE float"
            cSQL = cSQL & ", VKDATUM DateTime"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", MINBEST float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LASTDATE DateTime"
            cSQL = cSQL & ", LASTTIME varchar(10)"
            cSQL = cSQL & ", AUFDAT DateTime"
            cSQL = cSQL & ", EXDAT DateTime"
            cSQL = cSQL & ", FARBNR varchar(20)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", AUFSCHLAG float"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & ", MNOTIZEN varchar(25)"
            cSQL = cSQL & ", KVKALT float"
            cSQL = cSQL & ", KVKNEU float"
            cSQL = cSQL & " ) "
             
        Case Is = "ARTTEI"
            cSQL = "Create Table ARTTEI ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", NOTIZEN varchar(25)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKMENGE float"
            cSQL = cSQL & ", VKDATUM DateTime"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", MINBEST float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LASTDATE DateTime"
            cSQL = cSQL & ", LASTTIME varchar(10)"
            cSQL = cSQL & ", AUFDAT DateTime"
            cSQL = cSQL & ", EXDAT DateTime"
            cSQL = cSQL & ", FARBNR varchar(20)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", AUFSCHLAG float"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & ", MNOTIZEN varchar(25)"
            cSQL = cSQL & ", KVKALT float"
            cSQL = cSQL & ", KVKNEU float"
            cSQL = cSQL & ", LFNR int"
            cSQL = cSQL & ", REGAL int"
            cSQL = cSQL & ", BED smallint"
            cSQL = cSQL & ", scancode varchar(13)"
            cSQL = cSQL & " ) "
            
        Case Is = "MEISTER"
            cSQL = "Create Table meister ( "
            cSQL = cSQL & " lfNr int"
            cSQL = cSQL & ", ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(71)"  ' 35
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ varchar(10)"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKMENGE float"
            cSQL = cSQL & ", VKDATUM DateTime"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", MINBEST float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LASTDATE DateTime"
            cSQL = cSQL & ", LASTTIME varchar(10)"
            cSQL = cSQL & ", AUFDAT varchar(8)"   'Datetime
            cSQL = cSQL & ", EXDAT varchar(8)"    'Datetime
            cSQL = cSQL & ", FARBNR varchar(20)"
            cSQL = cSQL & ", STATUS varchar(25)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", AUFSCHLAG float"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & " ) "
            
        
             
            
        Case Is = "DEVILIN"
            cSQL = "Create Table DEVILIN ( "
            
            cSQL = cSQL & " Libesnr varchar(20)"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Warengruppe varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", NP varchar(20)"
            cSQL = cSQL & ", Notizen varchar(25)"
            cSQL = cSQL & ", Status varchar(20)"
            cSQL = cSQL & ", LPZ int"
            
            cSQL = cSQL & " ) "
             
            
        Case Is = "WKVERSIONEN"
            cSQL = "Create Table WKVERSIONEN "
            cSQL = cSQL & "("
            cSQL = cSQL & " Firma varchar(35)"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", PCNAME varchar(35) "
            cSQL = cSQL & ", WKVERS smallint "
            cSQL = cSQL & ", Datum DateTime "
            cSQL = cSQL & " )"
             
        
        
            
        Case Is = "PricatE"
            cSQL = "Create Table PricatE "
            
            cSQL = cSQL & "("
            cSQL = cSQL & " PriPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
             
            
        Case Is = "TchiboE"
            cSQL = "Create Table TchiboE "
            
            cSQL = cSQL & "("
            cSQL = cSQL & " TchPfad varchar(200)"
            cSQL = cSQL & ", TchLINR int "
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
             
            
            
        Case Is = "NEUFORME"
        
            cSQL = "Create Table NeuformE "
            cSQL = cSQL & "("
            cSQL = cSQL & " NeuPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
            
        Case Is = "BOLLWEGE"
        
            cSQL = "Create Table BOLLWEGE "
            cSQL = cSQL & "("
            cSQL = cSQL & " BollPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
            
        Case Is = "HOFFMANNE"
        
            cSQL = "Create Table HOFFMANNE "
            cSQL = cSQL & "("
            cSQL = cSQL & " HOFFPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
            
        Case Is = "VEDESE"
        
            cSQL = "Create Table VEDESE "
            cSQL = cSQL & "("
            cSQL = cSQL & " VEDEPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
        Case Is = "NURDIEE"
        
            cSQL = "Create Table NURDIEE "
            cSQL = cSQL & "("
            cSQL = cSQL & " NURPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
            
        Case Is = "FRISEURE"
        
            cSQL = "Create Table FRISEURE "
            cSQL = cSQL & "("
            cSQL = cSQL & " FRISEURPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & ", transf11 bit"
            cSQL = cSQL & " )"
            
        Case Is = "SIEE"
        
            cSQL = "Create Table SIEE "
            cSQL = cSQL & "("
            cSQL = cSQL & " SIEPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
            
        Case Is = "REWEE"
        
            cSQL = "Create Table REWEE "
            cSQL = cSQL & "("
            cSQL = cSQL & " REWEPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
            
        Case Is = "ZEITE"
        
            cSQL = "Create Table ZEITE "
            cSQL = cSQL & "("
            cSQL = cSQL & " ZEITPfad varchar(200)"
            cSQL = cSQL & ", ZeitLINR int "
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
        Case Is = "TUBE"
        
            cSQL = "Create Table TUBE "
            cSQL = cSQL & "("
            cSQL = cSQL & " TUBEPfad varchar(200)"
            cSQL = cSQL & ", TUBELINR int "
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
        Case Is = "DEVILE"
        
            cSQL = "Create Table DEVILE "
            cSQL = cSQL & "("
            cSQL = cSQL & " DevPfad varchar(200)"
            cSQL = cSQL & ", DEVLINR int "
            cSQL = cSQL & ", DEVFAK real "
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
             
        Case Is = "EAJ"
            cSQL = "Create Table EAJ "
            
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", Pfad varchar(255)"
            cSQL = cSQL & ", Fil tinyint "
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & " )"
            
        Case Is = "EKASS"
            cSQL = "Create Table EKASS "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & " )"
            
        Case Is = "E101"
            cSQL = "Create Table E101 "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO7 bit"
            cSQL = cSQL & " )"
            
        Case Is = "E10A"
            cSQL = "Create Table E10A "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO10 smallint"
            cSQL = cSQL & " )"
            
        Case Is = "E10"
            cSQL = "Create Table E10 "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & ", BO5 bit"
            cSQL = cSQL & ", BO6 bit"
            cSQL = cSQL & ", BO7 bit"
            cSQL = cSQL & ", BO8 bit"
            cSQL = cSQL & ", BO9 bit"
            cSQL = cSQL & ", BO10 bit"
            cSQL = cSQL & ", BO11 bit"
            cSQL = cSQL & " )"
            
        Case Is = "E44"
            cSQL = "Create Table E44 "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & ", BO5 bit"
            cSQL = cSQL & ", BO6 bit"
            cSQL = cSQL & ", BO7 bit"
            cSQL = cSQL & ", BO8 bit"
            cSQL = cSQL & ", BO9 bit"
            cSQL = cSQL & " )"
            
        Case Is = "KREDVE"
            cSQL = "Create Table KREDVE "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & ", BO5 bit"
            cSQL = cSQL & ", BO6 bit"
            cSQL = cSQL & ", ZAHLZIEL smallint"
            cSQL = cSQL & ", BEZSATZ smallint"
            cSQL = cSQL & ", ZAHLZIELVOR varchar(250)"
            cSQL = cSQL & ", ZAHLZIELNACH varchar(250)"
            cSQL = cSQL & ", INHABER varchar(100)"
            cSQL = cSQL & ", SpezialSatz varchar(250)"
            cSQL = cSQL & " )"
        
            
        Case Is = "E20D"
            cSQL = "Create Table E20D "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & " )"
            
        
            
        Case Is = "E20C"
            cSQL = "Create Table E20C "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & " )"
        
        Case Is = "E20B"
            cSQL = "Create Table E20B "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & " )"
            
        Case Is = "E43B"
            cSQL = "Create Table E43B "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & ", BO5 bit"
            cSQL = cSQL & ", BO6 bit"
            cSQL = cSQL & ", BO7 bit"
            cSQL = cSQL & ", BO8 bit"
            cSQL = cSQL & ", BO9 bit"
            cSQL = cSQL & ", LVON smallint"
            cSQL = cSQL & ", MERKEF varchar(10)"
            cSQL = cSQL & ", BO10 bit"
            cSQL = cSQL & ", BO11 bit"
            cSQL = cSQL & ", BO12 bit"
            cSQL = cSQL & ", BO13 bit"
            cSQL = cSQL & ", BO14 bit"
            cSQL = cSQL & ", BO15 bit"
            cSQL = cSQL & ", FARBE1 varchar(2)"
            cSQL = cSQL & ", FARBE2 varchar(2)"
            cSQL = cSQL & ", FARBE3 varchar(2)"
            cSQL = cSQL & " )"
            
        Case Is = "E47B"
            cSQL = "Create Table E47B "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & " )"
             
        Case Is = "E46LI"
            cSQL = "Create Table E46LI "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & " )"
             
        Case Is = "E46"
            cSQL = "Create Table E46 "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & ", BO5 bit"
            cSQL = cSQL & ", BO6 bit"
            cSQL = cSQL & ", BO7 bit"
            cSQL = cSQL & ", BO8 bit"
            cSQL = cSQL & ", BO9 bit"
            cSQL = cSQL & ", BO10 bit"
            cSQL = cSQL & ", BO11 bit"
            cSQL = cSQL & ", BO12 bit"
            cSQL = cSQL & ", BO13 bit"
            cSQL = cSQL & ", BO14 bit"
            cSQL = cSQL & ", BO15 bit"
            cSQL = cSQL & ", BO16 bit"
            cSQL = cSQL & ", BO17 bit"
            cSQL = cSQL & ", BO18 bit"
            cSQL = cSQL & ", BO19 bit"
            cSQL = cSQL & ", BO20 bit"
            cSQL = cSQL & " )"
             
            
        Case Is = "STAMDAE"
            cSQL = "Create Table STAMDAE "
            
            cSQL = cSQL & "("
            cSQL = cSQL & " transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & ", transf9 bit"
            cSQL = cSQL & " )"
             
        Case Is = "E11C"
            cSQL = "Create Table E11C "
            
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & ", BO5 bit"
            cSQL = cSQL & ", BO6 bit"
            cSQL = cSQL & ", BO7 bit"
            cSQL = cSQL & ", BO8 bit"
            cSQL = cSQL & ", BO9 bit"
            cSQL = cSQL & ", BO10 bit"
            
            cSQL = cSQL & ", LVKAUFSCHLAG varchar(10)"
            cSQL = cSQL & ", BO11 bit"
            cSQL = cSQL & " )"
            
        Case Is = "LASTSEND"
            cSQL = "Create Table LASTSEND (FILIALE int, DATUM DateTime, UHRZEIT varchar(8))"
             
            
        Case Is = "KOPFMAIL"
            cSQL = "Create Table KOPFMAIL "
            cSQL = cSQL & "("
            cSQL = cSQL & " STATUS varchar(15) "
            cSQL = cSQL & ", ABSENDER varchar(35) "
            cSQL = cSQL & ", ABSALIAS varchar(80) "
            cSQL = cSQL & ", BETREFF varchar(35) "
            cSQL = cSQL & ", ANHANG varchar(12) "
            cSQL = cSQL & ", HAUPTTEXT varchar(8) "
            cSQL = cSQL & ", ERHALT Datetime "
            cSQL = cSQL & ", CREATEDAY Datetime "
            cSQL = cSQL & " )"
            
        Case Is = "UEBERLI"
            cSQL = "Create Table UEBERLI "
            cSQL = cSQL & "("
            cSQL = cSQL & " OLINR int "
            cSQL = cSQL & ", OLIEFBEZ varchar(35) "
            cSQL = cSQL & ", OKUERZEL varchar(5) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & " )"
             
        Case Is = "ADTOPT"
            cSQL = "Create Table ADTOPT "
            cSQL = cSQL & "("
            cSQL = cSQL & " Verfahren varchar(5) "
            cSQL = cSQL & ", CLIENTID varchar(3) "
            cSQL = cSQL & ", ADTIOPFAD varchar(200) "
            cSQL = cSQL & ", BEZAHLART varchar(10) "
            cSQL = cSQL & ", TermID varchar(10) "
            cSQL = cSQL & ", LIMIT smallint "
            cSQL = cSQL & ", VISA BIT "
            cSQL = cSQL & ", EURO BIT "
            cSQL = cSQL & ", AMEX BIT "
            cSQL = cSQL & ", DINERS BIT "
            cSQL = cSQL & ", IPADRESS varchar(15) "
            cSQL = cSQL & ", PORT varchar(5) "
            cSQL = cSQL & " )"
             
        Case Is = "STADAPRO"
            cSQL = "Create Table STADAPRO "
            cSQL = cSQL & "("
            cSQL = cSQL & " Datum datetime "
            cSQL = cSQL & ", Quelldat varchar(35) "
            cSQL = cSQL & ", AKT    varchar(25) "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", VKPR_ALT real"
            cSQL = cSQL & ", VKPR_NEW real"
            cSQL = cSQL & ", KVK_ALT real"
            cSQL = cSQL & ", KVK_NEW real"
            cSQL = cSQL & ", LEK_ALT real"
            cSQL = cSQL & ", LEK_NEW real"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", AUTOKALK BIT"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ")"
             
        Case Is = "KDFBEST"
            cSQL = "Create Table KDFBEST"
            cSQL = cSQL & "( LIEFBEZ varchar(35)"
            cSQL = cSQL & ", ABSENDER varchar(35)"
            cSQL = cSQL & ", EK_WERT real"
            cSQL = cSQL & ", FIRMANAME varchar(50)"
            cSQL = cSQL & ", STRASSE varchar(50)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(50)"
            cSQL = cSQL & ", TEL varchar(30)"
            cSQL = cSQL & ", FAX varchar(30)"
            cSQL = cSQL & ", KTEXT varchar(50)"
            cSQL = cSQL & ", LIEF_FAX varchar(30)"
            cSQL = cSQL & ", KUNDNR varchar(30)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", MITTEILUNG varchar(253)"
            cSQL = cSQL & ", ANUMMER varchar(20)"
            cSQL = cSQL & ", FIRMAMAIL varchar(100)"
            cSQL = cSQL & ") "
             
        
             
        Case Is = "ETIDRU"
            cSQL = "Create Table ETIDRU "
            cSQL = cSQL & "( LFNR autoincrement "
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", PCNAME varchar(30)"
            cSQL = cSQL & ") "
             
        Case Is = "ARTERRIN"
            cSQL = "Create Table ARTERRIN "
            cSQL = cSQL & "( "
            cSQL = cSQL & " EAN varchar(13)"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", LFNR int"
            cSQL = cSQL & ", errart varchar(35)"
            cSQL = cSQL & ") "
            
        Case Is = "ETIPROT"
            cSQL = "Create Table ETIPROT "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", VKPRNEU float"
            cSQL = cSQL & ", VKPRALT float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", WEDate DATETIME"
            cSQL = cSQL & ", KD varchar(20)"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", LVK float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", LASTZU DATETIME"
            cSQL = cSQL & ") "
            
        Case Is = "ETIPROTS"
            cSQL = "Create Table ETIPROTS "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", VKPRNEU float"
            cSQL = cSQL & ", VKPRALT float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", WEDate DATETIME"
            cSQL = cSQL & ", KD varchar(20)"
            cSQL = cSQL & ") "
            
        Case Is = "ETIPROTP"
            cSQL = "Create Table ETIPROTP "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", VKPRNEU float"
            cSQL = cSQL & ", VKPRALT float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", WEDate DATETIME"
            cSQL = cSQL & ", KD varchar(20)"
            cSQL = cSQL & ") "
             
        Case Is = "MASTEMP"
            cSQL = "Create Table MASTEMP "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR money "
            cSQL = cSQL & ", VKPR money "
            cSQL = cSQL & ", LVKALT money "
            cSQL = cSQL & ", KVKPR1 money "
            cSQL = cSQL & ", KVKALT money "
            cSQL = cSQL & ", DIFFKVKWERT money "
            cSQL = cSQL & ", DIFFKVK money "
            
            cSQL = cSQL & ", DIFFVKWERT money "
            cSQL = cSQL & ", DIFFVK money "
            
            cSQL = cSQL & ", MINBEST float "
            cSQL = cSQL & ", GEFUEHRT varchar(1) "
            cSQL = cSQL & ", RABATT_OK varchar(1) "
            cSQL = cSQL & ", PREISSCHU varchar(1) "
            cSQL = cSQL & ", NOTIZEN varchar(25) "
            cSQL = cSQL & ", AGN smallint "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", MINMEN smallint "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", MNOTIZEN varchar(25) "
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", ETIMERK varchar(1) "
            cSQL = cSQL & ", SPANNE real "
            cSQL = cSQL & ", PGN tinyint "
            cSQL = cSQL & ", SHOP varchar(1)  "
            cSQL = cSQL & " ) "
            
        
            
        Case Is = "BBestand"
            cSQL = "Create Table BBestand "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTANDA float"
            cSQL = cSQL & ", BESTANDN int"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ") "
            
        
             
        Case Is = "AGNERR"
            cSQL = "Create Table AGNERR "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ") "
             
        Case Is = "SBEZEICH"
            cSQL = "Create Table SBEZEICH "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", ABEZEICH varchar(35)"
            cSQL = cSQL & ", NBEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ") "
             
        Case Is = "DDFBEST"
            cSQL = "Create Table DDFBEST "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", BESTVOR smallint"
            cSQL = cSQL & ", BLINR int "
            cSQL = cSQL & ", LINBEZ varchar(35)"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", GPEAN varchar(13)"
            cSQL = cSQL & ", FAKTOR int"
            cSQL = cSQL & ", VERSEH int"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR_PROBEN int"
            cSQL = cSQL & ", BESTVOR_TESTER int"
            cSQL = cSQL & ", BESTVOR_NR int"
            cSQL = cSQL & ") "
             
        Case Is = "LIEFLW1"
            cSQL = "Create Table LIEFLW1 "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", LagerVK real"
            cSQL = cSQL & ", LagerEK real"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ") "
             
        Case Is = "LIEFLW2"
            cSQL = "Create Table LIEFLW2 "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", LagerVK real"
            cSQL = cSQL & ", LagerEK real"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ") "
             
        Case Is = "LIEFLW3"
            cSQL = "Create Table LIEFLW3 "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", LagerVK real"
            cSQL = cSQL & ", LagerEK real"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ") "
             
        Case Is = "LIEFLW4"
            cSQL = "Create Table LIEFLW4 "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", LagerVK real"
            cSQL = cSQL & ", LagerEK real"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ") "
             
        Case Is = "LIEFLW5"
            cSQL = "Create Table LIEFLW5 "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", LagerVK real"
            cSQL = cSQL & ", LagerEK real"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ") "
             
        Case Is = "LIEFLW6"
            cSQL = "Create Table LIEFLW6 "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", LagerVK real"
            cSQL = cSQL & ", LagerEK real"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ") "
    End Select
    
    If gbSQLSERVER = False Then
        cSQL = SwapStr(cSQL, " varchar(", " text(")
        cSQL = SwapStr(cSQL, " int", " LONG")
        cSQL = SwapStr(cSQL, " float", " double")
        cSQL = SwapStr(cSQL, " real", " single")
        cSQL = SwapStr(cSQL, " tinyint", " byte")
        cSQL = SwapStr(cSQL, " ntext", " memo")
        cSQL = SwapStr(cSQL, " smallint", " integer")
        cSQL = SwapStr(cSQL, " Int IDENTITY", " autoincrement")
    End If

    If db.name = gdBase.name Then
        schreibeProtokollDabaAblauf cSQL: db.Execute cSQL, dbFailOnError + dbSQLPassThrough
    Else
    
        If Right(UCase(db.name), 11) = "KISSAPP.MDB" Then
            db.Execute cSQL, dbFailOnError
        Else
            db.Execute cSQL, dbSQLPassThrough + dbFailOnError
        End If
        
    End If
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 3260 Then
        If ierrz < 5 Then
            ierrz = ierrz + 1
            Pause (1)
            Resume
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "CreateTable"
            Fehler.gsFehlertext = "Beim Erstellen der Tabelle nach 5 sec " & sTab & " in der Datenbank " & db.name & " ist ein Fehler aufgetreten."
            
            Fehlermeldung1
            Exit Sub
        End If
    ElseIf err.Number = 3010 Then
        Exit Sub
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "CreateTable"
        Fehler.gsFehlertext = "Beim Erstellen der Tabelle " & sTab & " in der Datenbank " & db.name & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub CreateTableT2(sTab As String, db As Database)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim ierrz As Integer
    ierrz = 0
    
'            cSQL = SwapStr(cSQL, " varchar(", " text(")
'            cSQL = SwapStr(cSQL, " int", " LONG")
'            cSQL = SwapStr(cSQL, " float", " double")
'            cSQL = SwapStr(cSQL, " real", " single")
'            cSQL = SwapStr(cSQL, " tinyint", " byte")
'            cSQL = SwapStr(cSQL, " ntext", " memo")
'            cSQL = SwapStr(cSQL, " smallint", " integer")
'            cSQL = SwapStr(cSQL, " Int IDENTITY", " autoincrement")
        
    Select Case sTab
    
        Case Is = "MARKE"
            cSQL = "Create Table MARKE "
            cSQL = cSQL & "("
            cSQL = cSQL & " Marke varchar(20)"
            cSQL = cSQL & ", Kuerzel varchar(5)"
            cSQL = cSQL & ", Rabattgrenze real"
            cSQL = cSQL & " )"
    
        Case Is = "E142C"
            cSQL = "Create Table E142C "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & " )"
    
        Case Is = "DATENSCHUTZ"

            cSQL = "Create Table DATENSCHUTZ "
            cSQL = cSQL & "( Element1 ntext "
            cSQL = cSQL & ", Element2 ntext "
            cSQL = cSQL & ", Element3 ntext "
            cSQL = cSQL & ", Element4 ntext "
            cSQL = cSQL & ", Element5 ntext "
            cSQL = cSQL & ", Element6 ntext "
            cSQL = cSQL & ", Element7 ntext "
            cSQL = cSQL & ", Element8 ntext "
            cSQL = cSQL & ", Element9 ntext "
            cSQL = cSQL & ", Element10 ntext "
            cSQL = cSQL & ", Element11 ntext "
            cSQL = cSQL & ", Element12 ntext "
            cSQL = cSQL & ", Element13 ntext "
            cSQL = cSQL & ", Element14 ntext "
            
            
            cSQL = cSQL & ", Element15 ntext "
            cSQL = cSQL & ", Element16 ntext "
            cSQL = cSQL & ", Element17 ntext "
            cSQL = cSQL & ", Element18 ntext "
            cSQL = cSQL & ", Element19 ntext "
            
            cSQL = cSQL & ", PflichtNAME BIT "
            cSQL = cSQL & ", PflichtVORNAME BIT "
            cSQL = cSQL & ", PflichtSTADT BIT "
            cSQL = cSQL & ", PflichtPLZ BIT "
            cSQL = cSQL & ", PflichtSTRASSE BIT "
            cSQL = cSQL & ", PflichtGEBDATUM BIT "
            cSQL = cSQL & ", PflichtMAIL BIT "
            cSQL = cSQL & ", PflichtTEL BIT "
            cSQL = cSQL & ", PflichtMOBIL BIT "
            
            
            cSQL = cSQL & ") "
    
        Case Is = "SMSTEXT"
            cSQL = "Create Table SMSTEXT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Anrede varchar(200)"
            cSQL = cSQL & ", Zeile1 varchar(200)"
            cSQL = cSQL & ", Zeile2 varchar(200)"
            cSQL = cSQL & ", Zeile3 varchar(200)"
            cSQL = cSQL & ", Zeile4 varchar(200)"
            cSQL = cSQL & ", Zeile5 varchar(200)"
            cSQL = cSQL & ", Zeile6 varchar(200)"
            cSQL = cSQL & ", Zeile7 varchar(200)"
            cSQL = cSQL & ", BO0 BIT "
            cSQL = cSQL & ", BO1 BIT "
            cSQL = cSQL & ", BO2 BIT "
            cSQL = cSQL & ", BO3 BIT "
            cSQL = cSQL & ", BO4 BIT "
            cSQL = cSQL & ", BO5 BIT "
            cSQL = cSQL & ", BO6 BIT "
            cSQL = cSQL & ", BO7 BIT "
            cSQL = cSQL & ", BO8 BIT "
            cSQL = cSQL & ", BO9 BIT "
            cSQL = cSQL & ", BO10 BIT "
            cSQL = cSQL & ", BO11 BIT "
            cSQL = cSQL & ", BO12 BIT "
            cSQL = cSQL & ", BO13 BIT "
            cSQL = cSQL & ", BO14 BIT "
            cSQL = cSQL & ", BO15 BIT "
            cSQL = cSQL & ", BO16 BIT "
            cSQL = cSQL & ", BO17 BIT "
            
            cSQL = cSQL & " ) "
            
        Case Is = "NICHTUMSBAR"
            cSQL = "Create Table NICHTUMSBAR ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", ART varchar(35) "
            cSQL = cSQL & ", BETRAG real "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & " )"
    
        Case Is = "REDARTEAN"
            cSQL = "Create Table REDARTEAN ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEK real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & " )"
            
        
    
        Case Is = "KUNPFLGH_PRINT"
            cSQL = "Create Table KUNPFLGH_PRINT ( "
            cSQL = cSQL & " KUNDNR int "
            cSQL = cSQL & ", DATUM DATETIME "
            cSQL = cSQL & ", REINIGUNG varchar(250) "
            cSQL = cSQL & ", MASKEN varchar(250) "
            cSQL = cSQL & ", EXTRAS varchar(250) "
            cSQL = cSQL & ", TAGESPFLEG varchar(250) "
            cSQL = cSQL & ", BERATUNG varchar(250) "
            cSQL = cSQL & ", PROBEN varchar(250) "
            cSQL = cSQL & ", KAEUFE varchar(250) "
            cSQL = cSQL & ", TONIC varchar(250) "
            cSQL = cSQL & ", PEELING varchar(250) "
            cSQL = cSQL & ", MASSAGE varchar(250) "
            cSQL = cSQL & ", NAGELLACK varchar(250) "
            cSQL = cSQL & ", BEHANDLUNG varchar(50) "
            cSQL = cSQL & ", DATBEHANDLUNG varchar(100) "
            cSQL = cSQL & " ) "
    
        Case Is = "ALTERG_PRINT"
            cSQL = "Create Table ALTERG_PRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " AGNU Int IDENTITY "
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT real"
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        
        Case Is = "TERMINDAUER"
        
            cSQL = "Create table TERMINDAUER ( "
            cSQL = cSQL & " BUCHUNGSNR long"
            cSQL = cSQL & ", Dauer varchar(10)"
            cSQL = cSQL & ")"
    
        Case Is = "EANZWEITE"
        
            cSQL = "Create table EANZWEITE ( "
            cSQL = cSQL & " LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", VPE real"
            cSQL = cSQL & ")"
    
        Case Is = "RETOURY"
        
            cSQL = "Create table RETOURY ( "
            cSQL = cSQL & " lmaxanz int "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", FILIALE int "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BESTANDN int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", KUNDNR varchar(10)"
            cSQL = cSQL & ")"
    
        Case Is = "AUSZAHLUNGSGRUND"
        
            cSQL = "Create Table AUSZAHLUNGSGRUND "
            cSQL = cSQL & "(GRUNDNR smallint"
            cSQL = cSQL & ", AUSZAHLUNGSGRUND varchar(50)"
            cSQL = cSQL & ", FILIALE varchar(3)"
            cSQL = cSQL & ", KONTO int "
            cSQL = cSQL & ", KONTOBEZ varchar(35) "
            cSQL = cSQL & ") "
    
    
    
        Case Is = "TERM_VERFUEGBAR"
        
            cSQL = "Create Table TERM_VERFUEGBAR "
            cSQL = cSQL & "("
            cSQL = cSQL & " LFNR Int IDENTITY "
            cSQL = cSQL & ", Datum Datetime"
            cSQL = cSQL & ", Bediener varchar(35)"
            cSQL = cSQL & ", Zeitblock varchar(50)"
            cSQL = cSQL & ") "
    
        Case Is = "REPOS"
        
            cSQL = "Create Table REPOS "
            cSQL = cSQL & "(SCHLUESSEL varchar(15)"
            cSQL = cSQL & ", KAUFDATUM Datetime"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(100)"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", EPREIS real"
            cSQL = cSQL & ", GPREIS real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", PREISKZ smallint"
            cSQL = cSQL & ", STEUERNR varchar(35)"
            cSQL = cSQL & ", Reihenf int"
            cSQL = cSQL & ") "
    
        Case Is = "KOPF_GUTSCH"
            cSQL = "Create Table KOPF_GUTSCH"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " GUTSCHNR varchar(10)"
            cSQL = cSQL & ", GUTSCH_ART varchar(100)"
            cSQL = cSQL & ", AUSGABE_VON varchar(10) "
            cSQL = cSQL & ", AUSGABE_BIS varchar(10) "
            cSQL = cSQL & ", EINLOESE_VON varchar(10) "
            cSQL = cSQL & ", EINLOESE_BIS varchar(10) "
            cSQL = cSQL & " ) "
            
        Case Is = "ARTIKELSAMMLUNG"
            cSQL = "Create Table ARTIKELSAMMLUNG"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " artnr int"
            cSQL = cSQL & ", bezeich varchar(35)"
            cSQL = cSQL & ", PREIS float "
            cSQL = cSQL & ", MENGE INT "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & " ) "
            
        Case Is = "COUPONPRINT"
            cSQL = "Create Table COUPONPRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " artnr int"
            cSQL = cSQL & ", bezeich varchar(35)"
            cSQL = cSQL & ", KETTE varchar(20)"
            cSQL = cSQL & ", GRUPPE varchar(20)"
            cSQL = cSQL & ", KUNDNR varchar(10)"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MENGE INT "
            cSQL = cSQL & ", PREIS float "
            cSQL = cSQL & ", von DATETIME"
            cSQL = cSQL & ", bis DATETIME"
            cSQL = cSQL & " ) "
    
        Case Is = "COUPONREGELN"
            cSQL = "Create Table COUPONREGELN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " COUPON_ID int"
            cSQL = cSQL & ", COUPON_HERSTELLER varchar(100)"
            cSQL = cSQL & ", COUPON_TITEL varchar(100)"
            cSQL = cSQL & ", COUPON_STARTDATUM DATETIME "
            cSQL = cSQL & ", COUPON_ENDEDATUM DATETIME "
            cSQL = cSQL & ", COUPON_TYPE varchar(8) "
            cSQL = cSQL & ", COUPON_MEHRFACHEINLÖSUNG BIT "
            cSQL = cSQL & ", COUPON_MINDESTANZAHL INT "
            cSQL = cSQL & ", COUPON_MINDESTUMSATZ float "
            cSQL = cSQL & ", COUPON_DISCOUNTPREIS float "
            cSQL = cSQL & ", COUPON_TENDER INT "
            cSQL = cSQL & ", COUPON_EAN varchar(13)"
            cSQL = cSQL & ", COUPON_ARTNR INT "
            cSQL = cSQL & " ) "
            
         Case Is = "COUPONPRODUKTE"
            cSQL = "Create Table COUPONPRODUKTE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " COUPON_ID int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & " ) "
            
            
        Case Is = "COUPON_NEUE"
        
            cSQL = "Create Table COUPON_NEUE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " artnr int"
            cSQL = cSQL & ", bezeich varchar(35)"
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", NOTIZEN varchar(25)"
            cSQL = cSQL & " ) "
            
        Case Is = "ARTLIEF_TEMP"
        
            cSQL = "Create Table ARTLIEF_TEMP ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", MINMEN int "
            cSQL = cSQL & ", SPANNE float "
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & " ) "
            
        Case Is = "PRINT_SPEZLISTE"
        
            cSQL = "Create Table PRINT_SPEZLISTE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " artnr int"
            cSQL = cSQL & ", bezeich varchar(35)"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", Preis float "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", bediener smallint "
            cSQL = cSQL & ", WelcheArtikel varchar(250)"
            cSQL = cSQL & " ) "
        
        Case Is = "LAGERD"
            cSQL = "Create Table LAGERD"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " artikelnummer int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & " ) "
    
        Case Is = "FEEDB_TRANS"
            cSQL = "Create Table FEEDB_TRANS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", EDATE DATETIME"
            cSQL = cSQL & ", EZEIT varchar(8)"
            cSQL = cSQL & ", AN_FILIALE tinyint "
            cSQL = cSQL & ", VON_FILIALE tinyint "
            cSQL = cSQL & ", transpack float "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & " ) "
    
        Case Is = "MARKIERUNG"
            cSQL = "Create Table MARKIERUNG"
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", ZBONNR smallint"
            cSQL = cSQL & ", ABOK BIT"
            cSQL = cSQL & ")"
        Case Is = "E72B"
            cSQL = "Create Table E72B"
            cSQL = cSQL & "("
            cSQL = cSQL & " Druckformat varchar(100)"
            cSQL = cSQL & ")"
        Case Is = "E185"
            cSQL = "Create Table E185"
            cSQL = cSQL & "("
            cSQL = cSQL & " Bo1 bit"
            cSQL = cSQL & ")"
        Case Is = "VEDESFTP"
            cSQL = "Create Table VEDESFTP"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Host varchar(100)"
            cSQL = cSQL & ", User varchar(30)"
            cSQL = cSQL & ", pw varchar(30) "
            cSQL = cSQL & " ) "
            
        Case Is = "VEDESFTP_DSL"
            cSQL = "Create Table VEDESFTP_DSL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Host varchar(100)"
            cSQL = cSQL & ", User varchar(30)"
            cSQL = cSQL & ", pw varchar(30) "
            cSQL = cSQL & " ) "
    
        Case Is = "DUKATENB"
            cSQL = "Create Table DUKATENB"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", BEDNU smallint "
            cSQL = cSQL & ", DUBESTAND int"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "UMZUGARTIKEL"
    
            cSQL = "Create Table UMZUGARTIKEL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DEL_ARTNR Int "
            cSQL = cSQL & ", NEU_ARTNR int"
            cSQL = cSQL & ", UMZUG_DATUM DATETIME "
            cSQL = cSQL & ", SENDOK bit"
            cSQL = cSQL & ") "
            
        Case Is = "VKPE"
            cSQL = "Create Table VKPE "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & ", BO5 bit"
            cSQL = cSQL & ", BO6 bit"
            cSQL = cSQL & " )"
    
        Case Is = "KUNDENBONUS"
    
            cSQL = "Create Table KUNDENBONUS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " LFNR Int "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", DATUM DATETIME "
            cSQL = cSQL & ", AUSZAHLBONUS real "
            cSQL = cSQL & ", BISHERIGER_BONUS real "
            cSQL = cSQL & ", EINGELOEST_DATUM DATETIME "
            cSQL = cSQL & ", SENDOK bit"
            cSQL = cSQL & ") "
    
        Case Is = "AFCBUCH_GRUND"
            cSQL = "Create Table AFCBUCH_GRUND "
            cSQL = cSQL & "( "
            cSQL = cSQL & " EAN varchar(13)"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ") "
    
        Case Is = "LINRERR"
            cSQL = "Create Table LINRERR "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ") "
    
        Case Is = "ZUGRIFFDAT"
            cSQL = "Create Table ZUGRIFFDAT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DAT varchar(20)"
            cSQL = cSQL & ", rechner varchar(50)"
            cSQL = cSQL & " ) "
    
        Case Is = "KARTEN_EINZ"
            cSQL = "Create Table KARTEN_EINZ"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KASNUM tinyint"
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ", ART varchar(12)"
            cSQL = cSQL & ", BEZEICH varchar(50)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", Betrag float"
            cSQL = cSQL & " ) "
    
        Case Is = "TERMPRINT_MEP"
            cSQL = "Create Table TERMPRINT_MEP "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BEDNAME varchar(32)"
            cSQL = cSQL & ", BEDNU float"
            cSQL = cSQL & ", BEHANDLUNG varchar(250)"
            cSQL = cSQL & ", BUCHNR float"
            cSQL = cSQL & ", DATUM float"
            cSQL = cSQL & ", KABINE varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", KUNDNR float"
            
            cSQL = cSQL & ", TEL varchar (35)"
            cSQL = cSQL & ", MOBILTEL varchar (35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", EMAIL varchar(50)"
            cSQL = cSQL & ", NAME varchar(35)"
            
            cSQL = cSQL & ", UHRZEIT varchar(10)"
            cSQL = cSQL & ", UHRZEIT_Ende varchar(10)"
            cSQL = cSQL & ", Dauer varchar(10)"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", von DATETIME"
            cSQL = cSQL & ", bis DATETIME"
            cSQL = cSQL & ", BEDEINTRAG smallint "
            
            cSQL = cSQL & ") "
        Case Is = "TERMPRINT_EP"
            cSQL = "Create Table TERMPRINT_EP "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BEDNAME varchar(32)"
            cSQL = cSQL & ", BEDNU float"
            cSQL = cSQL & ", BEHANDLUNG varchar(250)"
            cSQL = cSQL & ", BUCHUNGSNR float"
            cSQL = cSQL & ", DATUM float"
            cSQL = cSQL & ", KABINE varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", KUNDNR float"
            
            cSQL = cSQL & ", TEL varchar (35)"
            cSQL = cSQL & ", MOBILTEL varchar (35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", EMAIL varchar(50)"
            cSQL = cSQL & ", NAME varchar(35)"
            
            cSQL = cSQL & ", UHRZEIT varchar(10)"
            cSQL = cSQL & ", UHRZEIT_Ende varchar(10)"
            cSQL = cSQL & ", Dauer varchar(10)"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", von DATETIME"
            cSQL = cSQL & ", bis DATETIME"
            cSQL = cSQL & ", BEDEINTRAG smallint "
            cSQL = cSQL & ") "
    
        Case Is = "PRINT_BONPAUSE"
            cSQL = "Create table PRINT_BONPAUSE "
            cSQL = cSQL & "("
            cSQL = cSQL & " LFDNR float "
            cSQL = cSQL & ", BEDNR varchar(3) "
            cSQL = cSQL & ", ZSUM varchar(9) "
            cSQL = cSQL & ", GRABATT varchar(5) "
            cSQL = cSQL & ", KDNAME varchar(35) "
            cSQL = cSQL & ", KDNR varchar(10) "
            cSQL = cSQL & ", LBZEILE float "
            cSQL = cSQL & ", LBTEXT varchar(200) "
            cSQL = cSQL & ", Art varchar(10) "
            cSQL = cSQL & ", ADATE Datetime"
            cSQL = cSQL & ", AZeit varchar(8) "
            cSQL = cSQL & ")"
            
        Case Is = "PRINT_WE"
        
            cSQL = "Create Table PRINT_WE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", NOTIZEN varchar(25)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", KVKPR float"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", LEK float"
            cSQL = cSQL & ", NSN float"
            cSQL = cSQL & ", Menge smallint "
            cSQL = cSQL & ", Reihenf smallint "
            cSQL = cSQL & ", Status varchar(15) "
            cSQL = cSQL & " ) "
            
        Case Is = "WAEINGEM"
        
            cSQL = "Create Table WAEINGEM"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", NOTIZEN varchar(25)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", KVKPR float"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", LEK float"
            cSQL = cSQL & ", NSN float"
            cSQL = cSQL & ", Menge smallint "
            cSQL = cSQL & ", Reihenf smallint "
            cSQL = cSQL & ", Status varchar(15) "
            cSQL = cSQL & " ) "
            
        Case Is = "ARTEAN_K"
            cSQL = "Create Table ARTEAN_K"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", ean varchar(13) "
            cSQL = cSQL & " ) "
    
        Case Is = "ARTHISTE"
            cSQL = "Create Table ARTHISTE "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(50)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", AUSWAHL varchar(35)"
            cSQL = cSQL & ", BGRUND varchar(35)"
            cSQL = cSQL & ", Artnr int "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", kvkpr1 float"
            cSQL = cSQL & ") "
    
        Case Is = "BONUS_SYS"
            cSQL = "Create Table BONUS_SYS "
            cSQL = cSQL & "("
            cSQL = cSQL & " BONUS_NR Int  "
            cSQL = cSQL & ", BONUS_BETRAG real"
            cSQL = cSQL & ", BONUS_AUSGABEDAT Datetime"
            cSQL = cSQL & ", BONUS_AUSGABEZEIT varchar(8)"
            cSQL = cSQL & ", BONUS_EINLDAT Datetime"
            cSQL = cSQL & ", BONUS_EINLZEIT varchar(8)"
            cSQL = cSQL & ", BONUS_AUSGABEFIL int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
        Case Is = "DESADV"
            cSQL = "Create Table DESADV "
            cSQL = cSQL & "("
            cSQL = cSQL & " AUFTRAGSNR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", Kurzinfo varchar(35)"
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", Artnr int "
            cSQL = cSQL & ", Libesnr varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ") "
    
    
        Case Is = "E31"
            cSQL = "Create Table E31 "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO4 bit"
            cSQL = cSQL & ", ETI varchar(20)"
            cSQL = cSQL & " )"
        Case Is = "TERMOPTIONEN"
            cSQL = "Create Table TERMOPTIONEN "
            cSQL = cSQL & "("
            cSQL = cSQL & " Term_Name BIT"
            cSQL = cSQL & ", Term_InfoDauerh BIT"
            cSQL = cSQL & ", Term_BedKass BIT"
            cSQL = cSQL & ") "
        Case Is = "E171"
            cSQL = "Create Table E171 "
            cSQL = cSQL & "("
            cSQL = cSQL & " DATFORMAT varchar (10)"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ") "
        Case Is = "KU_EINWIL"
            cSQL = "Create Table KU_EINWIL "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEL varchar (35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", TITEL varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            cSQL = cSQL & ", RABATT float"
            cSQL = cSQL & ", DATUM1 DATETIME"
            cSQL = cSQL & ", NameVorname varchar(70)"
            cSQL = cSQL & ", EMail varchar(50)"
            cSQL = cSQL & ") "
    
        Case Is = "PRINT_ZBON"
            cSQL = "Create Table PRINT_ZBON "
            cSQL = cSQL & "(DruckDatum datetime "
            cSQL = cSQL & ", DruckZeit varchar(8) "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", ALTEANR int "
            cSQL = cSQL & ", NEUEANR int "
            cSQL = cSQL & ", AlterADatum datetime "
            cSQL = cSQL & ", AlterAZeit varchar(8) "
            cSQL = cSQL & ", NeuerADatum datetime "
            cSQL = cSQL & ", NeuerAZeit varchar(8) "
            cSQL = cSQL & ", SCHLUESSEL float"
            cSQL = cSQL & ", WAE_CODE varchar(20)"
            cSQL = cSQL & ", DATEN1 varchar(50)"
            cSQL = cSQL & ", DATEN2 varchar(50)"
            cSQL = cSQL & ", DATEN3 varchar(50)"
            cSQL = cSQL & ", DATEN4 varchar(50)"
            cSQL = cSQL & ", DATEN5 varchar(50)"
            cSQL = cSQL & ", DATEN6 varchar(50)"
            cSQL = cSQL & ", DATEN7 varchar(50)"
            cSQL = cSQL & ", DATEN8 varchar(50)"
            cSQL = cSQL & ", DATEN9 varchar(50)"
            cSQL = cSQL & ", DATEN10 varchar(50)"
            cSQL = cSQL & ", DATEN11 varchar(50)"
            cSQL = cSQL & ", DATEN12 varchar(50)"
            cSQL = cSQL & ", DATEN13 varchar(50)"
            cSQL = cSQL & ", DATEN14 varchar(50)"
            cSQL = cSQL & ", DATEN15 varchar(50)"
            cSQL = cSQL & ", DATEN16 varchar(50)"
            cSQL = cSQL & ", DATEN17 varchar(50)"
            cSQL = cSQL & ", DATEN18 varchar(50)"
            cSQL = cSQL & ", DATEN19 varchar(50)"
            cSQL = cSQL & ", DATEN20 varchar(50)"
            cSQL = cSQL & ", DATEN21 varchar(50)"
            cSQL = cSQL & ", DATEN22 varchar(50)"
            cSQL = cSQL & ", DATEN23 varchar(50)"
            cSQL = cSQL & ", DATEN24 varchar(50)"
            cSQL = cSQL & ", DATEN25 varchar(50)"
            cSQL = cSQL & ", DATEN26 varchar(50)"
            cSQL = cSQL & ", DATEN27 varchar(50)"
            cSQL = cSQL & ", DATEN28 varchar(50)"
            cSQL = cSQL & ", DATEN29 varchar(50)"
            cSQL = cSQL & ", DATEN30 varchar(50)"
            cSQL = cSQL & ", DATEN31 varchar(50)"
            cSQL = cSQL & ", DATEN32 varchar(50)"
            cSQL = cSQL & ", DATEN33 varchar(50)"
            cSQL = cSQL & ", DATEN34 varchar(50)"
            cSQL = cSQL & ", DATEN35 varchar(50)"
            cSQL = cSQL & ", DATEN36 varchar(50)"
            cSQL = cSQL & ", DATEN37 varchar(50)"
            cSQL = cSQL & ", DATEN38 varchar(50)"
            cSQL = cSQL & ", DATEN39 varchar(50)"
            cSQL = cSQL & ", DATEN40 varchar(50)"
            cSQL = cSQL & ", DATEN41 varchar(50)"
            cSQL = cSQL & ", DATEN42 varchar(50)"
            cSQL = cSQL & ", DATEN43 varchar(50)"
            cSQL = cSQL & ", DATEN44 varchar(50)"
            cSQL = cSQL & ", DATEN45 varchar(50)"
            cSQL = cSQL & ", DATEN46 varchar(50)"
            cSQL = cSQL & ", DATEN47 varchar(50)"
            cSQL = cSQL & ", DATEN48 varchar(50)"
            cSQL = cSQL & ", DATEN49 varchar(50)"
            cSQL = cSQL & ", DATEN50 varchar(50)"
            cSQL = cSQL & ", DATEN51 varchar(50)"
            cSQL = cSQL & ", DATEN52 varchar(50)"
            cSQL = cSQL & ", DATEN53 varchar(50)"
            cSQL = cSQL & ", DATEN54 varchar(50)"
            cSQL = cSQL & ", DATEN varchar(150)"
            cSQL = cSQL & ", ALTERABSCH varchar(50)"
            cSQL = cSQL & ", NEUERABSCH varchar(50)"
            cSQL = cSQL & ")"
        Case Is = "TAGKOPF_TEMP"
            cSQL = "Create Table TAGKOPF_TEMP "
            cSQL = cSQL & "(DruckDatum datetime "
            cSQL = cSQL & ", DruckZeit varchar(8) "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", ALTEANR int "
            cSQL = cSQL & ", NEUEANR int "
            cSQL = cSQL & ", AlterADatum datetime "
            cSQL = cSQL & ", AlterAZeit varchar(8) "
            cSQL = cSQL & ", NeuerADatum datetime "
            cSQL = cSQL & ", NeuerAZeit varchar(8) "
            cSQL = cSQL & ", SCHLUESSEL float"
            cSQL = cSQL & ", WAE_CODE varchar(20)"
            cSQL = cSQL & ", DATEN1 varchar(50)"
            cSQL = cSQL & ", DATEN2 varchar(50)"
            cSQL = cSQL & ", DATEN3 varchar(50)"
            cSQL = cSQL & ", DATEN4 varchar(50)"
            cSQL = cSQL & ", DATEN5 varchar(50)"
            cSQL = cSQL & ", DATEN6 varchar(50)"
            cSQL = cSQL & ", DATEN7 varchar(50)"
            cSQL = cSQL & ", DATEN8 varchar(50)"
            cSQL = cSQL & ", DATEN9 varchar(50)"
            cSQL = cSQL & ", DATEN10 varchar(50)"
            cSQL = cSQL & ", DATEN11 varchar(50)"
            cSQL = cSQL & ", DATEN12 varchar(50)"
            cSQL = cSQL & ", DATEN13 varchar(50)"
            cSQL = cSQL & ", DATEN14 varchar(50)"
            cSQL = cSQL & ", DATEN15 varchar(50)"
            cSQL = cSQL & ", DATEN16 varchar(50)"
            cSQL = cSQL & ", DATEN17 varchar(50)"
            cSQL = cSQL & ", DATEN18 varchar(50)"
            cSQL = cSQL & ", DATEN19 varchar(50)"
            cSQL = cSQL & ", DATEN20 varchar(50)"
            cSQL = cSQL & ", DATEN21 varchar(50)"
            cSQL = cSQL & ", DATEN22 varchar(50)"
            cSQL = cSQL & ", DATEN23 varchar(50)"
            cSQL = cSQL & ", DATEN24 varchar(50)"
            cSQL = cSQL & ", DATEN25 varchar(50)"
            cSQL = cSQL & ", DATEN26 varchar(50)"
            cSQL = cSQL & ", DATEN27 varchar(50)"
            cSQL = cSQL & ", DATEN28 varchar(50)"
            cSQL = cSQL & ", DATEN29 varchar(50)"
            cSQL = cSQL & ", DATEN30 varchar(50)"
            cSQL = cSQL & ", DATEN31 varchar(50)"
            cSQL = cSQL & ", DATEN32 varchar(50)"
            cSQL = cSQL & ", DATEN33 varchar(50)"
            cSQL = cSQL & ", DATEN34 varchar(50)"
            cSQL = cSQL & ", DATEN35 varchar(50)"
            cSQL = cSQL & ", DATEN36 varchar(50)"
            cSQL = cSQL & ", DATEN37 varchar(50)"
            cSQL = cSQL & ", DATEN38 varchar(50)"
            cSQL = cSQL & ", DATEN39 varchar(50)"
            cSQL = cSQL & ", DATEN40 varchar(50)"
            cSQL = cSQL & ", DATEN41 varchar(50)"
            cSQL = cSQL & ", DATEN42 varchar(50)"
            cSQL = cSQL & ", DATEN43 varchar(50)"
            cSQL = cSQL & ", DATEN44 varchar(50)"
            cSQL = cSQL & ", DATEN45 varchar(50)"
            cSQL = cSQL & ", DATEN46 varchar(50)"
            cSQL = cSQL & ", DATEN47 varchar(50)"
            cSQL = cSQL & ", DATEN48 varchar(50)"
            cSQL = cSQL & ", DATEN49 varchar(50)"
            cSQL = cSQL & ", DATEN50 varchar(50)"
            cSQL = cSQL & ", DATEN51 varchar(50)"
            cSQL = cSQL & ", DATEN52 varchar(50)"
            cSQL = cSQL & ", DATEN53 varchar(50)"
            cSQL = cSQL & ", DATEN54 varchar(50)"
            cSQL = cSQL & ", DATEN varchar(150)"
            cSQL = cSQL & ", ALTERABSCH varchar(50)"
            cSQL = cSQL & ", NEUERABSCH varchar(50)"
            cSQL = cSQL & ")"
    
        Case Is = "WEBSHOP_E"
            cSQL = "Create table WEBSHOP_E "
            cSQL = cSQL & "("
            cSQL = cSQL & " MySQL_PHP_SCRIPT_PFAD varchar(250)"
            cSQL = cSQL & " ,MySQL_LIVEBESTAND BIT "
            
            cSQL = cSQL & " ,MySQL_BESTAND_TAB varchar(50)"
            cSQL = cSQL & " ,MySQL_BESTAND_INDEXSPALTE varchar(50)"
            cSQL = cSQL & " ,MySQL_BESTAND_SPALTE varchar(50)"
            
            cSQL = cSQL & ")"
    
        Case Is = "AZEITU"
            cSQL = "Create table AZEITU "
            cSQL = cSQL & "("
            cSQL = cSQL & " LFNR Int IDENTITY "
            cSQL = cSQL & " ,UTEXT varchar(35)"
            cSQL = cSQL & " ,WERTIGK tinyint"
            cSQL = cSQL & ")"
        Case Is = "STEMPELAZU"
            cSQL = "Create table STEMPELAZU "
            cSQL = cSQL & "("
            cSQL = cSQL & " BEDNU Int  "
            cSQL = cSQL & ", DATUM DATETIME "
            cSQL = cSQL & " ,UTEXT varchar(35)"
            cSQL = cSQL & ", GESAMT DATETIME "
            cSQL = cSQL & ")"
        Case Is = "GDPDU_STAND"
            cSQL = "Create table GDPDU_STAND "
            cSQL = cSQL & "("
            cSQL = cSQL & " Datum Datetime"
            cSQL = cSQL & ", Zeit Datetime"
            cSQL = cSQL & ")"
    
        Case Is = "PREISEDITKASSE"
            cSQL = "Create Table PREISEDITKASSE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", ALTERPREIS float"
            cSQL = cSQL & ", NEUERPREIS float"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", ART varchar(35)"
            cSQL = cSQL & " ) "
        Case Is = "PREISEDITKASSE_PRINT"
            cSQL = "Create Table PREISEDITKASSE_PRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", ALTERPREIS float"
            cSQL = cSQL & ", NEUERPREIS float"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", ART varchar(35)"
            cSQL = cSQL & " ) "
        Case Is = "BESTEVER"
            cSQL = "Create Table BESTEVER"
            cSQL = cSQL & "("
            
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", KUERZEL_TEUER varchar(5)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", BVO int"
            cSQL = cSQL & ", ERSPARNIS_E float"
            cSQL = cSQL & ", ERSPARNIS_KUM float"
            cSQL = cSQL & ", LEKPR_TEUER float"
            cSQL = cSQL & ", MinMen int"
            cSQL = cSQL & ", LINR_TEUER int"
            cSQL = cSQL & ", LIEFBEZ_TEUER varchar(35)"
            cSQL = cSQL & ") "

        Case Is = "DRU_TEMP"
            cSQL = "Create Table DRU_TEMP"
            cSQL = cSQL & "("
            cSQL = cSQL & "  BESTELLDAT varchar(20)"
            cSQL = cSQL & ", BESTELLNR varchar(20)"
            cSQL = cSQL & ", BESTELLUNG varchar(20)"
            cSQL = cSQL & ", LIEFERANT varchar(35)"
            cSQL = cSQL & ", ARTNR varchar(6)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", BESTELLT int"
            cSQL = cSQL & ", GELIEFERT int"
            cSQL = cSQL & ", BERECHNET int"
            cSQL = cSQL & ", LIEFBETRAG float"
            cSQL = cSQL & ", ZEILENRAB float"
            cSQL = cSQL & ", ZEILENWERT float"
            cSQL = cSQL & ", RECHNRAB float"
            cSQL = cSQL & ", RECHNWERT float"
            cSQL = cSQL & ", STCKPREIS float"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ") "
    
        Case Is = "DT" & srechnertab
            cSQL = "Create Table DT" & srechnertab
            cSQL = cSQL & "("
            cSQL = cSQL & "  BESTELLDAT varchar(20)"
            cSQL = cSQL & ", BESTELLNR varchar(20)"
            cSQL = cSQL & ", BESTELLUNG varchar(20)"
            cSQL = cSQL & ", LIEFERANT varchar(35)"
            cSQL = cSQL & ", ARTNR varchar(6)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", BESTELLT int"
            cSQL = cSQL & ", GELIEFERT int"
            cSQL = cSQL & ", BERECHNET int"
            cSQL = cSQL & ", LIEFBETRAG float"
            cSQL = cSQL & ", ZEILENRAB float"
            cSQL = cSQL & ", ZEILENWERT float"
            cSQL = cSQL & ", RECHNRAB float"
            cSQL = cSQL & ", RECHNWERT float"
            cSQL = cSQL & ", STCKPREIS float"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", LAGERP float"
            cSQL = cSQL & ") "
    
        Case Is = "FOKUSENDLOS"
            cSQL = "Create Table FOKUSENDLOS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & "  EtiIndex int "
            cSQL = cSQL & " , Art varchar(10)"
            cSQL = cSQL & " ) "
    
    
        Case Is = "WGNAGN"
            cSQL = "Create Table WGNAGN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & "  AGN float "
            cSQL = cSQL & " , PNAME varchar(35)"
            cSQL = cSQL & " , WGN float "
            cSQL = cSQL & " ) "
    
        Case Is = "WGNDEF"
            cSQL = "Create Table WGNDEF"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " PNAME varchar(35)"
            cSQL = cSQL & " , WGNTEXT varchar(25)"
            cSQL = cSQL & " , WGN float "
            cSQL = cSQL & " ) "
    
        Case Is = "LISRT_MAIL"
            cSQL = "Create Table LISRT_MAIL "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINR int"
            cSQL = cSQL & ", MAILTEXT ntext "
            cSQL = cSQL & ") "
    
        Case Is = "KAL_IMPORT"
            cSQL = "Create Table KAL_IMPORT "
            cSQL = cSQL & "("
            cSQL = cSQL & " BETREFF varchar(255)"
            cSQL = cSQL & ", BEGINNTAM varchar(255)"
            cSQL = cSQL & ", BEGINNTUM varchar(255)"
            cSQL = cSQL & ", ENDETAM varchar(255)"
            cSQL = cSQL & ", ENDETUM varchar(255)"
            cSQL = cSQL & ", GanztägigesEreignis BIT "
            cSQL = cSQL & ", ErinnerungEinAus BIT "
            cSQL = cSQL & ", Erinnerungam varchar(255) "
            cSQL = cSQL & ", Erinnerungum varchar(255) "
            cSQL = cSQL & ", Besprechungsplanung varchar(255) "
            cSQL = cSQL & ", ErforderlicheTeilnehmer varchar(255) "
            cSQL = cSQL & ", OptionaleTeilnehmer varchar(255) "
            cSQL = cSQL & ", Besprechungsressourcen varchar(255) "
            cSQL = cSQL & ", Abrechnungsinformationen varchar(255) "
            cSQL = cSQL & ", Beschreibung ntext "
            cSQL = cSQL & ", Kategorien varchar(255) "
            cSQL = cSQL & ", Ort varchar(255) "
            cSQL = cSQL & ", Priorität varchar(255) "
            cSQL = cSQL & ", Privat Bit"
            cSQL = cSQL & ", Reisekilometer varchar(255) "
            cSQL = cSQL & ", Vertraulichkeit varchar(255) "
            cSQL = cSQL & ", Zeitspannezeigenals smallint"
            cSQL = cSQL & ") "
    
        Case Is = "MWST_V"
            cSQL = "Create Table MWST_V"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " EAN varchar(13)"
            cSQL = cSQL & " ,ARTNR int "
            cSQL = cSQL & " ) "
        Case Is = "PRINT_EXPRESSDAT"
            cSQL = "Create Table PRINT_EXPRESSDAT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ZEILE varchar(200)"
            cSQL = cSQL & " ) "
        Case Is = "PROTOEIN"
            cSQL = "Create Table PROTOEIN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATNAME varchar(20)"
            cSQL = cSQL & ", DATUM varchar(20)"
            cSQL = cSQL & " ) "
        Case Is = "KKZAHLTE_PRINT"
            cSQL = "Create Table KKZAHLTE_PRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "LASTZAHLTE_PRINT"
            cSQL = "Create Table LASTZAHLTE_PRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", GeldWERT float"
            cSQL = cSQL & ", KK_ART varchar(2) "
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "UMSATZINFO"
            cSQL = "Create Table UMSATZINFO"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Datum DATETIME "
            cSQL = cSQL & ", INFO varchar(255)"
            cSQL = cSQL & " ) "
            
        Case Is = "EX82"
            cSQL = "Create Table EX82 "
            cSQL = cSQL & "( LIBESNR varchar(13) "
            
            cSQL = cSQL & " ) "
       
        Case Is = "EAN61"
            cSQL = "Create Table EAN61 "
            cSQL = cSQL & "( LIBESNR varchar(13) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & " ) "
        Case Is = "BESTIMP"
            cSQL = "Create Table BESTIMP "
            cSQL = cSQL & "( ARTNR int "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & " ) "
        Case Is = "TERMINPREISPRINT"
            cSQL = "Create Table TERMINPREISPRINT "
            cSQL = cSQL & "( ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KVKPR1ALT float "
            cSQL = cSQL & ", KVKPR1NEU float "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", ART varchar(35) "
            cSQL = cSQL & " ) "
        Case Is = "ART192PRINT"
            cSQL = "Create Table ART192PRINT "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", MDHDAT DATETIME "
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & " ) "
        Case Is = "BEST_HIST"
        
            cSQL = "Create Table BEST_HIST "
            cSQL = cSQL & "( "
            cSQL = cSQL & " artnr int"
            cSQL = cSQL & ", BEZEICH varchar(50)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ") "
    
        Case Is = "FEIERTAGE_TEMP"
            cSQL = "Create Table FEIERTAGE_TEMP"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Datum DATETIME "
            cSQL = cSQL & ", FEIERTAGBEZ varchar(35)"
            cSQL = cSQL & ", BUNDESWEIT bit"
            cSQL = cSQL & ", ANWENDEN bit"
            cSQL = cSQL & " ) "
    
        Case Is = "FEIERTAGE"
            cSQL = "Create Table FEIERTAGE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " FDAT varchar(6)"
            cSQL = cSQL & ", FDATJAHR varchar(4)"
            cSQL = cSQL & ", FEIERTAGBEZ varchar(35)"
            cSQL = cSQL & ", BUNDESWEIT bit"
            cSQL = cSQL & ", ANWENDEN bit"
            cSQL = cSQL & " ) "
    
        Case Is = "TERMDEL193"
            cSQL = "Create Table TERMDEL193"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", BED smallint"
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", GRUND ntext"
            
            cSQL = cSQL & ", DAUER float "
            cSQL = cSQL & ", BEGINDAT DATETIME"
            cSQL = cSQL & ", BEGINZEIT varchar(8) "
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", ERSTBED smallint"
            cSQL = cSQL & ", ERSTBEDNAME varchar(35)"
            cSQL = cSQL & " ) "
    
        Case Is = "PRINT_BEHTEXTE"
            cSQL = "Create Table PRINT_BEHTEXTE "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BEZEICH varchar(50)"
            cSQL = cSQL & ", DAUER float "
            cSQL = cSQL & ", NR float "
            cSQL = cSQL & ", GLIEDERUNG varchar(30)"
            cSQL = cSQL & ", artnr int"
            cSQL = cSQL & ") "
        Case "PRINTLIEF"
        
            cSQL = "Create Table PRINTLIEF"
            cSQL = cSQL & "( ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR float"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", FilVon tinyint"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", BESTiF int "
            cSQL = cSQL & ", OPENART varchar(20)"
            cSQL = cSQL & ", AENART varchar(40) "
            cSQL = cSQL & ", Pcname varchar(30)"
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", TRANSPACK float "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", BARCODE varchar(11)"
            cSQL = cSQL & ", DATNAME varchar(12)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ") "
        Case Is = "EDEK_WGN_HIST"
            cSQL = "Create Table EDEK_WGN_HIST "
            cSQL = cSQL & "("
            cSQL = cSQL & " WGN int "
            cSQL = cSQL & ", WGNTEXT varchar(30)"
            cSQL = cSQL & ", AUSGEWAEHLT_L varchar(10) "
            cSQL = cSQL & ", AUSGEWAEHLT_S varchar(10) "
            cSQL = cSQL & " )"
        Case Is = "EDEK_WGN"
            cSQL = "Create Table EDEK_WGN "
            cSQL = cSQL & "("
            cSQL = cSQL & " WGN int "
            cSQL = cSQL & ", WGNTEXT varchar(30)"
            cSQL = cSQL & ", ANZ_L int "
            cSQL = cSQL & ", ANZ_S int "
            cSQL = cSQL & ", AUSGEWAEHLT_L varchar(10) "
            cSQL = cSQL & ", AUSGEWAEHLT_S varchar(10) "
            cSQL = cSQL & " )"
        Case Is = "EDEKE"
            cSQL = "Create Table EDEKE "
            cSQL = cSQL & "("
            cSQL = cSQL & " EDEKPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & ", LINR_L int "
            cSQL = cSQL & ", LINR_S int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", KUERZEL varchar(3) "
            cSQL = cSQL & ", bo1 bit"
            cSQL = cSQL & ", bo2 bit"
            cSQL = cSQL & ", bo3 bit"
            cSQL = cSQL & ", bo4 bit"
            cSQL = cSQL & " )"
        Case Is = "BUDNIE"
            cSQL = "Create Table BUDNIE "
            cSQL = cSQL & "("
            cSQL = cSQL & " LUEPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", KUERZEL varchar(3) "
            cSQL = cSQL & ", bo1 bit"
            cSQL = cSQL & ", bo2 bit"
            cSQL = cSQL & ", bo3 bit"
            cSQL = cSQL & ", bo4 bit"
            cSQL = cSQL & " )"
        Case Is = "COUPE"
            cSQL = "Create Table COUPE "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & " )"
        Case Is = "LUEE"
            cSQL = "Create Table LUEE "
            cSQL = cSQL & "("
            cSQL = cSQL & " LUEPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", KUERZEL varchar(3) "
            cSQL = cSQL & ", bo1 bit"
            cSQL = cSQL & ", bo2 bit"
            cSQL = cSQL & ", bo3 bit"
            cSQL = cSQL & ", bo4 bit"
            cSQL = cSQL & " )"
        Case Is = "BELAE"
            cSQL = "Create Table BELAE "
            cSQL = cSQL & "("
            cSQL = cSQL & " BELAPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", KUERZEL varchar(3) "
            cSQL = cSQL & ", bo1 bit"
            cSQL = cSQL & ", bo2 bit"
            cSQL = cSQL & ", bo3 bit"
            cSQL = cSQL & ", bo4 bit"
            cSQL = cSQL & " )"
        Case Is = "STORNOTEXTT1"
            cSQL = "Create Table STORNOTEXTT1"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ZTEXT varchar(32)"
            cSQL = cSQL & ", ZNR byte "
            cSQL = cSQL & " ) "
        Case Is = "STORNOTEXT"
            cSQL = "Create Table STORNOTEXT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ZTEXT varchar(32)"
            cSQL = cSQL & ", ZNR byte "
            cSQL = cSQL & " ) "
    
        Case Is = "TPLAN"
            cSQL = "Create Table TPLAN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ZEIT varchar(10)"
            cSQL = cSQL & ", ORT1 varchar(100) "
            cSQL = cSQL & ", ORT2 varchar(100) "
            cSQL = cSQL & ", ORT3 varchar(100) "
            cSQL = cSQL & ", ORT4 varchar(100) "
            cSQL = cSQL & ", ORT5 varchar(100) "
            cSQL = cSQL & ", ORT6 varchar(100) "
            cSQL = cSQL & ", ORT7 varchar(100) "
            cSQL = cSQL & ", ORT8 varchar(100) "
            cSQL = cSQL & ", ORT9 varchar(100) "
            cSQL = cSQL & ", ORT10 varchar(100) "
            cSQL = cSQL & ", ORT11 varchar(100) "
            cSQL = cSQL & ", ORT12 varchar(100) "
            cSQL = cSQL & ", ORT13 varchar(100) "
            cSQL = cSQL & ", ORT14 varchar(100) "
            cSQL = cSQL & ", FarbeORT1 int "
            cSQL = cSQL & ", FarbeORT2 int "
            cSQL = cSQL & ", FarbeORT3 int "
            cSQL = cSQL & ", FarbeORT4 int "
            cSQL = cSQL & ", FarbeORT5 int "
            cSQL = cSQL & ", FarbeORT6 int "
            cSQL = cSQL & ", FarbeORT7 int "
            cSQL = cSQL & ", FarbeORT8 int "
            cSQL = cSQL & ", FarbeORT9 int "
            cSQL = cSQL & ", FarbeORT10 int "
            cSQL = cSQL & ", FarbeORT11 int "
            cSQL = cSQL & ", FarbeORT12 int "
            cSQL = cSQL & ", FarbeORT13 int "
            cSQL = cSQL & ", FarbeORT14 int "
            cSQL = cSQL & ", FarbeSORT1 int "
            cSQL = cSQL & ", FarbeSORT2 int "
            cSQL = cSQL & ", FarbeSORT3 int "
            cSQL = cSQL & ", FarbeSORT4 int "
            cSQL = cSQL & ", FarbeSORT5 int "
            cSQL = cSQL & ", FarbeSORT6 int "
            cSQL = cSQL & ", FarbeSORT7 int "
            cSQL = cSQL & ", FarbeSORT8 int "
            cSQL = cSQL & ", FarbeSORT9 int "
            cSQL = cSQL & ", FarbeSORT10 int "
            cSQL = cSQL & ", FarbeSORT11 int "
            cSQL = cSQL & ", FarbeSORT12 int "
            cSQL = cSQL & ", FarbeSORT13 int "
            cSQL = cSQL & ", FarbeSORT14 int "
            cSQL = cSQL & ", Datum varchar(16) "
            
            cSQL = cSQL & " ) "
    
        Case Is = "EKNULLART"
            cSQL = "Create Table EKNULLART ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LAGERP float "
            cSQL = cSQL & ", LINBEZ varchar(35) "
            cSQL = cSQL & ", MARKE varchar(35) "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & " )"
    
        
    
        Case Is = "DISPLAY_" & srechnertab
            cSQL = "Create Table DISPLAY_" & srechnertab
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Zeile1 varchar(50)  "
            cSQL = cSQL & ", Zeile2 varchar(50) "
            cSQL = cSQL & ", Zeile3 varchar(50)  "
            
            cSQL = cSQL & ", lfnr int"
            cSQL = cSQL & ", anzahl int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EPR varchar(10)"
            cSQL = cSQL & ", GPR varchar(10)"
            cSQL = cSQL & ", ZSUM varchar(10)"
            cSQL = cSQL & " ) "
    
        Case Is = "ART192"
            cSQL = "Create Table ART192 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", MDHDAT DATETIME "
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART213"
            cSQL = "Create Table ART213 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND_1 int "
            cSQL = cSQL & ", BESTAND_2 int "
            cSQL = cSQL & ", Differenz int "
            cSQL = cSQL & ", Status varchar(13) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART213PRINT"
            cSQL = "Create Table ART213PRINT "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND_1 int "
            cSQL = cSQL & ", BESTAND_2 int "
            cSQL = cSQL & ", Differenz int "
            cSQL = cSQL & ", Status varchar(13) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART214PRINT"
            cSQL = "Create Table ART214PRINT "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LEK_1 real "
            cSQL = cSQL & ", LEK_2 real "
            cSQL = cSQL & ", Differenz real "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", HS_1 real "
            cSQL = cSQL & ", HS_2 real "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", Status varchar(13) "
            cSQL = cSQL & " ) "
            
        Case Is = "ART214"
            cSQL = "Create Table ART214 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LEK_1 real "
            cSQL = cSQL & ", LEK_2 real "
            cSQL = cSQL & ", Differenz real "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", HS_1 real "
            cSQL = cSQL & ", HS_2 real "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", Status varchar(13) "
            
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", RKZ_1 varchar(1) "
            cSQL = cSQL & ", RKZ_2 varchar(1) "
            cSQL = cSQL & ", LASTVK DATETIME"
            cSQL = cSQL & " ) "
            
        Case Is = "VERKAUFNZU"
            cSQL = "Create Table VERKAUFNZU "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", LVKPR real "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", ZUGANGSMENGE int "
            cSQL = cSQL & ", VERKAUFSMENGE int "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", VERKAUFSPREIS real "
            cSQL = cSQL & ", NettoVERKAUFSPREIS real "
            cSQL = cSQL & ", ZUGANGSWERT real "
            cSQL = cSQL & " ) "
    
        Case Is = "ARTMDH"
            cSQL = "Create Table ARTMDH"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(10)"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", MDHDAT DATETIME "
            cSQL = cSQL & ", BEDNU smallint "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
    
        Case Is = "SORTMELINR"
            cSQL = "Create Table SORTMELINR "
            cSQL = cSQL & "( WGN int"
            cSQL = cSQL & ", WGNTEXT varchar(35) "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", EKPRakt real "
            cSQL = cSQL & ", NUMSakt real "
            cSQL = cSQL & ", UMSakt real "
            cSQL = cSQL & ", MENGakt real "
            cSQL = cSQL & ", EKPRvj real "
            cSQL = cSQL & ", UMSvj real "
            cSQL = cSQL & ", NUMSvj real "
            cSQL = cSQL & ", MENGvj real "
            cSQL = cSQL & ", NSP real "
            cSQL = cSQL & ", NSE real "
            cSQL = cSQL & ", NSPvj real "
            cSQL = cSQL & ", NSEvj real "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ", LAGERW real "
            
            cSQL = cSQL & ", nettoUmsVakt real "
            cSQL = cSQL & ", nettoUmsEakt real "
            cSQL = cSQL & ", nettoUmsOakt real "
            
            cSQL = cSQL & ", nettoUmsV real "
            cSQL = cSQL & ", nettoUmsE real "
            cSQL = cSQL & ", nettoUmsO real "
            
            cSQL = cSQL & ") "
    
        
    
        Case Is = "SORTMETLINR"
            cSQL = "Create Table SORTMETLINR "
            cSQL = cSQL & "( WGN int"
            cSQL = cSQL & ", WGNTEXT varchar(35) "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", EKPRakt real "
            cSQL = cSQL & ", NUMSakt real "
            cSQL = cSQL & ", UMSakt real "
            cSQL = cSQL & ", MENGakt real "
            cSQL = cSQL & ", NSP real "
            cSQL = cSQL & ", NSE real "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ", LAGERW real "
            
            cSQL = cSQL & ", nettoUmsVakt real "
            cSQL = cSQL & ", nettoUmsEakt real "
            cSQL = cSQL & ", nettoUmsOakt real "
            
            cSQL = cSQL & ") "
    
        Case "REWEZWEAN"
            cSQL = "Create Table REWEZWEAN"
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", EANTO varchar(13) "
            cSQL = cSQL & ") "
    
        Case "LASTFOCUS"
            cSQL = "Create Table LASTFOCUS"
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", TABNAME varchar(10) "
            cSQL = cSQL & ", SORTIERUNG varchar(50) "
            cSQL = cSQL & ") "
        Case "CORDER"
            cSQL = "Create Table CORDER"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LFNR float"
            cSQL = cSQL & ", DATNAME varchar(80) "
            cSQL = cSQL & ") "
        Case "LORDER"
            cSQL = "Create Table LORDER"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LFNR float"
            cSQL = cSQL & ", DATNAME varchar(50) "
            cSQL = cSQL & ") "
    
        Case "BUORDER"
            cSQL = "Create Table BUORDER"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LFNR float"
            cSQL = cSQL & ", DATNAME varchar(50) "
            cSQL = cSQL & ") "
        Case "RORDER"
            cSQL = "Create Table RORDER"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LFNR float"
            cSQL = cSQL & ", DATNAME varchar(50) "
            cSQL = cSQL & ") "
        Case "SORDER"
            cSQL = "Create Table SORDER"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LFNR float"
            cSQL = cSQL & ", DATNAME varchar(100) "
            cSQL = cSQL & ") "
    
        Case "STEUERKI"
            cSQL = "Create Table STEUERKI"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LFNR float"
            cSQL = cSQL & ", DATNAME varchar(10) "
            cSQL = cSQL & ", DATUM varchar(20) "
            cSQL = cSQL & ") "
    
        Case Is = "ARTEXCS"
            cSQL = "Create Table ARTEXCS ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", Rabattpreis real "
            cSQL = cSQL & ", Bruttopreis real "
            cSQL = cSQL & ", Nettopreis real "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", LINBEZ varchar(35)"
            cSQL = cSQL & ", geraeumt varchar(1)"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", AGNBEZ varchar(35)"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", PGNBEZ varchar(35)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", ARTBEZ varchar(100)"
            cSQL = cSQL & ", INTERBEZ varchar(100)"
            cSQL = cSQL & ", BESCHREIB ntext"
            cSQL = cSQL & ", SHOPKVK real "
            cSQL = cSQL & ", KATEGORIE1 varchar(50)"
            cSQL = cSQL & ", KATEGORIE2 varchar(50)"
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & " ) "
            
        Case Is = "IMPORTPRIBELA"
            cSQL = "Create Table IMPORTPRIBELA ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", LEKNEU float"
            cSQL = cSQL & ", LEKALT float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKMENGE float"
            cSQL = cSQL & ", VKDATUM DateTime"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", MINBEST float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LASTDATE DateTime"
            cSQL = cSQL & ", LASTTIME varchar(10)"
            cSQL = cSQL & ", AUFDAT DateTime"
            cSQL = cSQL & ", EXDAT DateTime"
            cSQL = cSQL & ", FARBNR varchar(20)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", AUFSCHLAG float"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & ", MNOTIZEN varchar(40)"
            cSQL = cSQL & ", KVKALT float"
            cSQL = cSQL & ", KVKNEU float"
            cSQL = cSQL & ", lfnr int"
            cSQL = cSQL & " ) "
        Case Is = "IMPORTPRILUENING"
            cSQL = "Create Table IMPORTPRILUENING ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", LEKNEU float"
            cSQL = cSQL & ", LEKALT float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKMENGE float"
            cSQL = cSQL & ", VKDATUM DateTime"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", MINBEST float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LASTDATE DateTime"
            cSQL = cSQL & ", LASTTIME varchar(10)"
            cSQL = cSQL & ", AUFDAT DateTime"
            cSQL = cSQL & ", EXDAT DateTime"
            cSQL = cSQL & ", FARBNR varchar(20)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", AUFSCHLAG float"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & ", MNOTIZEN varchar(40)"
            cSQL = cSQL & ", KVKALT float"
            cSQL = cSQL & ", KVKNEU float"
            cSQL = cSQL & ", lfnr int"
            cSQL = cSQL & " ) "
        Case Is = "IMPORTPRIREWE"
            cSQL = "Create Table IMPORTPRIREWE ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", LEKNEU float"
            cSQL = cSQL & ", LEKALT float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKMENGE float"
            cSQL = cSQL & ", VKDATUM DateTime"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", MINBEST float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LASTDATE DateTime"
            cSQL = cSQL & ", LASTTIME varchar(10)"
            cSQL = cSQL & ", AUFDAT DateTime"
            cSQL = cSQL & ", EXDAT DateTime"
            cSQL = cSQL & ", FARBNR varchar(20)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", AUFSCHLAG float"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & ", MNOTIZEN varchar(40)"
            cSQL = cSQL & ", KVKALT float"
            cSQL = cSQL & ", KVKNEU float"
            cSQL = cSQL & " ) "
    
        Case Is = "IMPORTPRIBUDNI"
            cSQL = "Create Table IMPORTPRIBUDNI ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", LEKNEU float"
            cSQL = cSQL & ", LEKALT float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", ETIMERK varchar(1)"
            cSQL = cSQL & ", MOPREIS float"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", BESTAND float"
            cSQL = cSQL & ", VKMENGE float"
            cSQL = cSQL & ", VKDATUM DateTime"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", MINBEST float"
            cSQL = cSQL & ", RABATT_OK varchar(1)"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", PREISSCHU varchar(1)"
            cSQL = cSQL & ", BONUS_OK varchar(1)"
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", LASTDATE DateTime"
            cSQL = cSQL & ", LASTTIME varchar(10)"
            cSQL = cSQL & ", AUFDAT DateTime"
            cSQL = cSQL & ", EXDAT DateTime"
            cSQL = cSQL & ", FARBNR varchar(20)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", SPANNE float"
            cSQL = cSQL & ", AUFSCHLAG float"
            cSQL = cSQL & ", SYNSTATUS varchar(1)"
            cSQL = cSQL & ", MNOTIZEN varchar(40)"
            cSQL = cSQL & ", KVKALT float"
            cSQL = cSQL & ", KVKNEU float"
            cSQL = cSQL & " ) "
    
    
        Case Is = "STADAPROREWE"
            cSQL = "Create Table STADAPROREWE "
            cSQL = cSQL & "("
            cSQL = cSQL & " Datum datetime "
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", Quelldat varchar(35) "
            cSQL = cSQL & ", AKT varchar(30) "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", libesnr varchar(13)"
            cSQL = cSQL & ", VKPR_ALT real"
            cSQL = cSQL & ", VKPR_NEW real"
            cSQL = cSQL & ", LEK_ALT real"
            cSQL = cSQL & ", LEK_NEW real"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & " ,EXDat datetime "
            cSQL = cSQL & ", AGTEXT varchar(30)"
            cSQL = cSQL & ", AGN int "
        
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ")"
            
        Case Is = "STADAPROBUDNI"
            cSQL = "Create Table STADAPROBUDNI "
            cSQL = cSQL & "("
            cSQL = cSQL & " Datum datetime "
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", Quelldat varchar(35) "
            cSQL = cSQL & ", AKT varchar(30) "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", libesnr varchar(13)"
            cSQL = cSQL & ", VKPR_ALT real"
            cSQL = cSQL & ", VKPR_NEW real"
            cSQL = cSQL & ", LEK_ALT real"
            cSQL = cSQL & ", LEK_NEW real"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & " ,EXDat datetime "
            cSQL = cSQL & ", AGTEXT varchar(30)"
            cSQL = cSQL & ", AGN int "
        
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ")"
            
        Case Is = "STADAPROLUENING"
            cSQL = "Create Table STADAPROLUENING "
            cSQL = cSQL & "("
            cSQL = cSQL & " Datum datetime "
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", Quelldat varchar(35) "
            cSQL = cSQL & ", AKT varchar(30) "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", libesnr varchar(13)"
            cSQL = cSQL & ", VKPR_ALT real"
            cSQL = cSQL & ", VKPR_NEW real"
            cSQL = cSQL & ", LEK_ALT real"
            cSQL = cSQL & ", LEK_NEW real"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & " ,EXDat datetime "
            cSQL = cSQL & ", AGTEXT varchar(30)"
            cSQL = cSQL & ", AGN int "
        
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ")"
            
        Case Is = "STADAPROBELA"
            cSQL = "Create Table STADAPROBELA "
            cSQL = cSQL & "("
            cSQL = cSQL & " Datum datetime "
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", Quelldat varchar(35) "
            cSQL = cSQL & ", AKT varchar(30) "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", libesnr varchar(13)"
            cSQL = cSQL & ", VKPR_ALT real"
            cSQL = cSQL & ", VKPR_NEW real"
            cSQL = cSQL & ", LEK_ALT real"
            cSQL = cSQL & ", LEK_NEW real"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & " ,EXDat datetime "
            cSQL = cSQL & ", AGTEXT varchar(30)"
            cSQL = cSQL & ", AGN int "
        
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ")"
            
        Case Is = "STADAPROSTRECKE"
            cSQL = "Create Table STADAPROSTRECKE "
            cSQL = cSQL & "("
            cSQL = cSQL & " Datum datetime "
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", Quelldat varchar(35) "
            cSQL = cSQL & ", AKT varchar(30) "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", libesnr varchar(13)"
            cSQL = cSQL & ", VKPR_ALT real"
            cSQL = cSQL & ", VKPR_NEW real"
            cSQL = cSQL & ", LEK_ALT real"
            cSQL = cSQL & ", LEK_NEW real"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & " ,EXDat datetime "
            cSQL = cSQL & ", AGTEXT varchar(30)"
            cSQL = cSQL & ", AGN int "
        
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ")"
    
        Case "REWE_AGN"
            cSQL = "Create Table REWE_AGN"
            cSQL = cSQL & "( "
            cSQL = cSQL & " RAGTEXT varchar(30)"
            cSQL = cSQL & ", RAGN int "
            cSQL = cSQL & ", FEHLT BIT "
            cSQL = cSQL & ") "
        Case "SICHERUNG"
            cSQL = "Create table SICHERUNG "
            cSQL = cSQL & "("
            cSQL = cSQL & " Lastdate Datetime "
            cSQL = cSQL & ")"
                
        Case "REWEWGR"
            cSQL = "Create Table REWEWGR"
            cSQL = cSQL & "( "
            cSQL = cSQL & " REWEWGRTEXT varchar(50)"
            cSQL = cSQL & ", Anzahl int "
            cSQL = cSQL & ", AKTGEW BIT "
            cSQL = cSQL & ") "
    
        Case Is = "IP_INV"
            cSQL = "Create Table IP_INV "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & ") "
            
        Case Is = "COSYS_INV"
            cSQL = "Create Table COSYS_INV "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ") "
            
        Case Is = "MDE_EXPORT_SCANPAL3"
            cSQL = "Create Table MDE_EXPORT_SCANPAL3 "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", SCANCODE varchar(14)"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            
            cSQL = cSQL & ", KUERZEL1 varchar(5) "
            cSQL = cSQL & ", LEKPR1 real "
            cSQL = cSQL & ", MINMEN1 int "
            cSQL = cSQL & ", LINR1 int "
            
            cSQL = cSQL & ", KUERZEL2 varchar(5) "
            cSQL = cSQL & ", LEKPR2 real "
            cSQL = cSQL & ", MINMEN2 int "
            cSQL = cSQL & ", LINR2 int "
            
            cSQL = cSQL & ", KUERZEL3 varchar(5) "
            cSQL = cSQL & ", LEKPR3 real "
            cSQL = cSQL & ", MINMEN3 int "
            cSQL = cSQL & ", LINR3 int "
            cSQL = cSQL & ") "
            
        Case Is = "MDE_EXPORT_SCANPAL"
            cSQL = "Create Table MDE_EXPORT_SCANPAL "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(40) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", VPE int "
            cSQL = cSQL & ", KUERZEL varchar(5) "
            cSQL = cSQL & ", DEL varchar(1) "
            cSQL = cSQL & ") "
            
        Case Is = "MDE_EXPORT_SCANPAL2"
            cSQL = "Create Table MDE_EXPORT_SCANPAL2 "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", SCANCODE varchar(14)"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            
            cSQL = cSQL & ", KUERZEL1 varchar(5) "
            cSQL = cSQL & ", LEKPR1 real "
            cSQL = cSQL & ", MINMEN1 int "
            cSQL = cSQL & ", LINR1 int "
            
            cSQL = cSQL & ", KUERZEL2 varchar(5) "
            cSQL = cSQL & ", LEKPR2 real "
            cSQL = cSQL & ", MINMEN2 int "
            cSQL = cSQL & ", LINR2 int "
            
            cSQL = cSQL & ", KUERZEL3 varchar(5) "
            cSQL = cSQL & ", LEKPR3 real "
            cSQL = cSQL & ", MINMEN3 int "
            cSQL = cSQL & ", LINR3 int "
            cSQL = cSQL & ") "
    
        Case Is = "MDE_EXPORT_REWE"
            cSQL = "Create Table MDE_EXPORT_REWE "
            cSQL = cSQL & "( "
            cSQL = cSQL & "  SCANCODE varchar(14)"
            cSQL = cSQL & ", BEZEICH varchar(40) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", VPE int "
            cSQL = cSQL & ") "
    
        Case Is = "BESTPDRU_KOPF" & srechnertab
            cSQL = "Create Table BESTPDRU_KOPF" & srechnertab & "( "
            cSQL = cSQL & " von varchar(10)  "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", AENGRUND varchar(50) ) "
    
        Case Is = "BESTPDRU_KOPF"
            cSQL = "Create Table BESTPDRU_KOPF ( "
            cSQL = cSQL & " von varchar(10)  "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", AENGRUND varchar(50) ) "
    
         Case Is = "BESTPDRU" & srechnertab
            cSQL = "Create Table BESTPDRU" & srechnertab & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", UMENGE smallint "
            cSQL = cSQL & ", NEWBEST int "
            cSQL = cSQL & ", OLDBEST int "
            cSQL = cSQL & ", Bediener int "
            cSQL = cSQL & ", SYNSTATUS varchar(1) "
            cSQL = cSQL & ", AENART varchar(20) "
            cSQL = cSQL & ", AENGRUND varchar(20) "
            cSQL = cSQL & ", Filiale tinyint "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", BEDNAME varchar(35) "
            
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", EKPR real "
            
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", MARKE varchar(20)"
            cSQL = cSQL & ", LINBEZ varchar(35)"
            cSQL = cSQL & " )"
    
        Case Is = "TERMERR"
            cSQL = "Create Table TERMERR "
            cSQL = cSQL & "( "
            cSQL = cSQL & " EAN varchar(13)"
            cSQL = cSQL & ", NAN varchar(13)"
            cSQL = cSQL & ", LIEFERANT varchar(50)"
            cSQL = cSQL & ", ARTIKELTEXT varchar(50)"
            cSQL = cSQL & ", VPE int"
            cSQL = cSQL & ", LVP float"
            cSQL = cSQL & ") "
            
           
    
        Case Is = "MDE_EXPORT"
            cSQL = "Create Table MDE_EXPORT "
            cSQL = cSQL & "( "
            cSQL = cSQL & " EAN varchar(13)"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ") "
    
        Case Is = "MDENO"
            cSQL = "Create Table MDENO "
            cSQL = cSQL & "( "
            cSQL = cSQL & " EAN varchar(13)"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", LFNR int"
            cSQL = cSQL & ", errart varchar(35)"
            
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", EAN2 varchar(13) "
            cSQL = cSQL & ", EAN3 varchar(13) "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            
            cSQL = cSQL & ") "
    
        
    
        Case Is = "KASSBED"
            cSQL = "Create Table KASSBED"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", Preis real"
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", EKPR real"
            
            cSQL = cSQL & ", ERTRAG real "
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & " ) "
        Case Is = "AKTIVI"
            cSQL = "Create Table AKTIVI"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", Preis real"
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", LEKPR real"
            cSQL = cSQL & ", ERTRAG real "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & " ) "
    
        Case Is = "MITNVK"
            cSQL = "Create table MITNVK"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " MengeNVK int "
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILNR int "
            cSQL = cSQL & ", Ertrag real "
            cSQL = cSQL & ", KassErtrag real "
            cSQL = cSQL & " ) "
            
        Case Is = "PRINVK"
            cSQL = "Create table PRINVK"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " MengeNVK int "
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", FILNR int "
            cSQL = cSQL & ", Ertrag real "
            cSQL = cSQL & ", KassErtrag real "
            cSQL = cSQL & ", Monat varchar(35) "
            cSQL = cSQL & " ) "
    
        Case Is = "NVKAUSW"
        
            cSQL = "Create Table NVKAUSW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", NOTIZEN varchar(50)"
            cSQL = cSQL & ", NEINART varchar(100)"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(8)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", ANZEI tinyint "
            cSQL = cSQL & ", lfnr int"
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & ", LEKPR real"
            cSQL = cSQL & ", ERTRAG real "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LINBEZEICH varchar(35)"
            cSQL = cSQL & ", Marke varchar(35)"
            cSQL = cSQL & ", Markekuerzel varchar(5)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", Bediener varchar(50) "
            cSQL = cSQL & ", Filauswahl varchar(50) "
            cSQL = cSQL & " ) "
    
        Case Is = "DRUCK133"
            cSQL = "Create Table DRUCK133"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", lfnr int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", NOTIZEN varchar(50)"
            cSQL = cSQL & ", NEINART varchar(100)"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(8)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", SENDOK BIT"
            cSQL = cSQL & ", LASTVK DATETIME"
            cSQL = cSQL & ", MB smallint "
            cSQL = cSQL & ", FARBE int "
            cSQL = cSQL & ", UW smallint "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND smallint "
            cSQL = cSQL & ", BESTANDO smallint "
            cSQL = cSQL & ", ANZEI tinyint "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", NEU varchar(1) "
            cSQL = cSQL & ", SPERR varchar(1) "
            cSQL = cSQL & ", BLOCK varchar(1) "
            cSQL = cSQL & ", ERSTDAT DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", Lagerp int "
            cSQL = cSQL & ", inBE smallint "
            cSQL = cSQL & " ) "
    
        Case Is = "KC" & srechnertab
            cSQL = "Create Table KC" & srechnertab
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", lfnr int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", NOTIZEN varchar(50)"
            cSQL = cSQL & ", NEINART varchar(100)"
            cSQL = cSQL & ", MENGE smallint"
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(8)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", bednu smallint"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", SENDOK BIT"
            
            cSQL = cSQL & ", LASTVK DATETIME"
            cSQL = cSQL & ", MB smallint "
            cSQL = cSQL & ", FARBE int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", UW smallint "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND smallint "
            cSQL = cSQL & ", BESTANDO smallint "
            cSQL = cSQL & ", ANZEI tinyint "
            
            cSQL = cSQL & ", NEU varchar(1) "
            cSQL = cSQL & ", SPERR varchar(1) "
            cSQL = cSQL & ", BLOCK varchar(1) "
            cSQL = cSQL & ", ERSTDAT DATETIME "
            
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", Lagerp int "
            cSQL = cSQL & ", inBE smallint "
            cSQL = cSQL & " ) "
    
        Case Is = "TABCODE"
            cSQL = "Create Table TABCODE "
            cSQL = cSQL & "( STELLE_ZIFFER1 tinyint"
            cSQL = cSQL & ", A_1 varchar(1)"
            cSQL = cSQL & ", A_2 varchar(1)"
            cSQL = cSQL & ", A_3 varchar(1)"
            cSQL = cSQL & ", A_4 varchar(1)"
            cSQL = cSQL & ", A_5 varchar(1)"
            cSQL = cSQL & ", A_6 varchar(1)"
            cSQL = cSQL & ", A_7 varchar(1)"
            cSQL = cSQL & ", A_8 varchar(1)"
            cSQL = cSQL & ", A_9 varchar(1)"
            cSQL = cSQL & ", A_0 varchar(1)"
            cSQL = cSQL & ") "
    
        Case Is = "ETIDRULS"
            cSQL = "Create Table ETIDRULS "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", WEDate DATETIME"
            cSQL = cSQL & ", LS varchar(20)"
            cSQL = cSQL & ") "
    
        Case Is = "TERMDEL"
            cSQL = "Create Table TERMDEL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", BED smallint"
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", GRUND ntext"
            cSQL = cSQL & ", ERSTBED smallint"
            cSQL = cSQL & ", DAUER float "
            cSQL = cSQL & ", BEGINDAT DATETIME"
            cSQL = cSQL & ", BEGINZEIT varchar(8) "
            cSQL = cSQL & " ) "
    
        Case Is = "MAILFB"
            cSQL = "Create Table MAILFB"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", BEDNU smallint"
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", EMAIL varchar(50)"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
    
        Case Is = "ETISIC"
            cSQL = "Create Table ETISIC "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", Pcname varchar(30)"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", DelPcname varchar(30)"
            cSQL = cSQL & ", DelDATE DATETIME "
            cSQL = cSQL & ", DelTIME varchar(10) "
            cSQL = cSQL & " ) "
    
        Case Is = "RE_EXPORT"
            cSQL = "Create Table RE_EXPORT "
            cSQL = cSQL & "("
            cSQL = cSQL & " SCHLUESSEL varchar(15)"
            cSQL = cSQL & ", KUNDNR float"
            cSQL = cSQL & ", KDNAME1 varchar(71)"
            cSQL = cSQL & ", KDNAME2 varchar(71)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", RENR varchar(15)"
            cSQL = cSQL & ", REDATUM Datetime"
            cSQL = cSQL & ", RESUMME float"
            cSQL = cSQL & " ) "
    
        Case Is = "GRUPPE_ARTIKEL"
            cSQL = "Create Table GRUPPE_ARTIKEL ( "
            cSQL = cSQL & " GRUPPENNR int"
            cSQL = cSQL & " ,ARTNR int"
            cSQL = cSQL & " ) "
    
        Case Is = "GRUPPE"
            cSQL = "Create Table GRUPPE ( "
            cSQL = cSQL & " GRUPPENNR int"
            cSQL = cSQL & ", GRUPPENBEZ varchar(35) "
            cSQL = cSQL & " ) "
    
        Case Is = "TEXTIL"
            cSQL = "Create Table TEXTIL ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", MODELL varchar(35) "
            cSQL = cSQL & ", MATERIAL varchar(35) "
            cSQL = cSQL & ", FARBBEZ varchar(35) "
            cSQL = cSQL & " ) "
    
        Case Is = "LINBEZPRINT"
            cSQL = "Create Table LINBEZPRINT "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LINBEZEICH varchar(30)"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", MARKER varchar(1) "
            cSQL = cSQL & ", KUERZEL varchar(5) "
            cSQL = cSQL & ", MARKE varchar(20) "
            cSQL = cSQL & ", SORTI smallint" 'neu
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & " ) "
        Case Is = "ZVTOPT2"
            cSQL = "Create Table ZVTOPT2 "
            cSQL = cSQL & "("
            cSQL = cSQL & " IP varchar(15) "
            cSQL = cSQL & ", LIZENZ varchar(40) "
            cSQL = cSQL & ", PORT varchar(6) "
            cSQL = cSQL & ", KBDRUCKEN BIT "
            cSQL = cSQL & ", Kartenwahl BIT "
            
            cSQL = cSQL & ", HBDRUCKEN BIT "
            cSQL = cSQL & ", TIMEOUT int "
            cSQL = cSQL & ", VIRTUELLEID varchar(50) "
            cSQL = cSQL & " )"
            
            
            
            
        
        
        Case Is = "ZVTOPT"
            cSQL = "Create Table ZVTOPT "
            cSQL = cSQL & "("
            cSQL = cSQL & " CLIENTID varchar(3) "
            cSQL = cSQL & ", IOPFAD varchar(200) "
            cSQL = cSQL & ", DRUCKVAR varchar(1) "
            cSQL = cSQL & ", PNAME varchar(30) "
            cSQL = cSQL & ", PTITEL varchar(30) "
            cSQL = cSQL & ", TIMEOUT varchar(3) "
            cSQL = cSQL & " )"
        Case Is = "ELPOPT"
            cSQL = "Create Table ELPOPT "
            cSQL = cSQL & "("
            cSQL = cSQL & " CLIENTID varchar(3) "
            cSQL = cSQL & ", IOPFAD varchar(200) "
            cSQL = cSQL & " )"
    
        Case Is = "BWINV"
            cSQL = "Create table BWINV ( "
            cSQL = cSQL & "  ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", EAN2 varchar(13) "
            cSQL = cSQL & ", EAN3 varchar(13) "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ")"
    
        Case Is = srechnertab & "ATO_MDE"
        
            cSQL = "Create Table " & srechnertab & "ATO_MDE"
            cSQL = cSQL & " ( ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", EAN2 varchar(13) "
            cSQL = cSQL & ", EAN3 varchar(13) "
            cSQL = cSQL & ", lfnr Int IDENTITY "
            cSQL = cSQL & ")"
    
        Case Is = "ARTEAN3"
            cSQL = "Create Table ARTEAN3 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", EAN3 varchar(13) "
            cSQL = cSQL & " ) "
    
        Case Is = "ARTEAN2"
            cSQL = "Create Table ARTEAN2 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", EAN2 varchar(13) "
            cSQL = cSQL & " ) "
    
        Case Is = "RETOURKB"
            cSQL = "Create table RETOURKB "
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", SEK float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR int"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", BESTANDN int"
            cSQL = cSQL & ", FILIALE tinyint"
            cSQL = cSQL & ", Status varchar(30)"
            cSQL = cSQL & ", lfnr Int IDENTITY  "
            cSQL = cSQL & " ) "
    
        
    
        Case Is = "KUMSUM"
            cSQL = "Create Table KUMSUM (SORT tinyint)"
    
         Case Is = "ZOLL"
            cSQL = "Create Table ZOLL "
            cSQL = cSQL & "("
            cSQL = cSQL & " FIRM_NAME varchar(50)"
            cSQL = cSQL & ", FIRM_PLZORT varchar(100)"
            cSQL = cSQL & ", FIRM_STRASSE varchar(50)"
            
            cSQL = cSQL & ", KU_kundnr int "
            cSQL = cSQL & ", KU_NameGesamt varchar(100) "
            cSQL = cSQL & ", KU_PlzOrt varchar(50) "
            cSQL = cSQL & ", KU_strasse varchar(35) "
            cSQL = cSQL & ", KU_Land varchar(50) "
            cSQL = cSQL & ", ZOLL_EURO varchar(10) "
            cSQL = cSQL & ", ZOLL_CENT varchar(2) "
            cSQL = cSQL & ", EURO_Wort varchar(100) "
            cSQL = cSQL & ", BELEG_Ort varchar(50) "
            cSQL = cSQL & ", BELEG_DATUM varchar(10) "
            
            cSQL = cSQL & ", MWST_E varchar(10) "
            cSQL = cSQL & ", MWST_V varchar(10) "
            cSQL = cSQL & ", MWST_SATZ_E varchar(10) "
            cSQL = cSQL & ", MWST_SATZ_V varchar(10) "
            cSQL = cSQL & ", BELEG_NR varchar(10) "
            cSQL = cSQL & ", BELEG_ArtBez varchar(50) "
            cSQL = cSQL & ") "
    
        Case Is = "KOPFRET"
            cSQL = "Create Table KOPFRET ( "
            cSQL = cSQL & " MOPREIS varchar(10)  "
            cSQL = cSQL & ", von varchar(10)  "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", FILIALE varchar(50) ) "
    
        Case Is = "VKPRO4"
            cSQL = "Create Table VKPRO4 "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & ", ADATE Datetime"
            cSQL = cSQL & ", AZEIT varchar(8)"
            cSQL = cSQL & ", BEDIENER int"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", FILIALE smallint"
            cSQL = cSQL & ", KASNUM tinyint"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", LEKPR real"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MOPPREIS real"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", IN_BESTELL smallint"
            cSQL = cSQL & ", BEST1 smallint"
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ") "
    
        Case Is = "BONUSAA"
            cSQL = "Create Table BONUSAA"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & " ) "
        Case Is = "BONUSNRE"
            cSQL = "Create Table BONUSNRE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & " ) "
        Case Is = "ABOPLUS"
            cSQL = "Create Table ABOPLUS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & " ,PFNR int "
            cSQL = cSQL & " ) "
            
        Case Is = "PLZGEBIET"
            cSQL = "Create Table PLZGEBIET"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " PLZ varchar(7)"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", GELDWERT real"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "PLZPRINT"
            cSQL = "Create Table PLZPRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " PLZ varchar(20)"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", GELDWERT real"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "APPRINT"
            cSQL = "Create Table APPRINT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " GELDWERT float"
            cSQL = cSQL & ", BELEGNR smallint"
            cSQL = cSQL & ", ABOPLUSKARTE varchar(13)"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", PFNR int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case Is = "ABOPLUS_UMS"
            cSQL = "Create Table ABOPLUS_UMS"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " GELDWERT float"
            cSQL = cSQL & ", BELEGNR smallint"
            cSQL = cSQL & ", ABOPLUSKARTE varchar(13)"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", PFNR int"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        
        Case Is = "ZEITAEA"
            cSQL = "Create Table ZEITAEA ( "
            cSQL = cSQL & " TAG varchar(10) "
            cSQL = cSQL & ", ZEIT varchar(8) "
            cSQL = cSQL & ", ART varchar(20) "
            cSQL = cSQL & " )"
            
        Case Is = "TAGAEA"
            cSQL = "Create Table TAGAEA ( "
            cSQL = cSQL & " TAG varchar(10) "
            cSQL = cSQL & ", ART varchar(20) "
            cSQL = cSQL & " )"
            
        Case Is = "REKOPF"
            cSQL = "Create Table REKOPF "
            cSQL = cSQL & "("
            cSQL = cSQL & " SCHLUESSEL varchar(15)"
            cSQL = cSQL & ", KUNDNR float"
            cSQL = cSQL & ", ANREDE varchar(35)"
            cSQL = cSQL & ", KDNAME1 varchar(71)"
            cSQL = cSQL & ", KDNAME2 varchar(71)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", RENR varchar(15)"
            cSQL = cSQL & ", REDATUM Datetime"
            cSQL = cSQL & ", RETEXT varchar(100)"
            cSQL = cSQL & ", RESUMME float"
            cSQL = cSQL & ", STATUS varchar(1)"
            cSQL = cSQL & ", PORTOVERP float"
            cSQL = cSQL & ", KOMMENTAR varchar(250)"
            cSQL = cSQL & ", PREISKZ varchar(1)"
            
            cSQL = cSQL & ", IHR_ZEICHEN varchar(30)"
            cSQL = cSQL & ", ERSTELLT_VON varchar(30)"
            cSQL = cSQL & ", ZAHLUNGS_ZIEL varchar(250)"
            cSQL = cSQL & ", SPEZIALSATZ varchar(250)"
            
            cSQL = cSQL & " )"
    
        Case Is = "OFPO"
            cSQL = "Create Table OFPO "
            cSQL = cSQL & "("
            cSQL = cSQL & " SCHLUESSEL varchar(15)"
            cSQL = cSQL & ", KUNDNR float"
            cSQL = cSQL & ", ANREDE varchar(35)"
            cSQL = cSQL & ", KDNAME1 varchar(71)"
            cSQL = cSQL & ", KDNAME2 varchar(71)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", ORT varchar(35)"
            cSQL = cSQL & ", RENR varchar(15)"
            cSQL = cSQL & ", REDATUM Datetime"
            cSQL = cSQL & ", RETEXT varchar(100)"
            cSQL = cSQL & ", RESUMME float"
            cSQL = cSQL & ", STATUS varchar(1)"
            cSQL = cSQL & ", PORTOVERP float"
            cSQL = cSQL & ", KOMMENTAR varchar(250)"
            cSQL = cSQL & ", PREISKZ varchar(1)"
            
            cSQL = cSQL & ", STATUSBEZ varchar(15)"
            cSQL = cSQL & ", ZAHLUNGSZIEL Datetime"
            cSQL = cSQL & ", ZAHLUNGSINFO varchar(35)"
            cSQL = cSQL & ", UEBERSCHREITUNG varchar(35)"
            
            cSQL = cSQL & ", IHR_ZEICHEN varchar(30)"
            cSQL = cSQL & ", ERSTELLT_VON varchar(30)"
            cSQL = cSQL & ", ZAHLUNGS_ZIEL varchar(250)"
            cSQL = cSQL & ", SPEZIALSATZ varchar(250)"
            
            cSQL = cSQL & " ) "
            
        Case Is = "BOSSE"
            cSQL = "Create Table BOSSE "
            cSQL = cSQL & "("
            cSQL = cSQL & " BOSSPfad varchar(200)"
            cSQL = cSQL & ", BOSSLINR float"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
    
        Case Is = "GERRYE"
            cSQL = "Create Table GERRYE "
            cSQL = cSQL & "("
            cSQL = cSQL & " GERRYPfad varchar(200)"
            cSQL = cSQL & ", GERRYLINR float"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
    
        Case Is = "PASSPORTE"
            cSQL = "Create Table PASSPORTE "
            
            cSQL = cSQL & "("
            cSQL = cSQL & " PassPfad varchar(200)"
            cSQL = cSQL & ", PASSLINR float"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
    
        Case Is = "TEXTILE"
            cSQL = "Create Table TEXTILE "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEXTILPfad varchar(200)"
            cSQL = cSQL & ", TEXTILLINR float"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
    
        Case "UNTERW"
            cSQL = "Create Table UNTERW"
            cSQL = cSQL & "( ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR float"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", FilVon tinyint"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", BESTiF int "
            cSQL = cSQL & ", OPENART varchar(20)"
            cSQL = cSQL & ", AENART varchar(40) "
            cSQL = cSQL & ", Pcname varchar(30)"
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", TRANSPACK float "
            
            cSQL = cSQL & ", KUNDNR int"
            
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            
            cSQL = cSQL & ", UDATE DATETIME "
            cSQL = cSQL & ", UZEIT varchar(8) "
            cSQL = cSQL & ", UBEDNU int "
            
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ") "
            
        Case Is = "SEKNULL"
            cSQL = "Create Table SEKNULL ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & " )"
    
        Case Is = "KPPRINT"
            cSQL = "Create Table KPPRINT "
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", FARBE varchar(2)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", STATUSARTIKEL varchar(35)"
            cSQL = cSQL & ", STATUSKUNDE varchar(35)"
            cSQL = cSQL & ", BESTELLTAM DATETIME "
            cSQL = cSQL & ", BESTELLTUM varchar(10) "
            cSQL = cSQL & ", BESTELLTPREIS real "
            cSQL = cSQL & ", BESTELLTMENGE smallint "
            cSQL = cSQL & ", GELIEFERTAM DATETIME "
            cSQL = cSQL & ", TRANSPACK float "
            cSQL = cSQL & ", ART varchar(30)"
            cSQL = cSQL & ", KDNAME varchar(35)"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", MBBLOCK BIT "
            cSQL = cSQL & ") "
        Case "PRINTFILZ"
            cSQL = "Create Table PRINTFILZ"
            cSQL = cSQL & "( ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR float"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", FilVon tinyint"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", BESTiF int "
            cSQL = cSQL & ", OPENART varchar(20)"
            cSQL = cSQL & ", AENART varchar(40) "
            cSQL = cSQL & ", Pcname varchar(30)"
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", TRANSPACK float "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", BARCODE varchar(11)"
            cSQL = cSQL & ", DATNAME varchar(12)"
            cSQL = cSQL & ") "
        Case Is = "KP" & srechnertab
            cSQL = "Create Table KP" & srechnertab
            cSQL = cSQL & "("
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", FARBE varchar(2)"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", STATUSARTIKEL varchar(35)"
            cSQL = cSQL & ", STATUSKUNDE varchar(35)"
            cSQL = cSQL & ", BESTELLTAM DATETIME "
            cSQL = cSQL & ", BESTELLTUM varchar(10) "
            cSQL = cSQL & ", BESTELLTPREIS real "
            cSQL = cSQL & ", BESTELLTMENGE smallint "
            cSQL = cSQL & ", GELIEFERTAM DATETIME "
            cSQL = cSQL & ", TRANSPACK float "
            cSQL = cSQL & ", MBBLOCK BIT "
            cSQL = cSQL & ") "
        Case "KBLATT"
            cSQL = "Create Table KBLATT "
            cSQL = cSQL & "("
            cSQL = cSQL & " TRANSPACK float "
            cSQL = cSQL & ", lfnr int "
            cSQL = cSQL & ", Filiale int"
            cSQL = cSQL & ", FilVon int"
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & ", BARCODE varchar(11)"
            cSQL = cSQL & ", DATNAME varchar(12)"
            cSQL = cSQL & ", TOURNR int "
            cSQL = cSQL & ", TOURBEZ varchar(35) "
            cSQL = cSQL & ", TOURBEM ntext "
            cSQL = cSQL & ") "
        Case "FILZ"
            cSQL = "Create Table FILZ"
            cSQL = cSQL & "( ARTNR float"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", BESTVOR float"
            cSQL = cSQL & ", Filiale tinyint"
            cSQL = cSQL & ", FilVon tinyint"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", BEDNU int "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", BESTiF int "
            cSQL = cSQL & ", OPENART varchar(20)"
            cSQL = cSQL & ", AENART varchar(40) "
            cSQL = cSQL & ", Pcname varchar(30)"
            cSQL = cSQL & ", BEDNAME varchar(35) "
            cSQL = cSQL & ", TRANSPACK float "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ") "
        Case Is = "WLFNR"
            cSQL = "Create Table WLFNR "
            cSQL = cSQL & "( "
            cSQL = cSQL & " lfnr int "
            cSQL = cSQL & ", Datum DateTime "
            cSQL = cSQL & ", Zeit varchar(10) "
            cSQL = cSQL & ", Filiale int "
            cSQL = cSQL & ", TRANSPACK float "
            cSQL = cSQL & ") "
        Case Is = "TRANS"
            cSQL = "Create Table TRANS "
            cSQL = cSQL & "( "
            cSQL = cSQL & " TRANSPACK float "
            cSQL = cSQL & ") "
        Case Is = "MERKE43LINR"
            cSQL = "Create Table MERKE43LINR ( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", MERKELINR int "
            cSQL = cSQL & " ) "
        Case Is = "TAUZ"
            cSQL = "Create Table TAUZ ( "
            cSQL = cSQL & " SENDOK BIT"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(10) "
            cSQL = cSQL & ", MENGE float "
            cSQL = cSQL & ", ARTNR float "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", FIL_VON float "
            cSQL = cSQL & ", FIL_AN float "
            cSQL = cSQL & ", KASNUM float "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", VKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & " ) "
        Case Is = "EAL"
            cSQL = "Create Table EAL"
            cSQL = cSQL & "("
            cSQL = cSQL & " Bo0 bit"
            cSQL = cSQL & ")"
        Case Is = "E163"
            cSQL = "Create Table E163"
            cSQL = cSQL & "("
            cSQL = cSQL & " Bo0 bit"
            cSQL = cSQL & ", Bo1 bit"
            cSQL = cSQL & ", Bo2 bit"
            cSQL = cSQL & ", Bo3 bit"
            cSQL = cSQL & ", VERSAND varchar(15) "
            cSQL = cSQL & ", SWARNTEXT varchar(100) "
            cSQL = cSQL & ", Shopart smallint "
            cSQL = cSQL & ")"
    
        Case Is = "LIEFKURZ"
            cSQL = "Create Table LIEFKURZ (  "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", KUERZEL varchar(5) "
            cSQL = cSQL & " ) "
        Case Is = "LIBRI"
            cSQL = "Create Table LIBRI (  "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", lfNr int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", NOTIZEN varchar(40)"
            cSQL = cSQL & ", Produktart varchar(50)"
            cSQL = cSQL & ", Produktkuerzel varchar(50)"
            cSQL = cSQL & ", Produktnr varchar(13)"
            cSQL = cSQL & " ) "
    
        Case Is = "LIBRIE"
            cSQL = "Create Table LIBRIE "
            
            cSQL = cSQL & "("
            cSQL = cSQL & " LibPfad varchar(200)"
            cSQL = cSQL & ", libLINR int "
            cSQL = cSQL & " )"
    
        Case Is = "AFCDL"
            cSQL = "Create Table AFCDL "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", AArtnr int"
            cSQL = cSQL & ", ABEZEICH varchar(35)"
            cSQL = cSQL & ", AMenge float"
            cSQL = cSQL & ", Apreis float"
            cSQL = cSQL & ", bestand int"
            cSQL = cSQL & ", FIRMAORT varchar(35)"
            cSQL = cSQL & ") "
    
        Case Is = "TAKOLLKASS"
            cSQL = "Create Table TAKOLLKASS "
            cSQL = cSQL & "("
            cSQL = cSQL & " LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", AArtnr int"
            cSQL = cSQL & ", ABEZEICH varchar(35)"
            cSQL = cSQL & ", Menge float"
            cSQL = cSQL & ", Apreis float"
            cSQL = cSQL & ", bestand int"
            
            cSQL = cSQL & ") "
        Case Is = "REFUSS"
            cSQL = "Create Table REFUSS "
            cSQL = cSQL & "("
            cSQL = cSQL & " STEUERNR varchar(35)"
            cSQL = cSQL & ", FIRMNAME varchar(50)"
            cSQL = cSQL & ", FIRMADRESS varchar(110)"
            cSQL = cSQL & ", FIRMBANK varchar(200)"
            cSQL = cSQL & ", FIRMKOMM varchar(100)"
            cSQL = cSQL & ") "
    
        Case Is = "ARTANZ" & srechnertab
            cSQL = "Create table ARTANZ" & srechnertab
            cSQL = cSQL & "( "
            cSQL = cSQL & " MENGE int "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", KUNAME varchar(50)"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", ADATE Datetime "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", QTAB varchar(20) "
            cSQL = cSQL & ")"
    
        Case Is = "BWINVI"
            cSQL = "Create table BWINVI ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINBEZ varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", SEKWERT real "
            cSQL = cSQL & ", LEKWERT real "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", EAN2 varchar(13) "
            cSQL = cSQL & ", EAN3 varchar(13) "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ")"
    
        Case Is = srechnertab & "ATI"
        
            cSQL = "Create Table " & srechnertab & "ATI"
            cSQL = cSQL & " ( ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", EAN2 varchar(13) "
            cSQL = cSQL & ", EAN3 varchar(13) "
            
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", SEKWERT real "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", LEKWERT real "
            cSQL = cSQL & ", lfnr Int IDENTITY "
            cSQL = cSQL & ")"
    
        Case Is = "NEGERTRAGK"
            cSQL = "Create Table NEGERTRAGK ( "
            cSQL = cSQL & "Datum varchar(35) "
            cSQL = cSQL & " )"
    
        Case Is = "NEGERTRAG"
            cSQL = "Create Table NEGERTRAG ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", sumMENGE smallint "
            cSQL = cSQL & ", sumPreis real "
            cSQL = cSQL & ", NUMSATZ real "
            cSQL = cSQL & ", ERTRAG real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", KASNUM tinyint "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", PGN smallint "
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", KK_ART varchar(2)"
            cSQL = cSQL & ", BEDIENER smallint "
            cSQL = cSQL & ", UMS_OK varchar(1)"
            cSQL = cSQL & " ) "
            
        Case Is = "NEGERTRAGPR"
            cSQL = "Create Table NEGERTRAGPR ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", Preis real "
            cSQL = cSQL & ", sumNUMSATZ real "
            cSQL = cSQL & ", sumERTRAG real "
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", PGN smallint "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", BEST1 smallint "
            cSQL = cSQL & ", RABKENN varchar(1)"
            cSQL = cSQL & ", Liefbez varchar(50) "
            
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & " ) "
    
        Case Is = "KISSE"
        
            cSQL = "Create Table KISSE "
            cSQL = cSQL & "("
            cSQL = cSQL & " KISSPfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
    
        Case Is = "KUNDENSTAN"
            cSQL = "Create Table KUNDENSTAN "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & " ) "
            
        Case Is = "KUNDENPLUS"
            cSQL = "Create Table KUNDENPLUS "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & " ) "
    
        Case "LIEFBLATT"
            cSQL = "Create Table LIEFBLATT"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(30)"
            cSQL = cSQL & ", STRASSE varchar(30)"
            cSQL = cSQL & ", TEL varchar(30)"
            cSQL = cSQL & ", FAX varchar(30)"
            cSQL = cSQL & ", KUNDNR varchar(15) "
            cSQL = cSQL & ", NOTIZ ntext "
            cSQL = cSQL & ", AWERT float"
            cSQL = cSQL & ", KTEXT varchar(50)"
            cSQL = cSQL & ", HL BIT"
            cSQL = cSQL & ", ZIELEK real"
            cSQL = cSQL & ", EMAIL varchar(100)"
            cSQL = cSQL & ") "
    
        Case Is = "DISPLAYTEXT"
            cSQL = "Create Table DISPLAYTEXT "
            cSQL = cSQL & "( MORGENTEXT varchar(20)"
            cSQL = cSQL & ", MITTAGTEXT varchar(20)"
            cSQL = cSQL & ", ABENDTEXT varchar(20)"
            cSQL = cSQL & " ) "
    
        Case Is = "KILOVK"
            cSQL = "Create Table KILOVK "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", Bezeich varchar(35)"
            cSQL = cSQL & ", GewichtKG float"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", GEWICHTKGIST float "
            cSQL = cSQL & ", von varchar(10)"
            cSQL = cSQL & ", bis varchar(10)"
            cSQL = cSQL & " ) "
    
        Case Is = "KILOTMP"
            cSQL = "Create Table KILOTMP "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", Bezeich varchar(35)"
            cSQL = cSQL & ", GewichtKG float"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & " ) "
    
        Case Is = "KILOJOUR"
            cSQL = "Create Table KILOJOUR "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", Bezeich varchar(35)"
            cSQL = cSQL & ", GewichtKG float"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & " ) "
    
        Case Is = "KILOART"
            cSQL = "Create Table KILOART "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", GewichtKG float"
            cSQL = cSQL & " ) "
    
        Case Is = "LAGPENN"
            cSQL = "Create Table LAGPENN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", PENNSEK real "
            cSQL = cSQL & ", LAGSEK real "
            cSQL = cSQL & ", LAGBEST int "
            cSQL = cSQL & ", UMSATZWERT real "
            cSQL = cSQL & ", UMSATZEKWERT real "
            cSQL = cSQL & ", EKUMSATZWERT real "
            cSQL = cSQL & " ) "
            
        Case Is = "TERMINEKU"
            cSQL = "Create Table TERMINEKU "
            cSQL = cSQL & "("
            cSQL = cSQL & " BETREFF varchar(255)"
            cSQL = cSQL & ", BEGINNTAM varchar(255)"
            cSQL = cSQL & ", BEGINNTUM varchar(255)"
            cSQL = cSQL & ", ENDETAM varchar(255)"
            cSQL = cSQL & ", ENDETUM varchar(255)"
            cSQL = cSQL & ", BESCHREIBUNG ntext"
            cSQL = cSQL & ", ORT varchar(255)"
            cSQL = cSQL & ", ZEITSPANNEZEIGENALS smallint"
            cSQL = cSQL & ") "
            
        Case Is = "KONTAKTE"
            cSQL = "Create Table KONTAKTE "
            cSQL = cSQL & "("
            cSQL = cSQL & " Anrede varchar(60)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", NACHNAME varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            cSQL = cSQL & ", STRAßEPRIVAT varchar(35)"
            cSQL = cSQL & ", ORTPRIVAT varchar(35)"
            cSQL = cSQL & ", POSTLEITZAHLPRIVAT varchar(7)"
            cSQL = cSQL & ", TELEFONPRIVAT varchar(35)"
            cSQL = cSQL & ", FAXPRIVAT varchar(35)"
            cSQL = cSQL & ", MOBILTELEFON varchar(35)"
            cSQL = cSQL & ", [E-MAIL] varchar(50)"
'            cSQL = cSQL & ", EMAILANGEZEIGTERNAME2 varchar(50)"
            cSQL = cSQL & ", GEBURTSTAG varchar(10)"
            cSQL = cSQL & ", GESCHLECHT varchar(1)"
            cSQL = cSQL & ", PRIORITÄT varchar(10)"
            cSQL = cSQL & ", VERTRAULICHKEIT varchar(10)"
            cSQL = cSQL & ", POSITION varchar(10)"
            cSQL = cSQL & ", PRIVAT BIT"
            cSQL = cSQL & ") "
        Case Is = "KUANT"
            cSQL = "Create Table KUANT ( "
            cSQL = cSQL & " adate DATETIME"
            cSQL = cSQL & ", BELEGNR smallint"
            cSQL = cSQL & " )"
        Case Is = "MLINBEZ"
            cSQL = "Create Table MLINBEZ "
            cSQL = cSQL & "( LINR int"
            cSQL = cSQL & ", LINBEZEICH varchar(30)"
            cSQL = cSQL & ", LPZ smallint"
            cSQL = cSQL & ", MARKER varchar(1) "
            cSQL = cSQL & ", KUERZEL varchar(5) "
            cSQL = cSQL & ", MARKE varchar(20) "
            cSQL = cSQL & ", SORTI smallint"
            cSQL = cSQL & " ) "
        Case Is = "MLISRT"
            cSQL = "Create Table MLISRT ("
            cSQL = cSQL & " LINR float"
            cSQL = cSQL & ", LIEFBEZ varchar(30)"
            cSQL = cSQL & ", STRASSE varchar(30)"
            cSQL = cSQL & ", PLZ varchar(7) "
            cSQL = cSQL & ", STADT varchar(30)"
            cSQL = cSQL & ", TEL varchar(30)"
            cSQL = cSQL & ", LINAME varchar(30)"
            cSQL = cSQL & ", FAX varchar(30)"
            cSQL = cSQL & " ) "
        Case Is = "MASTER"
            cSQL = "Create Table MASTER ("
            cSQL = cSQL & " ARTNR float"
            cSQL = cSQL & ", Bezeich varchar(35)"
            cSQL = cSQL & ", LPZ float"
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", AGN float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", MINMEN float"
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", AWM varchar(2) "
            cSQL = cSQL & ", LINR float"
            cSQL = cSQL & ", FLAG varchar(1) "
            cSQL = cSQL & ", LINAME varchar(30)"
            cSQL = cSQL & ", NOTIZEN varchar(25)"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", GRUNDPREIS varchar(1)"
            cSQL = cSQL & ", PGN float"
            cSQL = cSQL & " )"
            
        Case Is = "VKRAB"
            cSQL = "Create Table VKRAB ( "
            cSQL = cSQL & " MENGE int "
            cSQL = cSQL & ", Preis real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", MOPREIS real "
            cSQL = cSQL & ", RabattEuro real "
            cSQL = cSQL & ", RabattProz real "
            cSQL = cSQL & ", SollUmsatz real "
            cSQL = cSQL & " )"
            
        Case Is = "VKRABANT"
            cSQL = "Create Table VKRABANT ( "
            cSQL = cSQL & " Anteil real "
            cSQL = cSQL & ", RabattProz real "
            cSQL = cSQL & ", RabattEuroSUM real "
            cSQL = cSQL & ", SollUmsatzSUM real "
            cSQL = cSQL & " )"
            
        Case Is = "E24"
            cSQL = "Create Table E24 "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & " )"
            
        Case Is = "E30"
            cSQL = "Create Table E30 "
            cSQL = cSQL & "("
            cSQL = cSQL & " LIEF_1 int"
            cSQL = cSQL & ", LIEF_2 int"
            cSQL = cSQL & ", LIEF_3 int"
            cSQL = cSQL & ", VKTAGE int"
            cSQL = cSQL & " )"
        Case Is = "E24O"
            cSQL = "Create Table E24O "
            cSQL = cSQL & "("
            cSQL = cSQL & " ZhlZiel smallint"
            cSQL = cSQL & ", BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & ", BO5 bit"
            cSQL = cSQL & " )"
            
        Case Is = "KOST"
            cSQL = "Create Table KOST"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " FILIALE tinyint "
            cSQL = cSQL & ", FILBEZ varchar(35) "
            cSQL = cSQL & ", KOST varchar(10) "
            cSQL = cSQL & ", FILKONTO int "
            cSQL = cSQL & " ) "
            
        Case Is = "DATEVALLG"
            cSQL = "Create Table DATEVALLG"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KONTOBEZ varchar(35) "
            cSQL = cSQL & " ) "
            
        Case Is = "DATEVKONTEN"
            cSQL = "Create Table DATEVKONTEN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KONTO int "
            cSQL = cSQL & ", KONTOBEZ varchar(35) "
            cSQL = cSQL & " ) "
        Case Is = "DATEVKONTENAGN"
            cSQL = "Create Table DATEVKONTENAGN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " AGN int "
            cSQL = cSQL & ", KONTOBEZ varchar(35) "
            cSQL = cSQL & " ) "
        Case Is = "DATEVEXPORT"
            cSQL = "Create Table DATEVEXPORT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ZEITRAUMVON DATETIME"
            cSQL = cSQL & ", ZEITRAUMBIS DATETIME"
            cSQL = cSQL & ", KOST varchar(10) "
            cSQL = cSQL & ", FILKONTO int "
            cSQL = cSQL & ", KONTO int "
            cSQL = cSQL & ", KONTOBEZ varchar(35) "
            cSQL = cSQL & ", BETRAG real"
            cSQL = cSQL & ", GRUND varchar(50) "
            cSQL = cSQL & " ) "
            
        Case Is = "DATEVEXPORT_BAUCH"
            cSQL = "Create Table DATEVEXPORT_BAUCH"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " BETRAG real"
            cSQL = cSQL & ", BUSCHLUESSEL int "
            cSQL = cSQL & ", KASSENKONTO int "
            cSQL = cSQL & ", RENU varchar(36) "
            cSQL = cSQL & ", BELEGDATUM DATETIME"
            cSQL = cSQL & ", GEGENKONTO int "
            cSQL = cSQL & ", BUTEXT varchar(60) "
            cSQL = cSQL & ", UST int "
            cSQL = cSQL & ", FESTSCHREIBUNG int "
            cSQL = cSQL & " ) "
        Case Is = "ART55H"
            cSQL = "Create Table ART55H "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & " ) "
        Case Is = "KASSNOAGN"
            cSQL = "Create Table KASSNOAGN "
            cSQL = cSQL & "(ART int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", LINBEZ varchar(35)"
            cSQL = cSQL & ", MARKE varchar(20)"
            cSQL = cSQL & ", VON varchar(10)"
            cSQL = cSQL & ", BIS varchar(10)"
            cSQL = cSQL & " ) "
        Case Is = "GROESSETEK"
            cSQL = "Create Table GROESSETEK "
            cSQL = cSQL & "("
            cSQL = cSQL & " von varchar(10) "
            cSQL = cSQL & ", bis varchar(10) "
            cSQL = cSQL & ", GROESSE varchar(10) "
            cSQL = cSQL & ", AGN varchar(6) "
            cSQL = cSQL & ", LINR varchar(6) "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", Linien ntext "
            cSQL = cSQL & " ) "
             
        Case Is = "GROESSETE"
            cSQL = "Create Table GROESSETE "
            cSQL = cSQL & "( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", PREIS real "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", GROESSE varchar(10)"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", agtext varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ") "
    
        Case Is = "ART45PRINT"
            cSQL = "Create Table ART45PRINT "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", PGN smallint "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", LEKWERT float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", KVKWERT float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", ERSTDAT DATETIME "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Filwahl varchar(30) "
            cSQL = cSQL & ", ARTwahl varchar(30) "
            cSQL = cSQL & ", Neuwahl varchar(255) "
            cSQL = cSQL & ", NeuHeitwahl varchar(30) "
            cSQL = cSQL & ", LUGwahl varchar(30) "
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", Marke varchar(35) "
            cSQL = cSQL & ", LINBEZ varchar(35) "
            cSQL = cSQL & " ) "
        Case Is = "ART45"
            cSQL = "Create Table ART45 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", PGN smallint "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", LEKWERT float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", KVKWERT float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", ERSTDAT DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ", Last_ZU DATETIME"
            cSQL = cSQL & ", Last_VK DATETIME"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", Marke varchar(35) "
            cSQL = cSQL & ", LINBEZ varchar(35) "
            cSQL = cSQL & " ) "

    
        Case Is = "KUBLZ"
            cSQL = "Create Table KUBLZ "
            cSQL = cSQL & "(KUBLZ varchar(8)"
            cSQL = cSQL & ", BANKNAME varchar(58) "
            cSQL = cSQL & ", Anzahl int "
            cSQL = cSQL & " ) "
        Case Is = "BIOGART"
            cSQL = "Create Table BIOGART "
            cSQL = cSQL & "(BIOAGN varchar(4) "
            cSQL = cSQL & ", AGN int  "
            cSQL = cSQL & " ) "
        Case "BIOPURLK"
            cSQL = "Create Table BIOPURLK ("
            cSQL = cSQL & " LIEFKURZ varchar(10) "
            cSQL = cSQL & ", LIEFNAME varchar(40) "
            cSQL = cSQL & " ) "
    
        Case "DNSPART"
            cSQL = "Create Table DNSPART ("
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", NSP real "
            cSQL = cSQL & " ) "
    
        Case "PREISKALKAGN"
            cSQL = "Create Table PREISKALKAGN ("
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", NS real "
            cSQL = cSQL & " ) "

        Case "PREISKALKLINR"
            cSQL = "Create Table PREISKALKLINR ("
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", NS real "
            cSQL = cSQL & " ) "
            
        Case "PREISKALKART"
            cSQL = "Create Table PREISKALKART ("
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", PREISVOR real "
            cSQL = cSQL & ", PREISNACH real "
            cSQL = cSQL & ", LEKPR real "
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & " )"
            
        Case "PREISKALKAGNZ"
            cSQL = "Create Table PREISKALKAGNZ ("
            cSQL = cSQL & " AGN int "
            cSQL = cSQL & ", AGNBEZ varchar(35)"
            cSQL = cSQL & ", NS real "
            cSQL = cSQL & ", DNS real "
            cSQL = cSQL & ", ANZARTIKEL int "
            cSQL = cSQL & " )"
            
        Case "PREISKALKLINRZ"
            cSQL = "Create Table PREISKALKLINRZ ("
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", AGNBEZ varchar(35)"
            cSQL = cSQL & ", NS real "
            cSQL = cSQL & ", DNS real "
            
            cSQL = cSQL & ", ANZARTIKEL int "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", UMSATZ real "
            cSQL = cSQL & ", UMSATZHOCH real "
            cSQL = cSQL & " ) "
    
        Case Is = "EXCELE"
        
            cSQL = "Create Table EXCELE "
            cSQL = cSQL & "("
            cSQL = cSQL & " Excelpfad varchar(200)"
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & ", transf9 bit"
            cSQL = cSQL & " )"

        Case "SPZUORD"
            cSQL = "Create Table SPZUORD ( "
            cSQL = cSQL & " ZUORDNR Int IDENTITY "
            cSQL = cSQL & ", ZUKISSSP varchar(50) "
            cSQL = cSQL & ", ZUKISSDABA varchar(20) "
            cSQL = cSQL & ", ZUFREMDSP varchar(150) "
            cSQL = cSQL & ", FREMDKLAR varchar(150) "
            cSQL = cSQL & ", GROUPSP smallint "
            cSQL = cSQL & ", SCHEMANAME varchar(50) "
            cSQL = cSQL & ", FREMDNR smallint "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & " ) "
            
        Case "SPZUORDLINR"
            cSQL = "Create Table SPZUORDLINR ("
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", MWSTV varchar(3) "
            cSQL = cSQL & ", MWSTE varchar(3) "
            cSQL = cSQL & ", SCHEMANAME varchar(50) "
            cSQL = cSQL & ", KUERZEL varchar(3) "
            cSQL = cSQL & " ) "
            
        Case "SPZUORDVOR"
            cSQL = "Create Table SPZUORDVOR ( "
            cSQL = cSQL & " ZUFREMDSP varchar(50) "
            cSQL = cSQL & ", SCHEMANAME varchar(50) "
            cSQL = cSQL & " ) "
            
        Case "SPZUORDDETAILS"
            cSQL = "Create Table SPZUORDDETAILS ( "
            cSQL = cSQL & " FREMDNR smallint "
            cSQL = cSQL & ", SCHEMANAME varchar(50) "
            cSQL = cSQL & ", ZUKISSSP varchar(50) "
            cSQL = cSQL & ", ZUKISSDABA varchar(20) "
            cSQL = cSQL & ", ZUFREMDSP varchar(50) "
            cSQL = cSQL & ", Reihenf smallint "
            cSQL = cSQL & ", ANZZEI smallint "
            cSQL = cSQL & ", AUSR varchar(10) "
            cSQL = cSQL & " ) "
            
        Case Is = "NEGSPANNE"
            cSQL = "Create Table NEGSPANNE ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", KSPANNE real "
            cSQL = cSQL & " )"
    
        Case Is = "KUNB"
            cSQL = "Create Table KUNB"
            cSQL = cSQL & "( "
            cSQL = cSQL & " Preis real"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", VKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", RErtrag real"
            cSQL = cSQL & ", ENS1 real"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", BELEGNR smallint"
            
            cSQL = cSQL & ") "
        Case Is = "FREE"
            cSQL = "Create Table FREE"
            cSQL = cSQL & "( "
            cSQL = cSQL & " Datum DATETIME"
            cSQL = cSQL & ") "
        Case Is = "ETINS"
            cSQL = "Create Table ETINS"
            cSQL = cSQL & "( "
            cSQL = cSQL & " ePlus real"
            cSQL = cSQL & ", eNull real"
            cSQL = cSQL & ", eMinus real"
            cSQL = cSQL & ") "
        Case Is = "C145E"
            cSQL = "Create Table C145E"
            cSQL = cSQL & "("
            cSQL = cSQL & " von int"
            cSQL = cSQL & ", bis int"
            cSQL = cSQL & ")"

        Case Is = "KUNTOPI"
            cSQL = "Create Table KUNTOPI "
            cSQL = cSQL & "("
            cSQL = cSQL & " PREIS float"
            cSQL = cSQL & ", MENGE float"
            cSQL = cSQL & ", ERTRAG float"
            cSQL = cSQL & ", ENS float"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", name varchar(35)"
            cSQL = cSQL & ", ANZKUNDEN smallint"
            cSQL = cSQL & ", KUSCHNI float"
            cSQL = cSQL & ", LFNR Int IDENTITY "
            cSQL = cSQL & ", PROV real"
            
            cSQL = cSQL & ", KUVORNAME varchar(35) "
            cSQL = cSQL & ", KUTITEL varchar(35) "
            cSQL = cSQL & ", KUPLZ varchar(7) "
            cSQL = cSQL & ", KUSTADT varchar(35) "
            cSQL = cSQL & ", KUANREDE varchar(20) "
            cSQL = cSQL & ", KUGESCHLECHT varchar(35) "
            cSQL = cSQL & ", KUFIRMA varchar(35) "
            cSQL = cSQL & ", KUSTRASSE varchar(35) "
            cSQL = cSQL & ", ausg BIT "
            cSQL = cSQL & ") "

        Case Is = "KOPF154"
            cSQL = "Create Table KOPF154 ("
            cSQL = cSQL & " DATVON varchar(10)"
            cSQL = cSQL & ", DATBIS varchar(10)"
            cSQL = cSQL & ", Prov varchar(20)"
            cSQL = cSQL & ", Proz varchar(20)"
            cSQL = cSQL & ", Sortierung varchar(30)"
            cSQL = cSQL & ", Gumsatz float"
            cSQL = cSQL & ") "
            
        Case Is = "KUNTOPIPRINT"
            cSQL = "Create Table KUNTOPIPRINT "
            cSQL = cSQL & "("
            cSQL = cSQL & " PREIS float"
            cSQL = cSQL & ", MENGE float"
            cSQL = cSQL & ", ERTRAG float"
            cSQL = cSQL & ", ENS float"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", name varchar(35)"
            cSQL = cSQL & ", ANZKUNDEN smallint"
            cSQL = cSQL & ", KUSCHNI float"
            cSQL = cSQL & ", LFNR Int IDENTITY "
            cSQL = cSQL & ", PROV real"
            
            cSQL = cSQL & ", KUVORNAME varchar(35) "
            cSQL = cSQL & ", KUTITEL varchar(35) "
            cSQL = cSQL & ", KUPLZ varchar(7) "
            cSQL = cSQL & ", KUSTADT varchar(35) "
            cSQL = cSQL & ", KUANREDE varchar(20) "
            cSQL = cSQL & ", KUGESCHLECHT varchar(35) "
            cSQL = cSQL & ", KUFIRMA varchar(35) "
            cSQL = cSQL & ", KUSTRASSE varchar(35) "
            cSQL = cSQL & ", ausg BIT "
            
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ") "
    
        Case Is = "ARTEAN"
            cSQL = "Create Table ARTEAN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & " ) "

        Case Is = "GESCHWART"
            cSQL = "Create Table GESCHWART"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " MUTTERARTNR int "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", KVK_OK BIT "
            cSQL = cSQL & ", BESTAND_OK BIT "
            cSQL = cSQL & ", IMETI BIT "
            cSQL = cSQL & " ) "
            
        Case Is = "PRINTSHOP"
            cSQL = "Create Table PRINTSHOP"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", ARTBEZ varchar(100) "
            cSQL = cSQL & ", INTERBEZ varchar(100) "
            cSQL = cSQL & ", BESCHREIB ntext "
            cSQL = cSQL & ", BILDkl varchar(20) "
            cSQL = cSQL & ", BILDmi varchar(20) "
            cSQL = cSQL & ", BILDgr varchar(20) "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", SHOPKVK float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", KATEGORIE varchar(50) "
            cSQL = cSQL & ", KATEGORIE2 varchar(50) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & " ) "
        Case Is = "SHOPEX"
            cSQL = "Create Table SHOPEX"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", ARTBEZ varchar(100) "
            cSQL = cSQL & ", INTERBEZ varchar(100) "
            cSQL = cSQL & ", BESCHREIB ntext "
            cSQL = cSQL & ", BILDkl varchar(20) "
            cSQL = cSQL & ", BILDmi varchar(20) "
            cSQL = cSQL & ", BILDgr varchar(20) "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", SHOPKVK float "
            cSQL = cSQL & ", KATEGORIE varchar(50) "
            cSQL = cSQL & ", KATEGORIE2 varchar(50) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & " ) "
        Case Is = "INTERART"
            cSQL = "Create Table INTERART"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", ARTBEZ varchar(100) "
            cSQL = cSQL & ", INTERBEZ varchar(255) "
            cSQL = cSQL & ", BESCHREIB ntext "
            cSQL = cSQL & ", BILDkl varchar(20) "
            cSQL = cSQL & ", BILDmi varchar(20) "
            cSQL = cSQL & ", BILDgr varchar(20) "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", SHOPKVK float "
            cSQL = cSQL & ", KATEGORIE varchar(50) "
            cSQL = cSQL & ", KATEGORIE2 varchar(50) "
            cSQL = cSQL & ", LASTEXPORT DATETIME "
            cSQL = cSQL & ", VERSAND varchar(15) "
            cSQL = cSQL & ", WARNTEXT varchar(100) "
            cSQL = cSQL & " ) "
        Case Is = "GUHIN"
            cSQL = "Create Table GUHIN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " GUTSCHNR int "
            cSQL = cSQL & ", NOTIZEN ntext "
            cSQL = cSQL & " ) "
        Case Is = "DATEV"
            cSQL = "Create Table DATEV"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KONTONR int "
            cSQL = cSQL & ", KONTOBEZ varchar(35) "
            cSQL = cSQL & ", KONTOTYP int "
            cSQL = cSQL & ", KONTOTYPBEZ varchar(35) "
            cSQL = cSQL & " ) "
            
        Case Is = "DATEVWERT"
            cSQL = "Create Table DATEVWERT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " KONTONR int "
            cSQL = cSQL & ", KONTOBEZ varchar(35) "
            cSQL = cSQL & ", KONTOTYP int "
            cSQL = cSQL & ", KONTOTYPBEZ varchar(35) "
            cSQL = cSQL & ", GELDWERT float "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
            
        Case Is = "KUGEB"
            cSQL = "Create Table KUGEB "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEL varchar(35) "
            cSQL = cSQL & ", MOBILTEL varchar(35) "
            cSQL = cSQL & ", VORNAME varchar(35) "
            cSQL = cSQL & ", KUNDNR int "
            cSQL = cSQL & ", NAME varchar(35) "
            cSQL = cSQL & ", DATUM1 DATETIME "
            cSQL = cSQL & ", TITEL varchar(35)"
            
            cSQL = cSQL & ", stadt varchar(35) "
            cSQL = cSQL & ", Plz varchar(7) "
            cSQL = cSQL & ", STRASSE varchar(35) "
            
            
            cSQL = cSQL & " )"
            
        Case Is = "KUTTEN"
            cSQL = "Create Table KUTTEN "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEL varchar(35)"
            cSQL = cSQL & ", FAXNR varchar(35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", KNUMMER int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(35)"
            cSQL = cSQL & ", TITEL varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            cSQL = cSQL & ", datum1 DATETIME "
            cSQL = cSQL & ", Anrede varchar(60)"
            cSQL = cSQL & ", Kuerzel varchar(5) "
            cSQL = cSQL & ", FIRMENBEZ varchar(100)"
            cSQL = cSQL & ", UMSATZ float "
            
            cSQL = cSQL & ") "
        
        Case Is = "KUNTT"
            cSQL = "Create Table KUNTT "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEL varchar(35)"
            cSQL = cSQL & ", FAXNR varchar(35)"
            cSQL = cSQL & ", EMAIL varchar(50)"
            cSQL = cSQL & ", MOBILTEL varchar(35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(35)"
            cSQL = cSQL & ", TITEL varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            cSQL = cSQL & ", datum1 DATETIME "
            cSQL = cSQL & ", GESCHLECHT varchar(1)"
            cSQL = cSQL & ", KUNDKART varchar(18) "
            cSQL = cSQL & ", RABATT float "
            cSQL = cSQL & ", BONUS float "
            cSQL = cSQL & ", KURZTEXT1 varchar(74) "
            cSQL = cSQL & ", KURZTEXT2 varchar(74) "
            cSQL = cSQL & ", NOTIZEN ntext "
            cSQL = cSQL & ", OSUM float "
            cSQL = cSQL & ", Merkmal varchar(35) "
            cSQL = cSQL & ", Merkmal2 varchar(1)"
            cSQL = cSQL & ", Anrede varchar(60)"
            cSQL = cSQL & ", Kuerzel varchar(5) "
            cSQL = cSQL & ", Gesperrt varchar(1) "
            cSQL = cSQL & ", Angelegt Datetime "
            
            cSQL = cSQL & ", FIRMANAME varchar(50)"
            cSQL = cSQL & ", FIRMASTRASSE varchar(50)"
            cSQL = cSQL & ", FIRMAPLZ varchar(7)"
            cSQL = cSQL & ", FIRMAORT varchar(50)"
            
            cSQL = cSQL & ") "
            
        Case Is = "KUNTT_INDI"
            cSQL = "Create Table KUNTT_INDI "
            cSQL = cSQL & "("
            cSQL = cSQL & " TEL varchar(35)"
            cSQL = cSQL & ", FAXNR varchar(35)"
            cSQL = cSQL & ", EMAIL varchar(50)"
            cSQL = cSQL & ", MOBILTEL varchar(35)"
            cSQL = cSQL & ", VORNAME varchar(35)"
            cSQL = cSQL & ", KUNDNR int"
            cSQL = cSQL & ", NAME varchar(35)"
            cSQL = cSQL & ", STRASSE varchar(35)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(35)"
            cSQL = cSQL & ", TITEL varchar(35)"
            cSQL = cSQL & ", FIRMA varchar(35)"
            cSQL = cSQL & ", datum1 DATETIME "
            cSQL = cSQL & ", GESCHLECHT varchar(1)"
            cSQL = cSQL & ", KUNDKART varchar(18) "
            cSQL = cSQL & ", RABATT float "
            cSQL = cSQL & ", BONUS float "
            cSQL = cSQL & ", KURZTEXT1 varchar(74) "
            cSQL = cSQL & ", KURZTEXT2 varchar(74) "
            cSQL = cSQL & ", NOTIZEN ntext "
            cSQL = cSQL & ", OSUM float "
            cSQL = cSQL & ", Merkmal varchar(35) "
            cSQL = cSQL & ", Merkmal2 varchar(1)"
            cSQL = cSQL & ", Anrede varchar(60)"
            cSQL = cSQL & ", Kuerzel varchar(5) "
            cSQL = cSQL & ", Gesperrt varchar(1) "
            cSQL = cSQL & ", Angelegt Datetime "
            cSQL = cSQL & ", Filiale int "
            
            cSQL = cSQL & ", FIRMANAME varchar(50)"
            cSQL = cSQL & ", FIRMASTRASSE varchar(50)"
            cSQL = cSQL & ", FIRMAPLZ varchar(7)"
            cSQL = cSQL & ", FIRMAORT varchar(50)"
            
            
            
            
            cSQL = cSQL & ", Element1 ntext "
            cSQL = cSQL & ", Element2 ntext "
            cSQL = cSQL & ", Element3 ntext "
            cSQL = cSQL & ", Element4 ntext "
            cSQL = cSQL & ", Element5 ntext "
            cSQL = cSQL & ", Element6 ntext "
            cSQL = cSQL & ", Element7 ntext "
            cSQL = cSQL & ", Element8 ntext "
            cSQL = cSQL & ", Element9 varchar(250) "
            cSQL = cSQL & ", Element10 varchar(250) "
            cSQL = cSQL & ", Element11 varchar(250) "
            cSQL = cSQL & ", Element12 varchar(250) "
            cSQL = cSQL & ", Element13 ntext "
            cSQL = cSQL & ", Element14 ntext "
            cSQL = cSQL & ", Element15 ntext "
            cSQL = cSQL & ", Element16 ntext "
            cSQL = cSQL & ", Element17 ntext "
            cSQL = cSQL & ", Element18 ntext "
            cSQL = cSQL & ", Element19 ntext "
            
            cSQL = cSQL & ", PflichtNAME BIT "
            cSQL = cSQL & ", PflichtVORNAME BIT "
            cSQL = cSQL & ", PflichtSTADT BIT "
            cSQL = cSQL & ", PflichtPLZ BIT "
            cSQL = cSQL & ", PflichtSTRASSE BIT "
            cSQL = cSQL & ", PflichtGEBDATUM BIT "
            cSQL = cSQL & ", PflichtMAIL BIT "
            cSQL = cSQL & ", PflichtTEL BIT "
            cSQL = cSQL & ", PflichtMOBIL BIT "
            
            cSQL = cSQL & ") "
        Case Is = "MBSTAND"
            cSQL = "Create Table MBSTAND"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " LASTDATE DATETIME "
            cSQL = cSQL & ", LASTTIME varchar(10) "
            cSQL = cSQL & " ) "
        Case Is = "BESTLIN"
            cSQL = "Create Table BESTLIN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", ANZKB int "
            cSQL = cSQL & ", ANZART int "
            cSQL = cSQL & ", VORLEK float "
            cSQL = cSQL & ", INBESTLEK float "
            cSQL = cSQL & ", AWERT float "
            cSQL = cSQL & ", DIFF float "
            cSQL = cSQL & ", ANZARTF int "
            cSQL = cSQL & ", ANZBE int "
            cSQL = cSQL & ", KAT varchar(1) "
            cSQL = cSQL & ", MAXDATE DATETIME "
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", AZEIT varchar(10) "
            cSQL = cSQL & " ) "
        
        Case Is = "STAFFELRING"
            cSQL = "Create Table STAFFELRING"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", LEKPR real"
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & ", LINR int "
            
            cSQL = cSQL & " ) "
            
        Case Is = "STAFFEL_KVK_ARTIKEL"
            cSQL = "Create Table STAFFEL_KVK_ARTIKEL"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " STAFFNR int "
            cSQL = cSQL & ", ARTNR int "
            
            cSQL = cSQL & " ) "
            
        Case Is = "STAFFEL_KVK_GRUPPE"
            cSQL = "Create Table STAFFEL_KVK_GRUPPE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " STAFFNR int "
            cSQL = cSQL & ", STAFFNAME varchar(35) "
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & ", MENGE int "
            
            cSQL = cSQL & ", KVKPR2 real"
            cSQL = cSQL & ", MENGE2 int "
            
            cSQL = cSQL & ", KVKPR3 real"
            cSQL = cSQL & ", MENGE3 int "
            cSQL = cSQL & " ) "
            
        Case Is = "STAFFELPRKVK"
            cSQL = "Create Table STAFFELPRKVK"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & ", AENDER DATETIME"
            cSQL = cSQL & " ) "
            
        Case Is = "STAFFELPR"
            cSQL = "Create Table STAFFELPR"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", LEKPR real"
            cSQL = cSQL & ", MENGE int "
            cSQL = cSQL & ", AENDER DATETIME"
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & " ) "
        Case Is = "BESTART"
            cSQL = "Create Table BESTART"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", MB smallint"
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", BEDARF int "
            cSQL = cSQL & ", KB int "
            cSQL = cSQL & ", UW int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", UBERBEST int "
            cSQL = cSQL & " ) "

        Case Is = "BESTART1"
            cSQL = "Create Table BESTART1"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", BEDARF1 int "
            cSQL = cSQL & ", KONDI int "
            cSQL = cSQL & ", INBE int "
            cSQL = cSQL & ", LEK float "
            cSQL = cSQL & ", LEKWERT float "
            cSQL = cSQL & ", INBELEKWERT float "
            cSQL = cSQL & " ) "
        Case Is = "BESTART2"
            cSQL = "Create Table BESTART2"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", UBERBEST1 int "
            cSQL = cSQL & " ) "
            
            
        Case Is = "GLAGER_GDPDU"
            cSQL = "Create Table GLAGER_GDPDU"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BESTAND smallint "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & " ) "
            
        Case Is = "GLAGER"
            cSQL = "Create Table GLAGER"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", BESTAND smallint "
            cSQL = cSQL & " ) "
            
        Case Is = "GDLAGER"
            cSQL = "Create Table GDLAGER"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " Monat tinyint "
            cSQL = cSQL & ", ARTNR int "
            cSQL = cSQL & ", Jahr smallint "
            cSQL = cSQL & ", SBESTAND smallint "
            cSQL = cSQL & " ) "

        Case "REWEAGN"
            cSQL = "Create Table REWEAGN"
            cSQL = cSQL & "( "
            cSQL = cSQL & " REWEAGN int "
            cSQL = cSQL & ", REWEAGTEXT varchar(50)"
            cSQL = cSQL & ", LastDATE DATETIME "
            cSQL = cSQL & ", AKTGEW BIT "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", AGTEXT varchar(50)"
            cSQL = cSQL & ") "
            
        Case "REWEGRUPPE"
            cSQL = "Create Table REWEGRUPPE"
            cSQL = cSQL & "( "
            cSQL = cSQL & " REWEAGN int "
            cSQL = cSQL & ", Anzahl int "
            cSQL = cSQL & ", REWEAGTEXT varchar(50)"
            cSQL = cSQL & ", AKTGEW BIT "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", AGTEXT varchar(50)"
            cSQL = cSQL & ") "

        Case Is = "RINGE"
        
            cSQL = "Create Table RINGE "
            cSQL = cSQL & "("
            cSQL = cSQL & " RINGPfad varchar(200)"
            cSQL = cSQL & ", RINGLINR int "
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
    
        Case Is = "ESUE"
        
            cSQL = "Create Table ESUE "
            cSQL = cSQL & "("
            cSQL = cSQL & " ESUEPfad varchar(200)"
            cSQL = cSQL & ", ESUELINR int "
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
    
        Case Is = "GEFART1"
            cSQL = "Create Table GEFART1 "
            cSQL = cSQL & "( ART int"
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ") "
            
        Case Is = "STERNEZAHL"
            cSQL = "Create Table STERNEZAHL "
            cSQL = cSQL & "( "
            cSQL = cSQL & " STERNE1 int "
            cSQL = cSQL & ", STERNE2 int "
            cSQL = cSQL & ", STERNE3 int "
            cSQL = cSQL & ", STERNE4 int "
            cSQL = cSQL & ", STERNE5 int "
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ") "
    
        Case Is = "STERNE"
            cSQL = "Create Table STERNE "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", STERNE smallint "
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", UMSDURCHSCHNITT365 float "
            cSQL = cSQL & ", Verkvorgänge int "
            cSQL = cSQL & ", BONDURCHSCHNITT365 float "
            cSQL = cSQL & ", AllesUMSDURCHSCHNITT365 float "
            cSQL = cSQL & ", AllesVerkvorgänge int "
            cSQL = cSQL & ", AllesBONDURCHSCHNITT365 float "
            cSQL = cSQL & ") "
            
        Case Is = "STERNTEMPZ"
            cSQL = "Create Table STERNTEMPZ "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", UMSDURCHSCHNITT365 float "
            cSQL = cSQL & ", Verkvorgänge int "
            cSQL = cSQL & ", BONDURCHSCHNITT365 float "
            cSQL = cSQL & ", AllesUMSDURCHSCHNITT365 float "
            cSQL = cSQL & ", AllesVerkvorgänge int "
            cSQL = cSQL & ", AllesBONDURCHSCHNITT365 float "
            cSQL = cSQL & ") "
        Case Is = "STERNTEMP1"
            cSQL = "Create Table STERNTEMP1 "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", Dauer varchar(10) "
            cSQL = cSQL & ", UMSDURCHSCHNITT365 float "
            cSQL = cSQL & ") "
        Case Is = "STERNTEMP6"
            cSQL = "Create Table STERNTEMP6 "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", AllesUMSDURCHSCHNITT365 float "
            cSQL = cSQL & ") "
        Case Is = "STERNTEMP7"
            cSQL = "Create Table STERNTEMP7 "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", AllesVerkvorgänge int "
            cSQL = cSQL & ") "
        Case Is = "STERNTEMP2"
            cSQL = "Create Table STERNTEMP2 "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", Dauer varchar(10) "
            cSQL = cSQL & ", UMSDURCHSCHNITT365 float "
            cSQL = cSQL & ") "
        Case Is = "STERNTEMPT"
            cSQL = "Create Table STERNTEMPT "
            cSQL = cSQL & "( KUND int"
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ") "
        Case Is = "STERNTEMP3"
            cSQL = "Create Table STERNTEMP3 "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", Dauer varchar(10) "
            cSQL = cSQL & ", Verkvorgänge int "
            cSQL = cSQL & ") "
        Case Is = "STERNTEMP4"
            cSQL = "Create Table STERNTEMP4 "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", Dauer varchar(10) "
            cSQL = cSQL & ", BONDURCHSCHNITT365 float "
            cSQL = cSQL & ", UMSDURCHSCHNITT365 float "
            cSQL = cSQL & ", Verkvorgänge int "
            cSQL = cSQL & ") "
            
        Case Is = "STERNTEMP5"
            cSQL = "Create Table STERNTEMP5 "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", adate DATETIME "
            cSQL = cSQL & ", Dauer varchar(10) "
            cSQL = cSQL & ", BONDURCHSCHNITT365 float "
            cSQL = cSQL & ", UMSDURCHSCHNITT365 float "
            cSQL = cSQL & ", Verkvorgänge int "
            cSQL = cSQL & ") "
            
        
            
        Case Is = "KUNDA" & srechnertab
            cSQL = "Create Table KUNDA" & srechnertab
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ") "
    
        Case Is = "KUNDAZEALLE"
            cSQL = "Create Table KUNDAZEALLE "
            cSQL = cSQL & "( KUNDNR int"
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", BEDNR smallint"
            cSQL = cSQL & ", ADATE DATETIME "
            cSQL = cSQL & ", MENGE int"
            cSQL = cSQL & ", PREIS real"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            
            cSQL = cSQL & ", BELEGNR int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", PGN int"
            cSQL = cSQL & ", Marke varchar(20) "
            cSQL = cSQL & ") "
    
        Case Is = "SCHWERKUNDNR"
            cSQL = "Create Table SCHWERKUNDNR "
            cSQL = cSQL & "( "
            cSQL = cSQL & " Kundnr int "
            cSQL = cSQL & ", summe real"
            cSQL = cSQL & ", Anteil real"
            cSQL = cSQL & ", Proz real"
            cSQL = cSQL & ") "
    
        Case Is = "KUDD"
            cSQL = "Create Table KUDD "
            cSQL = cSQL & "( "
            cSQL = cSQL & " adate DATETIME "
            cSQL = cSQL & ", KaufvorgaengeSchnitt real"
            cSQL = cSQL & ", UmsatzProkundeSchnitt real"
            cSQL = cSQL & ", BonUmsatzProkundeSchnitt real"
            cSQL = cSQL & ") "
    
        Case Is = "AGNPRINT"
            cSQL = "Create Table AGNPRINT "
            cSQL = cSQL & "( "
            cSQL = cSQL & " AGN int "
            cSQL = cSQL & ", AGTEXT varchar(35)"
            cSQL = cSQL & ", INVAB real"
            cSQL = cSQL & ", Artikelanz int"
            cSQL = cSQL & ", Bestandsum int"
            cSQL = cSQL & ") "
    
        Case "MAVM" & srechnertab
            cSQL = "Create Table MAVM" & srechnertab
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", MARKENBEZ varchar(35)"
            cSQL = cSQL & ", LAGERST int "
            cSQL = cSQL & ", AbsatzVM int "
            cSQL = cSQL & ", AbsatzaktJ int "
            cSQL = cSQL & ", UMSATZVM float "
            cSQL = cSQL & ", UMSATZVVM float "
            cSQL = cSQL & ", UMSATZMRELA float "
            cSQL = cSQL & ", EinkaufVM int "
            cSQL = cSQL & ", EinkaufaktJ int "
            cSQL = cSQL & ", UMSATZaktJ float "
            cSQL = cSQL & ", UMSATZVaktJ float "
            cSQL = cSQL & ", UMSATZJRELA float "
            cSQL = cSQL & ", VKPREISPROSTCK float "
            cSQL = cSQL & ", LagerRWM float "
            cSQL = cSQL & ", MARKTANTEILM float "
            cSQL = cSQL & ", MARKTANTEILJ float "
            cSQL = cSQL & ", PLATZUMSATZM tinyint "
            cSQL = cSQL & ", PLATZSTCKM tinyint "
            cSQL = cSQL & ", PLATZUMSATZJ tinyint "
            cSQL = cSQL & ", PLATZSTCKJ tinyint "
            cSQL = cSQL & ") "
            
        Case "MAVMKOPF"
            cSQL = "Create Table MAVMKOPF"
            cSQL = cSQL & "( "
            cSQL = cSQL & " UEBER varchar(35)"
            cSQL = cSQL & ", Auswertungsdat varchar(35) "
            cSQL = cSQL & ", BASIS varchar(35) "
            cSQL = cSQL & ") "
            
        Case "MAVMPRINT"
            cSQL = "Create Table MAVMPRINT"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", MARKENBEZ varchar(35)"
            cSQL = cSQL & ", LAGERST int "
            cSQL = cSQL & ", AbsatzVM int "
            cSQL = cSQL & ", AbsatzaktJ int "
            cSQL = cSQL & ", UMSATZVM float "
            cSQL = cSQL & ", UMSATZVVM float "
            cSQL = cSQL & ", UMSATZMRELA float "
            cSQL = cSQL & ", EinkaufVM int "
            cSQL = cSQL & ", EinkaufaktJ int "
            cSQL = cSQL & ", UMSATZaktJ float "
            cSQL = cSQL & ", UMSATZVaktJ float "
            cSQL = cSQL & ", UMSATZJRELA float "
            cSQL = cSQL & ", VKPREISPROSTCK float "
            cSQL = cSQL & ", LagerRWM float "
            cSQL = cSQL & ", MARKTANTEILM float "
            cSQL = cSQL & ", MARKTANTEILJ float "
            cSQL = cSQL & ", PLATZUMSATZM tinyint "
            cSQL = cSQL & ", PLATZSTCKM tinyint "
            cSQL = cSQL & ", PLATZUMSATZJ tinyint "
            cSQL = cSQL & ", PLATZSTCKJ tinyint "
            cSQL = cSQL & ") "
    
        Case Is = "ARTPRINT"
            cSQL = "Create Table ARTPRINT ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", GEFUEHRT varchar(1)"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", EKPR float"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", Preisschu varchar(1)"
            cSQL = cSQL & ", Rabatt_OK varchar(1)"
            cSQL = cSQL & ", PGN tinyint"
            cSQL = cSQL & ", AWM varchar(2)"
            cSQL = cSQL & ", MinMen int"
            cSQL = cSQL & ", MinBest int"
            cSQL = cSQL & ", INHALT float"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & " ) "
    
        Case "PRINTWARENGRU"
            cSQL = "Create Table PRINTWARENGRU"
            cSQL = cSQL & "(   "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", ARTBEZ varchar(35) "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", WGNR int "
            cSQL = cSQL & ", SPANNE real "
            cSQL = cSQL & ", SGROESSE int "
            cSQL = cSQL & ", FAKTOR varchar(1) "
            cSQL = cSQL & ", BNAME varchar(35) "
            cSQL = cSQL & ", KVKPR1 real"
            cSQL = cSQL & ") "
    
        Case "BEDZKOPF"
            cSQL = "Create Table BEDZKOPF"
            cSQL = cSQL & "(  Auswertungsdat varchar(35) "
            cSQL = cSQL & ") "
    
        Case Is = "GFKSTAT"
            cSQL = "Create Table GFKSTAT"
            cSQL = cSQL & "(KUNDNR int "
            cSQL = cSQL & ", AUTOMATIK BIT "
            cSQL = cSQL & ", EMAIL varchar(100)"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & " )"
            
        Case Is = "COUPONSTAT"
            cSQL = "Create Table COUPONSTAT"
            cSQL = cSQL & "(MARKTNR int "
            cSQL = cSQL & ", LIVE BIT "
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & " )"
        Case Is = "IPSTAT"
            cSQL = "Create Table IPSTAT"
            cSQL = cSQL & "(MARKTNR int "
            cSQL = cSQL & ", LIVE BIT "
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & " )"
        Case Is = "VEDESSTAT"
            cSQL = "Create Table VEDESSTAT"
            cSQL = cSQL & "(MARKTNR int "
            cSQL = cSQL & ", LIVE BIT "
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & " )"
            
        Case Is = "BEDZ"
            cSQL = "Create Table BEDZ"
            cSQL = cSQL & "( "
            cSQL = cSQL & "  AGN int"
            cSQL = cSQL & ", AGTEXT varchar(35)"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", Bediener smallint"
            cSQL = cSQL & ", Umsatz real"
            cSQL = cSQL & ", UmsatzVJ real"
            cSQL = cSQL & ", EinKPreis real"
            cSQL = cSQL & ", NUmsatz real"
            cSQL = cSQL & ", ERTRAG real"
            cSQL = cSQL & ", NSP real"
            cSQL = cSQL & ", Anzahl int"
            cSQL = cSQL & ", KundenZahl int"
            cSQL = cSQL & ") "
            
        Case Is = "BEDZLINR"
            cSQL = "Create Table BEDZLINR"
            cSQL = cSQL & "( "
            cSQL = cSQL & "  LINR int"
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", Bediener smallint"
            cSQL = cSQL & ", Umsatz real"
            cSQL = cSQL & ", UmsatzVJ real"
            cSQL = cSQL & ", EinKPreis real"
            cSQL = cSQL & ", NUmsatz real"
            cSQL = cSQL & ", ERTRAG real"
            cSQL = cSQL & ", NSP real"
            cSQL = cSQL & ", Anzahl int"
            cSQL = cSQL & ") "
            
        Case Is = "IP_TAG"
            cSQL = "Create Table IP_TAG"
            cSQL = cSQL & "( "
            cSQL = cSQL & "  ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", Preis real"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", azeit varchar(8)"
            cSQL = cSQL & ", BELEGNR smallint"
            cSQL = cSQL & ", KASNUM smallint"
            cSQL = cSQL & ", FILIALE int"
            cSQL = cSQL & ") "
    
        Case Is = "GFKWOCHE"
            cSQL = "Create Table GFKWOCHE"
            cSQL = cSQL & "( "
            cSQL = cSQL & "  ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", INHALTBEZ varchar(3)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", VKPreis real"
            cSQL = cSQL & ", VKMenge int"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", AGN int"
            
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", BELEGNR smallint"
            cSQL = cSQL & ") "
    
        Case Is = "BEDB"
            cSQL = "Create Table BEDB"
            cSQL = cSQL & "( "
            cSQL = cSQL & " Preis real"
            cSQL = cSQL & ", Menge int"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", MWST varchar(1)"
            cSQL = cSQL & ", RErtrag real"
            cSQL = cSQL & ", ENS1 real"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", Bednu smallint"
            cSQL = cSQL & ", adate DATETIME"
            cSQL = cSQL & ", BELEGNR smallint"
            
            cSQL = cSQL & ") "

        Case Is = "KOPF138"
            cSQL = "Create Table KOPF138 ("
            cSQL = cSQL & " DATVON varchar(10)"
            cSQL = cSQL & ", DATBIS varchar(10)"
            cSQL = cSQL & ", Prov varchar(20)"
            cSQL = cSQL & ", Proz varchar(20)"
            cSQL = cSQL & ", Sortierung varchar(30)"
            cSQL = cSQL & ", Gumsatz float"
            
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", MARKE varchar(35)"
            cSQL = cSQL & ", Liefbez ntext"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", AGN ntext"
            cSQL = cSQL & ", PGN ntext"
            cSQL = cSQL & ", LPZ ntext"
            cSQL = cSQL & ", FILAUSWAHL varchar(50)"
            cSQL = cSQL & ", BEDBEZ ntext"
            cSQL = cSQL & ", BEDNU int"
            cSQL = cSQL & ") "

        Case Is = "BEDTOPI"
            cSQL = "Create Table BEDTOPI "
            cSQL = cSQL & "("
            cSQL = cSQL & " PREIS float"
            cSQL = cSQL & ", MENGE float"
            cSQL = cSQL & ", ERTRAG float"
            cSQL = cSQL & ", ENS float"
            cSQL = cSQL & ", BEDNU int"
            cSQL = cSQL & ", bedname varchar(35)"
            cSQL = cSQL & ", ANZKUNDEN smallint"
            cSQL = cSQL & ", KUSCHNI float"
            cSQL = cSQL & ", LFNR Int IDENTITY "
            cSQL = cSQL & ", PROV real"
            
            cSQL = cSQL & ", UMSEK float"
            cSQL = cSQL & ", UMSKU float"
            cSQL = cSQL & ", UMSST float"
            cSQL = cSQL & ") "
        Case Is = "C138E"
            cSQL = "Create Table C138E"
            cSQL = cSQL & "("
            cSQL = cSQL & " von int"
            cSQL = cSQL & ", bis int"
            cSQL = cSQL & ", iopt1 smallint"
            cSQL = cSQL & ", iopt2 smallint"
            cSQL = cSQL & ", iopt3 smallint"
            cSQL = cSQL & ")"
        Case Is = "IDENTUSER"
            cSQL = "Create table IDENTUSER "
            cSQL = cSQL & "("
            cSQL = cSQL & " BEDNR smallint"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ")"
    
        Case Is = "UMLAGER"
            cSQL = "Create Table UMLAGER"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", UHRZEIT varchar(8)"
            cSQL = cSQL & ", BEDNU int"
            cSQL = cSQL & ", BEDNAME varchar(35)"
            cSQL = cSQL & ", FILIALNR int"
            cSQL = cSQL & ", BESTANDALT int"
            cSQL = cSQL & ", BEWEGUNG int"
            cSQL = cSQL & ", BESTANDNEU int"
            cSQL = cSQL & ", EKPR real"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & " ) "
        Case Is = "BONUSBONTEXTE"
            cSQL = "Create Table BONUSBONTEXTE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " TEXTVOR varchar(255)"
            cSQL = cSQL & ", TEXTNACH varchar(255) "
            cSQL = cSQL & " ) "
        Case Is = "BWWBONTEXTE"
            cSQL = "Create Table BWWBONTEXTE"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " TEXTVOR varchar(255)"
            cSQL = cSQL & ", TEXTNACH varchar(255) "
            cSQL = cSQL & ", Zeichen varchar(10) "
            cSQL = cSQL & ", Wert float "
            cSQL = cSQL & ", SchwellenWert float "
            cSQL = cSQL & ", ART varchar(10) "
            cSQL = cSQL & ", KUNDBI BIT "
            cSQL = cSQL & ", BonusARTNR int"
            cSQL = cSQL & ", GDauer int"
            cSQL = cSQL & " ) "
        Case Is = "BONUSART"
            cSQL = "Create Table BONUSART"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " NR smallint "
            cSQL = cSQL & ", BESCHREIB varchar(15) "
            cSQL = cSQL & " ) "
        Case Is = "STORNOF"
            cSQL = "Create Table STORNOF"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", MERK varchar(4) "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & " ) "
        Case "LANG"
            cSQL = "Create Table LANG "
            cSQL = cSQL & "( "
            cSQL = cSQL & " frmName varchar(35)"
            cSQL = cSQL & ", NrInForm int "
            cSQL = cSQL & ", DEUTSCH varchar(255) "
            cSQL = cSQL & ", LANG1 varchar(255) "
            cSQL = cSQL & ", Name varchar(255) "
            cSQL = cSQL & ", lfnr Int IDENTITY "
            cSQL = cSQL & ") "

        Case "LIVM" & srechnertab
            cSQL = "Create Table LIVM" & srechnertab
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LAGERST int "
            cSQL = cSQL & ", AbsatzVM int "
            cSQL = cSQL & ", AbsatzaktJ int "
            cSQL = cSQL & ", UMSATZVM float "
            cSQL = cSQL & ", UMSATZVVM float "
            cSQL = cSQL & ", UMSATZMRELA float "
            cSQL = cSQL & ", EinkaufVM int "
            cSQL = cSQL & ", EinkaufaktJ int "
            cSQL = cSQL & ", UMSATZaktJ float "
            cSQL = cSQL & ", UMSATZVaktJ float "
            cSQL = cSQL & ", UMSATZJRELA float "
            cSQL = cSQL & ", VKPREISPROSTCK float "
            cSQL = cSQL & ", LagerRWM float "
            cSQL = cSQL & ", MARKTANTEILM float "
            cSQL = cSQL & ", MARKTANTEILJ float "
            cSQL = cSQL & ", PLATZUMSATZM tinyint "
            cSQL = cSQL & ", PLATZSTCKM tinyint "
            cSQL = cSQL & ", PLATZUMSATZJ tinyint "
            cSQL = cSQL & ", PLATZSTCKJ tinyint "
            cSQL = cSQL & ") "
            
        Case "LIVMKOPF"
            cSQL = "Create Table LIVMKOPF"
            cSQL = cSQL & "( "
            cSQL = cSQL & " UEBER varchar(35)"
            cSQL = cSQL & ", Auswertungsdat varchar(35) "
            cSQL = cSQL & ", BASIS varchar(35) "
            cSQL = cSQL & ") "
            
        Case "LIVMPRINT"
            cSQL = "Create Table LIVMPRINT"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LAGERST int "
            cSQL = cSQL & ", AbsatzVM int "
            cSQL = cSQL & ", AbsatzaktJ int "
            cSQL = cSQL & ", UMSATZVM float "
            cSQL = cSQL & ", UMSATZVVM float "
            cSQL = cSQL & ", UMSATZMRELA float "
            cSQL = cSQL & ", EinkaufVM int "
            cSQL = cSQL & ", EinkaufaktJ int "
            cSQL = cSQL & ", UMSATZaktJ float "
            cSQL = cSQL & ", UMSATZVaktJ float "
            cSQL = cSQL & ", UMSATZJRELA float "
            cSQL = cSQL & ", VKPREISPROSTCK float "
            cSQL = cSQL & ", LagerRWM float "
            cSQL = cSQL & ", MARKTANTEILM float "
            cSQL = cSQL & ", MARKTANTEILJ float "
            cSQL = cSQL & ", PLATZUMSATZM tinyint "
            cSQL = cSQL & ", PLATZSTCKM tinyint "
            cSQL = cSQL & ", PLATZUMSATZJ tinyint "
            cSQL = cSQL & ", PLATZSTCKJ tinyint "
            cSQL = cSQL & ") "
    
        Case Is = "GEFART"
            cSQL = "Create Table GEFART ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LAGERP float "
            cSQL = cSQL & ", LINBEZ varchar(35) "
            cSQL = cSQL & ", MARKE varchar(35) "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & " )"
        Case "SAP"
            cSQL = "Create Table SAP"
            cSQL = cSQL & "( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ") "
        Case "MARKELPZ" & srechnertab
            cSQL = "Create Table MARKELPZ" & srechnertab
            cSQL = cSQL & "( "
            cSQL = cSQL & " LPZ int "
            cSQL = cSQL & ", LINBEZEICH varchar(35)"
            cSQL = cSQL & ", MARKENBEZ varchar(20)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", SORTI int"
            cSQL = cSQL & ") "
        Case Is = "LAGERDLJETZT"
            cSQL = "Create Table LAGERDLJETZT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & " ) "

        Case Is = "LAGERLLWJETZT"
            cSQL = "Create Table LAGERLLWJETZT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
        Case Is = "LAGERDJETZT"
            cSQL = "Create Table LAGERDJETZT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & " ) "
        Case Is = "LAGERLWJETZT"
            cSQL = "Create Table LAGERLWJETZT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
        Case "AVGLAG_LINR"
            cSQL = "Create Table AVGLAG_LINR "
            cSQL = cSQL & "( "
            cSQL = cSQL & " JAHR smallint"
            cSQL = cSQL & ", MONAT tinyint"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", AVGSEK real"
            cSQL = cSQL & ") "
            
        Case "AVGLAG_LPZ"
            cSQL = "Create Table AVGLAG_LPZ "
            cSQL = cSQL & "( "
            cSQL = cSQL & " JAHR smallint"
            cSQL = cSQL & ", MONAT tinyint"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", AVGSEK real"
            cSQL = cSQL & ") "

        Case "UMS_LINR"
            cSQL = "Create Table UMS_LINR "
            cSQL = cSQL & "( "
            cSQL = cSQL & " JAHR smallint"
            cSQL = cSQL & ", MONAT tinyint"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & ", UMSATZ real"
            cSQL = cSQL & ", UMSATZSEK real"
            cSQL = cSQL & ", ABSATZ int"
            cSQL = cSQL & ") "
        Case "UMS_ARTNR"
            cSQL = "Create Table UMS_ARTNR "
            cSQL = cSQL & "( "
            cSQL = cSQL & " JAHR smallint"
            cSQL = cSQL & ", MONAT tinyint"
            cSQL = cSQL & ", ARTNR int"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & ", UMSATZ real"
            cSQL = cSQL & ", UMSATZSEK real"
            cSQL = cSQL & ") "
        Case "UMS_LPZ"
            cSQL = "Create Table UMS_LPZ "
            cSQL = cSQL & "( "
            cSQL = cSQL & " JAHR smallint"
            cSQL = cSQL & ", MONAT tinyint"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LASTDATE DATETIME"
            cSQL = cSQL & ", ABSATZ int"
            cSQL = cSQL & ", UMSATZ real"
            cSQL = cSQL & ", UMSATZSEK real"
            cSQL = cSQL & ") "
            
        Case "LIEFEXPORT"
            cSQL = "Create Table LIEFEXPORT"
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(30)"
            cSQL = cSQL & ", STRASSE varchar(30)"
            cSQL = cSQL & ", TEL varchar(30)"
            cSQL = cSQL & ", FAX varchar(30)"
            cSQL = cSQL & ", ZUSATZ float"
            cSQL = cSQL & ", KUNDNR varchar(15) "
            cSQL = cSQL & ", NOTIZ ntext "
            cSQL = cSQL & ") "
    
        Case "LI" & srechnertab
            cSQL = "Create Table LI" & srechnertab
            cSQL = cSQL & "( "
            cSQL = cSQL & " LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", PLZ varchar(7)"
            cSQL = cSQL & ", STADT varchar(30)"
            cSQL = cSQL & ", STRASSE varchar(30)"
            cSQL = cSQL & ", TEL varchar(30)"
            cSQL = cSQL & ", FAX varchar(30)"
            cSQL = cSQL & ", ZUSATZ float"
            cSQL = cSQL & ", KUNDNR varchar(15) "
            cSQL = cSQL & ", NOTIZ ntext "
            cSQL = cSQL & ", AWERT float"
            cSQL = cSQL & ", LUG float"
            cSQL = cSQL & ", LAGERWSEK float "
            cSQL = cSQL & ", EKaktJahr float "
            
            cSQL = cSQL & ", EKvorJahr float"
            cSQL = cSQL & ", UmsBraktJahr float"
            cSQL = cSQL & ", UmsBrvorJahr float "
            cSQL = cSQL & ", UmsSEKaktJahr float "
            cSQL = cSQL & ", UmsSEKvorJahr float"
            
            cSQL = cSQL & ", UmsBrakt12M float"
            cSQL = cSQL & ", UmsBrvor12M float "
            cSQL = cSQL & ", UmsSEKakt12 float "
            cSQL = cSQL & ", UmsSEKvor12 float"
            
            cSQL = cSQL & ", UmsBr12MDIFFabs float"
            cSQL = cSQL & ", UmsBr12MDIFFrela float "
            cSQL = cSQL & ", UmsSEK12MDIFFabs float "
            cSQL = cSQL & ", UmsSEK12MDIFFrela float"
            
            cSQL = cSQL & ", LAGERST int "
            cSQL = cSQL & ", PENNERWSEK float "
            cSQL = cSQL & ", PENNERST int "
            
            cSQL = cSQL & ", PENANTEILST float "
            cSQL = cSQL & ", PENANTEILSEK float"
        
            cSQL = cSQL & ") "
            
        Case "LPZ" & srechnertab
            cSQL = "Create Table LPZ" & srechnertab
            cSQL = cSQL & "( "
            cSQL = cSQL & " LPZ int "
            cSQL = cSQL & ", LINBEZEICH varchar(35)"
            cSQL = cSQL & ", MARKE varchar(20)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", SORTI int"
            cSQL = cSQL & ", LUG float"
            cSQL = cSQL & ", LAGERWSEK float "
            cSQL = cSQL & ", EKaktJahr float "
            
            cSQL = cSQL & ", EKvorJahr float"
            cSQL = cSQL & ", UmsBraktJahr float"
            cSQL = cSQL & ", UmsBrvorJahr float "
            cSQL = cSQL & ", UmsSEKaktJahr float "
            cSQL = cSQL & ", UmsSEKvorJahr float"
            
            cSQL = cSQL & ", UmsBrakt12M float"
            cSQL = cSQL & ", UmsBrvor12M float "
            cSQL = cSQL & ", UmsSEKakt12 float "
            cSQL = cSQL & ", UmsSEKvor12 float"
            
            cSQL = cSQL & ", UmsBr12MDIFFabs float"
            cSQL = cSQL & ", UmsBr12MDIFFrela float "
            cSQL = cSQL & ", UmsSEK12MDIFFabs float "
            cSQL = cSQL & ", UmsSEK12MDIFFrela float"
            
            cSQL = cSQL & ", LAGERST int "
            cSQL = cSQL & ", PENNERWSEK float "
            cSQL = cSQL & ", PENNERST int "
            
            cSQL = cSQL & ", PENANTEILST float "
            cSQL = cSQL & ", PENANTEILSEK float"
            
            cSQL = cSQL & ") "
            
        Case "MARKE" & srechnertab
            cSQL = "Create Table MARKE" & srechnertab
            cSQL = cSQL & "( "
            cSQL = cSQL & " LPZ int "
            cSQL = cSQL & ", LINBEZEICH varchar(35)"
            cSQL = cSQL & ", MARKENBEZ varchar(20)"
            cSQL = cSQL & ", KUERZEL varchar(5)"
            cSQL = cSQL & ", SORTI int"
            cSQL = cSQL & ", LUG float"
            cSQL = cSQL & ", LAGERWSEK float "
            cSQL = cSQL & ", EKaktJahr float "
            
            cSQL = cSQL & ", EKvorJahr float"
            cSQL = cSQL & ", UmsBraktJahr float"
            cSQL = cSQL & ", UmsBrvorJahr float "
            cSQL = cSQL & ", UmsSEKaktJahr float "
            cSQL = cSQL & ", UmsSEKvorJahr float"
            
            cSQL = cSQL & ", UmsBrakt12M float"
            cSQL = cSQL & ", UmsBrvor12M float "
            cSQL = cSQL & ", UmsSEKakt12 float "
            cSQL = cSQL & ", UmsSEKvor12 float"
            
            cSQL = cSQL & ", UmsBr12MDIFFabs float"
            cSQL = cSQL & ", UmsBr12MDIFFrela float "
            cSQL = cSQL & ", UmsSEK12MDIFFabs float "
            cSQL = cSQL & ", UmsSEK12MDIFFrela float"
            
            cSQL = cSQL & ", LAGERST int "
            cSQL = cSQL & ", PENNERWSEK float "
            cSQL = cSQL & ", PENNERST int "
            
            cSQL = cSQL & ", PENANTEILST float "
            cSQL = cSQL & ", PENANTEILSEK float"
            
            cSQL = cSQL & ") "


        Case Is = "KUIBON"
            cSQL = "Create Table KUIBON ( "
            cSQL = cSQL & " Name BIT  "
            cSQL = cSQL & ", VORNAME BIT "
            cSQL = cSQL & ", titel BIT "
            cSQL = cSQL & ", FIRMA BIT "
            cSQL = cSQL & ", PLZ BIT "
            cSQL = cSQL & ", ORT BIT "
            cSQL = cSQL & ", STRASSE BIT "
            cSQL = cSQL & ", TEL BIT "
            cSQL = cSQL & ", MOBIL BIT "
            cSQL = cSQL & " ) "
        Case Is = "PREISE"
            cSQL = "Create Table PREISE ( "
            cSQL = cSQL & " Artnr int "
            cSQL = cSQL & ", PREISTYP tinyint "
            cSQL = cSQL & ", PREISWERT real "
            cSQL = cSQL & ", AENDER DATETIME"
            cSQL = cSQL & " ) "
        Case Is = "KUNDENWUNSCH"
            cSQL = "Create Table KUNDENWUNSCH ( "
            cSQL = cSQL & " Artnr int "
            cSQL = cSQL & ", Bezeich varchar(35) "
            cSQL = cSQL & ", Bestand int "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KUPR real "
            cSQL = cSQL & ", EKPR real "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", EAN2 varchar(13)"
            cSQL = cSQL & ", EAN3 varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", RKZ varchar(1)"
            cSQL = cSQL & ", MWST  varchar(1)"
            cSQL = cSQL & ", MINMEN int"
            cSQL = cSQL & ", MINBEST int"
            cSQL = cSQL & ", INHALT float "
            cSQL = cSQL & ", INHALTBEZ varchar(3) "
            cSQL = cSQL & ", GRUNDPREIS varchar(1) "
            cSQL = cSQL & ", Rabatt_ok  varchar(1)"
            cSQL = cSQL & ", Gefuehrt  varchar(1)"
            cSQL = cSQL & ", Bonus_ok  varchar(1)"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", AWM  varchar(2)"
            cSQL = cSQL & ", Aufdat DATETIME"
            cSQL = cSQL & ", EXDAT DATETIME"
            cSQL = cSQL & ", PGN int"
            cSQL = cSQL & ", Marke varchar(20) "
            cSQL = cSQL & ", Lagerp int"
            cSQL = cSQL & ", AUTOPOS Int IDENTITY"
            cSQL = cSQL & " )"
        Case Is = "STAMMFTP"
            cSQL = "Create Table STAMMFTP "
            cSQL = cSQL & " (FTPAD varchar(50)"
            cSQL = cSQL & ",FTPUS varchar(20)"
            cSQL = cSQL & ",FTPPA varchar(20)"
            cSQL = cSQL & ",FTPOFT smallint "
            cSQL = cSQL & ", LastFTP datetime"
            cSQL = cSQL & ", FTPNAME varchar(20) )"
    
        Case Is = "MBORDER"
            cSQL = "Create Table MBORDER "
            cSQL = cSQL & "( ARTNR int "
            cSQL = cSQL & ", MB tinyint "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", AENDWER tinyint "
            cSQL = cSQL & " ) "
            
         Case Is = "MBORDERDEL"
            cSQL = "Create Table MBORDERDEL "
            cSQL = cSQL & "( ARTNR int "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", AENDWER tinyint "
            cSQL = cSQL & " ) "
            
        Case Is = "MBORDERPR"
            cSQL = "Create Table MBORDERPR "
            cSQL = cSQL & "( ARTNR int "
            cSQL = cSQL & ", MB tinyint "
            cSQL = cSQL & ", FILIALE tinyint "
            cSQL = cSQL & ", LASTDATE DATETIME "
            cSQL = cSQL & ", SENDOK BIT "
            cSQL = cSQL & ", AENDWER tinyint "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LIEFBEZ varchar(35)"
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", AGN int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", BESTANDan int "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", EAN varchar(13) "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", FARBTEXT varchar(35)"
            cSQL = cSQL & ", FARBwert int "
            cSQL = cSQL & ", FARBwertS int "
            cSQL = cSQL & ", FARBNR smallint "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", ERSTDAT DATETIME "
            cSQL = cSQL & ", UW int "
            cSQL = cSQL & ", NEU varchar(1) "
            
            cSQL = cSQL & " ) "
            
        Case Is = "MBUNTER"
            cSQL = "Create Table MBUNTER "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", BESTAND smallint"
            cSQL = cSQL & ", MINBEST smallint"
            cSQL = cSQL & ", Filialnr tinyint"
            cSQL = cSQL & ", Linr int "
            cSQL = cSQL & ", Liefbez varchar(30) "
            cSQL = cSQL & ", BLOCK varchar(1) "
            cSQL = cSQL & ") "
    
        Case Is = "MBDETAIL"
            cSQL = "Create Table MBDETAIL "
            cSQL = cSQL & "(BVO float "
            cSQL = cSQL & ", von  DATETIME "
            cSQL = cSQL & ", bis  DATETIME "
            cSQL = cSQL & ", Tage smallint "
            cSQL = cSQL & ", optMon smallint "
            cSQL = cSQL & ", aFil smallint "
            cSQL = cSQL & ", iFil smallint "
            cSQL = cSQL & " ) "
        Case Is = "VK279"
            cSQL = "Create Table VK279 ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENGE smallint "
            cSQL = cSQL & ", Preis real "
            cSQL = cSQL & ", EPreis real"
'            cSQL = cSQL & ", ADATE DATETIME "
'            cSQL = cSQL & ", AZEIT varchar(8) "
'            cSQL = cSQL & ", KUNDNR int "
'            cSQL = cSQL & ", FILIALE tinyint "
'            cSQL = cSQL & ", KASNUM tinyint "
'            cSQL = cSQL & ", LINR int"
'            cSQL = cSQL & ", LPZ smallint"
'            cSQL = cSQL & ", AGN int "
'            cSQL = cSQL & ", PGN smallint "
'            cSQL = cSQL & ", EAN varchar(13)"
'            cSQL = cSQL & ", MWST varchar(1)"
'            cSQL = cSQL & ", EKPR real "
'            cSQL = cSQL & ", VKPR real "
'            cSQL = cSQL & ", KVKPR1 real "
'            cSQL = cSQL & ", MOPREIS real "
'            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
'            cSQL = cSQL & ", RABKENN varchar(1)"
'            cSQL = cSQL & ", KK_ART varchar(2)"
'            cSQL = cSQL & ", BEDIENER smallint "
'            cSQL = cSQL & ", UMS_OK varchar(1)"
'            cSQL = cSQL & ", Liefbez varchar(50) "
'            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & " ) "
             
        Case Is = "VK279A"
            cSQL = "Create Table VK279A ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", MENG smallint "
            cSQL = cSQL & ", Preis real "
            cSQL = cSQL & ", EPreis real "
'            cSQL = cSQL & ", ADATE DATETIME "
'            cSQL = cSQL & ", AZEIT varchar(8) "
'            cSQL = cSQL & ", KUNDNR int "
'            cSQL = cSQL & ", FILIALE tinyint "
'            cSQL = cSQL & ", KASNUM tinyint "
'            cSQL = cSQL & ", LINR int"
'            cSQL = cSQL & ", LPZ smallint"
'            cSQL = cSQL & ", AGN int "
'            cSQL = cSQL & ", PGN smallint "
'            cSQL = cSQL & ", EAN varchar(13)"
'            cSQL = cSQL & ", MWST varchar(1)"
'            cSQL = cSQL & ", EKPR real "
'            cSQL = cSQL & ", VKPR real "
'            cSQL = cSQL & ", KVKPR1 real "
'            cSQL = cSQL & ", MOPREIS real "
'            cSQL = cSQL & ", BELEGNR smallint "
            cSQL = cSQL & ", BEST1 smallint "
'            cSQL = cSQL & ", RABKENN varchar(1)"
'            cSQL = cSQL & ", KK_ART varchar(2)"
'            cSQL = cSQL & ", BEDIENER smallint "
'            cSQL = cSQL & ", UMS_OK varchar(1)"
'            cSQL = cSQL & ", Liefbez varchar(50) "
'            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & " ) "
             
    
        Case Is = "TABAK"
            cSQL = "Create Table TABAK (  "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", lfNr int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", AGN int"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", KVKPR1 float"
            cSQL = cSQL & ", LEKPR float"
            cSQL = cSQL & ", FAKTOR int"
            cSQL = cSQL & ", GPEAN varchar(13)"
            cSQL = cSQL & ", HWGN int"
            cSQL = cSQL & ", UWGN int"
            cSQL = cSQL & ", NOTIZEN varchar(35)"
            cSQL = cSQL & " ) "
    
        Case Is = "ART55I"
            cSQL = "Create Table ART55I "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ float "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEKPR float "
            cSQL = cSQL & ", KVKPR1 float "
            cSQL = cSQL & ", RKZ varchar(1) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", liefbez varchar(35) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", LASTZU DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
        Case Is = "FILAW"
            cSQL = "Create Table FILAW "
            cSQL = cSQL & "( FILWAHL varchar(255))"

        Case Is = "SORTMEWFS"
            cSQL = "Create Table SORTMEWFS "
            cSQL = cSQL & "( WGN int "
            cSQL = cSQL & ", WGNTEXT varchar(35) "
            cSQL = cSQL & ", EKPRakt real "
            cSQL = cSQL & ", UMSakt real "
            cSQL = cSQL & ", MENGakt real "
            cSQL = cSQL & ", EKPRvj real "
            cSQL = cSQL & ", UMSvj real "
            cSQL = cSQL & ", MENGvj real "
            cSQL = cSQL & ", NSP real "
            cSQL = cSQL & ", NSE real "
            cSQL = cSQL & ", NSPvj real "
            cSQL = cSQL & ", NSEvj real "
            cSQL = cSQL & ", LUG real "
            cSQL = cSQL & ", LAGERW real "
            cSQL = cSQL & ", LAGERWVKNETTO real "
            cSQL = cSQL & ", LAGERWERTRAG real "
            cSQL = cSQL & ", LAGERWNSP real "
            cSQL = cSQL & ", UMSAKTNETTO real "
            cSQL = cSQL & ", DECKUNG real "
            cSQL = cSQL & ") "
            
        Case Is = "PENLAGERMW"
            cSQL = "Create Table PENLAGERMW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", MARKE varchar(20)"
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "

        Case Is = "LAGERMW"
            cSQL = "Create Table LAGERMW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", Marke varchar(20) "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
        Case Is = "ART69"
            cSQL = "Create Table ART69 "
            cSQL = cSQL & "(ARTNR int "
            cSQL = cSQL & ", EKPR float "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ int "
            cSQL = cSQL & ", Marke varchar(20) "
            cSQL = cSQL & ", AUFDAT DATETIME "
            cSQL = cSQL & ", ERSTDAT DATETIME "
            cSQL = cSQL & ", EXDAT DATETIME "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & ", Monat varchar(30) "
            cSQL = cSQL & " ) "
        Case Is = "LUGEVER"
            cSQL = "Create Table LUGEVER "
            cSQL = cSQL & "(DATUM DATETIME "
            cSQL = cSQL & ", AVGLUG real) "

        Case Is = "LAGERW"
            cSQL = "Create Table LAGERW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
            
        Case Is = "PENLAGERW"
            cSQL = "Create Table PENLAGERW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
            
        Case Is = "PENLAGERLW"
            cSQL = "Create Table PENLAGERLW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
            
        Case Is = "PENLAGERLLW"
            cSQL = "Create Table PENLAGERLLW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
            
        Case Is = "LAGERLW"
            cSQL = "Create Table LAGERLW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
            
        Case Is = "LAGERLLW"
            cSQL = "Create Table LAGERLLW"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUM DATETIME "
            cSQL = cSQL & ", LINR int "
            cSQL = cSQL & ", LPZ smallint "
            cSQL = cSQL & ", SEK real "
            cSQL = cSQL & ", BEST int "
            cSQL = cSQL & " ) "
        Case Is = "GANALYSE"
            cSQL = "Create Table GANALYSE "
            cSQL = cSQL & "(DATUM DATETIME "
            cSQL = cSQL & ", Filiale tinyint "
            cSQL = cSQL & ", FilialeBEZ varchar(35) "
            cSQL = cSQL & ", LUGakt real "
            cSQL = cSQL & ", LUGaktdate DATETIME "
            cSQL = cSQL & ", LUGvj real "
            cSQL = cSQL & ", LUGvjdate DATETIME "
            cSQL = cSQL & ", KundenfrequenzZR real "
            cSQL = cSQL & ", KundenfrequenzVJZR real "
            cSQL = cSQL & ", KundenfrequenzENTWabs real "
            cSQL = cSQL & ", KundenfrequenzENTWrela real "
            cSQL = cSQL & ", ZRvon DATETIME "
            cSQL = cSQL & ", ZRbis DATETIME "
            cSQL = cSQL & ", VJZRvon DATETIME "
            cSQL = cSQL & ", VJZRbis DATETIME "
            cSQL = cSQL & ", werktageZR int "
            cSQL = cSQL & ", werktageVJZR int "
            cSQL = cSQL & ", KundenProTagproFilZR real "
            cSQL = cSQL & ", KundenProTagproFilVJZR real "
            
            cSQL = cSQL & ", NettoUmsatzZR real "
            cSQL = cSQL & ", NettoUmsatzVJZR real "
            cSQL = cSQL & ", NettoEinkaufZR real "
            cSQL = cSQL & ", NettoEinkaufVJZR real "
            
            cSQL = cSQL & ", NettoRabattZR real "
            cSQL = cSQL & ", NettoRabattVJZR real "
            
            cSQL = cSQL & ", NettoertragZR real "
            cSQL = cSQL & ", NettoertragVJZR real "
            cSQL = cSQL & ", NettoertragProTagproFilZR real "
            cSQL = cSQL & ", NettoertragProTagproFilVJZR real "
            
            cSQL = cSQL & ", NettospanneZR real "
            cSQL = cSQL & ", NettospanneVJZR real "
            cSQL = cSQL & ", NettoertragENTWabs real "
            cSQL = cSQL & ", NettoertragENTWrela real "
            
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", PennerBESTAND int "
            
            cSQL = cSQL & ", LagerwertSEK float "
            cSQL = cSQL & ", PennerLagerwertSEK float  "
            
            cSQL = cSQL & ", KBZR1 varchar(20)  "
            cSQL = cSQL & ", KBNULL1 float  "
            cSQL = cSQL & ", KBmit1 float  "
            cSQL = cSQL & ", TproKmit1 float  "
            cSQL = cSQL & ", TproKnull1 float  "
            cSQL = cSQL & ", NKU1 int  "
            cSQL = cSQL & ", NVK1 int  "
            cSQL = cSQL & ", ARTSCHWUND1 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW1 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG1 float  "
            
            cSQL = cSQL & ", KBZR2 varchar(20)  "
            cSQL = cSQL & ", KBNULL2 float  "
            cSQL = cSQL & ", KBmit2 float  "
            cSQL = cSQL & ", TproKmit2 float  "
            cSQL = cSQL & ", TproKnull2 float  "
            cSQL = cSQL & ", NKU2 int  "
            cSQL = cSQL & ", NVK2 int  "
            cSQL = cSQL & ", ARTSCHWUND2 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW2 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG2 float  "
            
            cSQL = cSQL & ", KBZR3 varchar(20)  "
            cSQL = cSQL & ", KBNULL3 float  "
            cSQL = cSQL & ", KBmit3 float  "
            cSQL = cSQL & ", TproKmit3 float  "
            cSQL = cSQL & ", TproKnull3 float  "
            cSQL = cSQL & ", NKU3 int  "
            cSQL = cSQL & ", NVK3 int  "
            cSQL = cSQL & ", ARTSCHWUND3 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW3 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG3 float  "
            
            cSQL = cSQL & ", KBZRVJ1 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj1 float  "
            cSQL = cSQL & ", KBmitvj1 float  "
            cSQL = cSQL & ", TproKmitvj1 float  "
            cSQL = cSQL & ", TproKnullvj1 float  "
            cSQL = cSQL & ", NKUVJ1 int  "
            cSQL = cSQL & ", NVKVJ1 int  "
            
            cSQL = cSQL & ", KBZRVJ2 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj2 float  "
            cSQL = cSQL & ", KBmitvj2 float  "
            cSQL = cSQL & ", TproKmitvj2 float  "
            cSQL = cSQL & ", TproKnullvj2 float  "
            cSQL = cSQL & ", NKUVJ2 int  "
            cSQL = cSQL & ", NVKVJ2 int  "
            
            cSQL = cSQL & ", KBZRVJ3 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj3 float  "
            cSQL = cSQL & ", KBmitvj3 float  "
            cSQL = cSQL & ", TproKmitvj3 float  "
            cSQL = cSQL & ", TproKnullvj3 float  "
            cSQL = cSQL & ", NKUVJ3 int  "
            cSQL = cSQL & ", NVKVJ3 int  "
            cSQL = cSQL & ", SENDOK BIT  "
            
            
            cSQL = cSQL & " ) "
            
        Case Is = "GANALYSEALL"
            cSQL = "Create Table GANALYSEALL "
            cSQL = cSQL & "(DATUM DATETIME "
            cSQL = cSQL & ", Filiale tinyint "
            cSQL = cSQL & ", FilialeBEZ varchar(35) "
            cSQL = cSQL & ", LUGakt real "
            cSQL = cSQL & ", LUGaktdate DATETIME "
            cSQL = cSQL & ", LUGvj real "
            cSQL = cSQL & ", LUGvjdate DATETIME "
            cSQL = cSQL & ", KundenfrequenzZR real "
            cSQL = cSQL & ", KundenfrequenzVJZR real "
            cSQL = cSQL & ", KundenfrequenzENTWabs real "
            cSQL = cSQL & ", KundenfrequenzENTWrela real "
            cSQL = cSQL & ", ZRvon DATETIME "
            cSQL = cSQL & ", ZRbis DATETIME "
            cSQL = cSQL & ", VJZRvon DATETIME "
            cSQL = cSQL & ", VJZRbis DATETIME "
            cSQL = cSQL & ", werktageZR int "
            cSQL = cSQL & ", werktageVJZR int "
            cSQL = cSQL & ", KundenProTagproFilZR real "
            cSQL = cSQL & ", KundenProTagproFilVJZR real "
            
            cSQL = cSQL & ", NettoUmsatzZR real "
            cSQL = cSQL & ", NettoUmsatzVJZR real "
            cSQL = cSQL & ", NettoEinkaufZR real "
            cSQL = cSQL & ", NettoEinkaufVJZR real "
            
            cSQL = cSQL & ", NettoRabattZR real "
            cSQL = cSQL & ", NettoRabattVJZR real "
            
            cSQL = cSQL & ", NettoertragZR real "
            cSQL = cSQL & ", NettoertragVJZR real "
            cSQL = cSQL & ", NettoertragProTagproFilZR real "
            cSQL = cSQL & ", NettoertragProTagproFilVJZR real "
            
            cSQL = cSQL & ", NettospanneZR real "
            cSQL = cSQL & ", NettospanneVJZR real "
            cSQL = cSQL & ", NettoertragENTWabs real "
            cSQL = cSQL & ", NettoertragENTWrela real "
            
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", PennerBESTAND int "
            
            cSQL = cSQL & ", LagerwertSEK float "
            cSQL = cSQL & ", PennerLagerwertSEK float  "
            
            cSQL = cSQL & ", KBZR1 varchar(20)  "
            cSQL = cSQL & ", KBNULL1 float  "
            cSQL = cSQL & ", KBmit1 float  "
            cSQL = cSQL & ", TproKmit1 float  "
            cSQL = cSQL & ", TproKnull1 float  "
            cSQL = cSQL & ", NKU1 int  "
            cSQL = cSQL & ", NVK1 int  "
            cSQL = cSQL & ", ARTSCHWUND1 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW1 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG1 float  "
            
            cSQL = cSQL & ", KBZR2 varchar(20)  "
            cSQL = cSQL & ", KBNULL2 float  "
            cSQL = cSQL & ", KBmit2 float  "
            cSQL = cSQL & ", TproKmit2 float  "
            cSQL = cSQL & ", TproKnull2 float  "
            cSQL = cSQL & ", NKU2 int  "
            cSQL = cSQL & ", NVK2 int  "
            cSQL = cSQL & ", ARTSCHWUND2 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW2 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG2 float  "
            
            cSQL = cSQL & ", KBZR3 varchar(20)  "
            cSQL = cSQL & ", KBNULL3 float  "
            cSQL = cSQL & ", KBmit3 float  "
            cSQL = cSQL & ", TproKmit3 float  "
            cSQL = cSQL & ", TproKnull3 float  "
            cSQL = cSQL & ", NKU3 int  "
            cSQL = cSQL & ", NVK3 int  "
            cSQL = cSQL & ", ARTSCHWUND3 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW3 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG3 float  "
            
            cSQL = cSQL & ", KBZRVJ1 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj1 float  "
            cSQL = cSQL & ", KBmitvj1 float  "
            cSQL = cSQL & ", TproKmitvj1 float  "
            cSQL = cSQL & ", TproKnullvj1 float  "
            cSQL = cSQL & ", NKUVJ1 int  "
            cSQL = cSQL & ", NVKVJ1 int  "
            
            cSQL = cSQL & ", KBZRVJ2 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj2 float  "
            cSQL = cSQL & ", KBmitvj2 float  "
            cSQL = cSQL & ", TproKmitvj2 float  "
            cSQL = cSQL & ", TproKnullvj2 float  "
            cSQL = cSQL & ", NKUVJ2 int  "
            cSQL = cSQL & ", NVKVJ2 int  "
            
            cSQL = cSQL & ", KBZRVJ3 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj3 float  "
            cSQL = cSQL & ", KBmitvj3 float  "
            cSQL = cSQL & ", TproKmitvj3 float  "
            cSQL = cSQL & ", TproKnullvj3 float  "
            cSQL = cSQL & ", NKUVJ3 int  "
            cSQL = cSQL & ", NVKVJ3 int  "
            cSQL = cSQL & ", SENDOK BIT  "
            cSQL = cSQL & " ) "
            
        Case Is = "GANALYSEALLT1"
            cSQL = "Create Table GANALYSEALLT1 "
            cSQL = cSQL & "(DATUM DATETIME "
            cSQL = cSQL & " ) "
            
        Case Is = "LSTEETI"
            cSQL = "Create Table LSTEETI "
            cSQL = cSQL & "( ARTNR int"
            cSQL = cSQL & ", BEZEICH varchar(35)"
            cSQL = cSQL & ", BESTAND int"
            cSQL = cSQL & ", ANZAHL int"
            cSQL = cSQL & ", VKPR float"
            cSQL = cSQL & ", LIBESNR varchar(13)"
            cSQL = cSQL & ", EAN varchar(13)"
            cSQL = cSQL & ", LPZ int"
            cSQL = cSQL & ", LINR int"
            cSQL = cSQL & ", FILNR int"
            cSQL = cSQL & ", WEDate DATETIME"
            cSQL = cSQL & ", LS varchar(20)"
            cSQL = cSQL & ") "
            
        Case Is = "GANALYSEPRINT"
            cSQL = "Create Table GANALYSEPRINT "
            cSQL = cSQL & "(DATUM DATETIME "
            cSQL = cSQL & ", Filiale tinyint "
            cSQL = cSQL & ", FilialeBEZ varchar(35) "
            cSQL = cSQL & ", LUGakt real "
            cSQL = cSQL & ", LUGaktdate DATETIME "
            cSQL = cSQL & ", LUGvj real "
            cSQL = cSQL & ", LUGvjdate DATETIME "
            cSQL = cSQL & ", KundenfrequenzZR real "
            cSQL = cSQL & ", KundenfrequenzVJZR real "
            cSQL = cSQL & ", KundenfrequenzENTWabs real "
            cSQL = cSQL & ", KundenfrequenzENTWrela real "
            cSQL = cSQL & ", ZRvon DATETIME "
            cSQL = cSQL & ", ZRbis DATETIME "
            cSQL = cSQL & ", VJZRvon DATETIME "
            cSQL = cSQL & ", VJZRbis DATETIME "
            cSQL = cSQL & ", werktageZR int "
            cSQL = cSQL & ", werktageVJZR int "
            cSQL = cSQL & ", KundenProTagproFilZR real "
            cSQL = cSQL & ", KundenProTagproFilVJZR real "
            
            cSQL = cSQL & ", NettoUmsatzZR real "
            cSQL = cSQL & ", NettoUmsatzVJZR real "
            cSQL = cSQL & ", NettoEinkaufZR real "
            cSQL = cSQL & ", NettoEinkaufVJZR real "
            
            cSQL = cSQL & ", NettoRabattZR real "
            cSQL = cSQL & ", NettoRabattVJZR real "
            
            cSQL = cSQL & ", NettoertragZR real "
            cSQL = cSQL & ", NettoertragVJZR real "
            cSQL = cSQL & ", NettoertragProTagproFilZR real "
            cSQL = cSQL & ", NettoertragProTagproFilVJZR real "
            
            cSQL = cSQL & ", NettospanneZR real "
            cSQL = cSQL & ", NettospanneVJZR real "
            cSQL = cSQL & ", NettoertragENTWabs real "
            cSQL = cSQL & ", NettoertragENTWrela real "
            
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", PennerBESTAND int "
            
            cSQL = cSQL & ", LagerwertSEK float "
            cSQL = cSQL & ", PennerLagerwertSEK float  "
            
            cSQL = cSQL & ", KBZR1 varchar(20)  "
            cSQL = cSQL & ", KBNULL1 float  "
            cSQL = cSQL & ", KBmit1 float  "
            cSQL = cSQL & ", TproKmit1 float  "
            cSQL = cSQL & ", TproKnull1 float  "
            cSQL = cSQL & ", NKU1 int  "
            cSQL = cSQL & ", NVK1 int  "
            cSQL = cSQL & ", ARTSCHWUND1 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW1 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG1 float  "
            
            cSQL = cSQL & ", KBZR2 varchar(20)  "
            cSQL = cSQL & ", KBNULL2 float  "
            cSQL = cSQL & ", KBmit2 float  "
            cSQL = cSQL & ", TproKmit2 float  "
            cSQL = cSQL & ", TproKnull2 float  "
            cSQL = cSQL & ", NKU2 int  "
            cSQL = cSQL & ", NVK2 int  "
            cSQL = cSQL & ", ARTSCHWUND2 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW2 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG2 float  "
            
            cSQL = cSQL & ", KBZR3 varchar(20)  "
            cSQL = cSQL & ", KBNULL3 float  "
            cSQL = cSQL & ", KBmit3 float  "
            cSQL = cSQL & ", TproKmit3 float  "
            cSQL = cSQL & ", TproKnull3 float  "
            cSQL = cSQL & ", NKU3 int  "
            cSQL = cSQL & ", NVK3 int  "
            cSQL = cSQL & ", ARTSCHWUND3 int  "
            cSQL = cSQL & ", ARTSCHWUNDSEKW3 float  "
            cSQL = cSQL & ", ARTSCHWUNDNERTRAG3 float  "
            
            cSQL = cSQL & ", KBZRVJ1 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj1 float  "
            cSQL = cSQL & ", KBmitvj1 float  "
            cSQL = cSQL & ", TproKmitvj1 float  "
            cSQL = cSQL & ", TproKnullvj1 float  "
            cSQL = cSQL & ", NKUVJ1 int  "
            cSQL = cSQL & ", NVKVJ1 int  "
            
            cSQL = cSQL & ", KBZRVJ2 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj2 float  "
            cSQL = cSQL & ", KBmitvj2 float  "
            cSQL = cSQL & ", TproKmitvj2 float  "
            cSQL = cSQL & ", TproKnullvj2 float  "
            cSQL = cSQL & ", NKUVJ2 int  "
            cSQL = cSQL & ", NVKVJ2 int  "
            
            cSQL = cSQL & ", KBZRVJ3 varchar(20)  "
            cSQL = cSQL & ", KBNULLvj3 float  "
            cSQL = cSQL & ", KBmitvj3 float  "
            cSQL = cSQL & ", TproKmitvj3 float  "
            cSQL = cSQL & ", TproKnullvj3 float  "
            cSQL = cSQL & ", NKUVJ3 int  "
            cSQL = cSQL & ", NVKVJ3 int  "
            cSQL = cSQL & ", SENDOK BIT  "
            
            
            cSQL = cSQL & " ) "
            
             
        End Select
        
        
        
        If gbSQLSERVER = False Then
            cSQL = SwapStr(cSQL, " varchar(", " text(")
            cSQL = SwapStr(cSQL, " int", " LONG")
            cSQL = SwapStr(cSQL, " float", " double")
            cSQL = SwapStr(cSQL, " real", " single")
            cSQL = SwapStr(cSQL, " tinyint", " byte")
            cSQL = SwapStr(cSQL, " ntext", " memo")
            cSQL = SwapStr(cSQL, " smallint", " integer")
            cSQL = SwapStr(cSQL, " Int IDENTITY", " autoincrement")
        End If
    
        If db.name = gdBase.name Then
            schreibeProtokollDabaAblauf cSQL: db.Execute cSQL, dbFailOnError + dbSQLPassThrough
        Else
        
            If Right(UCase(db.name), 11) = "KISSAPP.MDB" Then
                db.Execute cSQL, dbFailOnError
            Else
                db.Execute cSQL, dbSQLPassThrough + dbFailOnError
            End If
            
        End If


Exit Sub
LOKAL_ERROR:
    If err.Number = 3260 Then
        If ierrz < 5 Then
            ierrz = ierrz + 1
            Pause (1)
            Resume
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "CreateTableT2"
            Fehler.gsFehlertext = "Beim Erstellen der Tabelle nach 5 sec " & sTab & " in der Datenbank " & db.name & " ist ein Fehler aufgetreten."
            
            Fehlermeldung1
            Exit Sub
        End If
    ElseIf err.Number = 3010 Then
        Exit Sub
    Else

        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "CreateTableT2"
        Fehler.gsFehlertext = "Beim Erstellen der Tabelle " & sTab & " in der Datenbank " & db.name & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
       
    End If
End Sub
Public Sub CreateTableT3(sTab As String, db As Database)
    On Error GoTo LOKAL_ERROR
    
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim ierrz As Integer
    ierrz = 0
    
'            cSQL = SwapStr(cSQL, " varchar(", " text(")
'            cSQL = SwapStr(cSQL, " int", " LONG")
'            cSQL = SwapStr(cSQL, " float", " double")
'            cSQL = SwapStr(cSQL, " real", " single")
'            cSQL = SwapStr(cSQL, " tinyint", " byte")
'            cSQL = SwapStr(cSQL, " ntext", " memo")
'            cSQL = SwapStr(cSQL, " smallint", " integer")
'            cSQL = SwapStr(cSQL, " Int IDENTITY", " autoincrement")
        
    Select Case sTab
    
        Case "BTNBESCHRIFTUNG"
            cSQL = "Create Table BTNBESCHRIFTUNG "
            cSQL = cSQL & "( "
            cSQL = cSQL & " frmName varchar(35)"
            cSQL = cSQL & ", BTNText varchar(200)"
            cSQL = cSQL & ", CMDName varchar(200)"
            cSQL = cSQL & ", NrInForm int "
            cSQL = cSQL & ", DEUTSCH varchar(255) "
            cSQL = cSQL & ", LANG1 varchar(255) "
            cSQL = cSQL & ", Name varchar(255) "
            cSQL = cSQL & ", lfnr Int IDENTITY "
            cSQL = cSQL & ") "

    
        Case Is = "E183"
            cSQL = "Create Table E183 "
            cSQL = cSQL & "("
            cSQL = cSQL & " BO0 bit"
            cSQL = cSQL & ", BO1 bit"
            cSQL = cSQL & ", BO2 bit"
            cSQL = cSQL & ", BO3 bit"
            cSQL = cSQL & ", BO4 bit"
            cSQL = cSQL & " )"
            
            
        Case Is = "TSE_ONLEINSTELLUNG"
            cSQL = "Create Table TSE_ONLEINSTELLUNG"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " TSE_SCHREIBEN bit"
            cSQL = cSQL & ", APIKEY varchar(200)"
            cSQL = cSQL & ", APISECRET varchar(200)"
            cSQL = cSQL & ", TSEID varchar(200)"
            cSQL = cSQL & ", CLIENTID varchar(200) "
            cSQL = cSQL & " ) "
    
        Case Is = "TSE_EINSTELLUNG"
            cSQL = "Create Table TSE_EINSTELLUNG"
            cSQL = cSQL & " ( "
            
            cSQL = cSQL & " TSE_SCHREIBEN bit"
            cSQL = cSQL & ", ARBEITSWEISE varchar(250)"
            cSQL = cSQL & ", SERIENNR varchar(250)"
            cSQL = cSQL & ", IP varchar(30)"
            cSQL = cSQL & ", ADIMNPIN varchar(250) "
            cSQL = cSQL & ", TIMEADIMNPIN varchar(250) "
            cSQL = cSQL & ", LAUFWERK varchar(100) "
            cSQL = cSQL & " ) "
            
            
        Case Is = "KUNHAUTBILD_PRINT"
            cSQL = "Create Table KUNHAUTBILD_PRINT ( "
            cSQL = cSQL & " KUNDNR int "
            
            
            cSQL = cSQL & ", TEXT1 varchar(100) "
            cSQL = cSQL & ", TEXT2 varchar(100) "
            cSQL = cSQL & ", TEXT3 varchar(100) "
            cSQL = cSQL & ", TEXT4 varchar(100) "
            cSQL = cSQL & ", TEXT5 varchar(100) "
            cSQL = cSQL & ", TEXT6 varchar(100) "
            cSQL = cSQL & ", TEXT7 varchar(100) "
            cSQL = cSQL & ", TEXT8 varchar(100) "
            cSQL = cSQL & ", TEXT9 varchar(100) "
            cSQL = cSQL & ", TEXT10 varchar(100) "
            cSQL = cSQL & " ) "
            
        Case Is = "IDENE"
        
            cSQL = "Create Table IDENE "
            cSQL = cSQL & "("
            cSQL = cSQL & " IDENPfad varchar(200)"
            cSQL = cSQL & ", IDENLINR int "
            cSQL = cSQL & ", transf0 bit"
            cSQL = cSQL & ", transf1 bit"
            cSQL = cSQL & ", transf2 bit"
            cSQL = cSQL & ", transf3 bit"
            cSQL = cSQL & ", transf4 bit"
            cSQL = cSQL & ", transf5 bit"
            cSQL = cSQL & ", transf6 bit"
            cSQL = cSQL & ", transf7 bit"
            cSQL = cSQL & ", transf8 bit"
            cSQL = cSQL & " )"
        Case Is = "EXSTEU"
            cSQL = "Create Table EXSTEU"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " NURMITBESTAND BIT "
            cSQL = cSQL & " ,BL BIT "
            cSQL = cSQL & " ,EXNOR BIT "
            cSQL = cSQL & " ,BLKENNUNG varchar(20) "
            cSQL = cSQL & " ,PLUSEAN BIT "
            cSQL = cSQL & " ,PLUSBEZEICH BIT "
            cSQL = cSQL & " ,DATEIENDUNG varchar(3) "
            cSQL = cSQL & " ,FELDTRENNER varchar(20) "
            cSQL = cSQL & " ,SHOPARTIKEL BIT "
            cSQL = cSQL & " ,ShopPreis BIT "
            cSQL = cSQL & " ,MITUEBERSCHRIFT BIT "
            cSQL = cSQL & " ) "
    
        Case Is = "PSART"
            cSQL = "Create Table PSART ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEK real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & " )"
    
        Case Is = "TERMINE_ANL"
            cSQL = "Create Table TERMINE_ANL "
            cSQL = cSQL & "( "
            cSQL = cSQL & " BUCHUNGSNR float"
            cSQL = cSQL & ", ANLAGE_DATUM Datetime"
            cSQL = cSQL & ", UHRZEIT varchar(10)"
            cSQL = cSQL & ", BEDEINTRAG smallint "
            cSQL = cSQL & ", BEDNAME varchar(32) "
            cSQL = cSQL & ") "
    
        Case Is = "GEMISCHTE_Z"
        
            cSQL = "Create Table GEMISCHTE_Z "
            cSQL = cSQL & " ( "
            cSQL = cSQL & "WERT float "
            cSQL = cSQL & ",THEMA varchar(50) "
            cSQL = cSQL & ",ADATE Datetime "
            cSQL = cSQL & ",AZEIT varchar(8) "
            cSQL = cSQL & ",Filiale tinyint "
            cSQL = cSQL & ",KasNum tinyint "
            cSQL = cSQL & ",ZBONNR int "
            cSQL = cSQL & ",BELEGNR smallint "
            cSQL = cSQL & " ) "
            
        Case Is = "GEMISCHTE_ZP"
        
            cSQL = "Create Table GEMISCHTE_ZP "
            cSQL = cSQL & " ( "
            cSQL = cSQL & "WERT float "
            cSQL = cSQL & ",THEMA varchar(50) "
            cSQL = cSQL & ",ADATE Datetime "
            cSQL = cSQL & ",AZEIT varchar(8) "
            cSQL = cSQL & ",Filiale tinyint "
            cSQL = cSQL & ",KasNum tinyint "
            cSQL = cSQL & ",ZBONNR int "
            cSQL = cSQL & ",BELEGNR smallint "
            cSQL = cSQL & " ) "
        
    
        Case Is = "STICHTAG"
            cSQL = "Create Table STICHTAG ( "
            cSQL = cSQL & " Datum DATETIME "
            cSQL = cSQL & " )"

        Case Is = "FREIEZEIT"
            cSQL = "Create Table FREIEZEIT ( "
            cSQL = cSQL & " Startzeit varchar(8) "
            cSQL = cSQL & ", Endezeit varchar(8) "
            cSQL = cSQL & ", Dauer varchar(8) "
            cSQL = cSQL & ", DauerInMinuten int "
            cSQL = cSQL & ", Bediener int "
            cSQL = cSQL & ", Datum DATETIME "
            cSQL = cSQL & " )"
            
        Case Is = "FREIE_TERMINE"
            cSQL = "Create Table FREIE_TERMINE ( "
            cSQL = cSQL & " Startzeit varchar(8) "
            cSQL = cSQL & ", Endezeit varchar(8) "
            cSQL = cSQL & ", Dauer varchar(8) "
            cSQL = cSQL & ", DauerInMinuten int "
            cSQL = cSQL & ", Bediener int "
            cSQL = cSQL & ", Datum DATETIME "
            cSQL = cSQL & ", WOCHENTAG varchar(20) "
            cSQL = cSQL & ", TAGESZEIT varchar(20) "
            cSQL = cSQL & " )"
    
        Case Is = "SUM_FREIE_TERMINE"
            cSQL = "Create Table SUM_FREIE_TERMINE ( "
            cSQL = cSQL & " Bediener int "
            cSQL = cSQL & ", ANZAHL int "
            cSQL = cSQL & ", BEDNAME varchar(32) "
            cSQL = cSQL & ", FARBCODE float "
            cSQL = cSQL & ", FARBE varchar(20) "
            cSQL = cSQL & " )"
        Case Is = "NSPUNTER"
            cSQL = "Create Table NSPUNTER ( "
            cSQL = cSQL & " ARTNR int "
            cSQL = cSQL & ", BEZEICH varchar(35) "
            cSQL = cSQL & ", BESTAND int "
            cSQL = cSQL & ", MWST varchar(1) "
            cSQL = cSQL & ", LIBESNR varchar(13) "
            cSQL = cSQL & ", LEK real "
            cSQL = cSQL & ", VKPR real "
            cSQL = cSQL & ", KVKPR1 real "
            cSQL = cSQL & ", LINR float "
            cSQL = cSQL & ", LIEFBEZ varchar(35) "
            cSQL = cSQL & ", NSP real "
            cSQL = cSQL & ", LASTVK DATETIME "
            cSQL = cSQL & " )"
             
    
        Case Is = "SMS_UEBERSICHT"
            cSQL = "Create Table SMS_UEBERSICHT"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " DATUMBEHANDLUNG DATETIME"
            cSQL = cSQL & ", DATUMERINNERUNG DATETIME "
            cSQL = cSQL & " ) "
            
        Case Is = "KASSEIN"
            cSQL = "Create Table KASSEIN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " AUSBLDU BIT"
            cSQL = cSQL & ", AUSBLSH BIT"
            cSQL = cSQL & ", AUSBLLS BIT"
            cSQL = cSQL & ", NOGRAFIK BIT"
            cSQL = cSQL & ", NOBONGU BIT"
            cSQL = cSQL & ", BonGu2J BIT"
            
            cSQL = cSQL & ", FILALI smallint "
            cSQL = cSQL & ", STAPAU float "
            cSQL = cSQL & ", RESTGU float "
            cSQL = cSQL & ", PL BIT"
            cSQL = cSQL & ", KUDU BIT"
            cSQL = cSQL & ", GEBRABK BIT"
            cSQL = cSQL & ", OhnebestProt BIT"
            cSQL = cSQL & ", KeineBestVerWarengru BIT"
            
            cSQL = cSQL & ", UMSANZ BIT"
            cSQL = cSQL & ", KBMBI BIT"
            cSQL = cSQL & ", ZGAUSBLEND BIT"
            cSQL = cSQL & ", MGDETAILS BIT"
            cSQL = cSQL & ", BEDLEER BIT"
            cSQL = cSQL & ", BONNEIN BIT"
            cSQL = cSQL & ", BONWAHL BIT"
            cSQL = cSQL & ", KASSGEFUEHRT BIT"
            cSQL = cSQL & ", MITPREIS BIT"
            cSQL = cSQL & ", ARTRABH BIT"
            cSQL = cSQL & ", BARBON2 BIT"
            cSQL = cSQL & ", NOBONDRUCKER BIT"
            cSQL = cSQL & ", BARDINA4 BIT"
            cSQL = cSQL & ", DINA4RECHFU BIT"
            cSQL = cSQL & ", SPARSATZ BIT"
            cSQL = cSQL & ", RABVS BIT"
            cSQL = cSQL & ", RABATT BIT"
'            cSQL = cSQL & ", LEISTE2START BIT"
            cSQL = cSQL & ", IDENTUSER BIT"
            cSQL = cSQL & ", MBBLOCKFRAGE BIT"
            cSQL = cSQL & ", STERNE BIT"
            cSQL = cSQL & ", NEUKUNDEN BIT"
            cSQL = cSQL & ", KASSMBEST BIT"
            cSQL = cSQL & ", TPBF BIT"
            cSQL = cSQL & ", EKMAX BIT"
            cSQL = cSQL & ", NachKBbeiEC BIT"
            cSQL = cSQL & ", OpenSchubRetoure BIT"
            cSQL = cSQL & ", KUWAHLROT BIT"
            cSQL = cSQL & ", KUWAHLMAIL BIT"
            cSQL = cSQL & ", KUBONUS BIT"
            cSQL = cSQL & ", AUTOSEEK BIT"
            cSQL = cSQL & ", COUPON BIT"
            cSQL = cSQL & ", GUSTATTBAR BIT"
            cSQL = cSQL & ", MitStaffelPreis BIT"
            cSQL = cSQL & ", PLZGEBIET BIT"
            cSQL = cSQL & ", MitKundeWahlHinweis BIT"
            cSQL = cSQL & ", ZOLLARTBEZ varchar(50)"
            cSQL = cSQL & ", ZWEITMONI BIT"
            cSQL = cSQL & ", ZWEITMONIMINI BIT"
            cSQL = cSQL & ", DINA4VIS BIT"
            cSQL = cSQL & ", RETVK BIT"
            cSQL = cSQL & ", MitMwstAnteile BIT"
            cSQL = cSQL & ", ZOLLmMWST BIT"
            cSQL = cSQL & ", ZOLLonlyFirstPage BIT"
            cSQL = cSQL & ", ZOLLPrintDirekt BIT"
            cSQL = cSQL & ", Handelsspanne_Ausblenden BIT"
            cSQL = cSQL & ", AlterGutschein_Ausblenden BIT"
            cSQL = cSQL & ", KUBONUS_WENN BIT"
            cSQL = cSQL & ", KUBONUS_SCHWELLE real"
            cSQL = cSQL & ", nobonPAE BIT"
            cSQL = cSQL & ", SonderPreisDarstellen BIT"
            cSQL = cSQL & ", NOKUBONUS_AGRAB BIT"
            cSQL = cSQL & ", BARANZ BIT"
            cSQL = cSQL & ", VOREINPLZ1 varchar(5)"
            cSQL = cSQL & ", VOREINPLZ2 varchar(5)"
            cSQL = cSQL & ", RRArtnr int "
            cSQL = cSQL & ", BonusGrenzeArtnr int "
            cSQL = cSQL & ", BonusAuszahlungArtnr int "
            
            cSQL = cSQL & ", BaganzArtnr int "
            cSQL = cSQL & ", BaganzAR int "
            
            cSQL = cSQL & ", ZehnProzLinr int "
            cSQL = cSQL & ", ZehnProzArtnr int "
            
            cSQL = cSQL & ", LieblingArtnr int "
            cSQL = cSQL & ", LieblingAR int "
            
            cSQL = cSQL & ", WarenkorbWert float "
            cSQL = cSQL & ", WarenkorbGR float "
            
            cSQL = cSQL & ", AutoKundnrforKundBest int"
            cSQL = cSQL & ", AutoAusSchFiliale int"
            
            cSQL = cSQL & ", SCHWELLEWK real "
            cSQL = cSQL & ", NurBonusfRunden BIT "
            cSQL = cSQL & ", NachfragenbeiWGNohnePreis BIT "
            cSQL = cSQL & ", ABRUNDEN BIT "
            cSQL = cSQL & ", Runden varchar(1)"
            cSQL = cSQL & ", LEISTE2START BIT"
            cSQL = cSQL & ", EinfacheZollErstattung BIT "
            cSQL = cSQL & ", BestDateien BIT"
            cSQL = cSQL & ", FarbebeiPark smallint "
            cSQL = cSQL & ", GSArtnr int "
            cSQL = cSQL & ", stadap BIT"
            cSQL = cSQL & ", ZEITUNGSSPANNE float "
            cSQL = cSQL & ", PrimLinr int "
            cSQL = cSQL & ", ZeitungsLinr int "
            cSQL = cSQL & ", SPERRFRAGE varchar(250)"
            cSQL = cSQL & ", PaketLinr int "
            cSQL = cSQL & ", SPEZARTIKEL varchar(250)"
            cSQL = cSQL & ", RABATTAUSNAHMEARTIKEL varchar(250)"
            cSQL = cSQL & ", EDITKASSNR BIT"
            cSQL = cSQL & ", SpezFotoArtikel int "
            cSQL = cSQL & ", SpezLottoauszahlartikel int "
            cSQL = cSQL & ", SPEZBONTEXT ntext"
            cSQL = cSQL & ", SPEZBONTEXT2 ntext"
            cSQL = cSQL & ", SPEZBONTEXT3 ntext"
            cSQL = cSQL & ", SPEZBONTEXTU varchar(32)"
            cSQL = cSQL & ", SPEZBONARTRAB varchar(5)"
            cSQL = cSQL & ", KUWAHLGESPERRTROT BIT "
            cSQL = cSQL & ", BARGELDART int "
            cSQL = cSQL & ", RESTinBAR BIT "
            cSQL = cSQL & ", PLZGEBIET_AuchBeiKUWAHL BIT "
            cSQL = cSQL & ", FARBKASSE varchar(1)"
            cSQL = cSQL & ", DSDRUCKEN BIT"
            cSQL = cSQL & ", DS_GEB_DRUCKEN BIT"
            cSQL = cSQL & ", DSKLEIN BIT"
            cSQL = cSQL & ", DSMeldungErfolg BIT"
            cSQL = cSQL & ", SAVEREPORT BIT"
            cSQL = cSQL & ", ECauszahlartnr int "
            cSQL = cSQL & ", ECBILD varchar(1)"
            cSQL = cSQL & ", KK_VISA BIT"
            cSQL = cSQL & ", KK_EurocardMastercard BIT"
            cSQL = cSQL & ", KK_AmericanExpress BIT"
            cSQL = cSQL & ", KK_DinersClub BIT"
            cSQL = cSQL & ", KK_ECKarte BIT"
            cSQL = cSQL & ", KK_Sonstige BIT"
            cSQL = cSQL & ", KK_AliPay BIT"
            cSQL = cSQL & ", KK_ApplePay BIT"
            cSQL = cSQL & ", KK_GooglePay BIT"
            cSQL = cSQL & ", KK_PayPal BIT"
            cSQL = cSQL & ", KK_YabandPay BIT"
            cSQL = cSQL & ", ArtsucheArtFarb BIT"
            
            cSQL = cSQL & ", SMTP_SERVER varchar(50)"
            cSQL = cSQL & ", SMTP_USER varchar(50)"
            cSQL = cSQL & ", SMTP_PW varchar(50)"
            cSQL = cSQL & ", SMTP_PORT varchar(8)"
            
            cSQL = cSQL & ", SMTP_SSL BIT"
            
            cSQL = cSQL & " ) "
            
        Case "NACHRICHTEN"
            cSQL = "Create Table NACHRICHTEN"
            cSQL = cSQL & " ( "
            cSQL = cSQL & " lfnr int "
            cSQL = cSQL & ", ADATE DATETIME"
            cSQL = cSQL & ", AZEIT varchar(8) "
            cSQL = cSQL & ", AN_FILIALE int"
            cSQL = cSQL & ", MESSAGETEXT ntext "
            cSQL = cSQL & ", BETREFF varchar(250) "
            cSQL = cSQL & ", ABSENDER varchar(250) "
            cSQL = cSQL & ", VERSENDET BIT"
            cSQL = cSQL & ", ANGEKOMMEN BIT"
            cSQL = cSQL & ", GELESEN BIT"
            cSQL = cSQL & ", GELESEN_VONWEM varchar(250) "
            cSQL = cSQL & ", GELESEN_ADATE DATETIME"
            cSQL = cSQL & ", GELESEN_AZEIT varchar(8) "
            cSQL = cSQL & ", FELD1 BIT"
            cSQL = cSQL & ", FELD2 BIT"
            cSQL = cSQL & ", FELD3 BIT"
            cSQL = cSQL & ", FELD4 BIT"
            cSQL = cSQL & ", FELD5 BIT"
            cSQL = cSQL & ", FELD6 BIT"
            cSQL = cSQL & ", FELD7 BIT"
            cSQL = cSQL & ", FELD8 BIT"
            cSQL = cSQL & ", FELD9 BIT"
            cSQL = cSQL & ", FELD10 BIT"
            cSQL = cSQL & ", INFO1 varchar(50)"
            cSQL = cSQL & ", INFO2 varchar(50)"
            cSQL = cSQL & ", INFO3 varchar(50)"
            cSQL = cSQL & " ) "
            
    End Select
        
        
        
    If gbSQLSERVER = False Then
        cSQL = SwapStr(cSQL, " varchar(", " text(")
        cSQL = SwapStr(cSQL, " int", " LONG")
        cSQL = SwapStr(cSQL, " float", " double")
        cSQL = SwapStr(cSQL, " real", " single")
        cSQL = SwapStr(cSQL, " tinyint", " byte")
        cSQL = SwapStr(cSQL, " ntext", " memo")
        cSQL = SwapStr(cSQL, " smallint", " integer")
        cSQL = SwapStr(cSQL, " Int IDENTITY", " autoincrement")
    End If

    If db.name = gdBase.name Then
        schreibeProtokollDabaAblauf cSQL: db.Execute cSQL, dbFailOnError + dbSQLPassThrough
    Else
    
        If Right(UCase(db.name), 11) = "KISSAPP.MDB" Then
            db.Execute cSQL, dbFailOnError
        Else
            db.Execute cSQL, dbSQLPassThrough + dbFailOnError
        End If
        
    End If


Exit Sub
LOKAL_ERROR:
    If err.Number = 3260 Then
        If ierrz < 5 Then
            ierrz = ierrz + 1
            Pause (1)
            Resume
        Else
            Fehler.gsDescr = err.Description
            Fehler.gsNumber = err.Number
            Fehler.gsFormular = "Modul5"
            Fehler.gsFunktion = "CreateTableT3"
            Fehler.gsFehlertext = "Beim Erstellen der Tabelle nach 5 sec " & sTab & " in der Datenbank " & db.name & " ist ein Fehler aufgetreten."
            
            Fehlermeldung1
            Exit Sub
        End If
    ElseIf err.Number = 3010 Then
        Exit Sub
    Else

        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "CreateTableT3"
        Fehler.gsFehlertext = "Beim Erstellen der Tabelle " & sTab & " in der Datenbank " & db.name & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
       
    End If

End Sub
    
    
Public Sub LeseLieferschein(sTab As String, cbo As ComboBox)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim cLBSatz As String
    Dim cFeld As String
    
    cbo.Clear
    'Tabellesuchen
    If sTab = "ETIDRULS" Then
        If NewTableSuchenDBKombi("ETIDRULS", gdBase) = False Then
            'Tabelle erstellen
            CreateTableT2 "ETIDRULS", gdBase
        End If
    End If
    
    cSQL = "Select distinct LS from  " & sTab
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        Do While Not rsrs.EOF
            If Not IsNull(rsrs!LS) Then
                cFeld = rsrs!LS
                cbo.AddItem cFeld
            Else
                cFeld = ""
            End If
            rsrs.MoveNext
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "LeseLieferschein"
    Fehler.gsFehlertext = "Beim Ermitteln der Lieferscheinnummern ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub Combofuellen_TabX(sTab As String, cbo As ComboBox, sSpalte As String, sCboText As String)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim cLBSatz As String
    
    cbo.Clear
    
    cSQL = "Select distinct " & sSpalte & " from  " & sTab
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        Do While Not rsrs.EOF
            If Not IsNull(rsrs.Fields(0)) Then
                If rsrs.Fields(0) <> "" Then
                    cbo.AddItem rsrs.Fields(0)
                End If
            End If
            rsrs.MoveNext
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
    
    cbo.Text = sCboText
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Combofuellen_TabX"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub LeseLinie(cbo As ComboBox, sLinr As String)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim cLBSatz As String
    Dim cFeld As String
    
    cbo.Clear
    cbo.Refresh
    
    If sLinr = "" Then
        Exit Sub
    End If
    
    If IsNumeric(sLinr) = False Then
        Exit Sub
    End If
    
    cSQL = "Select * from LINBEZ where LINR = " & sLinr
    cSQL = cSQL & " and not lpz is null "
    cSQL = cSQL & " order by sorti  "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        Do While Not rsrs.EOF
            If Not IsNull(rsrs!LPZ) Then
                cFeld = rsrs!LPZ
                cLBSatz = cFeld & Space(5 - Len(cFeld))
            Else
                cFeld = ""
            End If
            
            If Not IsNull(rsrs!LINBEZEICH) Then
                cFeld = rsrs!LINBEZEICH
                cLBSatz = cLBSatz & cFeld
                cbo.AddItem cLBSatz
            Else
                cFeld = ""
            End If
            rsrs.MoveNext
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "LeseLinie"
    Fehler.gsFehlertext = "Beim Ermitteln der Linien ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub LeseLieferanten(cbo As ComboBox, cwhere As String)
On Error GoTo LOKAL_ERROR
    
    Dim cSQL    As String
    Dim rsrs    As Recordset
    Dim cLBSatz As String
    Dim cBez    As String
    Dim cKuerz  As String
    Dim cNum    As String
    Dim iSuch   As Byte
    'Welche Suchvoreinstellung für die Lieferantensuche
    'nach Nummer
    
    cbo.Clear
    
    cSQL = "select * from lisrt where( SYNSTATUS is null or SYNSTATUS = 'E' or SYNSTATUS = 'A' )"
    cSQL = cSQL & cwhere
    cSQL = cSQL & " and Liefbez is not null order by Liefbez"
   
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        Do While Not rsrs.EOF
            If Not IsNull(rsrs!LIEFBEZ) Then
                cBez = rsrs!LIEFBEZ
            Else
                cBez = ""
            End If
            
            If Not IsNull(rsrs!Kuerzel) Then
                cKuerz = rsrs!Kuerzel
            Else
                cKuerz = ""
            End If
            
            If Not IsNull(rsrs!linr) Then
                cNum = rsrs!linr
            Else
                cNum = ""
            End If
            
            
            cbo.AddItem cNum & Space(8 - Len(cNum)) & cBez & Space(35 - Len(cBez)) & cKuerz

            
            rsrs.MoveNext
        Loop
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "LeseLieferanten"
    Fehler.gsFehlertext = "Beim Ermitteln der Lieferantendaten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function ErmittleLinr(suchstring As String) As String
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL    As String
    Dim rsrs    As Recordset
    Dim cBez    As String
    Dim cKuerz  As String
    Dim cNum    As String
    
    ErmittleLinr = ""
    
    If Trim(Len(suchstring)) < 9 Then
        ErmittleLinr = Trim(suchstring)
    Else
        ErmittleLinr = Trim(Left(suchstring, 8))
    End If
    
    If Val(ErmittleLinr) = 0 Then
        ErmittleLinr = ""
        Exit Function
    End If
        
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ErmittleLinr"
    Fehler.gsFehlertext = "Beim Ermitteln der Lieferantendaten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub FormatGridOverTablay(stabelle As String)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsRL As Recordset
    Dim rsAL As Recordset
    
    Dim i As Byte
    Dim j As Byte
    
    sSQL = "Select * from TABLay" & srechnertab & " where ANZEIGE = 'J' and Tabname = '" & stabelle & "'"
    sSQL = sSQL & " order by Reihenf "
    Set rsRL = gdBase.OpenRecordset(sSQL)
    
    If Not rsRL.EOF Then
        rsRL.MoveLast
        byAnzahlSpalten = rsRL.RecordCount
        ReDim sSpaltenname(byAnzahlSpalten)
        ReDim sSpaltenbez(byAnzahlSpalten)
        ReDim sSpaltenAli(byAnzahlSpalten)
        ReDim aBreite(byAnzahlSpalten)
        rsRL.MoveFirst
        i = 0
        Do While Not rsRL.EOF
            sSpaltenname(i) = rsRL!Spaltenna
            
            sSQL = "Select * from TABALI" & srechnertab & " where  Tabname = '" & stabelle & "'"
            sSQL = sSQL & " and Spaltenna = '" & rsRL!Spaltenna & "'"
            Set rsAL = gdBase.OpenRecordset(sSQL)
            
            If Not rsAL.EOF Then
            
                If Not IsNull(rsAL!Spaltenali) Then
                    sSpaltenAli(i) = rsAL!Spaltenali
                End If
        
            End If
            rsAL.Close
            
            sSpaltenbez(i) = rsRL!Spaltenbez
            i = i + 1
            rsRL.MoveNext
        Loop
    End If
    rsRL.Close
    
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "FormatGridOverTablay"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
        
    Fehlermeldung1
'    Resume Next
End Sub
Public Sub bedcodewandeln(TT As TextBox)
On Error GoTo LOKAL_ERROR
        

    If Len(TT.Text) = 13 Then
        TT.Text = Left(TT.Text, 6) & Right(TT.Text, 6)
    End If
    
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "bedcodewandeln"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
        
    Fehlermeldung1
End Sub
Public Function iNKassjour(lartnr As Long) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    
    iNKassjour = False
    
    cSQL = "Select * from Kassjour where artnr = " & lartnr
    cSQL = cSQL & " and adate > " & CLng(DateValue(Now)) - 365
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        iNKassjour = True
    End If
    rsrs.Close
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "iNKassjour"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function iNKassjour_All(lartnr As Long) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    
    iNKassjour_All = False
    
    cSQL = "Select * from Kassjour where artnr = " & lartnr
'    cSQL = cSQL & " and adate > " & CLng(DateValue(Now)) - 365
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        iNKassjour_All = True
    End If
    rsrs.Close
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "iNKassjour_All"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function HoleFreieArtikelNrWKL10() As String
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsrs        As Recordset
    Dim lMaxNr      As Long
    Dim i           As Long
    Dim lFilVon     As Long
    Dim lFilbis     As Long
    Dim sFilvon     As String
    Dim sFilbis     As String
    Dim ctmp        As String
    
    HoleFreieArtikelNrWKL10 = ""
    
    If Trim(gcFilNr) = "0" Then
        lFilVon = glArtNrBeg
        lFilbis = 599999
        
    ElseIf Trim(gcFilNr) = "1" Then
        lFilVon = 551000
        lFilbis = 599999
    Else
        If Len(gcFilNr) = 2 Then
            sFilvon = "5" & gcFilNr & "000"
        ElseIf Len(gcFilNr) = 1 Then
            sFilvon = "50" & gcFilNr & "000"
        End If
        
        If Len(gcFilNr) = 2 Then
            sFilbis = "5" & gcFilNr & "999"
        ElseIf Len(gcFilNr) = 1 Then
            sFilbis = "50" & gcFilNr & "999"
        End If
        
        lFilVon = CLng(sFilvon)
        lFilbis = CLng(sFilbis)
    End If
    
    sSQL = "Select Top 1 Artnr + 1 as artnr2 "
    sSQL = sSQL & " from artikel t1 where t1.artnr + 1 not in  "
    sSQL = sSQL & " (SELECT  artnr  FROM artikel t2 where t2.artnr = t1.artnr + 1) "
    sSQL = sSQL & " and t1.artnr between " & lFilVon & " and " & lFilbis
    sSQL = sSQL & " and t1.artnr + 1 not in (SELECT  artnr  FROM ums_art t3 where t3.artnr = t1.artnr + 1) "
    sSQL = sSQL & " order by artnr asc "

    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!artnr2) Then
            HoleFreieArtikelNrWKL10 = rsrs!artnr2
        End If
    End If
    rsrs.Close
    
    
    'kleine Erweiterung für Goedecke - nicht entfernen
    If HoleFreieArtikelNrWKL10 = "" Then
        Set rsrs = gdBase.OpenRecordset("Artikel")
        rsrs.index = "ARTNR"
        Do While Not rsrs.EOF
            rsrs.MoveFirst
step1:
            rsrs.Seek "=", lFilVon
            If rsrs.NoMatch Then
                HoleFreieArtikelNrWKL10 = Format(lFilVon, "#####0")
                If iNKassjour_All(lFilVon) Then
                    lFilVon = lFilVon + 1
                    GoTo step1
                Else
                    Exit Function
                End If
            Else
                If lFilVon = lFilbis Then
                    Exit Function
                Else
                    lFilVon = lFilVon + 1
                    rsrs.MoveNext
                End If
            End If
        Loop
        rsrs.Close
    End If
    
    If HoleFreieArtikelNrWKL10 = "" Then
    
        ctmp = "Keine Artikelnummern verfügbar!" & vbCrLf & vbCrLf
        ctmp = ctmp & "In Ihrem Nummernkreis zwischen " & lFilVon & " und " & lFilbis & " befindet sich keine freie Artikelnummer (ohne Vergangenheitsdaten)." & vbCrLf & vbCrLf
        ctmp = ctmp & "Ihre Filialnummer: " & gcFilNr & vbCrLf & vbCrLf
        ctmp = ctmp & "Nachfolgend erhalten Sie Tipps wie Sie dieses Problem abstellen können."
        MsgBox ctmp, vbInformation, "Winkiss Hinweis:"
    
        URLGoTo frmWKL00.hwnd, "http://www.kisslive.de/winkiss/hilfe-bei-problemen/44-software-probleme-winkiss/243-keine-artikelnummern-verfuegbar.html"
        
        Exit Function
    
'        MsgBox "Keine freie Artikelnummer!", vbOKOnly, "Winkiss Hinweis:"

'''        Set rsrs = gdBase.OpenRecordset("Artikel", dbOpenTable)
'''        rsrs.Index = "ARTNR"
'''        Do While Not rsrs.EOF
'''            rsrs.MoveFirst
'''            rsrs.Seek "=", lFilVon
'''            If rsrs.NoMatch Then
'''
'''                HoleFreieArtikelNrWKL10 = Format$(lFilVon, "#####0")
'''
'''                If iNKassjour(lFilVon) Then
'''                    lFilVon = lFilVon + 1
'''                    rsrs.MoveNext
'''                Else
'''                    rsrs.Close: Set rsrs = Nothing
'''                    Exit Function
'''                End If
'''            Else
'''                If lFilVon = lFilbis Then
'''                    rsrs.Close: Set rsrs = Nothing
'''                    Exit Function
'''                Else
'''                    lFilVon = lFilVon + 1
'''                    rsrs.MoveNext
'''                End If
'''            End If
'''        Loop
'''        rsrs.Close: Set rsrs = Nothing
'''
'''        If lFilVon <> lFilbis Then
'''            HoleFreieArtikelNrWKL10 = Format$(lFilVon, "#####0")
'''        End If
    End If
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "HoleFreieArtikelNrWKL10"
    Fehler.gsFehlertext = "Beim Ermitteln der nächst freien Artikelnummer ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Sub Sicherheitslöschen(sArtnr As String)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    
    cSQL = "Delete from artlief where artnr = " & sArtnr
    gdBase.Execute cSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Sicherheitslöschen"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub DabaSicherung()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    giCopyMod = 2
    frmWK21n.Show 1
    
    giCopyMod = 0
    
    If NewTableSuchenDBKombi("SICHERUNG", gdBase) = False Then
        CreateTableT2 "SICHERUNG", gdBase
        
        sSQL = "Insert into Sicherung (Lastdate) values ('" & DateValue(Now) & "')"
        gdBase.Execute sSQL, dbFailOnError
    End If
    
    sSQL = "UPDATE SICHERUNG SET LASTDATE = '" & DateValue(Now) & "'"
    gdBase.Execute sSQL, dbFailOnError

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DabaSicherung"
    Fehler.gsFehlertext = "Beim Sichern der Datenbank ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function LeselastSicherung() As String
    On Error GoTo LOKAL_ERROR
    
    Dim rsSich As Recordset
    
    LeselastSicherung = ""
    If tableSuchenDBKombi("Sicherung", 1) Then
        Set rsSich = gdBase.OpenRecordset("Sicherung")
        If Not rsSich.RecordCount = 0 Then
            LeselastSicherung = rsSich!LASTDATE
        End If
        rsSich.Close
    End If

Exit Function
LOKAL_ERROR:
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "LeselastSicherung"
        Fehler.gsFehlertext = "Beim Lesen des letzten Sicherungsdatum ist ein Fehler aufgetreten."
        
        Fehlermeldung1
End Function
Public Function Datendrin(sTab As String, daba As Database) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim rs As Recordset
    
    Datendrin = False
    
    Set rs = daba.OpenRecordset(sTab, dbOpenTable)
    If rs.EOF Then
        Datendrin = False
    Else
        Datendrin = True
    End If
    rs.Close: Set rs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Datendrin"
    Fehler.gsFehlertext = "Beim Überprüfen der Tabelle " & sTab & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function DatendrinSQL(sSQLText As String, daba As Database) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim rs As Recordset
    
    DatendrinSQL = False
    
    Set rs = daba.OpenRecordset(sSQLText)
    If rs.EOF Then
        DatendrinSQL = False
    Else
        DatendrinSQL = True
    End If
    rs.Close: Set rs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DatendrinSQL"
    Fehler.gsFehlertext = "Beim Überprüfen der Tabelle ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermgpEAN() As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim rs As Recordset
    Dim sSQL As String
    sSQL = "select max(gpean) as maxi from DDFBEST"
    
    ermgpEAN = False
    
    Set rs = gdApp.OpenRecordset(sSQL)
    If Not rs.EOF Then
        rs.MoveFirst
        Do While Not rs.EOF
        If Not IsNull(rs!maxi) Then
            If Val(rs!maxi) > 0 Then
                ermgpEAN = True
                Exit Function
            End If
        Else
        
        End If
        rs.MoveNext
        Loop
    End If
    rs.Close: Set rs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermGPEAN"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function DatendrinWieviel(sTab As String, daba As Database) As Long
    On Error GoTo LOKAL_ERROR
    
    Dim rs As Recordset
    
    DatendrinWieviel = 0
    
    Set rs = daba.OpenRecordset(sTab, dbOpenTable)
    If rs.EOF Then
        DatendrinWieviel = 0
    Else
        DatendrinWieviel = rs.RecordCount
    End If
    rs.Close: Set rs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DatendrinWieviel"
    Fehler.gsFehlertext = "Beim Überprüfen der Tabelle " & sTab & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function BinNurIchDrin(daba As Database, sRechner) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim rs      As Recordset
    Dim sSQL    As String
    
    BinNurIchDrin = False
    
    
    sSQL = "Select * from USERSAFE "
    Set rs = daba.OpenRecordset(sSQL)
    If Not rs.EOF Then
        rs.MoveLast
        If rs.RecordCount = 1 Then
            If Not IsNull(rs!Pcname) Then
                If rs!Pcname = sRechner Then
                    BinNurIchDrin = True
                Else
                    BinNurIchDrin = False
                End If
            End If
            
        ElseIf rs.RecordCount > 1 Then
            BinNurIchDrin = False
        End If
    Else
        BinNurIchDrin = True
    End If
    rs.Close: Set rs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "BinNurIchDrin"
    Fehler.gsFehlertext = "Beim Usercheck ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function BinIchDrin(daba As Database, sRechner) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim rs      As Recordset
    Dim sSQL    As String
    
    BinIchDrin = False
    
    sSQL = "Select * from USERSAFE where pcname = '" & sRechner & "'"
    Set rs = daba.OpenRecordset(sSQL)
    If Not rs.EOF Then
        BinIchDrin = True
    End If
    rs.Close: Set rs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "BinIchDrin"
    Fehler.gsFehlertext = "Beim Usercheck ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub speicherZbon(sDrucker As String)
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String
    
    sSQL = "Update WKEINSTE Set ZBON = '" & sDrucker & "' "
    gdApp.Execute sSQL, dbFailOnError
    
Exit Sub

LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "speicherZbon"
    Fehler.gsFehlertext = "Beim Speichern der Druckeinstellung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub speicherZählBeleg(sDrucker As String)
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String
    
    sSQL = "Update WKEINSTE Set ZAEHLBELEG = '" & sDrucker & "' "
    gdApp.Execute sSQL, dbFailOnError
    
 Exit Sub

LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "speicherZählBeleg"
    Fehler.gsFehlertext = "Beim Speichern der Druckeinstellung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function LeseVoreinap(schluessel As String) As Boolean
    On Error GoTo LOKAL_ERROR
        Dim sSQL As String
        Dim rs As Recordset
        
        LeseVoreinap = False
        
        sSQL = "Select * from VOREINAP where Schluessel = '" & schluessel & "' "
        sSQL = sSQL & " and Wert = 'EIN' "
        Set rs = gdApp.OpenRecordset(sSQL)
        If rs.RecordCount <> 0 Then
            LeseVoreinap = True
        End If
        rs.Close: Set rs = Nothing
        
    Exit Function

LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "LeseVoreinap"
    Fehler.gsFehlertext = "Beim Lesen der Voreinstellungen ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub UpdateUSERSAFE(userNr As String, usernam As String)
On Error GoTo LOKAL_ERROR
    
    Dim sSQL            As String
    Dim sRechner        As String
    Dim cPfad           As String
    Dim SafeDB          As Database
    
    Screen.MousePointer = 11
    
    cPfad = gcDBPfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    sRechner = rechnername
    
    
    cPfad = cPfad & "SAFE.MDB"
    
    If FileExists(cPfad) = False Then
        Kill cPfad
    
        Set SafeDB = CreateDatabase(cPfad, dbLangGeneral, dbVersion40)
        CreateTable "USERSAFE", SafeDB
    Else
        Set SafeDB = OpenDatabase(cPfad, False, False)
        If Not NewTableSuchenDBKombi("USERSAFE", SafeDB) Then
            CreateTable "USERSAFE", SafeDB
        End If
    End If

    'Vorarbeit geleistet
    

    sSQL = "Update USERSAFE set BEDNR = '" & userNr & "'"
    sSQL = sSQL & ", Bedname = '" & usernam & "'"
    sSQL = sSQL & ", Datum = '" & DateValue(Now) & "'"
    sSQL = sSQL & ", Zeit = '" & TimeValue(Now) & "'"
    sSQL = sSQL & " where pcname = '" & sRechner & "'"
    SafeDB.Execute sSQL
    

    SafeDB.Close
    
    Screen.MousePointer = 0
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "UpdateUSERSAFE"
        Fehler.gsFehlertext = "Bei der Anmeldung ist ein Fehler aufgetreten."
        Fehlermeldung1
    End If

End Sub
Public Sub AnmeldungDabaNew()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL            As String
    Dim sRechner        As String
    Dim cPfad           As String
    Dim cPfad1           As String
    Dim SafeDB          As Database
    
    cPfad = gcDBPfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad1 = gcDBPfad
    If Right$(cPfad1, 1) <> "\" Then
        cPfad1 = cPfad1 & "\"
    End If
    
    sRechner = rechnername
    sRechner = SwapStr(sRechner, ".", "")
    
    cPfad = cPfad & "SAFE.MDB"
    
    If FileExists(cPfad) = False Then
        Kill cPfad
    
        Set SafeDB = CreateDatabase(cPfad, dbLangGeneral, dbVersion40)
    Else
        Set SafeDB = OpenDatabase(cPfad, False, False)
    End If
    
    frmWKL00!txtStatus.Text = 91
    If Not NewTableSuchenDBKombi("USERSAFE", SafeDB) Then
        CreateTable "USERSAFE", SafeDB
    End If
    
    frmWKL00!txtStatus.Text = 92
    
    'Vorarbeit geleistet
    
    'Bin ich der 1.
    'mittels Bistdualleine_funktion
    
    If BistDualleineinderDatenbank Then
        frmWKL00!txtStatus.Text = 93
        'jetzt kann man sagen Du bist der erste in der DB
        'dann ckecken ob noch Usereinträge vorhanden
        
        
            If Datendrin("USERSAFE", SafeDB) = True Then
                frmWKL00!txtStatus.Text = 94
            
                'noch Datendrin - Mecker
                Protokolliere SafeDB
                giUmleitgrund = 0
                gcUmleittxt = "Dieses Winkiss - Programm wurde nicht ordnungsgemäß beendet." & vbCrLf
                gcUmleittxt = gcUmleittxt & "Das kann zu schweren Datenbankfehlern führen." & vbCrLf & vbCrLf
                gcUmleittxt = gcUmleittxt & "Bitte beenden Sie Winkiss über die Schaltfläche 'Ende' und " & vbCrLf
                gcUmleittxt = gcUmleittxt & "fahren Sie Ihren Rechner immer ordnungsgemäß herunter." & vbCrLf
                gcUmleittxt = gcUmleittxt & "Die Datenbank wird jetzt einer Routineüberprüfung unterzogen." & vbCrLf
                gcUmleittxt = gcUmleittxt & "Klicken Sie dazu auf 'Weiter'." & vbCrLf
                
                If FileExists(cPfad1 & "LPROTOK\Start.txt") Then
                
                Else
                    frmWKL60.Show 1
                End If
                
                loeschNEW "USERSAFE", SafeDB
                CreateTable "USERSAFE", SafeDB
                
                EintrageninUSERSAFE sRechner, SafeDB
            Else
                frmWKL00!txtStatus.Text = 94
            
                EintrageninUSERSAFE sRechner, SafeDB
            
            End If
        
    Else
        If BinIchDrin(SafeDB, sRechner) = True Then
            frmWKL00!txtStatus.Text = 93
        
            'noch Datendrin - Mecker
            ProtokolliereSpezRechner SafeDB, sRechner
            giUmleitgrund = 0
            gcUmleittxt = "Dieses Winkiss - Programm wurde nicht ordnungsgemäß beendet." & vbCrLf
            gcUmleittxt = gcUmleittxt & "Das kann zu schweren Datenbankfehlern führen." & vbCrLf & vbCrLf
            gcUmleittxt = gcUmleittxt & "Bitte beenden Sie Winkiss über die Schaltfläche 'Ende' und " & vbCrLf
            gcUmleittxt = gcUmleittxt & "fahren Sie Ihren Rechner immer ordnungsgemäß herunter." & vbCrLf
            gcUmleittxt = gcUmleittxt & "Die Datenbank wird jetzt einer Routineüberprüfung unterzogen." & vbCrLf
            gcUmleittxt = gcUmleittxt & "Klicken Sie dazu auf 'Weiter'." & vbCrLf
            
            frmWKL60.Show 1
            
            AustrageninUSERSAFE sRechner, SafeDB
            EintrageninUSERSAFE sRechner, SafeDB
        
        Else
            frmWKL00!txtStatus.Text = 93
            EintrageninUSERSAFE sRechner, SafeDB
        
        End If
    
    
    
        
        
    
    End If
    
    SafeDB.Close
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "AnmeldungDabaNew"
        Fehler.gsFehlertext = "Bei der Anmeldung ist ein Fehler aufgetreten."
        Fehlermeldung1
    End If
    
    
End Sub
Public Sub AbmeldungDabaNew()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL            As String
    Dim sRechner        As String
    Dim cPfad           As String
    Dim SafeDB          As Database
    
    sErrDabapfad = ""
    
    cPfad = gcDBPfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    sRechner = rechnername

    cPfad = cPfad & "SAFE.MDB"
    
    If FileExists(cPfad) = False Then
        Kill cPfad
        Set SafeDB = CreateDatabase(cPfad, dbLangGeneral, dbVersion40)
    Else
        sErrDabapfad = cPfad
        Set SafeDB = OpenDatabase(cPfad, False, False)
    End If
    
    frmWKL00!txtStatus.Text = 39
    If Not NewTableSuchenDBKombi("USERSAFE", SafeDB) Then
        CreateTable "USERSAFE", SafeDB
    End If
    
    'Vorarbeit geleistet
    
    'Bin ich der 1.
    'mittels Bistdualleine_funktion
    frmWKL00!txtStatus.Text = 38
    If BistDualleineinderDatenbank Then
        
        'jetzt kann man sagen Du bist der LETZTE in der DB
        'dann ckecken ob noch Usereinträge vorhanden
        frmWKL00!txtStatus.Text = 36
        If BinNurIchDrin(SafeDB, sRechner) = True Then
            
            'alles ok
            AustrageninUSERSAFE sRechner, SafeDB
            frmWKL00!txtStatus.Text = 35
        
        Else
        
            'noch Datendrin(nicht ich) - Mecker
            AustrageninUSERSAFE sRechner, SafeDB
            Protokolliere SafeDB
            
            giUmleitgrund = 0
            gcUmleittxt = "Dieses Winkiss - Programm wurde nicht ordnungsgemäß beendet." & vbCrLf
            gcUmleittxt = gcUmleittxt & "Das kann zu schweren Datenbankfehlern führen." & vbCrLf & vbCrLf
            gcUmleittxt = gcUmleittxt & "Bitte beenden Sie Winkiss über die Schaltfläche 'Ende' und " & vbCrLf
            gcUmleittxt = gcUmleittxt & "fahren Sie Ihren Rechner immer ordnungsgemäß herunter." & vbCrLf
            gcUmleittxt = gcUmleittxt & "Die Datenbank wird jetzt einer Routineüberprüfung unterzogen." & vbCrLf
            gcUmleittxt = gcUmleittxt & "Klicken Sie dazu auf 'Weiter'." & vbCrLf
            
            
            
            frmWKL60.Show 1
            
        End If
        
    Else
        frmWKL00!txtStatus.Text = 36
        AustrageninUSERSAFE sRechner, SafeDB
    End If
    
    
    
    SafeDB.Close

    
Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    ElseIf err.Number = 3343 Then
    
        giUmleitgrund = 2 'Datenbankpfad muß rep
        
        gcUmleittxt = "Ihre Datenbank ist beschädigt. " & sErrDabapfad & vbCrLf
        gcUmleittxt = gcUmleittxt & "Beenden Sie alle anderen Programme auf allen anderen Computern! " & vbCrLf & vbCrLf
        gcUmleittxt = gcUmleittxt & "Drücken Sie 'reparieren', um dann die Datenbank zu reparieren!" & vbCrLf
        
        frmWKL60.Show 1
        
        Resume
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "AbmeldungDabaNew"
        Fehler.gsFehlertext = "Bei der Abmeldung ist ein Fehler aufgetreten."
        Fehlermeldung1
    End If
    
    
End Sub
Public Sub EintrageninUSERSAFE(sRechner As String, db As Database)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL            As String
    
    sSQL = "Insert into USERSAFE (PCNAME,Datum,Zeit) values ('" & sRechner & "' "
    sSQL = sSQL & ", '" & DateValue(Now) & "','" & TimeValue(Now) & "') "
    db.Execute sSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "EintrageninUSERSAFE"
    Fehler.gsFehlertext = "Bei der Anmeldung ist ein Fehler aufgetreten."
    Fehlermeldung1
End Sub
Public Sub Protokolliere(db As Database)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL            As String
    Dim rs              As Recordset
    
    
    sSQL = "Select * from USERSAFE "
    Set rs = db.OpenRecordset(sSQL)
    If Not rs.EOF Then
        rs.MoveFirst
        Do While Not rs.EOF
            If Not IsNull(rs!Pcname) Then
                DBFehler.gsPcname = rs!Pcname
            Else
                DBFehler.gsPcname = ""
            End If
            
            If Not IsNull(rs!Datum) Then
                DBFehler.gsDatum = rs!Datum
            Else
                DBFehler.gsDatum = ""
            End If
            
            If Not IsNull(rs!zeit) Then
                DBFehler.gsZeit = rs!zeit
            Else
                DBFehler.gsZeit = ""
            End If
            
            If Not IsNull(rs!BEDNR) Then
                DBFehler.gsBednr = rs!BEDNR
            Else
                DBFehler.gsBednr = ""
            End If
            
            If Not IsNull(rs!bedname) Then
                DBFehler.gsBedname = rs!bedname
            Else
                
                DBFehler.gsBedname = ""
            End If
            

            schreibeProtokollDabaFehlerAbmeldung DBFehler
        
        rs.MoveNext
        Loop
    End If
    rs.Close: Set rs = Nothing
    
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Protokolliere"
    Fehler.gsFehlertext = "Bei der Anmeldung ist ein Fehler aufgetreten."
    Fehlermeldung1
End Sub
Public Sub ProtokolliereSpezRechner(db As Database, sRechner As String)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL            As String
    Dim rs              As Recordset
    
    
    sSQL = "Select * from USERSAFE where pcname = '" & sRechner & "'"
    Set rs = db.OpenRecordset(sSQL)
    If Not rs.EOF Then
        rs.MoveFirst
        Do While Not rs.EOF
            If Not IsNull(rs!Pcname) Then
                DBFehler.gsPcname = rs!Pcname
            Else
                DBFehler.gsPcname = ""
            End If
            
            If Not IsNull(rs!Datum) Then
                DBFehler.gsDatum = rs!Datum
            Else
                DBFehler.gsDatum = ""
            End If
            
            If Not IsNull(rs!zeit) Then
                DBFehler.gsZeit = rs!zeit
            Else
                DBFehler.gsZeit = ""
            End If
            
            If Not IsNull(rs!BEDNR) Then
                DBFehler.gsBednr = rs!BEDNR
            Else
                DBFehler.gsBednr = ""
            End If
            
            If Not IsNull(rs!bedname) Then
                DBFehler.gsBedname = rs!bedname
            Else
                
                DBFehler.gsBedname = ""
            End If
            
            schreibeProtokollDabaFehlerAbmeldung DBFehler
        
        rs.MoveNext
        Loop
    End If
    rs.Close: Set rs = Nothing
    
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ProtokolliereSpezRechner"
    Fehler.gsFehlertext = "Bei der Anmeldung ist ein Fehler aufgetreten."
    Fehlermeldung1
End Sub
Public Sub AustrageninUSERSAFE(sRechner As String, db As Database)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL            As String
    
    sSQL = "Delete from USERSAFE where PCNAME = '" & sRechner & "'"
    db.Execute sSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AustrageninUSERSAFE"
    Fehler.gsFehlertext = "Bei der Anmeldung ist ein Fehler aufgetreten."
    Fehlermeldung1
End Sub
Public Sub AktionAustragen(sAktion As String)
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad23 As String
    
    cPfad23 = gcDBPfad               'Datenbankpfad
    If Right(cPfad23, 1) <> "\" Then
        cPfad23 = cPfad23 & "\"
    End If
    Kill cPfad23 & sAktion & ".txt"
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "AktionAustragen"
        Fehler.gsFehlertext = "Bei der Freigabe der Aktion: " & sAktion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Function DatumLastKompZeitAnzeigen() As String
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    DatumLastKompZeitAnzeigen = ""
    sSQL = "Select * from DBEINSTE "
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!LastKompTime) Then
            DatumLastKompZeitAnzeigen = rsrs!LastKompTime
        Else
            DatumLastKompZeitAnzeigen = rsrs!LastKompTime
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DatumLastKompZeitAnzeigen"
    Fehler.gsFehlertext = "Es trat ein Fehler  auf. "
    
    Fehlermeldung1
End Function
Public Function DatumLastKompAnzeigen() As String
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim sDate As String
    Dim rsrs As Recordset
    
    DatumLastKompAnzeigen = ""
    sSQL = "Select * from DBEINSTE "
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        sDate = IIf(IsNull(rsrs!LastKomp), DateValue(Now) - 8, rsrs!LastKomp)
        DatumLastKompAnzeigen = sDate
    End If
    rsrs.Close: Set rsrs = Nothing
    
    
Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DatumLastKompAnzeigen"
    Fehler.gsFehlertext = "Es trat ein Fehler  auf. "
    
    Fehlermeldung1
End Function
Public Function DatumLastSuniW() As String
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim sDate As String
    Dim rsrs As Recordset
    
    DatumLastSuniW = ""
    
    sSQL = "Update Statist SET Lastausw = datevalue(now)"
    sSQL = sSQL & " where art = 'W' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Select * from Statist where art = 'W' "
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        sDate = IIf(IsNull(rsrs!Lastausw), "", rsrs!Lastausw)
    End If
    rsrs.Close: Set rsrs = Nothing
    DatumLastSuniW = sDate
    
Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DatumLastSuniW"
    Fehler.gsFehlertext = "Es trat ein Fehler im Programmteil Programmeinstellungen auf. "
    
    Fehlermeldung1
End Function
Public Function DatumLastSuniM() As String
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim sDate As String
    Dim rsrs As Recordset
    
    DatumLastSuniM = ""
    
    sSQL = "Update Statist SET Lastausw = datevalue(now)"
    sSQL = sSQL & " where art = 'M' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Select * from Statist where art = 'M' "
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        sDate = IIf(IsNull(rsrs!Lastausw), "", rsrs!Lastausw)
    End If
    rsrs.Close: Set rsrs = Nothing
    DatumLastSuniM = sDate
    
Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DatumLastSuniM"
    Fehler.gsFehlertext = "Es trat ein Fehler im Programmteil Programmeinstellungen auf. "
    
    Fehlermeldung1
End Function
Public Function IsAktionZulaessig(sAktion As String) As Boolean
    On Error GoTo LOKAL_ERROR
    
    IsAktionZulaessig = False
    
    Dim cPfad23 As String
    
    cPfad23 = gcDBPfad               'Datenbankpfad
    If Right(cPfad23, 1) <> "\" Then
        cPfad23 = cPfad23 & "\"
    End If
    
    cPfad23 = cPfad23 & sAktion & ".txt"
    
    If UCase(sAktion) = "KOMPRIMIERUNG" Then
    
        If gbnachkomp = True Then
            Kill cPfad23
            gbnachkomp = False
        End If
    End If
    
    If FileExists(cPfad23) Then
        'Zeig die Blockermeldung
        gsAnzeigeText = "Sie können die Funktion: " & sAktion & " nicht durchführen." & vbCrLf
        gsAnzeigeText = gsAnzeigeText & "Ein anderer Computer ist damit beschäftigt." & vbCrLf
        frmWK21m.Label1.Caption = sAktion
        frmWK21m.Show 1
    Else
        'Schreib den Blocker
        schreibeAktionStop cPfad23, sAktion
        IsAktionZulaessig = True
    End If
    
Exit Function
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "IsAktionZulaessig"
        Fehler.gsFehlertext = "Bei der Datenbankaktion: " & sAktion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Function
Public Function IsAktionZulaessig_Kassenabschluss_LM() As Boolean
    On Error GoTo LOKAL_ERROR
    
    IsAktionZulaessig_Kassenabschluss_LM = False
    
    Dim cPfad23 As String
    
    cPfad23 = gcDBPfad               'Datenbankpfad
    If Right(cPfad23, 1) <> "\" Then
        cPfad23 = cPfad23 & "\"
    End If
    
    cPfad23 = cPfad23 & "Kassenabschluss.txt"
    
    If FileExists(cPfad23) Then
        'Zeig die Blockermeldung
        
        gsAnzeigeText = "Sie können den Kassenabschluss noch nicht durchführen." & vbCrLf
        gsAnzeigeText = gsAnzeigeText & "Ein anderer Computer ist damit beschäftigt." & vbCrLf
        
        frmWK21p.Label1.Caption = "Kassenabschluss"
        frmWK21p.Show 1
        
    Else
        'Schreib den Blocker
        schreibeAktionStop cPfad23, "Kassenabschluss"
        IsAktionZulaessig_Kassenabschluss_LM = True
    End If
    
Exit Function
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "IsAktionZulaessig_Kassenabschluss_LM"
        Fehler.gsFehlertext = "Bei der Datenbankaktion: Kassenabschluss ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Function
Public Sub mdevorcheck()
    On Error GoTo LOKAL_ERROR
    
    Dim lWert   As Long
    Dim cPfad   As String
    Dim cPfad1  As String
    Dim cQuelle As String
    Dim cZiel   As String
    Dim lfail   As Long
    Dim lRet    As Long
    
    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad1 = gcPfad    'apppfad
    If Right$(cPfad1, 1) <> "\" Then
        cPfad1 = cPfad1 & "\"
    End If
    
    
    If FindFile(cPfad1, "232_READ.exe") Then
        'kopiere
        cQuelle = cPfad1 & "232_READ.exe"
        cZiel = cPfad & "232_READ.exe"
        lRet = CopyFile(cQuelle, cZiel, lfail)
            
    End If
    
    If FindFile(cPfad1, "232_READ.ini") Then
        'kopiere
        cQuelle = cPfad1 & "232_READ.ini"
        cZiel = cPfad & "232_READ.ini"
        lRet = CopyFile(cQuelle, cZiel, lfail)
    End If
    
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "mdevorcheck"
    Fehler.gsFehlertext = "Beim der Dateiüberprüfung mdevor ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub mdevorcheckApp_Data_Read()
    On Error GoTo LOKAL_ERROR
    
    Dim lWert   As Long
    Dim cPfad   As String
    Dim cPfad1  As String
    Dim cQuelle As String
    Dim cZiel   As String
    Dim lfail   As Long
    Dim lRet    As Long
    
    cPfad = gcPfad    'App pfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad1 = gcDBPfad    'Datenbankpfad
    If Right$(cPfad1, 1) <> "\" Then
        cPfad1 = cPfad1 & "\"
    End If
    
    
    If FindFile(cPfad1, "Data_Read.exe") Then
        'kopiere
        cQuelle = cPfad1 & "Data_Read.exe"
        cZiel = cPfad & "Data_Read.exe"
        lRet = CopyFile(cQuelle, cZiel, lfail)
            
    End If
    
    If FindFile(cPfad1, "Data_Read.ini") Then
        'kopiere
        cQuelle = cPfad1 & "Data_Read.ini"
        cZiel = cPfad & "Data_Read.ini"
        lRet = CopyFile(cQuelle, cZiel, lfail)
    End If
    
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "mdevorcheckApp_Data_Read"
    Fehler.gsFehlertext = "Beim der Dateiüberprüfung mdevor ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
'''''''''Public Sub SCANPALLeeren(lab As Label, txtstatus As TextBox, picprogress As PictureBox, iTimeout As Integer)
'''''''''    On Error GoTo LOKAL_ERROR
'''''''''
'''''''''    Dim cPfad As String
'''''''''    Dim oldpath As String
'''''''''    Dim newpath As String
'''''''''    Dim lfail As Long
'''''''''    Dim lRet As Long
'''''''''    Dim sSQL As String
'''''''''
'''''''''    Dim lAnzSatz As Long
'''''''''    Dim lAktSatz As Long
'''''''''    Dim iFileNr As Integer
'''''''''    Dim cSatz1 As String
'''''''''    Dim lPos As Long
'''''''''    Dim cEinzelsatz As String
'''''''''    Dim rsrs As Recordset
'''''''''
'''''''''    Dim cQuelle As String
'''''''''    Dim cZiel As String
'''''''''
'''''''''    Dim iZa As Integer
'''''''''    Dim lreti As Long
'''''''''    iZa = 0
'''''''''
'''''''''    Screen.MousePointer = 11
'''''''''
'''''''''    picprogress.Visible = True
'''''''''
'''''''''    anzeige "normal", "Daten werden verarbeitet...", lab
'''''''''
''''''''''    Immer
'''''''''
'''''''''
'''''''''    mdevorcheck
'''''''''    schreib232_read gbYtescanPcom
'''''''''
'''''''''
''''''''''''    '******Sichern für ganz genaue
''''''''''''    Dim cpfaddb As String
''''''''''''    Dim sTime As String
''''''''''''    Dim lWert As Long
''''''''''''    Dim ctmp As String
''''''''''''
''''''''''''    sTime = TimeValue(Now)
''''''''''''    sTime = Right(sTime, 8)
''''''''''''    sTime = SwapStr(sTime, ":", "")
''''''''''''
''''''''''''    lWert = DateValue(Now)
''''''''''''    ctmp = Format$(lWert, "DD.MM")
''''''''''''    ctmp = SwapStr(ctmp, ".", "")
''''''''''''
''''''''''''    cpfaddb = gcDBPfad    'Datenbankpfad
''''''''''''    If Right$(cpfaddb, 1) <> "\" Then
''''''''''''        cpfaddb = cpfaddb & "\"
''''''''''''    End If
''''''''''''
''''''''''''    VerzVorhanden srechnertab, cpfaddb & "MDEPROT\"
''''''''''''    VerzVorhanden ctmp, cpfaddb & "MDEPROT\" & srechnertab & "\"
''''''''''''
''''''''''''    cpfaddb = cpfaddb & "MDEPROT\" & srechnertab & "\" & ctmp & "\"
''''''''''''    cpfaddb = ShortPath(cpfaddb)
''''''''''''
''''''''''''    '*******Ende sichern
'''''''''
'''''''''    cPfad = gcDBPfad    'Datenbankpfad
'''''''''    If Right$(cPfad, 1) <> "\" Then
'''''''''        cPfad = cPfad & "\"
'''''''''    End If
'''''''''
'''''''''    loeschNEW "mdeInh", gdBase
'''''''''    CreateTable "MDEINH", gdBase
'''''''''
'''''''''    Kill cPfad & "mde"
'''''''''    Kill cPfad & "mdx"
'''''''''
'''''''''    iFileNr = FreeFile
'''''''''    Open cPfad & "mde" For Binary As #iFileNr
'''''''''    Close iFileNr
'''''''''
'''''''''    lreti = Shell(cPfad & "232_read", vbNormalFocus)
'''''''''
'''''''''    Pause (1)
'''''''''
'''''''''    lRet = 0
'''''''''    Do While lRet = 0
'''''''''        'kopiere
'''''''''        anzeige "normal", iZa & " Daten werden verarbeitet...(auto Abbruch nach " & iTimeout & " Sekunden)", lab
'''''''''        cQuelle = cPfad & "mde"
'''''''''        cZiel = cPfad & "mdx"
'''''''''        lRet = CopyFile(cQuelle, cZiel, lfail)
'''''''''        iZa = iZa + 1
'''''''''
'''''''''        picprogress.Visible = True
'''''''''        txtstatus = iZa * 2
'''''''''
'''''''''        If iZa > iTimeout Then 'timeout
'''''''''
'''''''''            picprogress.Visible = False
'''''''''            txtstatus = 0
'''''''''
'''''''''            Screen.MousePointer = 0
'''''''''
'''''''''            anzeige "rot", "Bitte Schließen drücken", lab
'''''''''
''''''''''            AppActivate lretI, True
''''''''''            SendKeys "{ESC}", True
'''''''''
'''''''''            Exit Sub
'''''''''        Else
'''''''''            Pause (1)
'''''''''
'''''''''        End If
'''''''''    Loop
'''''''''
'''''''''    picprogress.Visible = False
'''''''''    txtstatus = 0
'''''''''
''''''''''    cQuelle = cPfad & "mde"
''''''''''    cZiel = cpfaddb & "MDE" & sTime & ".txt"
''''''''''    lRet = CopyFile(cQuelle, cZiel, lfail)
'''''''''
'''''''''
'''''''''    Pause (1)
'''''''''
'''''''''
''''''''''    MsgBox "jetzt kopieren"
'''''''''
'''''''''    Set rsrs = gdBase.OpenRecordset("MDEINH")
'''''''''
'''''''''    iFileNr = FreeFile
'''''''''
'''''''''
'''''''''    Dim cMDEDaten As String
'''''''''    Dim lStart As Long
'''''''''    Dim lEnde As Long
'''''''''    Dim lPoskomma As Long
'''''''''
'''''''''    Open cPfad & "mdx" For Binary As #iFileNr
'''''''''    cMDEDaten = Space$(LOF(iFileNr))
'''''''''    Get #iFileNr, 1, cMDEDaten
'''''''''    Close iFileNr
'''''''''
'''''''''    lAktSatz = 0
'''''''''    lStart = 1
'''''''''    Do While lStart <= Len(cMDEDaten)
'''''''''        lEnde = InStr(lStart, cMDEDaten, vbCrLf)
'''''''''        If lEnde > 0 Then
'''''''''            cSatz1 = Mid$(cMDEDaten, lStart, lEnde - lStart)
'''''''''            If cSatz1 <> "" Then
'''''''''
''''''''''                lPoskomma = InStr(1, cSatz1, vbCr)
'''''''''
'''''''''                rsrs.AddNew
'''''''''                rsrs!eancode = cSatz1
'''''''''                rsrs!Menge = 1
'''''''''                rsrs.Update
'''''''''            End If
'''''''''
'''''''''            lStart = lEnde + 2
'''''''''        End If
'''''''''
'''''''''    Loop
'''''''''
'''''''''    rsrs.Close: Set rsrs = Nothing
'''''''''
'''''''''    Screen.MousePointer = 0
'''''''''
'''''''''    Exit Sub
'''''''''LOKAL_ERROR:
'''''''''    If err.Number = 53 Then
'''''''''        Resume Next
'''''''''    Else
'''''''''        Fehler.gsDescr = err.Description
'''''''''        Fehler.gsNumber = err.Number
'''''''''        Fehler.gsFormular = "Modul2"
'''''''''        Fehler.gsFunktion = "SCANPALLeeren"
'''''''''        Fehler.gsFehlertext = "Beim Lesen des MDE-Gerätes ist ein Fehler aufgetreten."
'''''''''
'''''''''        Fehlermeldung1
'''''''''    End If
'''''''''End Sub

Public Sub SCANPALLeeren(lab As Label, txtStatus As TextBox, picprogress As PictureBox, iTimeout As Integer)
    On Error GoTo LOKAL_ERROR

    Dim cPfad As String
    Dim oldpath As String
    Dim newpath As String
    Dim lfail As Long
    Dim lRet As Long
    Dim sSQL As String

    Dim lAnzSatz As Long
    Dim lAktSatz As Long
    Dim iFileNr As Integer
    Dim cSatz1 As String
    Dim lPos As Long
    Dim cEinzelsatz As String
    Dim rsrs As Recordset

    Dim cQuelle As String
    Dim cZiel As String

    Dim iZa As Integer
    Dim lreti As Long
    iZa = 0

    Screen.MousePointer = 11

    picprogress.Visible = True

    anzeige "normal", "Daten werden verarbeitet...", lab




    mdevorcheck
    schreib232_read gbYtescanPcom




    cPfad = gcDBPfad    'Datenbankpfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    loeschNEW "mdeInh", gdBase
    CreateTable "MDEINH", gdBase

    Kill cPfad & "mde"
    Kill cPfad & "mdx"

    iFileNr = FreeFile
    Open cPfad & "mde" For Binary As #iFileNr
    Close iFileNr

    lreti = Shell(cPfad & "232_read", vbNormalFocus)

    Pause (1)

    lRet = 0
    Do While lRet = 0
        'kopiere
        anzeige "normal", iZa & " Daten werden verarbeitet...(auto Abbruch nach " & iTimeout & " Sekunden)", lab
        cQuelle = cPfad & "mde"
        cZiel = cPfad & "mdx"
        lRet = CopyFile(cQuelle, cZiel, lfail)
        iZa = iZa + 1

        picprogress.Visible = True
        txtStatus = iZa * 2

        If iZa > iTimeout Then 'timeout

            picprogress.Visible = False
            txtStatus = 0

            Screen.MousePointer = 0

            anzeige "rot", "Bitte Schließen drücken", lab



            Exit Sub
        Else
            Pause (1)

        End If
    Loop

    picprogress.Visible = False
    txtStatus = 0




    Pause (1)




    Set rsrs = gdBase.OpenRecordset("MDEINH")

    iFileNr = FreeFile


    Dim cMDEDaten As String
    Dim lStart As Long
    Dim lEnde As Long
    Dim lPoskomma As Long

    Open cPfad & "mdx" For Binary As #iFileNr
    cMDEDaten = Space$(LOF(iFileNr))
    Get #iFileNr, 1, cMDEDaten
    Close iFileNr

    lAktSatz = 0
    lStart = 1
    Do While lStart <= Len(cMDEDaten)
        lEnde = InStr(lStart, cMDEDaten, vbCrLf)
        If lEnde > 0 Then
            cSatz1 = Mid$(cMDEDaten, lStart, lEnde - lStart)
            If cSatz1 <> "" Then

                lPoskomma = InStr(1, cSatz1, ",")

                rsrs.AddNew
                rsrs!eancode = Left(cSatz1, lPoskomma - 1)
                rsrs!Menge = Val(Right(cSatz1, Len(cSatz1) - lPoskomma))
                rsrs.Update
            End If

            lStart = lEnde + 2
        End If

    Loop

    rsrs.Close: Set rsrs = Nothing

    Screen.MousePointer = 0

    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul2"
        Fehler.gsFunktion = "SCANPALLeeren"
        Fehler.gsFehlertext = "Beim Lesen des MDE-Gerätes ist ein Fehler aufgetreten."

        Fehlermeldung1
    End If
End Sub
Public Sub CIPHERLAB_Leeren(lab As Label, txtStatus As TextBox, picprogress As PictureBox, iTimeout As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    Dim oldpath As String
    Dim newpath As String
    Dim lfail As Long
    Dim lRet As Long
    Dim sSQL As String
    
    Dim lAnzSatz As Long
    Dim lAktSatz As Long
    Dim iFileNr As Integer
    Dim cSatz1 As String
    Dim lPos As Long
    Dim cEinzelsatz As String
    Dim rsrs As Recordset
    
    Dim cQuelle As String
    Dim cZiel As String
    
    Dim iZa As Integer
    Dim lreti As Long
    iZa = 0
    
    Screen.MousePointer = 11
    
    picprogress.Visible = True
    
    anzeige "normal", "Daten werden verarbeitet...", lab
    
'    Immer

    mdevorcheckApp_Data_Read
    schreibData_read gbYtescanPcom
    
    '******Sichern für ganz genaue
    Dim cpfaddb As String
    Dim sTime As String
    Dim lWert As Long
    Dim ctmp As String
    
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    sTime = SwapStr(sTime, ":", "")
    
    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM")
    ctmp = SwapStr(ctmp, ".", "")
    
    cpfaddb = gcDBPfad    'Datenbankpfad
    If Right$(cpfaddb, 1) <> "\" Then
        cpfaddb = cpfaddb & "\"
    End If
    
    VerzVorhanden srechnertab, cpfaddb & "MDEPROT\"
    VerzVorhanden ctmp, cpfaddb & "MDEPROT\" & srechnertab & "\"
    
    cpfaddb = cpfaddb & "MDEPROT\" & srechnertab & "\" & ctmp & "\"
    cpfaddb = ShortPath(cpfaddb)
    
    '*******Ende sichern
    
    

    cPfad = gcPfad    'apppfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    loeschNEW "mdeInh", gdBase
    CreateTable "MDEINH", gdBase
    
    frmWKL00.File1.Path = cPfad
    frmWKL00.File1.Pattern = "Err" & Format(DateValue(Now), "YYYYMMDD") & "*.log"
    frmWKL00.File1.Refresh
    
    Dim lcount As Long
    
    If frmWKL00.File1.ListCount > 0 Then
        For lcount = 0 To frmWKL00.File1.ListCount - 1
            Kill cPfad & frmWKL00.File1.list(lcount)
        Next lcount
    End If
    'hier endet Überprüfung

    Kill cPfad & "mde.txt"
    Kill cPfad & "mdx"

    iFileNr = FreeFile
    Open cPfad & "mde.txt" For Binary As #iFileNr
    Close iFileNr

    lreti = Shell(cPfad & "Data_read", vbNormalFocus)
    
    Pause (4)

    lRet = 0
    Do While lRet = 0
        'kopiere
        anzeige "normal", iZa & " Daten werden verarbeitet...(auto Abbruch nach " & iTimeout & " Sekunden)", lab
        cQuelle = cPfad & "mde.txt"
        cZiel = cPfad & "mdx"
        lRet = CopyFile(cQuelle, cZiel, lfail)
        iZa = iZa + 1

        picprogress.Visible = True
        txtStatus = iZa * 2

        If iZa > iTimeout Then 'timeout

            picprogress.Visible = False
            txtStatus = 0

            Screen.MousePointer = 0

            anzeige "rot", "Bitte Schließen drücken", lab

'            AppActivate lretI, True
'            SendKeys "{ESC}", True

            Exit Sub
        Else
            Pause (1)

        End If
    Loop
    
    picprogress.Visible = False
    txtStatus = 0
    
    
    'hier beginnt Überprüfung
    
    frmWKL00.File1.Path = cPfad
    frmWKL00.File1.Pattern = "Err" & Format(DateValue(Now), "YYYYMMDD") & "*.log"
    frmWKL00.File1.Refresh
    
    If frmWKL00.File1.ListCount > 0 Then
    
    'mecker
    
        
        Exit Sub
    
    End If
    'hier endet Überprüfung
    
    
    cQuelle = cPfad & "mde.txt"
    cZiel = cpfaddb & "MDE" & sTime & ".txt"
    lRet = CopyFile(cQuelle, cZiel, lfail)
    
    
    Pause (1)
    
    Set rsrs = gdBase.OpenRecordset("MDEINH")

    iFileNr = FreeFile
    
    
    Dim cMDEDaten As String
    Dim lStart As Long
    Dim lEnde As Long
    Dim lPoskomma As Long
    
    
    Open cPfad & "mdx" For Binary As #iFileNr
    cMDEDaten = Space$(LOF(iFileNr))
    Get #iFileNr, 1, cMDEDaten
    Close iFileNr
    
    Dim cEAN As String
    Dim lMenge As Long
    
    lAktSatz = 0
    lStart = 1
    Do While lStart <= Len(cMDEDaten)
        lEnde = InStr(lStart, cMDEDaten, vbCrLf)
        If lEnde > 0 Then
            cSatz1 = Mid$(cMDEDaten, lStart, lEnde - lStart)
            If cSatz1 <> "" Then
            
                lPoskomma = InStr(1, cSatz1, ",")
                
                
                
                cEAN = Left(cSatz1, lPoskomma - 1)
                lMenge = Val(Right(cSatz1, Len(cSatz1) - lPoskomma))
                
                If Len(cEAN) <= 13 Then
                    If lMenge < 1000 Then
                        rsrs.AddNew
                        rsrs!eancode = cEAN
                        rsrs!Menge = lMenge
                        rsrs.Update
                    End If
                End If
                
                
            End If
            
            lStart = lEnde + 2
        End If
        
    Loop
    
    rsrs.Close: Set rsrs = Nothing
    
    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
    
        Resume Next
    
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul2"
        Fehler.gsFunktion = "CIPHERLAB_Leeren"
        Fehler.gsFehlertext = "Beim Lesen des MDE-Gerätes ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
    
End Sub
Public Sub REWEMDELeeren(lab As Label, txtStatus As TextBox, picprogress As PictureBox)
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    Dim oldpath As String
    Dim newpath As String
    Dim lfail As Long
    Dim lRet As Long
    Dim sSQL As String
    Dim lAnzSatz As Long
    Dim lAktSatz As Long
    Dim iFileNr As Integer
    Dim cSatz1 As String
    Dim lPos As Long
    Dim cEinzelsatz As String
    Dim rsrs As Recordset
    Dim cQuelle As String
    Dim cZiel As String
    
    Screen.MousePointer = 11
    
    anzeige "normal", "Daten werden verarbeitet...", lab
    
    loeschNEW "MDEINH", gdBase
    CreateTable "MDEINH", gdBase
   
    'Gibt es eine oder mehrere CSV - Dateien in "C:\MDE\MDEDAT"
    
    Dim cPfad_REWE_MDE As String
    Dim cDat_REWE_MDE As String
    Dim lcount As Long
    
    cPfad_REWE_MDE = "C:\MDE\MDEDAT"
    
    frmWKL00.File1.Path = cPfad_REWE_MDE
    frmWKL00.File1.Pattern = "ERF_*.csv"
    frmWKL00.File1.Refresh
    
    For lcount = 0 To frmWKL00.File1.ListCount - 1
    
        cDat_REWE_MDE = frmWKL00.File1.list(lcount)
        cDat_REWE_MDE = Trim$(cDat_REWE_MDE)
        
        REWE_MDE_EINZEL_Auslesen cPfad_REWE_MDE & "\" & cDat_REWE_MDE, txtStatus, picprogress
        
        'nach der Verarbeitung der Einzeldatei in das Verz. "C:\MDE\MDEDAT\OLD" verschieben
        
        cQuelle = cPfad_REWE_MDE & "\" & cDat_REWE_MDE
        cZiel = "C:\MDE\MDEDAT\OLD" & "\" & cDat_REWE_MDE
        
        'check auf Verzeichnis "old" in "C:\MDE\MDEDAT\"
        VerzVorhanden "old", "C:\MDE\MDEDAT\"
        
        
        
        lRet = CopyFile(cQuelle, cZiel, lfail)
        
        Kill cQuelle
        
    Next lcount
    
    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul2"
        Fehler.gsFunktion = "REWEMDELeeren"
        Fehler.gsFehlertext = "Beim Verarbeiten der MDE-Daten ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub

Public Sub REWE_MDE_EINZEL_Auslesen(sPfadundDat As String, txtStatus As TextBox, picprogress As PictureBox)
    On Error GoTo LOKAL_ERROR
    
    Dim lPosEnde        As Long
    Dim cEinzelsatz     As String
    Dim lLenfil         As Long
    Dim lposSemi        As Long
    Dim lposSemiEnde    As Long
    Dim cWert           As String
    Dim cSCAN           As String
    Dim cMenge          As String
    Dim lPos            As String
    Dim rsrs            As Recordset
    Dim i               As Integer
    Dim iFileNr         As Integer
    Dim cSatz1          As String
    Dim lcount          As Long
    Dim lanzg           As Long
    
    Screen.MousePointer = 11

    If FileExists(sPfadundDat) = False Then
        Exit Sub
    End If
    
    lPos = 1
    lPosEnde = 1
    lposSemiEnde = 1
    
    picprogress.Visible = True
    
    Set rsrs = gdBase.OpenRecordset("MDEINH")

    iFileNr = FreeFile
    Open sPfadundDat For Binary As #iFileNr
    If LOF(iFileNr) > 0 Then
    
    
    
        cSatz1 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cSatz1
    
        lLenfil = Len(cSatz1)
        
        lPosEnde = InStr(lPos, cSatz1, vbCrLf)

        lcount = 0
        
        Do
        
            
            lcount = lcount + 1
            lPosEnde = InStr(lPos, cSatz1, vbCrLf)
            
            If lPosEnde > 0 Then
                cEinzelsatz = Mid(cSatz1, lPos, lPosEnde - lPos)
                
                If cEinzelsatz <> "" Then
                    lPos = lPos + lPosEnde - lPos + 2
                    
                    
                    
                    txtStatus.Text = CStr((100 * lPos) / lLenfil)
                    
                    
                    
                    lposSemi = 1
                    
                    rsrs.AddNew
                    
                    cSCAN = ""
                    cMenge = ""
                    
                    
                    For i = 1 To 2
                        lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";")
                        cWert = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
                        lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    Next i
                    
                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";"): cSCAN = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi): lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    rsrs!eancode = Left(cSCAN, 13)
                    
                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";"): cMenge = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi): lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    rsrs!Menge = cMenge
                    
                     For i = 1 To 2
                        lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";")
                        cWert = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
                        lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    Next i
                    
                    
                    
                    
                    rsrs.Update
                End If
            End If
        Loop While lLenfil >= lPos
    End If
    
    Close iFileNr
    rsrs.Close: Set rsrs = Nothing
    
    picprogress.Visible = False
    


    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "REWE_MDE_EINZEL_Auslesen"
    Fehler.gsFehlertext = "Beim Verarbeiten der MDE-Daten ist ein Fehler aufgetreten."

    Fehlermeldung1
'    Resume Next
    
End Sub
Public Sub BELAMDELeeren(lab As Label, txtStatus As TextBox, picprogress As PictureBox)
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    Dim oldpath As String
    Dim newpath As String
    Dim lfail As Long
    Dim lRet As Long
    Dim sSQL As String
    
    Dim lAnzSatz As Long
    Dim lAktSatz As Long
    Dim iFileNr As Integer
    Dim cSatz1 As String
    Dim lPos As Long
    Dim cEinzelsatz As String
    Dim rsrs As Recordset
    
    Dim cQuelle As String
    Dim cZiel As String
    
   
    
    Screen.MousePointer = 11
    
    anzeige "normal", "Daten werden verarbeitet...", lab
    
    loeschNEW "MDEINH", gdBase
    CreateTable "MDEINH", gdBase
   
    'Gibt es eine oder mehrere CSV - Dateien in "C:\MDE\MDEDAT"
    
    Dim cPfad_BELA_MDE As String
    Dim cDat_BELA_MDE As String
    Dim lcount As Long
    
    cPfad_BELA_MDE = gcDBPfad
    If Right$(cPfad_BELA_MDE, 1) <> "\" Then
        cPfad_BELA_MDE = cPfad_BELA_MDE & "\"
    End If
    cPfad_BELA_MDE = cPfad_BELA_MDE & "IN"
    
    frmWKL00.File1.Path = cPfad_BELA_MDE
    frmWKL00.File1.Pattern = "Data0*.txt"
    frmWKL00.File1.Refresh
    
    For lcount = 0 To frmWKL00.File1.ListCount - 1
    
        cDat_BELA_MDE = frmWKL00.File1.list(lcount)
        cDat_BELA_MDE = Trim$(cDat_BELA_MDE)
        
        BELA_MDE_EINZEL_Auslesen cPfad_BELA_MDE & "\" & cDat_BELA_MDE, txtStatus, picprogress
        
        'nach der Verarbeitung der Einzeldatei in das Verz. "C:\MDE\MDEDAT\OLD" verschieben
        
        cQuelle = cPfad_BELA_MDE & "\" & cDat_BELA_MDE
'        cZiel = "C:\MDE\MDEDAT\OLD" & "\" & cDat_BELA_MDE
'
'        lRet = CopyFile(cQuelle, cZiel, lfail)
        
'        Kill cQuelle
        
    Next lcount
    
    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul2"
        Fehler.gsFunktion = "BELAMDELeeren"
        Fehler.gsFehlertext = "Beim Verarbeiten der MDE-Daten ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub CASIOMDELeeren(lab As Label, txtStatus As TextBox, picprogress As PictureBox)
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    Dim oldpath As String
    Dim newpath As String
    Dim lfail As Long
    Dim lRet As Long
    Dim sSQL As String
    
    Dim lAnzSatz As Long
    Dim lAktSatz As Long
    Dim iFileNr As Integer
    Dim cSatz1 As String
    Dim lPos As Long
    Dim cEinzelsatz As String
    Dim rsrs As Recordset
    
    Dim cQuelle As String
    Dim cZiel As String
    
    Screen.MousePointer = 11
    
    anzeige "normal", "Daten werden verarbeitet...", lab
    
    loeschNEW "MDEINH", gdBase
    CreateTable "MDEINH", gdBase
   
    'Gibt es eine oder mehrere CSV - Dateien in "C:\MDE\MDEDAT"
    
    Dim cPfad_CASIO_MDE As String
    Dim cDat_CASIO_MDE As String
    Dim lcount As Long
    
    cPfad_CASIO_MDE = gcDBPfad
    If Right$(cPfad_CASIO_MDE, 1) <> "\" Then
        cPfad_CASIO_MDE = cPfad_CASIO_MDE & "\"
    End If
    cPfad_CASIO_MDE = cPfad_CASIO_MDE & "IN"
    
    frmWKL00.File1.Path = cPfad_CASIO_MDE
    frmWKL00.File1.Pattern = "bestell*.dat"
    frmWKL00.File1.Refresh
    
    For lcount = 0 To frmWKL00.File1.ListCount - 1
    
        cDat_CASIO_MDE = frmWKL00.File1.list(lcount)
        cDat_CASIO_MDE = Trim$(cDat_CASIO_MDE)
        
        CASIO_MDE_EINZEL_Auslesen cPfad_CASIO_MDE & "\" & cDat_CASIO_MDE, txtStatus, picprogress
        
        'nach der Verarbeitung der Einzeldatei in das Verz. "C:\MDE\MDEDAT\OLD" verschieben
        
        cQuelle = cPfad_CASIO_MDE & "\" & cDat_CASIO_MDE
'        cZiel = "C:\MDE\MDEDAT\OLD" & "\" & cDat_BELA_MDE
'
'        lRet = CopyFile(cQuelle, cZiel, lfail)
        
'        Kill cQuelle
        
    Next lcount
    
    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul2"
        Fehler.gsFunktion = "CASIOMDELeeren"
        Fehler.gsFehlertext = "Beim Verarbeiten der MDE-Daten ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub BELA_MDE_EINZEL_Auslesen(sPfadundDat As String, txtStatus As TextBox, picprogress As PictureBox)
    On Error GoTo LOKAL_ERROR
    
    Dim lPosEnde        As Long
    Dim cEinzelsatz     As String
    Dim lLenfil         As Long
    Dim lposSemi        As Long
    Dim lposSemiEnde    As Long
    Dim cWert           As String
    Dim cSCAN           As String
    Dim cMenge          As String
    Dim lPos            As String
    Dim rsrs            As Recordset
    Dim i               As Integer
    Dim iFileNr         As Integer
    Dim cSatz1          As String
    Dim lcount          As Long
    Dim lanzg           As Long
    
    Screen.MousePointer = 11

    If FileExists(sPfadundDat) = False Then
        Exit Sub
    End If
    
    lPos = 1
    lPosEnde = 1
    lposSemiEnde = 1
    
    picprogress.Visible = True
    
    Set rsrs = gdBase.OpenRecordset("MDEINH")

    iFileNr = FreeFile
    Open sPfadundDat For Binary As #iFileNr
    If LOF(iFileNr) > 0 Then
    
    
    
        cSatz1 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cSatz1
    
        lLenfil = Len(cSatz1)
        
        lPosEnde = InStr(lPos, cSatz1, vbCrLf)

        lcount = 0
        
        Do
        
            lcount = lcount + 1
            lPosEnde = InStr(lPos, cSatz1, vbCrLf)
            
            If lPosEnde > 0 Then
                cEinzelsatz = Mid(cSatz1, lPos, lPosEnde - lPos)
                
                If cEinzelsatz <> "" Then
                    lPos = lPos + lPosEnde - lPos + 2
                    
                    
                    
                    txtStatus.Text = CStr((100 * lPos) / lLenfil)
                    
                    
                    
                    lposSemi = 1
                    
                    rsrs.AddNew
                    
                    cSCAN = ""
                    cMenge = ""
                    
                    
                    For i = 1 To 4
                        lposSemiEnde = InStr(lposSemi, cEinzelsatz, vbTab)
                        cWert = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
                        lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    Next i
                    
                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, vbTab): cSCAN = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi): lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    rsrs!eancode = Left(cSCAN, 13)
                    
                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, vbTab): cMenge = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi): lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    rsrs!Menge = cMenge
                    
                     For i = 1 To 3
                        lposSemiEnde = InStr(lposSemi, cEinzelsatz, vbTab)
                        cWert = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
                        lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    Next i
                    
                    
                    
                    
                    rsrs.Update
                End If
            End If
        Loop While lLenfil >= lPos
    End If
    
    Close iFileNr
    rsrs.Close: Set rsrs = Nothing
    
    picprogress.Visible = False
    


    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "BELA_MDE_EINZEL_Auslesen"
    Fehler.gsFehlertext = "Beim Verarbeiten der MDE-Daten ist ein Fehler aufgetreten."

    Fehlermeldung1
'    Resume Next
    
End Sub
Public Sub CASIO_MDE_EINZEL_Auslesen(sPfadundDat As String, txtStatus As TextBox, picprogress As PictureBox)
    On Error GoTo LOKAL_ERROR
    
    Dim lPosEnde        As Long
    Dim cEinzelsatz     As String
    Dim lLenfil         As Long
    Dim lposSemi        As Long
    Dim lposSemiEnde    As Long
    Dim cWert           As String
    Dim cSCAN           As String
    Dim cMenge          As String
    Dim lPos            As String
    Dim rsrs            As Recordset
    Dim i               As Integer
    Dim iFileNr         As Integer
    Dim cSatz1          As String
    Dim lcount          As Long
    Dim lanzg           As Long
    
    Screen.MousePointer = 11

    If FileExists(sPfadundDat) = False Then
        Exit Sub
    End If
    
    lPos = 1
    lPosEnde = 1
    lposSemiEnde = 1
    
    picprogress.Visible = True
    
    Set rsrs = gdBase.OpenRecordset("MDEINH")

    iFileNr = FreeFile
    Open sPfadundDat For Binary As #iFileNr
    If LOF(iFileNr) > 0 Then
    
    
    
        cSatz1 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cSatz1
    
        lLenfil = Len(cSatz1)
        
        lPosEnde = InStr(lPos, cSatz1, vbCrLf)

        lcount = 0
        
        Do
        
            lcount = lcount + 1
            lPosEnde = InStr(lPos, cSatz1, vbCrLf)
            
            If lPosEnde > 0 Then
                cEinzelsatz = Mid(cSatz1, lPos, lPosEnde - lPos)
                
                If cEinzelsatz <> "" Then
                    lPos = lPos + lPosEnde - lPos + 2
                    
                    txtStatus.Text = CStr((100 * lPos) / lLenfil)
                    
                    
                    rsrs.AddNew
                    
                    rsrs!eancode = Mid(cEinzelsatz, 10, 13)
                    rsrs!Menge = Right(cEinzelsatz, 5)
                    
                    rsrs.Update
                End If
                
            End If
        Loop While lLenfil >= lPos
    End If
    
    Close iFileNr
    rsrs.Close: Set rsrs = Nothing
    
    picprogress.Visible = False
    


    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "CASIO_MDE_EINZEL_Auslesen"
    Fehler.gsFehlertext = "Beim Verarbeiten der MDE-Daten ist ein Fehler aufgetreten."

    Fehlermeldung1
'    Resume Next
    
End Sub
Public Sub IP_INV_EINZEL_Auslesen(sPfadundDat As String, txtStatus As TextBox, picprogress As PictureBox)
    On Error GoTo LOKAL_ERROR
    
    Dim lPosEnde        As Long
    Dim cEinzelsatz     As String
    Dim lLenfil         As Long
    Dim lposSemi        As Long
    Dim lposSemiEnde    As Long
    Dim cWert           As String
    Dim cArtNr          As String
    Dim cMenge          As String
    Dim lPos            As String
    Dim rsrs            As Recordset
    Dim i               As Integer
    Dim iFileNr         As Integer
    Dim cSatz1          As String
    Dim lcount          As Long
    Dim lanzg           As Long
    
    Screen.MousePointer = 11

    If FileExists(sPfadundDat) = False Then
        Exit Sub
    End If
    
    lPos = 1
    lPosEnde = 1
    lposSemiEnde = 1
    
    picprogress.Visible = True
    
    loeschNEW "IP_INV", gdBase
    CreateTableT2 "IP_INV", gdBase
    
    Set rsrs = gdBase.OpenRecordset("IP_INV")

    iFileNr = FreeFile
    Open sPfadundDat For Binary As #iFileNr
    If LOF(iFileNr) > 0 Then
    
        cSatz1 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cSatz1
    
        lLenfil = Len(cSatz1)
        
        lPosEnde = InStr(lPos, cSatz1, vbCrLf)
        lPos = lPos + lPosEnde - lPos + 2 'Kopfzeile überspringen

        lcount = 0
        
        Do
        
            
            lcount = lcount + 1
            lPosEnde = InStr(lPos, cSatz1, vbCrLf)
            
            If lPosEnde > 0 Then
                cEinzelsatz = Mid(cSatz1, lPos, lPosEnde - lPos)
                
                If cEinzelsatz <> "" Then
                    lPos = lPos + lPosEnde - lPos + 2
                    
                    
                    
                    txtStatus.Text = CStr((100 * lPos) / lLenfil)
                    
                    
                    
                    lposSemi = 1
                    
                    rsrs.AddNew
                    
                    cArtNr = ""
                    cMenge = ""
                    
                    
                    For i = 1 To 2
                        lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";")
                        cWert = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
                        lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    Next i
                    
                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";"): cArtNr = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi): lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    rsrs!artnr = cArtNr
                    
                    For i = 1 To 1
                        lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";")
                        cWert = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
                        lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    Next i
                    
                    cMenge = Mid(cEinzelsatz, lposSemiEnde + 1, Len(cEinzelsatz) - lposSemiEnde + 1)
                    
'                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, vbCrLf)
'                    cMenge = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
'                    lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    
                    rsrs!Menge = cMenge
                  
                    
                    rsrs.Update
                End If
            End If
        Loop While lLenfil >= lPos
    End If
    
    Close iFileNr
    rsrs.Close: Set rsrs = Nothing
    
    picprogress.Visible = False
    


    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "IP_INV_EINZEL_Auslesen"
    Fehler.gsFehlertext = "Beim Verarbeiten der INVENTUR-Daten ist ein Fehler aufgetreten."

    Fehlermeldung1
'Resume Next
    
End Sub
Public Sub COSYS_INV_EINZEL_Auslesen(sPfadundDat As String, txtStatus As TextBox, picprogress As PictureBox)
    On Error GoTo LOKAL_ERROR
    
    Dim lPosEnde        As Long
    Dim cEinzelsatz     As String
    Dim lLenfil         As Long
    Dim lposSemi        As Long
    Dim lposSemiEnde    As Long
    Dim cWert           As String
    Dim cArtNr          As String
    Dim cMenge          As String
    Dim cEAN            As String
    Dim lPos            As String
    Dim rsrs            As Recordset
    Dim i               As Integer
    Dim iFileNr         As Integer
    Dim cSatz1          As String
    Dim lcount          As Long
    Dim lanzg           As Long
    
    Screen.MousePointer = 11

    If FileExists(sPfadundDat) = False Then
        Exit Sub
    End If
    
    lPos = 1
    lPosEnde = 1
    lposSemiEnde = 1
    
    picprogress.Visible = True
    
    loeschNEW "COSYS_INV", gdBase
    CreateTableT2 "COSYS_INV", gdBase
    
    Set rsrs = gdBase.OpenRecordset("COSYS_INV")

    iFileNr = FreeFile
    Open sPfadundDat For Binary As #iFileNr
    If LOF(iFileNr) > 0 Then
    
        cSatz1 = Space$(LOF(iFileNr))
        Get #iFileNr, 1, cSatz1
    
        lLenfil = Len(cSatz1)
        
        lPosEnde = InStr(lPos, cSatz1, vbCrLf)
        lPos = lPos + lPosEnde - lPos + 2 'Kopfzeile überspringen

        lcount = 0
        
        Do
        
            lcount = lcount + 1
            lPosEnde = InStr(lPos, cSatz1, vbCrLf)
            
            If lPosEnde > 0 Then
                cEinzelsatz = Mid(cSatz1, lPos, lPosEnde - lPos)
                
                If cEinzelsatz <> "" Then
                    lPos = lPos + lPosEnde - lPos + 2
                    
                    
                    
                    txtStatus.Text = CStr((100 * lPos) / lLenfil)
                    
                    
                    
                    lposSemi = 1
                    
                    rsrs.AddNew
                    
                    cArtNr = ""
                    cMenge = ""
                    cEAN = ""
                    
                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";"): cEAN = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi): lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    rsrs!EAN = Left(Trim(cEAN), 13)
                    
                    For i = 1 To 1
                        lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";")
                        cWert = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
                        lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    Next i
                    
                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";"): cArtNr = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi): lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    
                    If cArtNr = "" Then cArtNr = "0"
                    
                    If Len(cArtNr) > 6 Then cArtNr = "0"
                    rsrs!artnr = cArtNr
                    
                    For i = 1 To 1
                        lposSemiEnde = InStr(lposSemi, cEinzelsatz, ";")
                        cWert = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
                        lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    Next i
                    
                    
                    cMenge = Mid(cEinzelsatz, lposSemiEnde + 1, Len(cEinzelsatz) - lposSemiEnde + 1)
                    
                    If Len(cMenge) > 6 Then cMenge = "0"
                    
'                    lposSemiEnde = InStr(lposSemi, cEinzelsatz, vbCrLf)
'                    cMenge = Mid(cEinzelsatz, lposSemi, lposSemiEnde - lposSemi)
'                    lposSemi = lposSemi + lposSemiEnde - lposSemi + 1
                    
                    rsrs!Menge = cMenge
                  
                    
                    rsrs.Update
                End If
            End If
        Loop While lLenfil >= lPos
    End If
    
    Close iFileNr
    rsrs.Close: Set rsrs = Nothing
    
    picprogress.Visible = False
    


    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "COSYS_INV_EINZEL_Auslesen"
    Fehler.gsFehlertext = "Beim Verarbeiten der INVENTUR-Daten ist ein Fehler aufgetreten."

    Fehlermeldung1
'    Resume Next
    
End Sub
Public Sub FORCOMLeeren(lab As Label, txtStatus As TextBox, picprogress As PictureBox, iTimeout As Integer, frmx As Form)
    On Error GoTo LOKAL_ERROR
    
    
    Dim lRet As Long
    Dim sSQL As String
    Dim lAnzSatz As Long
    Dim lAktSatz As Long
    Dim iFileNr As Integer
    Dim cSatz1 As String
    Dim rsrs As Recordset
    Dim sPfad As String
    Dim sPfad1 As String
    
    Dim cQuelle As String
    Dim cZiel As String
    Dim lfail As Long
    Dim iZa As Integer
    Dim lreti As Long
    
    Dim cMDEDaten As String
    Dim lStart As Long
    Dim lEnde As Long
    
    iZa = 0
    Screen.MousePointer = 11
    
'    Immer
    anzeige "normal", "Daten werden verarbeitet...", lab


    sPfad1 = gcDBPfad
    If Right$(sPfad1, 1) <> "\" Then
        sPfad1 = sPfad1 & "\"
    End If
    
    Kill sPfad1 & "MDE.DAT"
    Kill sPfad1 & "MDE.DA8"
    
    loeschNEW "mdeInh", gdBase
    CreateTable "MDEINH", gdBase
            
    sPfad = ShortPath(App.Path)
    lreti = Shell(sPfad & "\FORCOM com" & CStr(gbYtescanPcom) & " -" & sPfad1 & "mde.dat s5", vbMinimizedFocus)
    
    lRet = 0
    Do While lRet = 0
        'kopiere
        anzeige "normal", iZa & " sec Daten werden verarbeitet...(auto Abbruch nach " & iTimeout & " Sekunden)", lab
        cQuelle = sPfad1 & "MDE.DAT"
        cZiel = sPfad1 & "MDE.DA8"
        lRet = CopyFile(cQuelle, cZiel, lfail)
        iZa = iZa + 2
        
        picprogress.Visible = True
        txtStatus = iZa
        picprogress.Refresh
        txtStatus.Refresh
        frmx.Refresh
        
        If iZa > iTimeout Then 'timeout
        
            picprogress.Visible = False
            txtStatus = 0
            
            Screen.MousePointer = 0
            
'            Anzeige "normal", "Abbruch, Zeitüberschreitung", lab
            anzeige "rot", "Bitte Schließen drücken", lab
            


            AppActivate lreti, True
            SendKeys "{ESC}", True
            SendKeys "{ESC}", True
            'schließen von forcom ende
            
            
            
'
            Exit Sub
        Else
            Pause (2)
            
        End If
    Loop
    
    picprogress.Visible = False
    txtStatus = 0



'******************

    Set rsrs = gdBase.OpenRecordset("MDEINH")

    iFileNr = FreeFile
    
    
    
    
    
    Open sPfad1 & "mde.da8" For Binary As #iFileNr
    cMDEDaten = Space$(LOF(iFileNr))
    Get #iFileNr, 1, cMDEDaten
    Close iFileNr
    
    
    lAktSatz = 0
    lStart = 1
    Do While lStart <= Len(cMDEDaten)
        lEnde = InStr(lStart, cMDEDaten, vbCrLf)
        If lEnde > 0 Then
            cSatz1 = Mid$(cMDEDaten, lStart, lEnde - lStart)
            If cSatz1 <> "" Then
                rsrs.AddNew
                rsrs!eancode = Trim(Mid(cSatz1, 6, 13))
                rsrs!Menge = Mid(cSatz1, 2, 4)
                rsrs.Update
            End If
            
            lStart = lEnde + 2
        End If
        
    Loop
    rsrs.Close: Set rsrs = Nothing
    
    Screen.MousePointer = 0
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
    
        Resume Next
    
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul2"
        Fehler.gsFunktion = "FORCOMLeeren"
        Fehler.gsFehlertext = "Beim Lesen des MDE-Gerätes ist ein Fehler aufgetreten."
        
        Fehlermeldung1
'        Resume Next
    End If
    
    
End Sub



Public Function checkean(sEA As String) As String
On Error GoTo LOKAL_ERROR

    checkean = ""
    
    If Len(sEA) = 11 Then
        sEA = "0" & sEA
    End If
    
    If Len(sEA) = 13 Then
        If Left(sEA, 2) = "00" Then
            sEA = Right(sEA, 12)
        End If
    End If
    
    If Len(sEA) = 13 Then
        If Left(sEA, 1) = "0" Then
            sEA = Right(sEA, 12)
        End If
    End If
    
    checkean = sEA

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "checkean"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function MDEeinlesenOhneLinr(lab As Label, txtStatus As TextBox, picprogress As PictureBox, frmx As Form) As Boolean
    On Error GoTo LOKAL_ERROR
    
    MDEeinlesenOhneLinr = False
    Dim rsMDE As Recordset
    
    If gsMDEGERAET = "SCANPAL" Then
        SCANPALLeeren lab, txtStatus, picprogress, giMDEPAUSE
        Pause (1)
    
    ElseIf gsMDEGERAET = "FORCOM" Then
        FORCOMLeeren lab, txtStatus, picprogress, giMDEPAUSE, frmx
    
        Pause (1)
        
    ElseIf gsMDEGERAET = "REWEMDE" Then
        REWEMDELeeren lab, txtStatus, picprogress
    
        Pause (1)
    ElseIf gsMDEGERAET = "BELAMDE" Then
        BELAMDELeeren lab, txtStatus, picprogress
    
        Pause (1)
    ElseIf gsMDEGERAET = "CASIOMDE" Then
        CASIOMDELeeren lab, txtStatus, picprogress
    
        Pause (1)
    ElseIf gsMDEGERAET = "CIPHERLAB" Then
        CIPHERLAB_Leeren lab, txtStatus, picprogress, giMDEPAUSE
        Pause (1)
    End If
    
    Set rsMDE = gdBase.OpenRecordset("MDEINH", dbOpenTable)
    If Not rsMDE.EOF Then
        MDEeinlesenOhneLinr = True
    End If
    rsMDE.Close

    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "MDEeinlesenOhneLinr"
    Fehler.gsFehlertext = "Beim Lesen des MDE-Gerätes ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub MDEduplikatsverarbeitung()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    loeschNEW "Mdeinh", gdBase
    
    
    sSQL = "Create Table Mdeinh"
    sSQL = sSQL & " ( "
    sSQL = sSQL & "ARTNR LONG "
    sSQL = sSQL & ", BEZEICH TEXT(35) "
    sSQL = sSQL & ", AGN double"
    sSQL = sSQL & ", LINR double"
    sSQL = sSQL & ", LPZ double"
    sSQL = sSQL & ", LIBESNR Text(13)"
    sSQL = sSQL & ", EAN Text(13) "
    sSQL = sSQL & ", RKZ Text(1)"
    sSQL = sSQL & ", NOTIZEN Text(25)"
    sSQL = sSQL & ", BESTAND double"
    sSQL = sSQL & ", KVKPR double"
    sSQL = sSQL & ", ETIMERK Text(1)"
    sSQL = sSQL & ", LEK double"
    sSQL = sSQL & ", NSN double"
    sSQL = sSQL & ", Meng INTEGER "
    sSQL = sSQL & ", Reihenf INTEGER "
    sSQL = sSQL & ", Status Text(15) "
    sSQL = sSQL & " ) "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into MDEINH select ean, sum(Menge)as Meng  FROM WAEINGEM  "
    sSQL = sSQL & " group by ean "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Mdeinh m inner join WAEINGEM w on m.ean = w.ean "
    sSQL = sSQL & " set "
    sSQL = sSQL & " m.ARTNR = w.Artnr "
    sSQL = sSQL & ", m.BEZEICH = w.BEZEICH "
    sSQL = sSQL & ", m.AGN = w.AGN  "
    sSQL = sSQL & ", m.LINR = w.LINR  "
    sSQL = sSQL & ", m.LPZ = w.LPZ  "
    sSQL = sSQL & ", m.LIBESNR = w.LIBESNR  "
    sSQL = sSQL & ", m.RKZ = w.RKZ  "
    sSQL = sSQL & ", m.NOTIZEN = w.NOTIZEN  "
    sSQL = sSQL & ", m.BESTAND = w.BESTAND  "
    sSQL = sSQL & ", m.KVKPR = w.KVKPR  "
    sSQL = sSQL & ", m.ETIMERK = w.ETIMERK  "
    sSQL = sSQL & ", m.LEK = w.LEK  "
    sSQL = sSQL & ", m.NSN = w.NSN  "
    sSQL = sSQL & ", m.Reihenf = w.Reihenf  "
    sSQL = sSQL & ", m.Status = w.Status   "
    gdBase.Execute sSQL, dbFailOnError
    

    
'    sSQL = "Select ean, artnr,bezeich,status,agn,linr,lpz,libesnr,rkz,notizen,bestand,kvkpr,etimerk,lek,nsn,reihenf, sum(Menge)as Meng INTO mdeinh FROM WAEINGEM  "
'    sSQL = sSQL & " group by ean, artnr ,bezeich,status,agn,linr,lpz,libesnr,rkz,notizen,bestand,kvkpr,etimerk,lek,nsn,reihenf "
'    gdBase.Execute sSQL, dbFailOnError
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "MDEduplikatsverarbeitung"
    Fehler.gsFehlertext = "Beim Verarbeiten der MDE - Daten(Duplikate) ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub MDEuebereinstimmung()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsMDE       As Recordset
    Dim rsMDE1      As Recordset
    Dim rsEAN       As Recordset
    Dim rsArtlief   As Recordset
    Dim sEAN        As String
    Dim sSTATUS     As String
    Dim i           As Integer
    
    i = 0
    loeschNEW "WAEINGEM", gdBase
    CreateTableT2 "WAEINGEM", gdBase
    
    Set rsMDE = gdBase.OpenRecordset("WAEINGEM", dbOpenTable)
    
    Set rsMDE1 = gdBase.OpenRecordset("MDEINH", dbOpenTable)
    
    If Not rsMDE1.EOF Then
        rsMDE1.MoveFirst
        Do While Not rsMDE1.EOF
            i = i + 1
            If Not IsNull(rsMDE1!eancode) Then
                sEAN = Trim(rsMDE1!eancode)
                sEAN = checkean(sEAN)
            Else
                sEAN = ""
            End If
            
            
            If Len(sEAN) = 11 Then
                sEAN = "0" & sEAN
                
                If Ist_in_ARTEAN_K(sEAN) Then
                
                End If
        
                sSQL = "select * from artikel where ean = '" & sEAN & "'"
                sSQL = sSQL & " or ean2 = '" & sEAN & "'"
                sSQL = sSQL & " or ean3 = '" & sEAN & "'"
            ElseIf Len(sEAN) = 8 Then
            
                If Left(sEAN, 1) = "2" Then
                    sEAN = Mid$(sEAN, 2, 6)
                    sSQL = "select * from artikel where artnr = " & sEAN
                Else
                
                    If Ist_in_ARTEAN_K(sEAN) Then
                
                    End If
                
                    sSQL = "select * from artikel where ean = '" & sEAN & "'"
                    sSQL = sSQL & " or ean2 = '" & sEAN & "'"
                    sSQL = sSQL & " or ean3 = '" & sEAN & "'"
                End If
            ElseIf Len(sEAN) <= 6 Then
                sSQL = "select * from artikel where artnr = " & sEAN
                
            Else
            
            
                If Ist_in_ARTEAN_K(sEAN) Then
                
                End If
                
                sSQL = "select * from artikel where ean = '" & sEAN & "'"
                sSQL = sSQL & " or ean2 = '" & sEAN & "'"
                sSQL = sSQL & " or ean3 = '" & sEAN & "'"
            End If
            
            Set rsEAN = gdBase.OpenRecordset(sSQL)
            
            rsMDE.AddNew
            If Not rsEAN.EOF Then
                sSTATUS = "bekannt"
        
                rsMDE!artnr = rsEAN!artnr
                rsMDE!BEZEICH = rsEAN!BEZEICH
                rsMDE!EAN = sEAN
                rsMDE!Menge = rsMDE1!Menge
                rsMDE!Reihenf = i
                rsMDE!Status = sSTATUS
                rsMDE!AGN = rsEAN!AGN
                rsMDE!linr = rsEAN!linr
                rsMDE!LPZ = rsEAN!LPZ
                rsMDE!LIBESNR = rsEAN!LIBESNR
                rsMDE!RKZ = rsEAN!RKZ
                rsMDE!NOTIZEN = rsEAN!NOTIZEN
                rsMDE!BESTAND = rsEAN!BESTAND
                rsMDE!kvkpr = rsEAN!KVKPR1
                
                sSQL = "Select * from artlief where artnr = " & rsEAN!artnr
                sSQL = sSQL & " and linr = " & rsEAN!linr
                Set rsArtlief = gdBase.OpenRecordset(sSQL)
                If Not rsArtlief.EOF Then
                    rsMDE!LEK = rsArtlief!lekpr
                Else
                
                End If
                rsArtlief.Close: Set rsArtlief = Nothing
                
                rsMDE!ETIMERK = rsEAN!ETIMERK
                rsMDE!nsn = rsEAN!SPANNE
             Else
                sSTATUS = "unbekannt"
                
                rsMDE!EAN = sEAN
                rsMDE!Menge = rsMDE1!Menge
                rsMDE!Reihenf = i
                rsMDE!Status = sSTATUS
            End If
            rsMDE.Update
            rsEAN.Close
            rsMDE1.MoveNext
        Loop
    End If
    
    rsMDE1.Close: Set rsMDE1 = Nothing
    rsMDE.Close: Set rsMDE = Nothing
        
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "MDEuebereinstimmung"
    Fehler.gsFehlertext = "Beim Verarbeiten der MDE - Daten(Übereinstimmung) ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub LeseStammFtp()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsSTAMMFTP As Recordset
    
    If NewTableSuchenDBKombi("StammFTP", gdBase) Then
    
        sSQL = "Select * from Stammftp where FTPNAME = 'Filiale' "
        
        Set rsSTAMMFTP = gdBase.OpenRecordset(sSQL)
        If Not rsSTAMMFTP.EOF Then
            If Not IsNull(rsSTAMMFTP!FTPAD) Then
                gsStammFTPAdresse = rsSTAMMFTP!FTPAD
            End If
            
            If Not IsNull(rsSTAMMFTP!FTPUS) Then
                gsStammFTPUSER = rsSTAMMFTP!FTPUS
            End If
            
            If Not IsNull(rsSTAMMFTP!FTPPA) Then
                gsStammFTPPASS = rsSTAMMFTP!FTPPA
            End If
            
            If Not IsNull(rsSTAMMFTP!FTPoft) Then
                giStammFTPOFT = rsSTAMMFTP!FTPoft
            End If
            If Not IsNull(rsSTAMMFTP!LastFTP) Then
                gdateStammlastFTP = rsSTAMMFTP!LastFTP
            End If
        End If
        rsSTAMMFTP.Close: Set rsSTAMMFTP = Nothing
        
        sSQL = "Select * from Stammftp where FTPNAME = 'Zentrale' "
        Set rsSTAMMFTP = gdBase.OpenRecordset(sSQL)
        If Not rsSTAMMFTP.EOF Then
            If Not IsNull(rsSTAMMFTP!FTPAD) Then
                gsZenFTPAdresse = rsSTAMMFTP!FTPAD
            End If
                
            If Not IsNull(rsSTAMMFTP!FTPUS) Then
                gsZenFTPUSER = rsSTAMMFTP!FTPUS
            End If
                
            If Not IsNull(rsSTAMMFTP!FTPPA) Then
                gsZenFTPPASS = rsSTAMMFTP!FTPPA
            End If
        Else
            gsZenFTPAdresse = ""
            gsZenFTPUSER = ""
            gsZenFTPPASS = ""
        End If
        rsSTAMMFTP.Close: Set rsSTAMMFTP = Nothing
    Else
        gsZenFTPAdresse = ""
        gsZenFTPUSER = ""
        gsZenFTPPASS = ""
    End If
            
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 3011 Or err.Number = 3265 Then
        Exit Sub
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "LeseStammFtp"
        Fehler.gsFehlertext = "Beim Lesen der FTP - Kennung ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub LeseStatistWoche()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsStatist As Recordset
    
    sSQL = "Select * from Statist where Art = 'W' "
    
    Set rsStatist = gdBase.OpenRecordset(sSQL)
    If Not rsStatist.EOF Then
    
        If Not IsNull(rsStatist!kisskundnr) Then
            gsStatkundnr = rsStatist!kisskundnr
        Else
            gsStatkundnr = ""
        End If
        
        If Not IsNull(rsStatist!kisszusatz) Then
            gsStatZusatz = rsStatist!kisszusatz
        Else
            gsStatZusatz = ""
        End If
        
        If Not IsNull(rsStatist!Lastausw) Then
            gdateStatlast = rsStatist!Lastausw
        Else
            gdateStatlast = 0
        End If
        
        If Not IsNull(rsStatist!permail) Then
            gbStatweekperMail = rsStatist!permail
        Else
            gbStatweekperMail = False
        End If
        
        
'        gsStatkundnr = IIf(IsNull(rsStatist!kisskundnr), "", rsStatist!kisskundnr)
'        gsStatZusatz = IIf(IsNull(rsStatist!kisszusatz), "", rsStatist!kisszusatz)
'        gdateStatlast = IIf(IsNull(rsStatist!Lastausw), 0, rsStatist!Lastausw)
    End If
    rsStatist.Close: Set rsStatist = Nothing
    
    Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "LeseStatistWoche"
    Fehler.gsFehlertext = "Beim Lesen der Statistikvoreinstellungen ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub LeseStatistMonat()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsStatist As Recordset
    
    sSQL = "Select * from Statist where Art = 'M' "
    
    Set rsStatist = gdBase.OpenRecordset(sSQL)
    If Not rsStatist.EOF Then
        gsMStatkundnr = IIf(IsNull(rsStatist!kisskundnr), "", rsStatist!kisskundnr)
        gdateMStatlast = IIf(IsNull(rsStatist!Lastausw), 0, rsStatist!Lastausw)
    End If
    rsStatist.Close: Set rsStatist = Nothing
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 3011 Or err.Number = 3265 Then
        Exit Sub
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "LeseStatistMonat"
        Fehler.gsFehlertext = "Beim Lesen der Statistikvoreinstellungen ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub

Public Sub wasnunmitUnbekanntenStrichcode(cWasSuchteMan As String)
On Error GoTo LOKAL_ERROR
    
    If fnPruefeEANWert(cWasSuchteMan) <> 0 Then
        Exit Sub
    End If
    
    If ThisEineBedienerkarte(cWasSuchteMan) Then
        Exit Sub
    End If
    
    If Len(cWasSuchteMan) < 12 Then
        Exit Sub
    End If
    
    gcEAN = cWasSuchteMan
    frmWKL145.Show 1
    gcEAN = ""
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "wasnunmitUnbekanntenStrichcode"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub VKZAHLEN_Speichern(cTemp_Tab As String)
On Error GoTo LOKAL_ERROR

    If gbIPSTAT = False Then
        Exit Sub
    End If
    
    If Trim(gsIPMarktNr) = "" Then
       
        Exit Sub
    ElseIf Trim(gsIPMarktNr) = "0" Then
       
        Exit Sub
    End If
    
 

    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Sub
    End If
    
    If fTestLogin_fuersie_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Sub
    End If

    Dim stConnect As String
    stConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=fuersie;UID=fuersie;PWD=kh8CG6jt"
    
    Dim dbHIST As DAO.Database
    Set dbHIST = OpenDatabase("fuersie", dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    Dim rsRs2           As DAO.Recordset
    Dim rsKISS          As DAO.Recordset
    Dim lArtnrSQL       As Long
    Dim bAnlegenJetzt   As Boolean
    Dim bAnlegenLieferantJetzt   As Boolean
    
    bAnlegenJetzt = False
    bAnlegenLieferantJetzt = False
    lArtnrSQL = 0
    
    '1. auf dem SQL-SERVER insert kassjour
    
   
    
    Dim slokalPfad As String
    slokalPfad = gcDBPfad
    
    If Right(slokalPfad, 1) <> "\" Then
        slokalPfad = slokalPfad & "\"
    End If

    

        sSQL = "UPDATE " & cTemp_Tab & " set UMS_OK = '1' where UMS_OK = 'J'"
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "UPDATE " & cTemp_Tab & " set UMS_OK = '0' where UMS_OK = 'N'"
        gdBase.Execute sSQL, dbFailOnError
    
        sSQL = "Insert into kassjour Select "
        sSQL = sSQL & " artnr "
        sSQL = sSQL & " ,bezeich "
        sSQL = sSQL & " ,Menge "
        sSQL = sSQL & " ,Preis "
        sSQL = sSQL & ", ADATE  "
        sSQL = sSQL & ", AZEIT "
        sSQL = sSQL & ", KUNDNR  "
        sSQL = sSQL & ", " & gsIPMarktNr & " as FILIALE  "
        sSQL = sSQL & ", KASNUM  "
        sSQL = sSQL & ", LINR "
        sSQL = sSQL & ", LPZ as LINIE"
        sSQL = sSQL & ", AGN  "
        sSQL = sSQL & ", EAN "
        sSQL = sSQL & ", MWST "
        sSQL = sSQL & ", EKPR as SEKPR "
        sSQL = sSQL & ", VKPR as KVKPR  "
        sSQL = sSQL & ", MOPREIS  "
        sSQL = sSQL & ", BELEGNR  "
        sSQL = sSQL & ", BEST1 as Bestand  "
        sSQL = sSQL & ", RABKENN "
        sSQL = sSQL & ", KK_ART "
        sSQL = sSQL & ", BEDIENER  "
        sSQL = sSQL & ", UMS_OK "
        sSQL = sSQL & ", 0 as ZBONNR "
        sSQL = sSQL & ", 1 as ABOK "
    
        sSQL = sSQL & " from [;DATABASE=" & slokalPfad & "KISSDATA.MDB;pwd=" & gsPasswort & "]." & cTemp_Tab & ""
        dbHIST.Execute sSQL, dbFailOnError
    
    
    dbHIST.Close
    

    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "VKZAHLEN_Speichern"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub VKZAHLEN_Speichern_alle(lTag As Long)
On Error GoTo LOKAL_ERROR

    If gbIPSTAT = False Then
        Exit Sub
    End If
    
    If Trim(gsIPMarktNr) = "" Then
        Exit Sub
    ElseIf Trim(gsIPMarktNr) = "0" Then
       
        Exit Sub
    End If
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Sub
    End If
    
    If fTestLogin_fuersie_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Sub
    End If

    Dim stConnect As String
    stConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=fuersie;UID=fuersie;PWD=kh8CG6jt"
    
    Dim dbHIST As DAO.Database
    Set dbHIST = OpenDatabase("fuersie", dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    Dim rsRs2           As DAO.Recordset
    Dim rsKISS          As DAO.Recordset
    Dim lArtnrSQL       As Long
    Dim bAnlegenJetzt   As Boolean
    Dim bAnlegenLieferantJetzt   As Boolean
    
    bAnlegenJetzt = False
    bAnlegenLieferantJetzt = False
    lArtnrSQL = 0
    
    '1. auf dem SQL-SERVER insert kassjour
    
    Dim slokalPfad As String
    slokalPfad = gcDBPfad
    
    If Right(slokalPfad, 1) <> "\" Then
        slokalPfad = slokalPfad & "\"
    End If
    
    loeschNEW "KJSQL", gdBase
    
    sSQL = "Select * into KJSQL "
    sSQL = sSQL & " from kassjour "
    sSQL = sSQL & " where day(adate)= " & lTag
'    sSQL = sSQL & " and ((DatePart('ww',kassjour.adate)= " & ikw & "))"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "UPDATE KJSQL set UMS_OK = '1' where UMS_OK = 'J'"
    gdBase.Execute sSQL, dbFailOnError
        
    sSQL = "UPDATE KJSQL set UMS_OK = '0' where UMS_OK = 'N'"
    gdBase.Execute sSQL, dbFailOnError

    sSQL = "Insert into kassjour Select "
    sSQL = sSQL & " artnr "
    sSQL = sSQL & " ,bezeich "
    sSQL = sSQL & " ,Menge "
    sSQL = sSQL & " ,Preis "
    sSQL = sSQL & ", ADATE  "
    sSQL = sSQL & ", AZEIT "
    sSQL = sSQL & ", KUNDNR  "
    sSQL = sSQL & ", " & gsIPMarktNr & " as FILIALE  "
    sSQL = sSQL & ", KASNUM  "
    sSQL = sSQL & ", LINR "
    sSQL = sSQL & ", LPZ as LINIE"
    sSQL = sSQL & ", AGN  "
    sSQL = sSQL & ", EAN "
    sSQL = sSQL & ", MWST "
    sSQL = sSQL & ", EKPR as SEKPR "
    sSQL = sSQL & ", VKPR as KVKPR  "
    sSQL = sSQL & ", MOPREIS  "
    sSQL = sSQL & ", BELEGNR  "
    sSQL = sSQL & ", BEST1 as Bestand  "
    sSQL = sSQL & ", RABKENN "
    sSQL = sSQL & ", KK_ART "
    sSQL = sSQL & ", BEDIENER  "
    sSQL = sSQL & ", 0 as UMS_OK "
    sSQL = sSQL & ", 0 as ZBONNR "
    sSQL = sSQL & ", 1 as ABOK "

    sSQL = sSQL & " from [;DATABASE=" & slokalPfad & "KISSDATA.MDB;pwd=" & gsPasswort & "].KJSQL "
    dbHIST.Execute sSQL, dbFailOnError
    
    

    
    dbHIST.Close
    

    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "VKZAHLEN_Speichern_alle"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function unbekanntenEAN_Suchen_und_Anlegen(cWasSuchteMan As String) As String
On Error GoTo LOKAL_ERROR

    unbekanntenEAN_Suchen_und_Anlegen = ""
    
    If gbOptiStada = False Then
        Exit Function
    End If
    
    LeseLIZENZ
    If gbLizenz = False Then
        Exit Function
    End If

    If Val(gcFilNr) > 0 Then
        Exit Function
    End If
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Function
    End If
    
    If fnPruefeEANWert(cWasSuchteMan) <> 0 Then
        Exit Function
    End If
    
    If ThisEineBedienerkarte(cWasSuchteMan) Then
        Exit Function
    End If
    
    If Len(cWasSuchteMan) < 12 Then
        Exit Function
    End If
    
    If fTestLoginError = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Function
    End If

    Dim stConnect As String
    stConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=stada;UID=eanlive;PWD=sigverif2005"
    
    
    Dim dbEAN As DAO.Database

    Set dbEAN = OpenDatabase("STADA", dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    Dim rsRs2           As DAO.Recordset
    Dim rsKISS          As DAO.Recordset
    Dim lArtnrSQL       As Long
    Dim bAnlegenJetzt   As Boolean
    Dim bAnlegenLieferantJetzt   As Boolean
    
    bAnlegenJetzt = False
    bAnlegenLieferantJetzt = False
    lArtnrSQL = 0
    
    '1. Suchen auf dem SQL-SERVER nach EAN
    
    sSQL = "Select * from ARTEAN where EAN = '" & cWasSuchteMan & "'"
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!artnr) Then
            lArtnrSQL = CLng(rsrs!artnr)
        End If
    End If
    rsrs.Close
    
    '2. und? Artnr gefunden?
    
    If lArtnrSQL > 0 Then
    
        'Jetzt im eigenen System nach dieser ARTNR suchen
        sSQL = "Select * from ARTIKEL where ARTNR = " & lArtnrSQL
        Set rsKISS = gdBase.OpenRecordset(sSQL)
        If Not rsKISS.EOF Then
        
            rsKISS.Edit
            
            rsKISS!EAN3 = rsKISS!EAN2
            rsKISS!EAN2 = rsKISS!EAN
            rsKISS!EAN = cWasSuchteMan
            
            rsKISS.Update
            
            
        Else
            
            'nicht gefunden! also anlegen
            bAnlegenJetzt = True
        
            
        End If
        rsKISS.Close
        
    Else
    
        'MISSErfolg eintragen
        sSQL = " Insert into EANLIVE ("
        sSQL = sSQL & " SCANCODE "
        sSQL = sSQL & " ,FIRMA "
        sSQL = sSQL & " ,ERFOLG "
        sSQL = sSQL & " ,DATUM "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " '" & cWasSuchteMan & "' "
        sSQL = sSQL & " ,'" & gFirma.FirmaName & "' "
        sSQL = sSQL & " ,FALSE "
        sSQL = sSQL & " , '" & DateValue(Now) & "'"
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
        
    End If
    
    Dim lEANcount As Long
    
    Dim lartnr As Long
    Dim sBezeich As String
    Dim sEAN As String
    Dim sEAN2 As String
    Dim sEAN3 As String
    Dim lagn As Long
    Dim lPGN As Long
    Dim sMWST As String
    Dim siVKPR As Single
    Dim sMARKE As String
    Dim sRKZ As String
    Dim siInhalt As Single
    Dim sInhaltBez As String
    Dim daAufdat As Date
    Dim daExdat As Date
    Dim sGRUNDPREIS As String
    Dim lLinr As Long
    Dim lLinie As Long
    Dim slibesnr As String
    Dim siLEKPR As Single
    Dim lMM As Long
    
    Dim sLiefBez As String
    Dim sKuerzel As String
    
    lEANcount = 0
    
    lartnr = 0
    sBezeich = ""
    sEAN = ""
    sEAN2 = ""
    sEAN3 = ""
    lagn = 0
    lPGN = 0
    sMWST = ""
    siVKPR = 0#
    sMARKE = ""
    sRKZ = "N"
    siInhalt = 0
    sInhaltBez = ""
    daAufdat = DateValue(Now)
    daExdat = 0
    sGRUNDPREIS = ""
    
    lLinr = 0
    lLinie = 1
    slibesnr = ""
    siLEKPR = 0#
    lMM = 0
    
    sLiefBez = ""
    sKuerzel = ""
    
    
    If bAnlegenJetzt = True Then 'Artikel anlegen
    
        'Artikeltabelle
        
        sSQL = "Select * from ARTIKEL where ARTNR = " & lArtnrSQL
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
        
            If Not IsNull(rsrs!artnr) Then
                lartnr = CLng(rsrs!artnr)
            End If
            
            If Not IsNull(rsrs!BEZEICH) Then
                sBezeich = rsrs!BEZEICH
            End If
            
            If Not IsNull(rsrs!AGN) Then
                lagn = CLng(rsrs!AGN)
            End If
            
            If Not IsNull(rsrs!PGN) Then
                lPGN = CLng(rsrs!PGN)
            End If
            
            If Not IsNull(rsrs!MWST) Then
                sMWST = rsrs!MWST
            End If
            
            If Not IsNull(rsrs!vkpr) Then
                siVKPR = rsrs!vkpr
            End If
            
            If Not IsNull(rsrs!MARKE) Then
                sMARKE = rsrs!MARKE
            End If
            
            If Not IsNull(rsrs!RKZ) Then
                If rsrs!RKZ = True Then
                    sRKZ = "J"
                Else
                    sRKZ = "N"
                End If
            End If
            
            If Not IsNull(rsrs!INHALT) Then
                siInhalt = rsrs!INHALT
            End If
            
            If Not IsNull(rsrs!INHALTBEZ) Then
                sInhaltBez = rsrs!INHALTBEZ
            End If
            
            If Not IsNull(rsrs!GP) Then
                If rsrs!GP = True Then
                    sGRUNDPREIS = "J"
                Else
                    sGRUNDPREIS = "N"
                End If
            End If
            
            If Not IsNull(rsrs!AUFDAT) Then
                daAufdat = rsrs!AUFDAT
            End If
            
            If Not IsNull(rsrs!EXDAT) Then
                daExdat = rsrs!EXDAT
            End If
            
        End If
        rsrs.Close
        
        'EAN-Tabelle
        sSQL = "Select TOP 3 EAN from ARTEAN where ARTNR = " & lArtnrSQL & " order by Datum desc "
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
            rsrs.MoveFirst
            Do While Not rsrs.EOF
            
                lEANcount = lEANcount + 1
                
                If Not IsNull(rsrs!EAN) Then
                    If lEANcount = 1 Then
                        sEAN = rsrs!EAN
                    ElseIf lEANcount = 2 Then
                        sEAN2 = rsrs!EAN
                    ElseIf lEANcount = 3 Then
                        sEAN3 = rsrs!EAN
                    End If
                End If
                
                rsrs.MoveNext
                
            Loop
        End If
        rsrs.Close
        
        'Lieferanteninformationen
        
        sSQL = "Select * from ARTLIEF where ARTNR = " & lArtnrSQL & " and Herstlinr = True "
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
        
            If Not IsNull(rsrs!LIBESNR) Then
                slibesnr = rsrs!LIBESNR
            End If
            
            If Not IsNull(rsrs!Linie) Then
                lLinie = rsrs!Linie
            End If
            
            If Not IsNull(rsrs!linr) Then
                lLinr = rsrs!linr
            End If
            
            If Not IsNull(rsrs!MM) Then
                lMM = rsrs!MM
            End If
            
            If Not IsNull(rsrs!lekpr) Then
                siLEKPR = rsrs!lekpr
            End If
            
        Else
        
            sSQL = "Select * from ARTLIEF where ARTNR = " & lArtnrSQL & " "
            Set rsRs2 = dbEAN.OpenRecordset(sSQL)
            If Not rsRs2.EOF Then
            
                If Not IsNull(rsRs2!LIBESNR) Then
                    slibesnr = rsRs2!LIBESNR
                End If
                
                If Not IsNull(rsRs2!Linie) Then
                    lLinie = rsRs2!Linie
                End If
                
                If Not IsNull(rsRs2!linr) Then
                    lLinr = rsRs2!linr
                End If
                
                If Not IsNull(rsRs2!MM) Then
                    lMM = rsRs2!MM
                End If
                
                If Not IsNull(rsRs2!lekpr) Then
                    siLEKPR = rsRs2!lekpr
                End If
                
            End If
            rsRs2.Close
            
        End If
        rsrs.Close
        
        'Lisrt
        sSQL = "Select * from LISRT where LINR = " & lLinr
        Set rsrs = gdBase.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
        
        Else
            'nicht gefunden! also anlegen
            bAnlegenLieferantJetzt = True
            
        End If
        rsrs.Close
        
        If bAnlegenLieferantJetzt = True Then
        
            sSQL = "Select * from LIEFERANTEN where LINR = " & lLinr
            Set rsrs = dbEAN.OpenRecordset(sSQL)
            If Not rsrs.EOF Then
            
                If Not IsNull(rsrs!LIEFBEZ) Then
                    sLiefBez = rsrs!LIEFBEZ
                End If
                
                If Not IsNull(rsrs!Kuerzel) Then
                    sKuerzel = rsrs!Kuerzel
                End If
                
            End If
            rsrs.Close
        
            'Lisrt
            sSQL = " Insert into Lisrt ("
            sSQL = sSQL & " LINR "
            sSQL = sSQL & " ,LIEFBEZ "
            sSQL = sSQL & " ,KUERZEL "
            sSQL = sSQL & " ) "
            sSQL = sSQL & " values "
            sSQL = sSQL & " ( "
            sSQL = sSQL & " " & lLinr & " "
            sSQL = sSQL & " ,'" & sLiefBez & "' "
            sSQL = sSQL & " ,'" & sKuerzel & "' "
            sSQL = sSQL & " ) "
            gdBase.Execute sSQL, dbFailOnError
        
        End If
        
        'Linien
        
        
        
        'zum Schluss insert
        'Artikel
        sSQL = " Insert into Artikel ("
        sSQL = sSQL & " Artnr "
        sSQL = sSQL & " ,BEZEICH "
        sSQL = sSQL & " ,AGN "
        sSQL = sSQL & " ,PGN "
        sSQL = sSQL & " ,EAN "
        sSQL = sSQL & " ,EAN2 "
        sSQL = sSQL & " ,EAN3 "
        sSQL = sSQL & " ,MWST "
        sSQL = sSQL & " ,KVKPR1 "
        sSQL = sSQL & " ,VKPR "
        sSQL = sSQL & " ,RKZ "
        sSQL = sSQL & " ,EXDAT "
        sSQL = sSQL & " ,AUFDAT "
        sSQL = sSQL & " ,INHALT "
        sSQL = sSQL & " ,INHALTBEZ "
        sSQL = sSQL & " ,GRUNDPREIS "
        
        sSQL = sSQL & " ,UMS_OK "
        sSQL = sSQL & " ,BONUS_OK "
        sSQL = sSQL & " ,RABATT_OK "
        sSQL = sSQL & " ,GEFUEHRT "
        sSQL = sSQL & " ,PREISSCHU "
        sSQL = sSQL & " ,BESTAND "
        sSQL = sSQL & " ,MINMEN "
        sSQL = sSQL & " ,MINBEST "
        sSQL = sSQL & " ,AWM "
        sSQL = sSQL & " ,LASTDATE "
        sSQL = sSQL & " ,LASTTIME "
        sSQL = sSQL & " ,LPZ "
        sSQL = sSQL & " ,LIBESNR "
        sSQL = sSQL & " ,LINR "
        sSQL = sSQL & " ,LEKPR "
        
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & lartnr & " "
        sSQL = sSQL & " ,'" & sBezeich & "' "
        sSQL = sSQL & " ," & lagn & " "
        sSQL = sSQL & " ," & lPGN & " "
        sSQL = sSQL & " ,'" & sEAN & "' "
        sSQL = sSQL & " ,'" & sEAN2 & "' "
        sSQL = sSQL & " ,'" & sEAN3 & "' "
        sSQL = sSQL & " ,'" & sMWST & "' "
        sSQL = sSQL & " ,'" & siVKPR & "' "
        sSQL = sSQL & " ,'" & siVKPR & "' "
        sSQL = sSQL & " ,'" & sRKZ & "' "
        sSQL = sSQL & " ,'" & daExdat & "' "
        sSQL = sSQL & " ,'" & daAufdat & "' "
        sSQL = sSQL & " ,'" & siInhalt & "' "
        sSQL = sSQL & " ,'" & sInhaltBez & "' "
        sSQL = sSQL & " ,'" & sGRUNDPREIS & "' "
        sSQL = sSQL & " ,'J' "
        sSQL = sSQL & " ,'J' "
        sSQL = sSQL & " ,'J' "
        sSQL = sSQL & " ,'J' "
        sSQL = sSQL & " ,'N' "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ," & lMM & " "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,'0' "
        sSQL = sSQL & ", '" & DateValue(Now) & "'"
        sSQL = sSQL & ", '" & TimeValue(Now) & "'"
        sSQL = sSQL & " ," & lLinie & " "
        sSQL = sSQL & " ,'" & slibesnr & "' "
        sSQL = sSQL & " ," & lLinr & " "
        sSQL = sSQL & " ,'" & siLEKPR & "' "
        
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
        'Artlief
        sSQL = " Insert into Artlief ("
        sSQL = sSQL & " Artnr "
        sSQL = sSQL & " ,LINR "
        sSQL = sSQL & " ,LEKPR "
        sSQL = sSQL & " ,MINMEN "
        sSQL = sSQL & " ,LIBESNR "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & lartnr & " "
        sSQL = sSQL & " ," & lLinr & " "
        sSQL = sSQL & " ,'" & siLEKPR & "' "
        sSQL = sSQL & " ," & lMM & " "
        sSQL = sSQL & " ,'" & slibesnr & "' "
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
        
        'Linien
'        sMarke
    
    End If
    
    If lArtnrSQL > 0 Then
    
        'Erfolg eintragen
        sSQL = " Insert into EANLIVE ("
        sSQL = sSQL & " SCANCODE "
        sSQL = sSQL & " ,FIRMA "
        sSQL = sSQL & " ,ERFOLG "
        sSQL = sSQL & " ,DATUM "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " '" & cWasSuchteMan & "' "
        sSQL = sSQL & " ,'" & gFirma.FirmaName & "' "
        sSQL = sSQL & " ,TRUE "
        sSQL = sSQL & " , '" & DateValue(Now) & "'"
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
    
    
        unbekanntenEAN_Suchen_und_Anlegen = CStr(lArtnrSQL)
    End If
    
    dbEAN.Close
    
'    gcEAN = cWasSuchteMan
'    frmWKL145.Show 1
'    gcEAN = ""
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "unbekanntenEAN_Suchen_und_Anlegen"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function Ist_in_ARTEAN_K(cWasSuchteMan As String) As Boolean
On Error GoTo LOKAL_ERROR

    Dim rsrs As Recordset
    Dim rsArt As Recordset
    
    Dim sSQL As String
    Dim cArtNr As String
    Dim cEAN As String

    Ist_in_ARTEAN_K = False
    
    sSQL = "Select * from ARTEAN_K where EAN =  '" & cWasSuchteMan & "'"
    
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
    
        If Not IsNull(rsrs!artnr) Then
            cArtNr = rsrs!artnr
        End If
        
        sSQL = "Select * from artikel where artnr = " & cArtNr
        Set rsArt = gdBase.OpenRecordset(sSQL)
        If Not rsArt.EOF Then
        
            cEAN = ""
            
            If cEAN = "" Then
                If Not IsNull(rsArt!EAN3) Then
                    cEAN = Trim(rsArt!EAN3)
                End If
            End If
            
'            If cEAN = "" Then
'                If Not IsNull(rsArt!EAN2) Then
'                    cEAN = Trim(rsArt!EAN2)
'                End If
'            End If
'
'            If cEAN = "" Then
'                If Not IsNull(rsArt!EAN) Then
'                    cEAN = Trim(rsArt!EAN)
'                End If
'            End If
            
            If cEAN <> "" Then
                sSQL = "Insert into ARTEAN_K (Artnr,EAN) values (" & cArtNr & ", '" & cEAN & "') "
                gdBase.Execute sSQL, dbSQLPassThrough + dbFailOnError
            End If
            
        End If
        rsArt.Close
        
        


        sSQL = "Update Artikel set EAN3 = ean2 Where artnr = " & cArtNr & ""
        gdBase.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        sSQL = "Update Artikel set EAN2 = ean Where artnr = " & cArtNr & ""
        gdBase.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        sSQL = "Update Artikel set EAN = '" & cWasSuchteMan & "' Where artnr = " & cArtNr & ""
        gdBase.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        
        sSQL = "Delete * from ARTEAN_K where EAN = '" & cWasSuchteMan & "' "
        gdBase.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        Ist_in_ARTEAN_K = True
        
    End If
    
    rsrs.Close
    
    



Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Ist_in_ARTEAN_K"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function Ist_in_ARTIKEL(cWasSuchteMan As String) As Boolean
On Error GoTo LOKAL_ERROR

    Dim rsrs As Recordset
    Dim sSQL As String
    Dim cArtNr As String

    Ist_in_ARTIKEL = False
    
    sSQL = "Select * from Artikel where EAN =  '" & cWasSuchteMan & "'"
    sSQL = sSQL & " or EAN2 = '" & cWasSuchteMan & "' or EAN3 = '" & cWasSuchteMan & "'"
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        
        Ist_in_ARTIKEL = True
        
    End If
    
    rsrs.Close

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Ist_in_ARTIKEL"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function unbekanntenEAN_Suchen_und_Anlegen_DrogAlles(cWasSuchteMan As String) As String
On Error GoTo LOKAL_ERROR

    unbekanntenEAN_Suchen_und_Anlegen_DrogAlles = cWasSuchteMan
    
    'ausscheifen in die Tabelle ARTEAN_K
    
    If gbLokalModus = False Then
    
    
        If Ist_in_ARTEAN_K(cWasSuchteMan) Then
        
        
            Dim sSQL As String
            'an 1. Stelle suchen
            sSQL = "Select * from Artikel where EAN =  '" & cWasSuchteMan & "'"
    
            Dim rsrsA As Recordset
            Dim cArtnrA As String
            Set rsrsA = gdBase.OpenRecordset(sSQL)
            If Not rsrsA.EOF Then
            
                If Not IsNull(rsrsA!artnr) Then
                    cArtnrA = rsrsA!artnr
                End If
        
            End If
            rsrsA.Close
            
            unbekanntenEAN_Suchen_und_Anlegen_DrogAlles = cArtnrA
            Exit Function
        
        
        End If
        
    End If
    
    'Ende ausscheifen in die Tabelle ARTEAN_K
    
    If gbOptiStadaSpiel = False Then
        Exit Function
    End If
    
    LeseLIZENZ_INDI
    If gbLizenzINDI = False Then
        Exit Function
    End If

    If Val(gcFilNr) > 0 Then
        Exit Function
    End If
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Function
    End If
    
    If fnPruefeEANWert(cWasSuchteMan) <> 0 Then
        Exit Function
    End If
    
    If ThisEineBedienerkarte(cWasSuchteMan) Then
        Exit Function
    End If
    
    If Len(cWasSuchteMan) < 12 Then
        Exit Function
    End If
    
    If fTestLogin_Spiel_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Function
    End If
    
    
    unbekanntenEAN_Suchen_und_Anlegen_DrogAlles = ""

    Dim stConnect As String
    stConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=spielwaren;UID=eanlive;PWD=sigverif2005"
    
    
    Dim dbEAN As DAO.Database
    Set dbEAN = OpenDatabase("SPIELWAREN", dbDriverNoPrompt, False, stConnect)
    
    
    Dim rsrs            As DAO.Recordset
    Dim rsRs2           As DAO.Recordset
    Dim rsKISS          As DAO.Recordset
    Dim lArtnrSQL       As Long
    Dim bAnlegenJetzt   As Boolean
    
    bAnlegenJetzt = False
    lArtnrSQL = 0
    
    '1. Suchen auf dem SQL-SERVER nach EAN
    
    sSQL = "Select * from ARTEAN where EAN = '" & cWasSuchteMan & "'"
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!artnr) Then
            lArtnrSQL = CLng(rsrs!artnr)
        End If
    End If
    rsrs.Close
    
    '2. und? Artnr gefunden?
    
    If lArtnrSQL > 0 Then
        'also anlegen
        bAnlegenJetzt = True
    Else
    
        'MISSErfolg eintragen
        sSQL = " Insert into EANLIVE ("
        sSQL = sSQL & " SCANCODE "
        sSQL = sSQL & " ,FIRMA "
        sSQL = sSQL & " ,ERFOLG "
        sSQL = sSQL & " ,DATUM "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " '" & cWasSuchteMan & "' "
        sSQL = sSQL & " ,'" & gFirma.FirmaName & "' "
        sSQL = sSQL & " ,FALSE "
        sSQL = sSQL & " , '" & DateValue(Now) & "'"
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
    End If
    
    Dim lEANcount As Long
    Dim lartnr As Long
    Dim sBezeich As String
    Dim sEAN As String
    Dim sEAN2 As String
    Dim sEAN3 As String
    Dim lagn As Long
    Dim lPGN As Long
    Dim sMWST As String
    Dim siVKPR As Single
    Dim sMARKE As String
    Dim sRKZ As String
    Dim siInhalt As Single
    Dim sInhaltBez As String
    Dim daAufdat As Date
    Dim daExdat As Date
    Dim sGRUNDPREIS As String
    Dim lLinr As Long
    Dim lLinie As Long
    Dim slibesnr As String
    Dim siLEKPR As Single
    Dim lMM As Long
    
    Dim sLiefBez As String
    Dim sKuerzel As String
    
    lEANcount = 0
    
    lartnr = 0
    sBezeich = ""
    sEAN = ""
    sEAN2 = ""
    sEAN3 = ""
    lagn = 0
    lPGN = 0
    sMWST = ""
    siVKPR = 0#
    sMARKE = ""
    sRKZ = "N"
    siInhalt = 0
    sInhaltBez = ""
    daAufdat = DateValue(Now)
    daExdat = 0
    sGRUNDPREIS = ""
    
    lLinr = 0
    lLinie = 1
    slibesnr = ""
    siLEKPR = 0#
    lMM = 0
    
    sLiefBez = ""
    sKuerzel = ""
    
    
    If bAnlegenJetzt = True Then 'Artikel anlegen
    
        'Artikeltabelle
        
        sSQL = "Select * from ARTIKEL where ARTNR = " & lArtnrSQL
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
        
'            If Not IsNull(rsrs!artnr) Then
'                lartnr = CLng(rsrs!artnr)
'            End If
            
            lartnr = HoleFreieArtikelNrWKL10
            
            
            If Not IsNull(rsrs!BEZEICH) Then
                sBezeich = rsrs!BEZEICH
            End If
            
            If Not IsNull(rsrs!AGN) Then
                lagn = CLng(rsrs!AGN)
            End If
            
            If Not IsNull(rsrs!PGN) Then
                lPGN = CLng(rsrs!PGN)
            End If
            
            If Not IsNull(rsrs!MWST) Then
                sMWST = rsrs!MWST
            End If
            
            If Not IsNull(rsrs!vkpr) Then
                siVKPR = rsrs!vkpr
            End If
            
            If Not IsNull(rsrs!MARKE) Then
                sMARKE = rsrs!MARKE
            End If
            
            If Not IsNull(rsrs!RKZ) Then
                If rsrs!RKZ = True Then
                    sRKZ = "J"
                Else
                    sRKZ = "N"
                End If
            End If
            
            If Not IsNull(rsrs!INHALT) Then
                siInhalt = rsrs!INHALT
            End If
            
            If Not IsNull(rsrs!INHALTBEZ) Then
                sInhaltBez = rsrs!INHALTBEZ
            End If
            
            If Not IsNull(rsrs!GP) Then
                If rsrs!GP = True Then
                    sGRUNDPREIS = "J"
                Else
                    sGRUNDPREIS = "N"
                End If
            End If
            
            If Not IsNull(rsrs!AUFDAT) Then
                daAufdat = rsrs!AUFDAT
            End If
            
            If Not IsNull(rsrs!EXDAT) Then
                daExdat = rsrs!EXDAT
            End If
            
        End If
        rsrs.Close
        
        'EAN-Tabelle
        sSQL = "Select TOP 3 EAN from ARTEAN where ARTNR = " & lArtnrSQL & " order by Datum desc "
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
            rsrs.MoveFirst
            Do While Not rsrs.EOF

                lEANcount = lEANcount + 1

                If Not IsNull(rsrs!EAN) Then
                    If lEANcount = 1 Then
                        sEAN = rsrs!EAN
                    ElseIf lEANcount = 2 Then
                        sEAN2 = rsrs!EAN
                    ElseIf lEANcount = 3 Then
                        sEAN3 = rsrs!EAN
                    End If
                End If

                rsrs.MoveNext

            Loop
        End If
        rsrs.Close
        
        Dim bEAN_Ok As Boolean
        bEAN_Ok = False
        
        If bEAN_Ok = False Then
            If sEAN = cWasSuchteMan Then
                bEAN_Ok = True
            End If
        End If
        
        If bEAN_Ok = False Then
            If sEAN2 = cWasSuchteMan Then
                bEAN_Ok = True
            End If
        End If
        
        If bEAN_Ok = False Then
            If sEAN3 = cWasSuchteMan Then
                bEAN_Ok = True
            End If
        End If
        
        If bEAN_Ok = False Then
            sEAN3 = cWasSuchteMan
        End If
        
        'Lieferanteninformationen
        
        lLinr = 998899
        
        sSQL = "Select * from ARTLIEF where ARTNR = " & lArtnrSQL & " and Herstlinr = True "
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
        
            If Not IsNull(rsrs!LIBESNR) Then
                slibesnr = rsrs!LIBESNR
            End If
            
            If Not IsNull(rsrs!Linie) Then
                lLinie = rsrs!Linie
            End If
            
'            If Not IsNull(rsrs!linr) Then
'                lLinr = rsrs!linr
'            End If
            
            If Not IsNull(rsrs!MM) Then
                lMM = rsrs!MM
            End If
            
            If Not IsNull(rsrs!lekpr) Then
                siLEKPR = rsrs!lekpr
            End If
            
        Else
        
            sSQL = "Select * from ARTLIEF where ARTNR = " & lArtnrSQL & " "
            Set rsRs2 = dbEAN.OpenRecordset(sSQL)
            If Not rsRs2.EOF Then
            
                If Not IsNull(rsRs2!LIBESNR) Then
                    slibesnr = rsRs2!LIBESNR
                End If
                
                If Not IsNull(rsRs2!Linie) Then
                    lLinie = rsRs2!Linie
                End If
                
'                If Not IsNull(rsRs2!linr) Then
'                    lLinr = rsRs2!linr
'                End If
                
                If Not IsNull(rsRs2!MM) Then
                    lMM = rsRs2!MM
                End If
                
                If Not IsNull(rsRs2!lekpr) Then
                    siLEKPR = rsRs2!lekpr
                End If
                
            End If
            rsRs2.Close
            
        End If
        rsrs.Close
        
        'Lisrt
        sSQL = "Select * from LISRT where LINR = 998899"
        Set rsrs = gdBase.OpenRecordset(sSQL)
        If rsrs.EOF Then
            'nicht gefunden! also anlegen
            
            lLinr = 998899
            sLiefBez = "KISSLIVE SERVICE"
            sKuerzel = "KISS"
            
            'Lisrt
            sSQL = " Insert into Lisrt ("
            sSQL = sSQL & " LINR "
            sSQL = sSQL & " ,LIEFBEZ "
            sSQL = sSQL & " ,KUERZEL "
            sSQL = sSQL & " ) "
            sSQL = sSQL & " values "
            sSQL = sSQL & " ( "
            sSQL = sSQL & " " & lLinr & " "
            sSQL = sSQL & " ,'" & sLiefBez & "' "
            sSQL = sSQL & " ,'" & sKuerzel & "' "
            sSQL = sSQL & " ) "
            gdBase.Execute sSQL, dbFailOnError
            
            'LINBEZ
            sSQL = "Delete from LINBEZ where LINR = 998899 "
            gdBase.Execute sSQL, dbFailOnError
            
            'LINBEZ
            sSQL = "Insert into Linbez (LPZ,LINR,LINBEZEICH,Sorti) values  "
            sSQL = sSQL & " ( 1 "
            sSQL = sSQL & " , " & lLinr & " "
            sSQL = sSQL & " , 'KISSLIVE SERVICE' "
            sSQL = sSQL & " , 1 "
            sSQL = sSQL & " ) "
            gdBase.Execute sSQL, dbFailOnError
            
        End If
        rsrs.Close
        
        'zum Schluss insert
        'Artikel
        sSQL = " Insert into Artikel ("
        sSQL = sSQL & " Artnr "
        sSQL = sSQL & " ,BEZEICH "
        sSQL = sSQL & " ,AGN "
        sSQL = sSQL & " ,PGN "
        sSQL = sSQL & " ,EAN "
        sSQL = sSQL & " ,EAN2 "
        sSQL = sSQL & " ,EAN3 "
        sSQL = sSQL & " ,MWST "
        sSQL = sSQL & " ,KVKPR1 "
        sSQL = sSQL & " ,VKPR "
        sSQL = sSQL & " ,RKZ "
        sSQL = sSQL & " ,EXDAT "
        sSQL = sSQL & " ,AUFDAT "
        sSQL = sSQL & " ,INHALT "
        sSQL = sSQL & " ,INHALTBEZ "
        sSQL = sSQL & " ,GRUNDPREIS "
        
        sSQL = sSQL & " ,UMS_OK "
        sSQL = sSQL & " ,BONUS_OK "
        sSQL = sSQL & " ,RABATT_OK "
        sSQL = sSQL & " ,GEFUEHRT "
        sSQL = sSQL & " ,PREISSCHU "
        sSQL = sSQL & " ,BESTAND "
        sSQL = sSQL & " ,MINMEN "
        sSQL = sSQL & " ,MINBEST "
        sSQL = sSQL & " ,AWM "
        sSQL = sSQL & " ,LASTDATE "
        sSQL = sSQL & " ,LASTTIME "
        sSQL = sSQL & " ,LPZ "
        sSQL = sSQL & " ,LIBESNR "
        sSQL = sSQL & " ,LINR "
        sSQL = sSQL & " ,LEKPR "
        
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & lartnr & " "
        sSQL = sSQL & " ,'" & sBezeich & "' "
        sSQL = sSQL & " ," & lagn & " "
        sSQL = sSQL & " ," & lPGN & " "
        sSQL = sSQL & " ,'" & sEAN & "' "
        sSQL = sSQL & " ,'" & sEAN2 & "' "
        sSQL = sSQL & " ,'" & sEAN3 & "' "
        sSQL = sSQL & " ,'" & sMWST & "' "
        sSQL = sSQL & " ,'" & siVKPR & "' "
        sSQL = sSQL & " ,'" & siVKPR & "' "
        sSQL = sSQL & " ,'" & sRKZ & "' "
        sSQL = sSQL & " ,'" & daExdat & "' "
        sSQL = sSQL & " ,'" & daAufdat & "' "
        sSQL = sSQL & " ,'" & siInhalt & "' "
        sSQL = sSQL & " ,'" & sInhaltBez & "' "
        sSQL = sSQL & " ,'" & sGRUNDPREIS & "' "
        sSQL = sSQL & " ,'J' "
        sSQL = sSQL & " ,'J' "
        sSQL = sSQL & " ,'J' "
        sSQL = sSQL & " ,'J' "
        sSQL = sSQL & " ,'N' "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ," & lMM & " "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,'0' "
        sSQL = sSQL & ", '" & DateValue(Now) & "'"
        sSQL = sSQL & ", '" & TimeValue(Now) & "'"
        sSQL = sSQL & " ," & lLinie & " "
        sSQL = sSQL & " ,'" & slibesnr & "' "
        sSQL = sSQL & " ," & lLinr & " "
        sSQL = sSQL & " ,'" & siLEKPR & "' "
        
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
        'Artlief
        sSQL = " Insert into Artlief ("
        sSQL = sSQL & " Artnr "
        sSQL = sSQL & " ,LINR "
        sSQL = sSQL & " ,LEKPR "
        sSQL = sSQL & " ,MINMEN "
        sSQL = sSQL & " ,LIBESNR "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & lartnr & " "
        sSQL = sSQL & " ," & lLinr & " "
        sSQL = sSQL & " ,'" & siLEKPR & "' "
        sSQL = sSQL & " ," & lMM & " "
        sSQL = sSQL & " ,'" & slibesnr & "' "
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
    End If
    
    If lArtnrSQL > 0 Then
    
        'Erfolg eintragen
        sSQL = " Insert into EANLIVE ("
        sSQL = sSQL & " SCANCODE "
        sSQL = sSQL & " ,FIRMA "
        sSQL = sSQL & " ,ERFOLG "
        sSQL = sSQL & " ,DATUM "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " '" & cWasSuchteMan & "' "
        sSQL = sSQL & " ,'" & gFirma.FirmaName & "' "
        sSQL = sSQL & " ,TRUE "
        sSQL = sSQL & " , '" & DateValue(Now) & "'"
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
    
    
        unbekanntenEAN_Suchen_und_Anlegen_DrogAlles = cWasSuchteMan
        
        MsgBox "Achtung, Preis und Lieferant (998899) überprüfen!", vbOKOnly + vbInformation, "Winkiss Hinweis:"
    End If
    
    dbEAN.Close
    
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "unbekanntenEAN_Suchen_und_Anlegen_DrogAlles"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function doemer_bestand_updaten(cArtNr As String, lMenge As Long) As Boolean
On Error GoTo LOKAL_ERROR

    doemer_bestand_updaten = False
    
    '1. Pfad ermitteln
    Dim sPfadDoe As String
    sPfadDoe = PfadDoemer
    
    If sPfadDoe = "" Then
        MsgBox "Bestandsveränderung kann nicht vorgenommen werden", vbCritical, "Winkiss Hinweis"
        Exit Function
    End If
    
    
    If Right(sPfadDoe, 1) <> "\" Then
        sPfadDoe = sPfadDoe & "\"
    End If
    
    Dim dBUpdate As Database
    Dim sSQL As String
    
    Set dBUpdate = OpenDatabase(sPfadDoe & "kissdata.mdb", False, False, "MS Access;PWD=" & gsPasswort)
    
    sSQL = "Update Artikel set bestand = bestand -  " & lMenge
    sSQL = sSQL & " where Artnr = " & cArtNr
    dBUpdate.Execute sSQL, dbFailOnError
    
    dBUpdate.Close
    
    doemer_bestand_updaten = True
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "doemer_bestand_updaten"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function live_bestand_abrufen(cArtNr As String) As Boolean
On Error GoTo LOKAL_ERROR

    live_bestand_abrufen = False
    
    Dim lFil As Long
    Dim lBestand As Long
    Dim lMinBest As Long
    
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Function
    End If
    
    If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Function
    End If

    Dim stConnect As String
    
    If gsKL_DSN <> "" Then
        stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    Else
        stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    End If
    
    
    Dim dbEAN As DAO.Database

    Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    Dim rsZB            As DAO.Recordset
    
    '1. Suchen auf dem SQL-SERVER nach EAN
    sSQL = "Select filiale,Bestand,MINBEST from zbestand where Artnr = " & cArtNr & ""
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        Do While Not rsrs.EOF
        
            lFil = 0
            lBestand = 0
            lMinBest = 0
            
            If Not IsNull(rsrs!FILIALE) Then
                lFil = rsrs!FILIALE
            End If
            
            If Not IsNull(rsrs!BESTAND) Then
                lBestand = rsrs!BESTAND
            End If
            
            If Not IsNull(rsrs!MINBEST) Then
                lMinBest = rsrs!MINBEST
            End If
            
            If CLng(gcFilNr) <> lFil Then
                If lBestand <> 0 Or lMinBest <> 0 Then
            
                    sSQL = "Select Artnr,Filialnr from ZBESTAND where Artnr = " & cArtNr & " and Filialnr = " & lFil
                    Set rsZB = gdBase.OpenRecordset(sSQL)
                    If rsZB.EOF Then
                        'nicht vorhanden
                        
                        sSQL = " Insert into ZBESTAND ("
                        sSQL = sSQL & " ARTNR "
                        sSQL = sSQL & " ,Filialnr "
                        sSQL = sSQL & " ) "
                        sSQL = sSQL & " values "
                        sSQL = sSQL & " ( "
                        sSQL = sSQL & " " & cArtNr & " "
                        sSQL = sSQL & " ," & lFil & " "
                        sSQL = sSQL & " ) "
                        gdBase.Execute sSQL, dbFailOnError
                            
                    End If
                    rsZB.Close
                    
                End If
            
                sSQL = " Update zbestand set Bestand = " & lBestand & " ,MINBEST = " & lMinBest & "  Where artnr = " & cArtNr & ""
                sSQL = sSQL & " and filialnr = " & lFil & " "
                gdBase.Execute sSQL, dbSQLPassThrough + dbFailOnError
                
            End If
        rsrs.MoveNext
        Loop
    End If
    rsrs.Close

        

    dbEAN.Close
    
    live_bestand_abrufen = True
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "live_bestand_abrufen"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
'    Resume Next
End Function
Public Function live_bestand_updaten(cArtNr As String, lNeuerBestand As Long, iFil As Integer) As Boolean
On Error GoTo LOKAL_ERROR

    live_bestand_updaten = False
    
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Function
    End If
    
    If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Function
    End If

    Dim stConnect As String
    
    If gsKL_DSN <> "" Then
        stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    Else
        stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    End If
    
    Dim dbEAN As DAO.Database

    Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    
    '1. Suchen auf dem SQL-SERVER nach EAN
    

    
    sSQL = "Select Bestand from zbestand where Artnr = " & cArtNr & ""
    sSQL = sSQL & " and filiale = " & iFil & " "
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then

        sSQL = " Update zbestand set Bestand = " & lNeuerBestand & "  Where artnr = " & cArtNr & ""
        sSQL = sSQL & " and filiale = " & iFil & " "
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
    Else
    
        sSQL = " Insert into ZBESTAND ("
        sSQL = sSQL & " ARTNR "
        sSQL = sSQL & " ,FILIALE "
        sSQL = sSQL & " ,BESTAND "
        sSQL = sSQL & " ,MINBEST "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & cArtNr & " "
        sSQL = sSQL & " , " & iFil & " "
        sSQL = sSQL & " , " & lNeuerBestand & " "
        sSQL = sSQL & " ,  0 "
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
    End If
    rsrs.Close
    
    dbEAN.Close
    
    live_bestand_updaten = True
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "live_bestand_updaten"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
'    Resume Next
End Function
Public Function live_bestand_updaten_Diffmenge(cArtNr As String, lDiffmenge As Long, lNeuerBestand As Long, iFil As Integer) As Boolean
On Error GoTo LOKAL_ERROR

    live_bestand_updaten_Diffmenge = False
    
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Function
    End If
    
    If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Function
    End If

    Dim stConnect As String
    
    If gsKL_DSN <> "" Then
        stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    Else
        stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    End If
    
    Dim dbEAN As DAO.Database

    Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    
    '1. Suchen auf dem SQL-SERVER nach EAN
    
    sSQL = "Select Bestand from zbestand where Artnr = " & cArtNr & ""
    sSQL = sSQL & " and filiale = " & iFil & " "
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then

        sSQL = " Update zbestand set Bestand = Bestand + " & lDiffmenge & "  Where artnr = " & cArtNr & ""
        sSQL = sSQL & " and filiale = " & iFil & " "
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
    Else
    
        sSQL = " Insert into ZBESTAND ("
        sSQL = sSQL & " ARTNR "
        sSQL = sSQL & " ,FILIALE "
        sSQL = sSQL & " ,BESTAND "
        sSQL = sSQL & " ,MINBEST "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & cArtNr & " "
        sSQL = sSQL & " , " & iFil & " "
        sSQL = sSQL & " , " & lNeuerBestand & " "
        sSQL = sSQL & " ,  0 "
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
    
    End If
    rsrs.Close
    

    
    dbEAN.Close
    
    live_bestand_updaten_Diffmenge = True
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "live_bestand_updaten_Diffmenge"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
'    Resume Next
End Function
Public Function live_KVK_updaten(cArtNr As String, dNeuerKVK As Double, iFil As Integer) As Boolean
On Error GoTo LOKAL_ERROR

    live_KVK_updaten = False
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Function
    End If
    
    If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Function
    End If

    Dim stConnect As String
    
    If gsKL_DSN <> "" Then
        stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    Else
        stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    End If
    
    Dim dbEAN As DAO.Database

    Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    Dim cPreis          As String
    
    '1. Suchen auf dem SQL-SERVER in der differenzierten Preistabelle
    
    sSQL = "Select PREIS from PREISFILIALE where Artnr = " & cArtNr & ""
    sSQL = sSQL & " and filiale = " & iFil & " "
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
    
        cPreis = fnMoveComma2Point$(CStr(dNeuerKVK))

        sSQL = " Update PREISFILIALE set PREIS = " & cPreis & "  Where artnr = " & cArtNr & ""
        sSQL = sSQL & " and filiale = " & iFil & " "
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
    Else
    
        sSQL = " Insert into PREISFILIALE ("
        sSQL = sSQL & " ARTNR "
        sSQL = sSQL & " ,FILIALE "
        sSQL = sSQL & " ,PREIS "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & cArtNr & " "
        sSQL = sSQL & " , " & iFil & " "
        sSQL = sSQL & " , '" & dNeuerKVK & "' "
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
    
    End If
    rsrs.Close
    
    sSQL = " Update Artikel set FARBES = 96  Where artnr = " & cArtNr & ""
    dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
    
    Dim lcount As Long
    
    lcount = 0
    sSQL = "Select count(*) as anz from AEN_POOL where Artnr = " & cArtNr & ""
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        lcount = rsrs!anz
    End If
    rsrs.Close
    If lcount = 0 Then

        'in den Pool von Kisslive
        sSQL = " Insert into AEN_POOL ("
        sSQL = sSQL & " ARTNR "
        sSQL = sSQL & " ,DAT "
        sSQL = sSQL & " ,DOS "
        sSQL = sSQL & " ,Winkiss "
        sSQL = sSQL & " ,KISSLIVE "
        sSQL = sSQL & " ,ESD "
        sSQL = sSQL & " ,KOSCHM "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & cArtNr & " "
        sSQL = sSQL & " , '" & DateValue(Now) & "' "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
    
    End If
    
    '2. Hat der neue Preis alle Filialpreise gleichgesetzt?
    
    Dim dPREIStemp As Double
    Dim dPREISMax As Double
    Dim dKVKinKisslive As Double
    Dim bGleich As Boolean
    bGleich = True
    
    dKVKinKisslive = 0
    sSQL = "Select KVKPR from Artikel where Artnr = " & cArtNr & ""
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
    
        If Not IsNull(rsrs!kvkpr) Then
            dKVKinKisslive = CDbl(rsrs!kvkpr)
        End If
    
    End If
    rsrs.Close
    
    
    lcount = 0
    
    'ist mehr als ein Datensatz in der Preisfiliale?
    
    sSQL = "Delete from PREISFILIALE Where artnr = " & cArtNr & " and Preis <= 0"
    dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
    
    sSQL = "Select count(*) as anz from PREISFILIALE where Artnr = " & cArtNr & ""
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
    
        lcount = rsrs!anz
    
    End If
    rsrs.Close
    
    If lcount = 1 Then
    
        sSQL = "Select PREIS from PREISFILIALE where Artnr = " & cArtNr & ""
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
            dPREIStemp = 0
            If Not IsNull(rsrs!Preis) Then
                dPREIStemp = CDbl(rsrs!Preis)
                
               
                If Format(dPREIStemp, "####.00") <> Format(dKVKinKisslive, "####.00") Then
                    bGleich = False
                End If
            End If
        End If
        rsrs.Close
        
    Else
        'count > 1
        dPREISMax = 0
        sSQL = "Select * from PREISFILIALE where Artnr = " & cArtNr & ""
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
        
            rsrs.MoveFirst
            Do While Not rsrs.EOF
            
                dPREIStemp = 0
                If Not IsNull(rsrs!Preis) Then
                    dPREIStemp = CDbl(rsrs!Preis)
                    
                    If dPREISMax > 0 Then
                    
                        If Format(dPREIStemp, "####.00") <> Format(dPREISMax, "####.00") Then
                            bGleich = False
                            Exit Do
                        Else
                        
                        End If
                    Else
                        dPREISMax = dPREIStemp
                    End If
                    
                End If
            
            rsrs.MoveNext
            Loop
        End If
        rsrs.Close
    
    
    End If
    
    If bGleich = True Then
        'jawoll es ist so
        'und wenn es so ist, dann folgendes

        cPreis = fnMoveComma2Point$(CStr(dNeuerKVK))

        sSQL = " Update Artikel set FARBES = 0,KVKPR = " & cPreis & "  Where artnr = " & cArtNr & ""
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError

        sSQL = "Delete from PREISFILIALE Where artnr = " & cArtNr & ""
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        lcount = 0
        sSQL = "Select count(*) as anz from AEN_POOL where Artnr = " & cArtNr & ""
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
            lcount = rsrs!anz
        End If
        rsrs.Close
        If lcount = 0 Then

            'in den Pool von Kisslive
            sSQL = " Insert into AEN_POOL ("
            sSQL = sSQL & " ARTNR "
            sSQL = sSQL & " ,DAT "
            sSQL = sSQL & " ,DOS "
            sSQL = sSQL & " ,Winkiss "
            sSQL = sSQL & " ,KISSLIVE "
            sSQL = sSQL & " ,ESD "
            sSQL = sSQL & " ,KOSCHM "
            sSQL = sSQL & " ) "
            sSQL = sSQL & " values "
            sSQL = sSQL & " ( "
            sSQL = sSQL & " " & cArtNr & " "
            sSQL = sSQL & " , '" & DateValue(Now) & "' "
            sSQL = sSQL & " ,0 "
            sSQL = sSQL & " ,0 "
            sSQL = sSQL & " ,0 "
            sSQL = sSQL & " ,0 "
            sSQL = sSQL & " ,0 "
            sSQL = sSQL & " ) "
            dbEAN.Execute sSQL, dbFailOnError
        
        End If

    End If
    
    dbEAN.Close
    
    live_KVK_updaten = True
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "live_KVK_updaten"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function live_ArtikelSperren_updaten(cArtNr As String, iFil As Integer, bSperre As Boolean) As Boolean
On Error GoTo LOKAL_ERROR

    live_ArtikelSperren_updaten = False
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Function
    End If
    
    If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Function
    End If

    Dim stConnect As String
    
    If gsKL_DSN <> "" Then
        stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    Else
        stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    End If
    
    Dim dbEAN As DAO.Database

    Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    
    If bSperre = True Then
        sSQL = "Delete from Sperrartikel where filiale = " & iFil & " and artnr = " & cArtNr & ""
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        sSQL = "Insert into Sperrartikel (artnr, Filiale , Sperrdat) values (" & cArtNr & "," & iFil & ", '" & DateValue(Now) & "')"
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
    Else
        sSQL = "Delete from Sperrartikel where filiale = " & iFil & " and artnr = " & cArtNr & ""
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
    End If
    
    
    
''''    Dim lcount As Long
''''
''''    lcount = 0
''''    sSQL = "Select count(*) as anz from AEN_POOL where Artnr = " & cArtNr & ""
''''    Set rsrs = dbEAN.OpenRecordset(sSQL)
''''    If Not rsrs.EOF Then
''''        lcount = rsrs!anz
''''    End If
''''    rsrs.Close
''''    If lcount = 0 Then
''''
''''        'in den Pool von Kisslive
''''        sSQL = " Insert into AEN_POOL ("
''''        sSQL = sSQL & " ARTNR "
''''        sSQL = sSQL & " ,DAT "
''''        sSQL = sSQL & " ,DOS "
''''        sSQL = sSQL & " ,Winkiss "
''''        sSQL = sSQL & " ,KISSLIVE "
''''        sSQL = sSQL & " ,ESD "
''''        sSQL = sSQL & " ,KOSCHM "
''''        sSQL = sSQL & " ) "
''''        sSQL = sSQL & " values "
''''        sSQL = sSQL & " ( "
''''        sSQL = sSQL & " " & cArtNr & " "
''''        sSQL = sSQL & " , '" & DateValue(Now) & "' "
''''        sSQL = sSQL & " ,0 "
''''        sSQL = sSQL & " ,0 "
''''        sSQL = sSQL & " ,0 "
''''        sSQL = sSQL & " ,0 "
''''        sSQL = sSQL & " ,0 "
''''        sSQL = sSQL & " ) "
''''        dbEAN.Execute sSQL, dbFailOnError
''''
''''    End If
''''
    dbEAN.Close
    
    live_ArtikelSperren_updaten = True
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "live_ArtikelSperren_updaten"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function live_Artikelfarbe_updaten(cArtNr As String, iNeueFarbnr As Integer) As Boolean
On Error GoTo LOKAL_ERROR

    live_Artikelfarbe_updaten = False
    
    If IfOnline = "Offline" Then
        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
        Exit Function
    End If
    
    If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
        'MsgBox "YES"
    Else
        'MsgBox "NONO"
        Exit Function
    End If

    Dim stConnect As String
    
    If gsKL_DSN <> "" Then
        stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    Else
        stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    End If
    
    Dim dbEAN As DAO.Database

    Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
    
    Dim sSQL            As String
    Dim rsrs            As DAO.Recordset
    
    sSQL = " Update Artikel set FARBEX = " & iNeueFarbnr & "  Where artnr = " & cArtNr & ""
    dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
    
    Dim lcount As Long
    
    lcount = 0
    sSQL = "Select count(*) as anz from AEN_POOL where Artnr = " & cArtNr & ""
    Set rsrs = dbEAN.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        lcount = rsrs!anz
    End If
    rsrs.Close
    If lcount = 0 Then

        'in den Pool von Kisslive
        sSQL = " Insert into AEN_POOL ("
        sSQL = sSQL & " ARTNR "
        sSQL = sSQL & " ,DAT "
        sSQL = sSQL & " ,DOS "
        sSQL = sSQL & " ,Winkiss "
        sSQL = sSQL & " ,KISSLIVE "
        sSQL = sSQL & " ,ESD "
        sSQL = sSQL & " ,KOSCHM "
        sSQL = sSQL & " ) "
        sSQL = sSQL & " values "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " " & cArtNr & " "
        sSQL = sSQL & " , '" & DateValue(Now) & "' "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ,0 "
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
    
    End If
    
    dbEAN.Close
    
    live_Artikelfarbe_updaten = True
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "live_Artikelfarbe_updaten"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function fTestLoginError() As Long
    On Error GoTo Proc_Error

    Dim strConnect As String
    Dim dbs As DAO.Database
    Dim qdf As DAO.QueryDef
    

    Set dbs = gdBase
    Set qdf = dbs.CreateQueryDef("")
    
    '============================================================================
    'DSN-Less Trusted connection - grab the connect string
    'from one of the linked tables
    '============================================================================
    'strConnect = dbs.TableDefs("Artikel").Connect
    '============================================================================
    'DSN connection use a string like the following
    ' - no quotes around any of the parameters
    strConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=stada;UID=eanlive;PWD=sigverif2005"
    'strConnect = "ODBC;DSN=CMSH;UID=Wandw;PWD=maskirovka;DATABASE=CMSH"
    '============================================================================
    
    qdf.Connect = strConnect 'Set the connect string
    
    qdf.ReturnsRecords = False
    
    'Any SQL valid statement will work below.
    qdf.SQL = "SELECT * FROM Firma"
    qdf.Execute
    
    fTestLoginError = 0 'No error encountered
    
Proc_Exit:
    On Error Resume Next
    Set qdf = Nothing
    Exit Function
    
Proc_Error:
    Select Case err.Number
    Case 3146, 3151
    '3146 Call failed
    '3151 Connection to SQL Server failed
    Case Else
    MsgBox err.Number & ": " & err.Description, , "fTestLoginError"
    End Select
    
    fTestLoginError = err.Number
    Resume Proc_Exit
End Function

Public Function fTestLogin_Mussler_Error() As Long
    On Error GoTo Proc_Error

    Dim strConnect As String
    Dim dbs As DAO.Database
    Dim qdf As DAO.QueryDef
    

    Set dbs = gdBase
    Set qdf = dbs.CreateQueryDef("")
    
    '============================================================================
    'DSN-Less Trusted connection - grab the connect string
    'from one of the linked tables
    '============================================================================
    'strConnect = dbs.TableDefs("Artikel").Connect
    '============================================================================
    'DSN connection use a string like the following
    ' - no quotes around any of the parameters
    strConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=mussler;UID=mussler;PWD=mussler"
    'strConnect = "ODBC;DSN=CMSH;UID=Wandw;PWD=maskirovka;DATABASE=CMSH"
    '============================================================================
    
    qdf.Connect = strConnect 'Set the connect string
    
    qdf.ReturnsRecords = False
    
    'Any SQL valid statement will work below.
    qdf.SQL = "SELECT * FROM Firma"
    qdf.Execute
    
    fTestLogin_Mussler_Error = 0 'No error encountered
    
Proc_Exit:
    On Error Resume Next
    Set qdf = Nothing
    Exit Function
    
Proc_Error:
    Select Case err.Number
    Case 3146, 3151
    '3146 Call failed
    '3151 Connection to SQL Server failed
    Case Else
    MsgBox err.Number & ": " & err.Description, , "fTestLogin_Mussler_Error"
    End Select
    
    fTestLogin_Mussler_Error = err.Number
    Resume Proc_Exit
End Function
Public Function fTestLogin_SQLDABA_Error() As Long
    On Error GoTo Proc_Error

    Dim strConnect As String
    Dim dbs As DAO.Database
    Dim qdf As DAO.QueryDef
    
    fTestLogin_SQLDABA_Error = 0
    
    Set dbs = gdBase
    Set qdf = dbs.CreateQueryDef("")
    
    '============================================================================
    'DSN-Less Trusted connection - grab the connect string
    'from one of the linked tables
    '============================================================================
    'strConnect = dbs.TableDefs("Artikel").Connect
    '============================================================================
    'DSN connection use a string like the following
    ' - no quotes around any of the parameters
    
'    strConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=mussler;UID=mussler;PWD=mussler"

    

    If gsKL_DSN <> "" Then
        strConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    Else
        strConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
    End If
    '============================================================================
    
    qdf.Connect = strConnect 'Set the connect string
    
    qdf.ReturnsRecords = False
    
    'Any SQL valid statement will work below.
    qdf.SQL = "SELECT * FROM Firma"
    qdf.Execute
    
    fTestLogin_SQLDABA_Error = 0 'No error encountered
    
Proc_Exit:
    On Error Resume Next
    Set qdf = Nothing
    Exit Function
    
Proc_Error:
    Select Case err.Number
        Case 3146, 3151
        
            '3146 Call failed
            '3151 Connection to SQL Server failed
        Case Else
            MsgBox err.Number & ": " & err.Description, , "fTestLogin_SQLDABA_Error"
    End Select
    
    fTestLogin_SQLDABA_Error = err.Number
    Resume Proc_Exit
End Function
'Public Function fTestLogin_MySQLDABA_Error() As Long
'    On Error GoTo Proc_Error
'
'    Dim strConnect As String
'    Dim dbs As DAO.Database
'    Dim qdf As DAO.QueryDef
'
'
'    Set dbs = gdBase
'    Set qdf = dbs.CreateQueryDef("")
'
'    '============================================================================
'    'DSN-Less Trusted connection - grab the connect string
'    'from one of the linked tables
'    '============================================================================
'    'strConnect = dbs.TableDefs("Artikel").Connect
'    '============================================================================
'    'DSN connection use a string like the following
'    ' - no quotes around any of the parameters
'
''    strConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=mussler;UID=mussler;PWD=mussler"
''    strConnect = "ODBC;DRIVER={MySQL ODBC 3.51 Driver};SERVER=rdbms.strato.de;DATABASE=DB158606;UID=u158606;PWD=michelle; OPTION=3"
'
'
''    strConnect = "ODBC;DRIVER=MySQL ODBC 3.51 Driver;SERVER=wp026.webpack.hosteurope.de;DATABASE=db1014281-2;UID=db1014281-u2;PWD=sigverif1; OPTION=3"
'    strConnect = "ODBC;DRIVER=MySQL ODBC 3.51 Driver;SERVER=" & gsMySQL_ADRESSE & ";DATABASE=" & gsMySQL_DATENBANKNAME & ";UID=" & gsMySQL_BENUTZER & ";PWD=" & gsMySQL_PASSWORT & "; OPTION=3"
'
'    '============================================================================
'
'    qdf.Connect = strConnect 'Set the connect string
'
'    qdf.ReturnsRecords = False
'
'    'Any SQL valid statement will work below.
'    qdf.SQL = "DROP TABLE IF EXISTS WEB_Test"
'    qdf.Execute
'    qdf.SQL = "create table WEB_Test (artnr int)"
'    qdf.Execute
'    qdf.SQL = "SELECT * FROM WEB_Test"
'    qdf.Execute
'
'    fTestLogin_MySQLDABA_Error = 0 'No error encountered
'
'Proc_Exit:
'    On Error Resume Next
'    Set qdf = Nothing
'    Exit Function
'
'Proc_Error:
'    Select Case err.Number
'    Case 3146, 3151
'    '3146 Call failed
'    '3151 Connection to SQL Server failed
'    Case Else
'    MsgBox err.Number & ": " & err.Description, , "fTestLogin_SQLDABA_Error"
'    End Select
'
'    fTestLogin_MySQLDABA_Error = err.Number
'    Resume Proc_Exit
'End Function
Public Function fTestLogin_fuersie_Error() As Long
    On Error GoTo Proc_Error

    Dim strConnect As String
    Dim dbs As DAO.Database
    Dim qdf As DAO.QueryDef
    

    Set dbs = gdBase
    Set qdf = dbs.CreateQueryDef("")
    
    '============================================================================
    'DSN-Less Trusted connection - grab the connect string
    'from one of the linked tables
    '============================================================================
    'strConnect = dbs.TableDefs("Artikel").Connect
    '============================================================================
    'DSN connection use a string like the following
    ' - no quotes around any of the parameters
    strConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=fuersie;UID=fuersie;PWD=kh8CG6jt"
    'strConnect = "ODBC;DSN=CMSH;UID=Wandw;PWD=maskirovka;DATABASE=CMSH"
    '============================================================================
    
    qdf.Connect = strConnect 'Set the connect string
    
    qdf.ReturnsRecords = False
    
    'Any SQL valid statement will work below.
    qdf.SQL = "SELECT * FROM Firma"
    qdf.Execute
    
    fTestLogin_fuersie_Error = 0 'No error encountered
    
Proc_Exit:
    On Error Resume Next
    Set qdf = Nothing
    Exit Function
    
Proc_Error:
    Select Case err.Number
    Case 3146, 3151
    '3146 Call failed
    '3151 Connection to SQL Server failed
    Case Else
    MsgBox err.Number & ": " & err.Description, , "fTestLogin_fuersie_Error"
    End Select
    
    fTestLogin_fuersie_Error = err.Number
    Resume Proc_Exit
End Function
Public Function fTestLogin_Spiel_Error() As Long
    On Error GoTo Proc_Error

    Dim strConnect As String
    Dim dbs As DAO.Database
    Dim qdf As DAO.QueryDef
    

    Set dbs = gdBase
    Set qdf = dbs.CreateQueryDef("")
    
    '============================================================================
    'DSN-Less Trusted connection - grab the connect string
    'from one of the linked tables
    '============================================================================
    'strConnect = dbs.TableDefs("Artikel").Connect
    '============================================================================
    'DSN connection use a string like the following
    ' - no quotes around any of the parameters
    strConnect = "ODBC;DRIVER=SQL Server;SERVER=80.86.85.121;DATABASE=spielwaren;UID=eanlive;PWD=sigverif2005"
    'strConnect = "ODBC;DSN=CMSH;UID=Wandw;PWD=maskirovka;DATABASE=CMSH"
    '============================================================================
    
    qdf.Connect = strConnect 'Set the connect string
    
    qdf.ReturnsRecords = False
    
    'Any SQL valid statement will work below.
    qdf.SQL = "SELECT * FROM Firma"
    qdf.Execute
    
    fTestLogin_Spiel_Error = 0 'No error encountered
    
Proc_Exit:
    On Error Resume Next
    Set qdf = Nothing
    Exit Function
    
Proc_Error:
    Select Case err.Number
    Case 3146, 3151
    '3146 Call failed
    '3151 Connection to SQL Server failed
    Case Else
    MsgBox err.Number & ": " & err.Description, , "fTestLogin_Spiel_Error"
    End Select
    
    fTestLogin_Spiel_Error = err.Number
    Resume Proc_Exit
End Function

Public Sub schickdenUnbekanntenStrichcodePerMail(cWasSuchteMan As String)
On Error GoTo LOKAL_ERROR
        
    Dim cAbsenderEmail As String
    Dim cAnEmailadresse As String
    Dim cBetreff As String
    Dim cMessagetext As String
    Dim sAttachment As String
    Dim cPfad As String
    
    If fnPruefeEANWert(cWasSuchteMan) <> 0 Then
        Exit Sub
    End If
    
    If ThisEineBedienerkarte(cWasSuchteMan) Then
        Exit Sub
    End If
    
    If Len(cWasSuchteMan) < 12 Then
        Exit Sub
    End If
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    sAttachment = ""
    
    cAbsenderEmail = ermFirmenMail
    If cAbsenderEmail <> "" Then cAbsenderEmail = "sdp@kisswws.de"
    
    cAnEmailadresse = "sdp@kisswws.de"
    cBetreff = "unbekannte EAN: " & cWasSuchteMan
    
    cMessagetext = "Firma: " & ermFirmenBez
    If CInt(gcFilNr) <> 0 Then
        cMessagetext = cMessagetext & " Filiale: " & gcFilNr & vbCrLf
    End If
    
    cMessagetext = cMessagetext & "findet an der Kasse ein Produkt mit diesem Strichcode: " & cWasSuchteMan & " nicht." & vbCrLf
    cMessagetext = cMessagetext & "Fragen Sie Bediener/in " & gcBediener & " nach dem Produkt." & vbCrLf & vbCrLf
    
    Do While gFirma.Tel = ""
        frmWKLao.Show 1
    Loop
    cMessagetext = cMessagetext & "Die Rückrufnummer lautet: " & gFirma.Tel & vbCrLf & vbCrLf
    
    cMessagetext = cMessagetext & "Bitte beantworten Sie diese Email nicht."
    
      
    schickeMailimHintergrundSSL ermFirmenBez, cAbsenderEmail, "", cAnEmailadresse _
    , "bestsend@kisswws.de", gcSMTP_SERVER, gcSMTP_PORT, gcSMTP_USER, gcSMTP_PW, cBetreff, cMessagetext, sAttachment
      

    Screen.MousePointer = 0
      
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "schickdenUnbekanntenStrichcodePerMail"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub schickStatistikPerMail(sAttachment As String)
On Error GoTo LOKAL_ERROR
        
    Dim cAbsenderEmail As String
    Dim cAnEmailadresse As String
    Dim cBetreff As String
    Dim cMessagetext As String

    cAbsenderEmail = ermFirmenMail
    If cAbsenderEmail <> "" Then cAbsenderEmail = "sdp@kisswws.de"
    
'    cAnEmailadresse = "th@kisswws.de"
    cAnEmailadresse = "sdp@kisswws.de"
    cBetreff = "GFK " & Right(sAttachment, 11) & " " & ermFirmenBez
    
    cMessagetext = "Firma: " & ermFirmenBez
    If CInt(gcFilNr) <> 0 Then
        cMessagetext = cMessagetext & " Filiale: " & gcFilNr & vbCrLf
    End If
    
    cMessagetext = cMessagetext & " schickt die Statistikdaten." & vbCrLf
    cMessagetext = cMessagetext & "Bitte beantworten Sie diese Email nicht."
    
    
    schickeMailimHintergrundSSL ermFirmenBez, cAbsenderEmail, "", cAnEmailadresse _
    , "bestsend@kisswws.de", gcSMTP_SERVER, gcSMTP_PORT, gcSMTP_USER, gcSMTP_PW, cBetreff, cMessagetext, sAttachment
    

      
    Screen.MousePointer = 0
      
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "schickStatistikPerMail"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub schickGFKTextPerMail(sAttachment As String, sAuswertwoche As String, sGFKEmailadresse As String)
On Error GoTo LOKAL_ERROR
        
    Dim cAbsenderEmail As String
    Dim cAnEmailadresse As String
    Dim cBetreff As String
    Dim cMessagetext As String

    cAbsenderEmail = ermFirmenMail
    If cAbsenderEmail <> "" Then cAbsenderEmail = "sdp@kisswws.de"
    
    cAnEmailadresse = sGFKEmailadresse
    cBetreff = "GFK " & sAuswertwoche & " " & ermFirmenBez
    
    cMessagetext = "Firma: " & ermFirmenBez
    If CInt(gcFilNr) <> 0 Then
        cMessagetext = cMessagetext & " Filiale: " & gcFilNr & vbCrLf
    End If
    
    cMessagetext = cMessagetext & " schickt die Statistikdaten." & vbCrLf
    cMessagetext = cMessagetext & "Bitte beantworten Sie diese Email nicht."
    
    schickeMailimHintergrundSSL ermFirmenBez, cAbsenderEmail, "", cAnEmailadresse _
    , "bestsend@kisswws.de", gcSMTP_SERVER, gcSMTP_PORT, gcSMTP_USER, gcSMTP_PW, cBetreff, cMessagetext, sAttachment
    
      
    Screen.MousePointer = 0
      
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "schickGFKTextPerMail"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub schickdieFehlermeldungPerMail(Mitteilung As Errormessage)
    On Error GoTo LOKAL_ERROR
    
    Dim sTime       As String
    Dim ctmp        As String
    Dim cZeil       As String
    Dim sRechner    As String
    Dim lWert       As Long
    
    Dim cAbsenderEmail As String
    Dim cAnEmailadresse As String
    Dim cBetreff As String
    Dim cMessagetext As String
    Dim sAttachment As String
    Dim cPfad As String

    sRechner = rechnername
    sRechner = SwapStr(sRechner, ".", "")
    
    
    sTime = TimeValue(Now)
    sTime = Right(sTime, 8)
    
    lWert = DateValue(Now)
    ctmp = Format$(lWert, "DD.MM.YY")
    
    cZeil = ""
    cZeil = "   Datum: " & ctmp & Space(1) & sTime & Space(2) & vbCrLf
    cZeil = cZeil & "   Formular: " & Fehler.gsFormular & vbCrLf
    cZeil = cZeil & "   Funktion: " & Fehler.gsFunktion & vbCrLf
    cZeil = cZeil & "   Nummer: " & Fehler.gsNumber & vbCrLf
    cZeil = cZeil & "   Beschreibung: " & Fehler.gsDescr & vbCrLf
    cZeil = cZeil & "   F Beschreibung: " & Fehler.gsFehlertext & vbCrLf
    cZeil = cZeil & "   Rechnername: " & sRechner & vbCrLf
    cZeil = cZeil & "   Winkiss Version: " & WKVersion & vbCrLf
    cZeil = cZeil & "   _________________________________________________________________________________" & vbCrLf
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    sAttachment = ""
    
    cAbsenderEmail = ermFirmenMail
    If cAbsenderEmail <> "" Then cAbsenderEmail = "fehler@kisswws.de"
    
    cAnEmailadresse = "fehler@kisswws.de"
    cBetreff = "Fehlermeldung: "
    
    cMessagetext = "Firma: " & ermFirmenBez
    If CInt(gcFilNr) <> 0 Then
        cMessagetext = cMessagetext & " Filiale: " & gcFilNr & vbCrLf
    End If
    
    cMessagetext = cMessagetext & "Befragen Sie Bediener/in " & gcBediener & ", um diesen Fehler herleiten zu können!" & vbCrLf & vbCrLf
    cMessagetext = cMessagetext & "Die Rückrufnummer lautet: " & gFirma.Tel & vbCrLf & vbCrLf
    
    cMessagetext = cMessagetext & cZeil
    
    
    cMessagetext = cMessagetext & "Bitte beantworten Sie diese Email nicht."
    
    

    schickeMailimHintergrundSSL ermFirmenBez, cAbsenderEmail, "", cAnEmailadresse _
    , "bestsend@kisswws.de", gcSMTP_SERVER, gcSMTP_PORT, gcSMTP_USER, gcSMTP_PW, cBetreff, cMessagetext, sAttachment
      
    Screen.MousePointer = 0
      
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "schickdieFehlermeldungPerMail"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub SchreibeLastFTP()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    sSQL = "Update stammftp set lastftp = datevalue(now)"
    gdBase.Execute sSQL, dbFailOnError
    
    Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SchreibeLastFTP"
    Fehler.gsFehlertext = "Beim Schreiben des letzten FTP - Verbindungsdatums ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub FTPprüfung()
    On Error GoTo LOKAL_ERROR
    
    giKissFtpMode = 1 'FTPMODE= 1 , Programmupdates und Stammdaten holen
    frmWKL38.Show 1
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "FTPprüfung"
    Fehler.gsFehlertext = "Beim Holen der Stammdaten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function DFÜStatus() As Boolean
  On Error GoTo LOKAL_ERROR
  
    Dim RAS(255) As RASType, RASStatus As RASStatusType
    Dim lg&, lpcon&, result&

    DFÜStatus = False

    RAS(0).dwSize = 412
    lg = 256 * RAS(0).dwSize
    result = RasEnumConnections(RAS(0), lg, lpcon)
    
    If lpcon = 0 Then
'        MsgBox = "Offline" '###
        DFÜStatus = False
    Else
        RASStatus.dwSize = 160
        result = RasGetConnectStatus(RAS(0).hRasCon, RASStatus)
        If RASStatus.RasConnState = &H2000 Then
'           MsgBox = "Online"  '###
           DFÜStatus = True
        Else
'           MsgBox = "DFÜ-Einwahl oder -Trennen" '###
           DFÜStatus = False
        End If
    End If


'    Dim RAS(255)        As RASType
'    Dim RASStatus       As RASStatusType
'    Dim lg&, lpcon&, Result&
'
'    DFÜStatus = False
'
'    RAS(0).dwSize = 412
'    lg = 256 * RAS(0).dwSize
'    Result = RasEnumConnections(RAS(0), lg, lpcon)
'
'    If lpcon = 0 Then
'        DFÜStatus = False
'    Else
'        RASStatus.dwSize = 160
'        Result = RasGetConnectStatus(RAS(0).hRasConn, RASStatus)
'        If RASStatus.RasConnState = &H2000 Then
'           DFÜStatus = True
'        Else
'           DFÜStatus = False
'        End If
'    End If

    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DFÜStatus"
    Fehler.gsFehlertext = "Beim Check der DFÜ ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub SetzeSchluessel()
    On Error GoTo LOKAL_ERROR
    
    Dim lphKey&
  
    RegOpenKey HKEY_LOCAL_MACHINE, "SOFTWARE\Microsoft\Jet\3.5\Engines\Text", lphKey
    RegSetValueEx lphKey, "Format", 0, REG_SZ, ByVal "CSVDelimited", 12
    RegCloseKey lphKey
    
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SetzeSchluessel"
    Fehler.gsFehlertext = "Beim Eintrag in die Registrierdatenbank ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub SetzeSchluesselnew(keyP As String, Key As String, keyval As String, sDatatype As Long)
    On Error GoTo LOKAL_ERROR
    
    Dim lphKey&
    
    RegOpenKey HKEY_LOCAL_MACHINE, keyP, lphKey
    RegSetValueEx lphKey, Key, 0, sDatatype, ByVal keyval, 12
    
    RegCloseKey lphKey
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SetzeSchluesselnew"
    Fehler.gsFehlertext = "Beim Eintrag in die Registrierdatenbank ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub SetzeSchluesselnewHKU(keyP As String, Key As String, keyval As String, sDatatype As Long)
    On Error GoTo LOKAL_ERROR
    
    Dim lphKey&
    
    RegOpenKey HKEY_USERS, keyP, lphKey
    RegSetValueEx lphKey, Key, 0, sDatatype, ByVal keyval, 12
    
    RegCloseKey lphKey
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SetzeSchluesselnewHKU"
    Fehler.gsFehlertext = "Beim Eintrag in die Registrierdatenbank ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub SetzeSchluesselBinary(keyP As String, Key As String, keyval As String, sDatatype As Long)
    On Error GoTo LOKAL_ERROR
    
    Dim lphKey&
    
    RegOpenKey HKEY_LOCAL_MACHINE, keyP, lphKey
    RegSetValueEx lphKey, Key, 0, sDatatype, CByte(keyval), 1
    RegCloseKey lphKey
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SetzeSchluesselBinary"
    Fehler.gsFehlertext = "Beim Eintrag in die Registrierdatenbank ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function Runden(dZahl As Double) As String
    On Error GoTo LOKAL_ERROR
    
    Dim sVK As String
    Dim sVKTeil As String
    Dim sBTeil  As String
    Dim sBTeil2  As String
    Dim iBTeil As Integer
    Dim iKTeil As Integer
    Dim sErg As String
    Dim ilen As Integer
    
    Dim sAuf As String
    Dim sAb As String
    Dim sAufAbFak   As String
    
    If gbSPEZRU Then
    
        If gbSPEZVAR = 1 Then
    
            Runden = Format$(RundenS(dZahl), "####.00")
            Exit Function
    
        ElseIf gbSPEZVAR = 2 Then
        
            Runden = Format$(RundenS2(dZahl), "####.00")
            Exit Function
        ElseIf gbSPEZVAR = 3 Then
        
            Runden = Format$(RundenS3(dZahl), "####.00")
            Exit Function
            
        ElseIf gbSPEZVAR = 4 Then
        
            Runden = Format$(RundenS4(dZahl), "####.00")
            Exit Function
            
        End If
        
    End If
    
    sAuf = CStr(giAufrunden)
    sAb = CStr(giAbrunden)
    sAufAbFak = CStr(giRundkrit)
    
    
    sVK = Format$(dZahl, "#####0.00")
    ilen = Len(sVK)
    Select Case ilen
        Case Is = 1
        
        Case Is = 2
        
        Case Is = 3
        
        Case Is = 4
            sAb = Right(sAb, 1)
            sAuf = Right(sAuf, 1)
            
            iKTeil = Mid(sVK, 4, 1)
            If iKTeil < CInt(sAufAbFak) Then 'abrunden
                sErg = Left(sVK, 3) & sAb
            Else 'aufrunden
                sErg = Left(sVK, 3) & sAuf
            End If
            
        Case Is = 5
            sAb = Right(sAb, 2)
            sAuf = Right(sAuf, 2)
            
            iKTeil = Mid(sVK, 4, 1)
            
            
            If iKTeil < CInt(sAufAbFak) Then 'abrunden
                sErg = Left(sVK, 3) & sAb
            Else 'aufrunden
                sErg = Left(sVK, 3) & sAuf
            End If
            
        Case Is = 6
            sAb = Right(sAb, 2)
            sAuf = Right(sAuf, 2)
            
            iKTeil = Mid(sVK, 5, 1)
        
            
            If iKTeil < CInt(sAufAbFak) Then 'abrunden
                sErg = Left(sVK, 3) & "," & Left(sAb, 2)
            Else 'aufrunden
                sErg = Left(sVK, 3) & "," & Left(sAuf, 2)
            End If
            
        Case Is = 7
            sAb = Right(sAb, 2)
            sAuf = Right(sAuf, 2)
            
            iKTeil = Mid(sVK, 6, 1)
            If iKTeil < CInt(sAufAbFak) Then 'abrunden
                sErg = Left(sVK, 4) & "," & Left(sAb, 2)
            Else 'aufrunden
                sErg = Left(sVK, 4) & "," & Left(sAuf, 2)
            End If
        Case Is = 8
            sAb = Right(sAb, 2)
            sAuf = Right(sAuf, 2)
            
            iKTeil = Mid(sVK, 7, 1)
            If iKTeil < CInt(sAufAbFak) Then 'abrunden
                sErg = Left(sVK, 5) & "," & Left(sAb, 2)
            Else 'aufrunden
                sErg = Left(sVK, 5) & "," & Left(sAuf, 2)
            End If
    End Select
    
    Runden = Format$(sErg, "####.00")
    

    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Runden"
    Fehler.gsFehlertext = "Beim Runden einer Zahl ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function RundenS(dZahl As Double) As String
    On Error GoTo LOKAL_ERROR
    
    Dim sVK As String
    
    'Centbeträge 1 und 2 auf 0
    '            3 und 4 auf 5
    '            6 und 7 auf 5
    '            8 und 9 auf 0


    If dZahl <= 0.02 Then
        RundenS = Format$(dZahl, "###0.00")
        Exit Function
    End If
    
    sVK = Format$(dZahl, "#####0.00")
    
    If CInt(Right(sVK, 2)) = 0 Then
'        dZahl = dZahl - 0.05
    ElseIf CInt(Right(sVK, 2)) < 11 Then
        Select Case Right(sVK, 2)
            Case Is = "01"
                dZahl = dZahl - 0.01
            Case Is = "02"
                dZahl = dZahl - 0.02
            Case Is = "03"
                dZahl = dZahl + 0.02
            Case Is = "04"
                dZahl = dZahl + 0.01
            Case Is = "06"
                dZahl = dZahl - 0.01
            Case Is = "07"
                dZahl = dZahl - 0.02
            Case Is = "08"
                dZahl = dZahl + 0.02
            Case Is = "09"
                dZahl = dZahl + 0.01
            Case Else
                dZahl = dZahl
        End Select
    ElseIf CInt(Right(sVK, 2)) < 91 Then
        Select Case Right(sVK, 1)
            Case Is = "1"
                dZahl = dZahl - 0.01
            Case Is = "2"
                dZahl = dZahl - 0.02
            Case Is = "3"
                dZahl = dZahl + 0.02
            Case Is = "4"
                dZahl = dZahl + 0.01
            Case Is = "6"
                dZahl = dZahl - 0.01
            Case Is = "7"
                dZahl = dZahl - 0.02
            Case Is = "8"
                dZahl = dZahl + 0.02
            Case Is = "9"
                dZahl = dZahl + 0.01
            Case Else
                dZahl = dZahl
        End Select
    Else
        Select Case Right(sVK, 2)
            Case Is = "91"
                dZahl = dZahl - 0.01
            Case Is = "92"
                dZahl = dZahl - 0.02
            Case Is = "93"
                dZahl = dZahl + 0.02
            Case Is = "94"
                dZahl = dZahl + 0.01
            Case Is = "96"
                dZahl = dZahl - 0.01
            Case Is = "97"
                dZahl = dZahl - 0.02
            Case Is = "98"
                dZahl = dZahl + 0.02
            Case Is = "99"
                dZahl = dZahl + 0.01
            Case Else
                dZahl = dZahl
        End Select
    End If
    
    sVK = Format$(dZahl, "#####0.00")
    
    If Right(sVK, 4) = "0,00" Then
        dZahl = dZahl - 0.05
    End If
    
       
    RundenS = Format$(dZahl, "###0.00")
    
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "RundenS"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function RundenS2(dZahl As Double) As String
    On Error GoTo LOKAL_ERROR
    
    Dim sVK As String
    
    'Centbeträge 1 und 2 auf 0
    '            3 und 4 auf 5
    '            6 und 7 auf 5
    '            8 und 9 auf 0


    If dZahl <= 0.04 Then
        RundenS2 = Format$(dZahl, "###0.00")
        Exit Function
    End If
    
    sVK = Format$(dZahl, "#####0.00")
    
    If CInt(Right(sVK, 2)) = 0 Then
'        dZahl = dZahl - 0.05
    ElseIf CInt(Right(sVK, 2)) < 11 Then
        Select Case Right(sVK, 2)
            Case Is = "01"
                dZahl = dZahl - 0.01
            Case Is = "02"
                dZahl = dZahl - 0.02
            Case Is = "03"
                dZahl = dZahl - 0.03
            Case Is = "04"
                dZahl = dZahl - 0.04
            Case Is = "05"
                dZahl = dZahl + 0.05
            Case Is = "06"
                dZahl = dZahl + 0.04
            Case Is = "07"
                dZahl = dZahl + 0.03
            Case Is = "08"
                dZahl = dZahl + 0.02
            Case Is = "09"
                dZahl = dZahl + 0.01
            Case Else
                dZahl = dZahl
        End Select
    ElseIf CInt(Right(sVK, 2)) < 91 Then
        Select Case Right(sVK, 1)
            Case Is = "1"
                dZahl = dZahl - 0.01
            Case Is = "2"
                dZahl = dZahl - 0.02
            Case Is = "3"
                dZahl = dZahl - 0.03
            Case Is = "4"
                dZahl = dZahl - 0.04
            Case Is = "5"
                dZahl = dZahl + 0.05
            Case Is = "6"
                dZahl = dZahl + 0.04
            Case Is = "7"
                dZahl = dZahl + 0.03
            Case Is = "8"
                dZahl = dZahl + 0.02
            Case Is = "9"
                dZahl = dZahl + 0.01
            Case Else
                dZahl = dZahl
        End Select
    Else
        Select Case Right(sVK, 2)
            Case Is = "91"
                dZahl = dZahl - 0.01
            Case Is = "92"
                dZahl = dZahl - 0.02
            Case Is = "93"
                dZahl = dZahl - 0.03
            Case Is = "94"
                dZahl = dZahl - 0.04
            Case Is = "95"
                dZahl = dZahl + 0.05
            Case Is = "96"
                dZahl = dZahl + 0.04
            Case Is = "97"
                dZahl = dZahl + 0.03
            Case Is = "98"
                dZahl = dZahl + 0.02
            Case Is = "99"
                dZahl = dZahl + 0.01
            Case Else
                dZahl = dZahl
        End Select
    End If
    
    sVK = Format$(dZahl, "#####0.00")
    
'    If Right(sVK, 4) = "0,00" Then
'        dZahl = dZahl - 0.05
'    End If
    
       
    RundenS2 = Format$(dZahl, "###0.00")
    
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "RundenS2"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function RundenS3(dZahl As Double) As String
    On Error GoTo LOKAL_ERROR
    
    Dim sVK As String
    Dim dDiff As Long
    Dim cDiff As String
    
    sVK = Format$(dZahl, "#####0.00")
    
    If CInt(Right(sVK, 2)) = 0 Then
    
    ElseIf CInt(Right(sVK, 2)) = 50 Then
    
    ElseIf CInt(Right(sVK, 2)) < 50 Then
        cDiff = "0," & Right(sVK, 2)
        dZahl = dZahl - cDiff
        dZahl = dZahl + 0.5
        
    ElseIf CInt(Right(sVK, 2)) > 50 Then
    
        cDiff = "0," & Right(sVK, 2)
        dZahl = dZahl - cDiff
        dZahl = dZahl + 1
        
    End If

'    ElseIf CInt(Right(sVK, 2)) < 50 Then
'
'        dDiff = dZahl - CInt(Right(sVK, 2))
'        dZahl = dZahl - dDiff
'        dZahl = dZahl + 0.5
'
'    ElseIf CInt(Right(sVK, 2)) > 50 Then
'
'        dDiff = dZahl - CInt(Right(sVK, 2))
'        dZahl = dZahl - dDiff
'        dZahl = dZahl + 0.5
        
'    End If
    
'    sVK = Format$(dZahl, "#####0.00")
    
    RundenS3 = Format$(dZahl, "###0.00")
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "RundenS3"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function RundenS4(dZahl As Double) As String
    On Error GoTo LOKAL_ERROR
    
    Dim sVK As String
    Dim dDiff As Long
    Dim cDiff As String
    
    sVK = Format$(dZahl, "#####0.00")
    
    If dZahl > 100 Then
    
        If CInt(Right(sVK, 2)) = 0 Then
    
        ElseIf CInt(Right(sVK, 2)) = 50 Then
        
        ElseIf CInt(Right(sVK, 2)) < 50 Then
            cDiff = "0," & Right(sVK, 2)
            dZahl = dZahl - cDiff
            dZahl = dZahl + 0.5
    
        ElseIf CInt(Right(sVK, 2)) > 50 Then
    
            cDiff = "0," & Right(sVK, 2)
            dZahl = dZahl - cDiff
            dZahl = dZahl + 1
    
        End If
    
    Else
    

        If CInt(Right(sVK, 2)) = 95 Then
    
        ElseIf CInt(Right(sVK, 2)) = 45 Then
        
        ElseIf CInt(Right(sVK, 2)) = 0 Then
        
            dZahl = dZahl - 1
            dZahl = dZahl + 0.95
    
        ElseIf CInt(Right(sVK, 2)) < 45 Then
            cDiff = "0," & Right(sVK, 2)
            dZahl = dZahl - cDiff
            dZahl = dZahl + 0.45
    
        ElseIf CInt(Right(sVK, 2)) > 45 Then
    
            cDiff = "0," & Right(sVK, 2)
            dZahl = dZahl - cDiff
            dZahl = dZahl + 0.95
            
            
        ElseIf CInt(Right(sVK, 2)) > 95 Then
    
            cDiff = "0," & Right(sVK, 2)
            dZahl = dZahl - cDiff
            dZahl = dZahl + 0.95
    
        End If
    End If


    
    RundenS4 = Format$(dZahl, "###0.00")
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "RundenS4"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Sub AppCheckV601()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    WKVersion = 601
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "WeEinzMe", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "WeEinzMe", "Text(4)", gdApp
    
    sSQL = "Update WKEINSTE Set WeEinzMe = '' "
    gdApp.Execute sSQL, dbFailOnError
    gsWeEinzMe = ""
    WKVersion = 601
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV601"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV604()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    WKVersion = 604
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "scanmodi", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "scanmodi", "Bit", gdApp
    
    sSQL = "Update WKEINSTE Set scanmodi = false "
    gdApp.Execute sSQL, dbFailOnError
    gbscanmodi = False
    WKVersion = 604
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV604"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV627()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    WKVersion = 627
    
    sSQL = "Update WKEINSTE Set FTPauto = true "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 627
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV627"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub AppCheckV636()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    WKVersion = 636
    
    If NewTableSuchenDBKombi("ADTOPT", gdApp) Then
        If SpalteInTabellegefundenNEW("ADTOPT", "Verfahren", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "ADTOPT", "Verfahren", "Text(5)", gdApp
    
        sSQL = "Update ADTOPT Set Verfahren = 'INOUT' "
        gdApp.Execute sSQL, dbFailOnError
    End If
    WKVersion = 636
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV636"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub appcheckV640()
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    Dim cPfad1 As String
    
    cPfad1 = gcPfad
    If Right(cPfad1, 1) <> "\" Then
        cPfad1 = cPfad1 & "\"
    End If
      
    If Not Modul6.FindFile(cPfad1 & "Sounds", "update1.wav") Then
        If Modul6.FindFile(cPfad, "update1.wav") Then
            Name cPfad & "update1.wav" As cPfad1 & "Sounds\update1.wav"
        End If
    End If
    Kill cPfad & "update1.wav"
    Kill cPfad1 & "update1.wav"
    
    WKVersion = 640
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "AppCheckV640"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub AppCheckV668()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "FONT", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "FONT", "text(30)", gdApp
   
    sSQL = "Update WKEINSTE Set FONT = 'Arial' "
    gdApp.Execute sSQL, dbFailOnError
    
    gsFont = "Arial"
    
    WKVersion = 668
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV668"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
        
End Sub
Public Sub appcheckV673()
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    Dim cPfad1 As String
    
    cPfad1 = gcPfad
    If Right(cPfad1, 1) <> "\" Then
        cPfad1 = cPfad1 & "\"
    End If
      
    If Not Modul6.FindFile(cPfad1 & "Sounds", "DBK1.wav") Then
        If Modul6.FindFile(cPfad, "DBK1.wav") Then
            Name cPfad & "DBK1.wav" As cPfad1 & "Sounds\DBK1.wav"
        End If
    End If
    Kill cPfad & "DBK1.wav"
    Kill cPfad1 & "DBK1.wav"
    
    If Not Modul6.FindFile(cPfad1 & "Sounds", "DBK2.wav") Then
        If Modul6.FindFile(cPfad, "DBK2.wav") Then
            Name cPfad & "DBK2.wav" As cPfad1 & "Sounds\DBK2.wav"
        End If
    End If
    Kill cPfad & "DBK2.wav"
    Kill cPfad1 & "DBK2.wav"
    
    If Not Modul6.FindFile(cPfad1 & "Sounds", "DBK3.wav") Then
        If Modul6.FindFile(cPfad, "DBK3.wav") Then
            Name cPfad & "DBK3.wav" As cPfad1 & "Sounds\DBK3.wav"
        End If
    End If
    Kill cPfad & "DBK3.wav"
    Kill cPfad1 & "DBK3.wav"
    
    WKVersion = 673
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "AppCheckV673"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub AppCheckV674()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "FONTSIZE", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "FONTSIZE", "INTEGER", gdApp
   
    sSQL = "Update WKEINSTE Set FONTSIZE = 12 "
    gdApp.Execute sSQL, dbFailOnError
    
    gsFontsize = 12
    
    WKVersion = 674
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV674"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV706()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "LocalDAT", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "LocalDAT", "datetime", gdApp
    
    sSQL = "Update WKEINSTE Set Localdat = datevalue(now)-1 "
    gdApp.Execute sSQL, dbFailOnError
    
    
    WKVersion = 706
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV706"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV715()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 715
    
    WKVersion = 715
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV715"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV716()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 716
    
    WKVersion = 716
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV716"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV722()
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    Dim cPfad1 As String
    
    cPfad = gcDBPfad 'daba
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad1 = gcPfad
    If Right(cPfad1, 1) <> "\" Then
        cPfad1 = cPfad1 & "\"
    End If
      
    
    Kill cPfad & "lha.exe"
'    Kill cPfad1 & "lha.exe"
    
    WKVersion = 722
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "AppCheckV722"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub AppCheckV724()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 724
    
    zipDllcheck

   
    WKVersion = 724
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV724"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV738()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 738
    
'    If BistDualleineinderDatenbankApp Then StarteReorgAcessApp frmWKL00.Label1(1)
   
    WKVersion = 738
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV738"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV772()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 772
    
    
    systemdatcheck "mscomct2.dep"
    systemdatcheck "mscomct2.oca"
    systemdatcheck "mscomct2.ocx"
    systemdatcheck "mscomct2.srg"

   
    WKVersion = 772
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV772"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV778()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "NACHT", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "NACHT", "BIT", gdApp

    
    
    sSQL = "Update WKEINSTE Set NACHT = false "
    gdApp.Execute sSQL, dbFailOnError
    


    WKVersion = 778
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV778"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV780()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 780
    
    
    systemdatcheck "FM20.DLL"
    

   
    WKVersion = 780
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV780"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV781()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "GELD", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "GELD", "BIT", gdApp

    
    If checkpic Then
        sSQL = "Update WKEINSTE Set GELD = true "
        gdApp.Execute sSQL, dbFailOnError
        
    ElseIf checkpic = False Then
    
        sSQL = "Update WKEINSTE Set GELD = false "
        gdApp.Execute sSQL, dbFailOnError
    End If
    


    WKVersion = 781
    
Exit Sub
LOKAL_ERROR:
    MsgBox "Modul5.AppCheckV781 ; " & err.Number & " / " & err.Description
End Sub
Public Sub AppCheckV783()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 783
    
    
    systemdatcheck "FM20deu.DLL"
    

   
    WKVersion = 783
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV783"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV786()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 786
    
    systemdatcheck "FM20.DLL"
    systemdatcheck "FM20deu.DLL"
    
    WKVersion = 786
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV786"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV813()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 813
    
    Dim cPfad As String
    cPfad = App.Path
    
    

    If FileExists(cPfad & "\Lokal.CFG") Then
    
    Else
        Kill "C:\aLeer\*.*"
    End If
        
        
    
    
    WKVersion = 813
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "AppCheckV813"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub AppCheckV833()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 813
    
    Dim cPfad As String
    cPfad = App.Path
    
    

    If FileExists(cPfad & "\Lokal.CFG") Then
    
    Else
        Kill "C:\aLeer\*.*"
    End If
        
        
    
    
    WKVersion = 833
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "AppCheckV833"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub AppCheckV846()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("NACHT", gdApp) = True Then
        
    
        If SpalteInTabellegefundenNEW("NACHT", "INTERV", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "NACHT", "INTERV", "INTEGER", gdApp
        SpalteAnfuegenNEW "NACHT", "STARTMIN", "INTEGER", gdApp
    
        
        
        sSQL = "Update NACHT Set INTERV = 15 "
        gdApp.Execute sSQL, dbFailOnError
        
        sSQL = "Update NACHT Set STARTMIN = 30 "
        gdApp.Execute sSQL, dbFailOnError
    Else
        CreateTable "NACHT", gdApp
    
    End If

    WKVersion = 846
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV846"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV849()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BAREIN", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BAREIN", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BAREIN = false "
    gdApp.Execute sSQL, dbFailOnError
    
    
    WKVersion = 849
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV849"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV853()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "WAAGE", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "WAAGE", "TEXT(20)", gdApp

    sSQL = "Update WKEINSTE Set WAAGE = 'keine Waage' "
    gdApp.Execute sSQL, dbFailOnError
    
    gsWAAGE = "keine Waage"
    
    SpalteAnfuegenNEW "WKEINSTE", "WAAGECOM", "BYTE", gdApp

    sSQL = "Update WKEINSTE Set WAAGECOM = 2 "
    gdApp.Execute sSQL, dbFailOnError
    
    gbYteWAAGEPcom = 2
    
    
    
    WKVersion = 853
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV853"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV863()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "DFU", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "DFU", "TEXT(30)", gdApp

    sSQL = "Update WKEINSTE Set DFU = 'KISSHANN' "
    gdApp.Execute sSQL, dbFailOnError
    
    gsDFU = "KISSHANN"
    
    WKVersion = 863
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV863"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV865()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("BXALIAS", gdApp) = False Then
        CreateTable "BXALIAS", gdApp
    
    End If

    WKVersion = 865
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV865"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV866()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("NACHT", gdApp) = True Then
        
    
        If SpalteInTabellegefundenNEW("NACHT", "BR", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "NACHT", "BR", "Bit", gdApp
        
    
        
        
        sSQL = "Update NACHT Set BR = false "
        gdApp.Execute sSQL, dbFailOnError
        
        
        
    Else
        CreateTable "NACHT", gdApp
    
    End If

    WKVersion = 866
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV866"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV869()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "QPASS", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "QPASS", "BIT", gdApp

    sSQL = "Update WKEINSTE Set QPASS = false "
    gdApp.Execute sSQL, dbFailOnError
    
    gbQPASS = False
    
    
    WKVersion = 869
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV869"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV870()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "PBARGELD", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "PBARGELD", "BIT", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "Park", "BIT", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "QZBON", "BIT", gdApp

    sSQL = "Update WKEINSTE Set Park = false "
    gdApp.Execute sSQL, dbFailOnError

    sSQL = "Update WKEINSTE Set QZBON = false "
    gdApp.Execute sSQL, dbFailOnError

    sSQL = "Update WKEINSTE Set PBARGELD = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 870
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV870"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV872()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONKA", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONKA", "BIT", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "BONST", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BONKA = false "
    gdApp.Execute sSQL, dbFailOnError

    sSQL = "Update WKEINSTE Set BONST = false "
    gdApp.Execute sSQL, dbFailOnError

   
    
    WKVersion = 872
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV872"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV886()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KKSCHUB", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KKSCHUB", "BIT", gdApp

    sSQL = "Update WKEINSTE Set KKSCHUB = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 886
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV886"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV888()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "ParkNetto", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "ParkNetto", "BIT", gdApp
    

    sSQL = "Update WKEINSTE Set ParkNetto = false "
    gdApp.Execute sSQL, dbFailOnError

    
    
    WKVersion = 888
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV888"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV895()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BILDTAST", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "BILDTAST", "BIT", gdApp
    

    sSQL = "Update WKEINSTE Set BILDTAST = true "
    gdApp.Execute sSQL, dbFailOnError

    gbBILDTAST = True
    
    WKVersion = 895
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV895"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub AppCheckV889()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "TABFAK", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "TABFAK", "single", gdApp
    

    sSQL = "Update WKEINSTE Set TABFAK = 1 "
    gdApp.Execute sSQL, dbFailOnError

    gdTabfak = 1
    
    WKVersion = 889
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV889"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV890()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONKOPIE", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "BONKOPIE", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BONKOPIE = true "
    gdApp.Execute sSQL, dbFailOnError

    gbBonkopie = True
    
    WKVersion = 890
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV890"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV893()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("NACHT", gdApp) = True Then
    
        If SpalteInTabellegefundenNEW("NACHT", "STAMDA", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "NACHT", "STAMDA", "Bit", gdApp
        
        sSQL = "Update NACHT Set STAMDA = false "
        gdApp.Execute sSQL, dbFailOnError
        
        SpalteAnfuegenNEW "NACHT", "KABSCH", "Bit", gdApp
        
        sSQL = "Update NACHT Set KABSCH = false "
        gdApp.Execute sSQL, dbFailOnError
        
    Else
        CreateTable "NACHT", gdApp
    End If

    WKVersion = 893
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV893"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub AppCheckV896()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONWG", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "BONWG", "BIT", gdApp
    

    sSQL = "Update WKEINSTE Set BONWG = false "
    gdApp.Execute sSQL, dbFailOnError

    gbBONWG = False
    
    WKVersion = 896
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV896"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV898()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    loeschNEW "TABLAY" & srechnertab, gdBase
    
    sSQL = "Select * into TABLAY" & srechnertab & " from TABLAY"
    gdBase.Execute sSQL, dbFailOnError

    WKVersion = 898
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV898"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV913()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "SPIEGEL", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "SPIEGEL", "BIT", gdApp

    sSQL = "Update WKEINSTE Set SPIEGEL = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 913
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV913"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV929()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim sSpaltenname(0 To 29)       As String
    Dim sAliase(0 To 29)            As String
    Dim i                           As Byte
    
    loeschNEW "TABALI" & srechnertab, gdBase
    CreateTable "TABALI" & srechnertab, gdBase
    

    
    
    
                
    sSpaltenname(0) = "ArtNr."
    sSpaltenname(1) = "Artikelbezeichnung"
    sSpaltenname(2) = "Best G"
    sSpaltenname(3) = "K VKPR"
    sSpaltenname(4) = "L VKPR"
    sSpaltenname(5) = "L EKPR"
    sSpaltenname(6) = "S EKPR"
    sSpaltenname(7) = "LiefBestNr"
    sSpaltenname(8) = "EAN"
    sSpaltenname(9) = "VK VM"
    sSpaltenname(10) = "VK LM"
    sSpaltenname(11) = "Linie"
    sSpaltenname(12) = "ger"
    sSpaltenname(13) = "min Best"
    sSpaltenname(14) = "min BM"
    sSpaltenname(15) = "BVO"
    sSpaltenname(16) = "Notizen"
    sSpaltenname(17) = "AGN"
    sSpaltenname(18) = "Farbe"
    sSpaltenname(19) = "in Be"
    sSpaltenname(20) = "VK VJ"
    sSpaltenname(21) = "VK LJ"
    
    sAliase(0) = "Artikelnummer"
    sAliase(1) = "Artikelbezeichnung"
    sAliase(2) = "Bestand"
    sAliase(3) = "Kassenverkaufspreis"
    sAliase(4) = "Listenverkaufspreis"
    sAliase(5) = "Listeneinkaufspreis"
    sAliase(6) = "Schnitteinkaufspreis"
    sAliase(7) = "Bestellnummer beim Lieferanten"
    sAliase(8) = "Strichcode auf der Verpackung"
    sAliase(9) = "Verkäufe des Vormonats"
    sAliase(10) = "Verkäufe des laufenden Monats"
    sAliase(11) = "Linie eines Lieferantens"
    sAliase(12) = "Artikel geräumt"
    sAliase(13) = "Mindestbestand"
    sAliase(14) = "Mindestbestellmenge"
    sAliase(15) = "Bestellvorschlagszahl"
    sAliase(16) = "Notizen"
    sAliase(17) = "Artikelgruppennummer"
    sAliase(18) = "Farbkennzeichnung eines Artikels"
    sAliase(19) = "in Bestellung"
    sAliase(20) = "Verkäufe des Vorjahres"
    sAliase(21) = "Verkäufe des laufenden Jahres"
            
    For i = 0 To 21
        sSQL = "Insert into TABALI" & srechnertab & " (Tabname,Spaltenna,Spaltenali) "
        sSQL = sSQL & " values ('BESTELLUNG',  '" & sSpaltenname(i) & "' ,'" & sAliase(i) & "')"
        gdBase.Execute sSQL, dbFailOnError
    Next i

    WKVersion = 929
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV929"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV944()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "DTAPFAD", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "DTAPFAD", "TEXT(200)", gdApp

    sSQL = "Update WKEINSTE Set DTAPFAD = ''"
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 944
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV944"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV946()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONFI", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONFI", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set BONFI = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 946
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV946"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV961()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KSF", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KSF", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set KSF = TRUE "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 961
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV961"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV968()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KASSDATSTART", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KASSDATSTART", "TEXT(8)", gdApp
    
    sSQL = "Update WKEINSTE Set KASSDATSTART = '' "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 968
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV968"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV978()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    Dim sSpaltenname(0 To 23)       As String
    Dim sAliase(0 To 23)            As String
    Dim i As Integer
    
    loeschNEW "GROLIEF", gdBase
    sSQL = "Select * from TABLAY" & srechnertab & " where Tabname = 'BESTELLUNG' and Spaltenbez = 'RAB'"
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        rsrs.Close: Set rsrs = Nothing
        WKVersion = 978
        Exit Sub
    End If
    rsrs.Close: Set rsrs = Nothing
    
    sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
    sSQL = sSQL & " values ('BESTELLUNG',  'Rabatt' ,'RAB', 22 ,'J', 'N')"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into TABLAY" & srechnertab & " (Tabname,Spaltenna,Spaltenbez,Reihenf,Anzeige,Bearbeit) "
    sSQL = sSQL & " values ('BESTELLUNG',  'U Lief' ,'MOPREIS', 23 ,'J', 'N')"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSpaltenname(0) = "ArtNr."
    sSpaltenname(1) = "Artikelbezeichnung"
    sSpaltenname(2) = "Bestand"
    sSpaltenname(3) = "K VKPR"
    sSpaltenname(4) = "L VKPR"
    sSpaltenname(5) = "L EKPR"
    sSpaltenname(6) = "S EKPR"
    sSpaltenname(7) = "LiefBestNr"
    sSpaltenname(8) = "EAN"
    sSpaltenname(9) = "VK VM"
    sSpaltenname(10) = "VK LM"
    sSpaltenname(11) = "Linie"
    sSpaltenname(12) = "ger"
    sSpaltenname(13) = "min Best"
    sSpaltenname(14) = "min BM"
    sSpaltenname(15) = "BVO"
    sSpaltenname(16) = "Notizen"
    sSpaltenname(17) = "AGN"
    sSpaltenname(18) = "Farbe"
    sSpaltenname(19) = "in Be"
    sSpaltenname(20) = "VK VJ"
    sSpaltenname(21) = "VK LJ"
    sSpaltenname(22) = "Rabatt"
    sSpaltenname(23) = "U Lief"
    
    sAliase(0) = "Artikelnummer"
    sAliase(1) = "Artikelbezeichnung"
    sAliase(2) = "Bestand"
    sAliase(3) = "Kassenverkaufspreis"
    sAliase(4) = "Listenverkaufspreis"
    sAliase(5) = "Listeneinkaufspreis"
    sAliase(6) = "Schnitteinkaufspreis"
    sAliase(7) = "Bestellnummer beim Lieferanten"
    sAliase(8) = "Strichcode auf der Verpackung"
    sAliase(9) = "Verkäufe des Vormonats"
    sAliase(10) = "Verkäufe des laufenden Monats"
    sAliase(11) = "Linie eines Lieferantens"
    sAliase(12) = "Artikel geräumt"
    sAliase(13) = "Mindestbestand"
    sAliase(14) = "Mindestbestellmenge"
    sAliase(15) = "Bestellvorschlagszahl"
    sAliase(16) = "Notizen"
    sAliase(17) = "Artikelgruppennummer"
    sAliase(18) = "Farbkennzeichnung eines Artikels"
    sAliase(19) = "in Bestellung"
    sAliase(20) = "Verkäufe des Vorjahres"
    sAliase(21) = "Verkäufe des laufenden Jahres"
    sAliase(22) = "Unterschied zwischen KVK und LVK"
    sAliase(23) = "Unterlieferant"
     
    
     sSQL = "Delete from TABALI" & srechnertab
     schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
     
     For i = 0 To 23
         sSQL = "Insert into TABALI" & srechnertab & " (Tabname,Spaltenna,Spaltenali) "
         sSQL = sSQL & " values ('BESTELLUNG',  '" & sSpaltenname(i) & "' ,'" & sAliase(i) & "')"
         schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
     Next i
    WKVersion = 978
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV978"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1011()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "MDEPAUSE", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "MDEPAUSE", "INTEGER", gdApp
    

    sSQL = "Update WKEINSTE Set MDEPAUSE = 60 "
    gdApp.Execute sSQL, dbFailOnError

    giMDEPAUSE = 60
    
    WKVersion = 1011
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1011"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1015()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    loeschNEW "BETEMP", gdApp

    WKVersion = 1015
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1015"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1041()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 1041
    
    systemdatcheck "expat.DLL"
    systemdatcheck "ifsf2.DLL"
    systemdatcheck "wk2elme.DLL"
   
    WKVersion = 1041
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1041"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1060()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONNEIN", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONNEIN", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BONNEIN = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1060
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1060"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1094()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("ABREPORT", gdApp) = False Then
        CreateTable "ABREPORT", gdApp
    Else
        If SpalteInTabellegefundenNEW("ABREPORT", "TAGFILT", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "ABREPORT", "TAGFILT", "BIT", gdApp
    
        sSQL = "Update ABREPORT Set TAGFILT = false "
        gdApp.Execute sSQL, dbFailOnError
    End If
    
    WKVersion = 1094
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1094"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1106()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "GTBON", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "GTBON", "BIT", gdApp

    sSQL = "Update WKEINSTE Set GTBON = false "
    gdApp.Execute sSQL, dbFailOnError
    
    gbGTBON = False
    
    
    WKVersion = 1106
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1106"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1107()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "PAEBON", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "PAEBON", "BIT", gdApp

    sSQL = "Update WKEINSTE Set PAEBON = false "
    gdApp.Execute sSQL, dbFailOnError
    
    gbPAEBON = False
    
    
    WKVersion = 1107
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1107"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1121()
    On Error GoTo LOKAL_ERROR
    
    WKVersion = 1121
    
    'mailocxcheck
'    systemdatcheck "sevMail32.ocx"
    
    WKVersion = 1121
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1121"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1156()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "AABSCHL", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "AABSCHL", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set AABSCHL = False "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1156
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1156"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1157()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "BARBON2", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BARBON2", "BIT", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "NOBONDRUCKER", "BIT", gdApp

    sSQL = "Update WKEINSTE Set NOBONDRUCKER = false "
    gdApp.Execute sSQL, dbFailOnError

    sSQL = "Update WKEINSTE Set BARBON2 = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1157
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1157"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1163()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "BARDINA4", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BARDINA4", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BARDINA4 = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1163
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1163"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1234()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("NACHT", gdApp) = True Then
        
    
        If SpalteInTabellegefundenNEW("NACHT", "UMSATZNEU", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "NACHT", "UMSATZNEU", "Bit", gdApp
        
        sSQL = "Update NACHT Set UMSATZNEU = false "
        gdApp.Execute sSQL, dbFailOnError
        
    Else
        CreateTable "NACHT", gdApp
    
    End If

    WKVersion = 1234
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1234"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1302()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("NACHT", gdApp) = True Then
        
        If SpalteInTabellegefundenNEW("NACHT", "MB", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "NACHT", "MB", "Bit", gdApp
        
        sSQL = "Update NACHT Set MB = false "
        gdApp.Execute sSQL, dbFailOnError
    Else
        CreateTable "NACHT", gdApp
    End If

    WKVersion = 1302
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1302"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1310()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "OptiStada", gdApp) Then
        SpalteAnfuegenNEW "WKEINSTE", "OptiStada", "BIT", gdApp
        
        Set rsrs = gdApp.OpenRecordset("Select FTPautoh from WKEINSTE")
        If Not rsrs.EOF Then
            If Not IsNull(rsrs!FTPautoh) Then
                If rsrs!FTPautoh = True Then
                    
                    sSQL = "Update WKEINSTE Set optistada = true "
                    gdApp.Execute sSQL, dbFailOnError
                End If
            End If
        End If
        rsrs.Close
    End If

    
        
        
   

    WKVersion = 1310
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1310"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1325()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("NACHT", gdApp) = True Then
        
        If SpalteInTabellegefundenNEW("NACHT", "EXTSICH", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "NACHT", "EXTSICH", "Bit", gdApp
        
        sSQL = "Update NACHT Set EXTSICH = false "
        gdApp.Execute sSQL, dbFailOnError
    
    Else
        CreateTable "NACHT", gdApp
    
    End If

    WKVersion = 1325
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1325"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1339()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "NOAUTO", gdApp) Then
    
        SpalteAnfuegenNEW "WKEINSTE", "NOAUTO", "BIT", gdApp
        
        sSQL = "Update WKEINSTE Set NOAUTO = false "
        gdApp.Execute sSQL, dbFailOnError
                
    End If

    WKVersion = 1339
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1339"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1376()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONKB", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONKB", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BONKB = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1376
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1376"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1451()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONKR", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONKR", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set BONKR = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1451
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1451"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1499()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "PASSIVMODE", gdApp) Then
        SpalteAnfuegenNEW "WKEINSTE", "PASSIVMODE", "BIT", gdApp
                    
        sSQL = "Update WKEINSTE Set PASSIVMODE = False"
        gdApp.Execute sSQL, dbFailOnError
    End If
    
    gbPASSIVMODE = False
    
    WKVersion = 1499
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1499"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1509()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "MV", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "MV", "BIT", gdApp

    sSQL = "Update WKEINSTE Set MV = true "
    gdApp.Execute sSQL, dbFailOnError
    
    gbmv = True
    
    WKVersion = 1509
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1509"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1534()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BIZPFAD", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BIZPFAD", "Text(250)", gdApp

    sSQL = "Update WKEINSTE Set BIZPFAD = '' "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1534
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1534"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1571()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    WKVersion = 1571
    
    If NewTableSuchenDBKombi("ADTOPT", gdApp) Then
        If SpalteInTabellegefundenNEW("ADTOPT", "IPADRESS", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "ADTOPT", "IPADRESS", "Text(15)", gdApp
        SpalteAnfuegenNEW "ADTOPT", "PORT", "Text(6)", gdApp
    
        sSQL = "Update ADTOPT Set PORT = '' "
        gdApp.Execute sSQL, dbFailOnError
    
        sSQL = "Update ADTOPT Set IPADRESS = '' "
        gdApp.Execute sSQL, dbFailOnError
    End If
    WKVersion = 1571
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1571"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1596()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "BONUSMESS", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONUSMESS", "BIT", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "TNW", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BONUSMESS = false "
    gdApp.Execute sSQL, dbFailOnError

    sSQL = "Update WKEINSTE Set TNW = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1596
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1596"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1609()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONKOLLVK", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONKOLLVK", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set BONKOLLVK = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1609
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1609"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1616()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "GILTRE", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "GILTRE", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set GILTRE = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1616
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1616"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1632()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "DINA4RECHFU", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "DINA4RECHFU", "BIT", gdApp

    sSQL = "Update WKEINSTE Set DINA4RECHFU = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1632
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1632"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1671()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "ETIEAN", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "ETIEAN", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set ETIEAN = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1671
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1671"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1695()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "SPY", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "SPY", "BIT", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "IPADRESS", "Text(15)", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "PORT", "Text(6)", gdApp
    
    sSQL = "Update WKEINSTE Set SPY = false "
    gdApp.Execute sSQL, dbFailOnError
    
    sSQL = "Update WKEINSTE Set PORT = '' "
    gdApp.Execute sSQL, dbFailOnError

    sSQL = "Update WKEINSTE Set IPADRESS = '' "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1695
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1695"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1696()
    On Error GoTo LOKAL_ERROR
    
    systemdatcheck "MSWINSCK.ocx"
    WKVersion = 1696
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1696"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1703()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("ABREPORT", gdApp) = False Then
        CreateTable "ABREPORT", gdApp
    Else
        If SpalteInTabellegefundenNEW("ABREPORT", "MITDRUCK", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "ABREPORT", "MITDRUCK", "BIT", gdApp
    
        sSQL = "Update ABREPORT Set MITDRUCK = false "
        gdApp.Execute sSQL, dbFailOnError
    End If
    
    WKVersion = 1703
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1703"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1709()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "AEA", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "AEA", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set AEA = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1709
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1709"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1734()
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String

    If NewTableSuchenDBKombi("EXSTEU", gdApp) = True Then
        If SpalteInTabellegefundenNEW("EXSTEU", "BL", gdApp) = False Then
            SpalteAnfuegenNEW "EXSTEU", "EXNOR", "BIT", gdApp
            SpalteAnfuegenNEW "EXSTEU", "BL", "BIT", gdApp
            SpalteAnfuegenNEW "EXSTEU", "BLKENNUNG", "Text(20)", gdApp
            
            cSQL = "Update Exsteu set exnor = true"
            gdApp.Execute cSQL, dbFailOnError
            
            cSQL = "Update Exsteu set bl = false"
            gdApp.Execute cSQL, dbFailOnError
            
            cSQL = "Update Exsteu set blkennung = ''"
            gdApp.Execute cSQL, dbFailOnError
        End If
    End If
    
    WKVersion = 1734
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1734"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1736()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
'    ZBONDINA4HOCH

    If SpalteInTabellegefundenNEW("WKEINSTE", "MITEXPORT", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "MITEXPORT", "BIT", gdApp
    

    sSQL = "Update WKEINSTE Set MITEXPORT = false "
    gdApp.Execute sSQL, dbFailOnError

    
    WKVersion = 1736
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1736"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1750()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KOLSCHUB", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KOLSCHUB", "BIT", gdApp

    sSQL = "Update WKEINSTE Set KOLSCHUB = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1750
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1750"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1751()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BARZSCHUB", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BARZSCHUB", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BARZSCHUB = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1751
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1751"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1752()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KBSCHUB", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KBSCHUB", "BIT", gdApp

    sSQL = "Update WKEINSTE Set KBSCHUB = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1752
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1752"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1753()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "VERBGESRABATT", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "VERBGESRABATT", "DOUBLE", gdApp

    sSQL = "Update WKEINSTE Set VERBGESRABATT = 0 "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1753
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1753"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1770()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONVERLEIH", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONVERLEIH", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set BONVERLEIH = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1770
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1770"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1777()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONNRUNTER", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONNRUNTER", "BIT", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "KASSNRUNTER", "BIT", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "STERNZEICH", "TEXT(1)", gdApp
    
    sSQL = "Update WKEINSTE Set BONNRUNTER = false "
    gdApp.Execute sSQL, dbFailOnError
    
    sSQL = "Update WKEINSTE Set KASSNRUNTER = false "
    gdApp.Execute sSQL, dbFailOnError
    
    sSQL = "Update WKEINSTE Set STERNZEICH = '*' "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1777
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1777"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1808()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "OHNEANZEIGE", gdApp) Then
    
        SpalteAnfuegenNEW "WKEINSTE", "OHNEANZEIGE", "BIT", gdApp
        
        sSQL = "Update WKEINSTE Set OHNEANZEIGE = false "
        gdApp.Execute sSQL, dbFailOnError
                
    End If

    WKVersion = 1808
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1808"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1829()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "AUTOSYN", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "AUTOSYN", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set AUTOSYN = false "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1829
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1829"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1839()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("NEINVK", gdBase) = True Then
        If SpalteInTabellegefundenNEW("NEINVK", "ANZEI", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "NEINVK", "ANZEI", "BYTE", gdBase
        
        sSQL = "Update NEINVK Set ANZEI = 1 "
        gdBase.Execute sSQL, dbFailOnError
    Else
        CreateTable "NEINVK", gdBase
    End If
    
    WKVersion = 1839
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1839"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1859()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "ZAEHLBELEG", gdApp) Then
        SpalteAnfuegenNEW "WKEINSTE", "ZAEHLBELEG", "TEXT (20)", gdApp
    End If

    sSQL = "Update WKEINSTE Set ZAEHLBELEG = zbon "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1859
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1859"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1860()
On Error GoTo LOKAL_ERROR
    
'''    Dim sSQL As String
'''
'''    sSQL = "Update WKEINSTE Set ZAEHLBELEG = 'Bondrucker' "
'''    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1860
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1860"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1864()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "OptiStadaSpiel", gdApp) Then
        SpalteAnfuegenNEW "WKEINSTE", "OptiStadaSpiel", "BIT", gdApp
                    
        sSQL = "Update WKEINSTE Set optistadaspiel = false "
        gdApp.Execute sSQL, dbFailOnError
        gbOptiStadaSpiel = False
    End If
    
    WKVersion = 1864
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1864"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1876()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "SICHTYP", gdApp) Then
        SpalteAnfuegenNEW "WKEINSTE", "SICHTYP", "BYTE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "SICHTIME", "TEXT(8)", gdApp
                    
        sSQL = "Update WKEINSTE Set SICHTYP = 1 where sichern = true "
        gdApp.Execute sSQL, dbFailOnError
        
        sSQL = "Update WKEINSTE Set SICHTYP = 0 where sichern = false "
        gdApp.Execute sSQL, dbFailOnError
        
        sSQL = "Update WKEINSTE Set SICHTIME = '' "
        gdApp.Execute sSQL, dbFailOnError
        
        gsSICHTIME = ""
        
    End If
    
    WKVersion = 1876
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1876"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1939()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "CHECKPREIS", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "CHECKPREIS", "DOUBLE", gdApp

    sSQL = "Update WKEINSTE Set CHECKPREIS = 0 "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 1939
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1939"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1951()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "DINA4VIS", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "DINA4VIS", "BIT", gdApp

    sSQL = "Update WKEINSTE Set DINA4VIS = true "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1951
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1951"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1954()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsDB As DAO.Recordset
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "FTPZENT", gdApp) Then
    
        SpalteAnfuegenNEW "WKEINSTE", "FTPZENT", "BIT", gdApp
        
        Set rsDB = gdBase.OpenRecordset("DBEINSTE", dbOpenTable)
        gbFtpZENT = IIf(IsNull(rsDB!FTPZENT), False, rsDB!FTPZENT)
        rsDB.Close
        
        If gbFtpZENT = True Then
            sSQL = "Update WKEINSTE Set FTPZENT =  True"
        Else
            sSQL = "Update WKEINSTE Set FTPZENT =  False"
        End If
        gdApp.Execute sSQL, dbFailOnError
                
    End If

    WKVersion = 1954
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1954"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1955()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsDB As DAO.Recordset
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "WARN", gdApp) Then
    
        SpalteAnfuegenNEW "WKEINSTE", "WARN", "DOUBLE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "LINK", "DOUBLE", gdApp
        
        
        sSQL = "Update WKEINSTE Set WARN =  23700"
        gdApp.Execute sSQL, dbFailOnError
                
                
        sSQL = "Update WKEINSTE Set LINK =  23700"
        gdApp.Execute sSQL, dbFailOnError
                
    End If

    WKVersion = 1955
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1955"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1963()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONGUVK", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONGUVK", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set BONGUVK = true "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 1963
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1963"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV1965()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsDB As DAO.Recordset
    
    glButtonHintergrund_from = frmWKL53.cmdBeispiel.BackColorFrom
    glButtonHintergrund_to = frmWKL53.cmdBeispiel.BackColorTo
    glButtonMouseMove_Hintergrund_from = frmWKL53.cmdBeispiel.HoverColorFrom
    glButtonMouseMove_Hintergrund_to = frmWKL53.cmdBeispiel.HoverColorTo
    glButtonMouseMove_Bordercolor = frmWKL53.cmdBeispiel.BorderColorHover
    glButtonBordercolor = frmWKL53.cmdBeispiel.BorderColor
    glButtonMouseMove_Forecolor = frmWKL53.cmdBeispiel.ForeColorHover
    glButtonForecolor = frmWKL53.cmdBeispiel.ForeColor
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "ButtonHintergrund_from", gdApp) Then
    
        SpalteAnfuegenNEW "WKEINSTE", "ButtonHintergrund_from", "DOUBLE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "ButtonHintergrund_to", "DOUBLE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "ButtonMouseMove_Hintergrund_from", "DOUBLE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "ButtonMouseMove_Hintergrund_to", "DOUBLE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "ButtonMouseMove_Bordercolor", "DOUBLE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "ButtonBordercolor", "DOUBLE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "ButtonMouseMove_Forecolor", "DOUBLE", gdApp
        SpalteAnfuegenNEW "WKEINSTE", "ButtonForecolor", "DOUBLE", gdApp
        
        sSQL = "Update WKEINSTE Set ButtonHintergrund_from = " & glButtonHintergrund_from
        sSQL = sSQL & ", ButtonHintergrund_to = " & glButtonHintergrund_to
        sSQL = sSQL & ", ButtonMouseMove_Hintergrund_from = " & glButtonMouseMove_Hintergrund_from
        sSQL = sSQL & ", ButtonMouseMove_Hintergrund_to = " & glButtonMouseMove_Hintergrund_to
        sSQL = sSQL & ", ButtonMouseMove_Bordercolor = " & glButtonMouseMove_Bordercolor
        sSQL = sSQL & ", ButtonBordercolor = " & glButtonBordercolor
        sSQL = sSQL & ", ButtonMouseMove_Forecolor = " & glButtonMouseMove_Forecolor
        sSQL = sSQL & ", ButtonForecolor = " & glButtonForecolor
        gdApp.Execute sSQL, dbFailOnError
     
    End If

    WKVersion = 1965
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV1965"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2005()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KL_ADRESSE", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "KL_ADRESSE", "TEXT(50)", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "KL_BENUTZER", "TEXT(50)", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "KL_PASSWORT", "TEXT(20)", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "KL_DATENBANKNAME", "TEXT(20)", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "KL_LIVEBESTAND", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set KL_LIVEBESTAND = FALSE "
    gdApp.Execute sSQL, dbFailOnError
        
    sSQL = "Update WKEINSTE Set KL_ADRESSE = '' "
    sSQL = sSQL & ", KL_BENUTZER = '' "
    sSQL = sSQL & ", KL_PASSWORT = '' "
    sSQL = sSQL & ", KL_DATENBANKNAME = '' "
    gdApp.Execute sSQL, dbFailOnError
    
    gsKL_DATENBANKNAME = ""
    gsKL_ADRESSE = ""
    gsKL_BENUTZER = ""
    gsKL_PASSWORT = ""
    gbKL_LIVEBESTAND = False

    WKVersion = 2005
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2005"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2013()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "Fotopfad", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "Fotopfad", "TEXT(255)", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "Webcampfad", "TEXT(255)", gdApp
        
    sSQL = "Update WKEINSTE Set Fotopfad = '' "
    sSQL = sSQL & ", Webcampfad = '' "
    gdApp.Execute sSQL, dbFailOnError
    
    gsFotoPfad = ""
    gsWebcamPfad = ""
    
    WKVersion = 2013
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2013"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2071()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONEA", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONEA", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set BONEA = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2071
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2071"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2074()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "ZWEITMONI", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "ZWEITMONI", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set ZWEITMONI = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2074
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2074"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub AppCheckV2095()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "EtiFokEan", gdApp) Then
        SpalteAnfuegenNEW "WKEINSTE", "EtiFokEan", "BIT", gdApp
                    
        sSQL = "Update WKEINSTE Set EtiFokEan = true "
        gdApp.Execute sSQL, dbFailOnError
        gbEtiFokEan = True
    End If
    
    WKVersion = 2095
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2095"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2096()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "ETIQUICKSCANM", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "ETIQUICKSCANM", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set ETIQUICKSCANM = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2096
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2096"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2103()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "SOUND", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "SOUND", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set SOUND = TRUE "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2103
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2103"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2137()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "Tankpfad", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "Tankpfad", "TEXT(255)", gdApp
        
    sSQL = "Update WKEINSTE Set Tankpfad = '' "
    gdApp.Execute sSQL, dbFailOnError
    
    gsTankPfad = ""
    
    WKVersion = 2137
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2137"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2162()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ZVTOPT", gdApp) = True Then

        If SpalteInTabellegefundenNEW("ZVTOPT", "DRUCKVAR", gdApp) Then Exit Sub
        
        SpalteAnfuegenNEW "ZVTOPT", "DRUCKVAR", "TEXT(1)", gdApp
            
        sSQL = "Update ZVTOPT Set DRUCKVAR = '1' "
        gdApp.Execute sSQL, dbFailOnError
        
    End If
    
    WKVersion = 2162
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2162"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2254()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "LEISTE2START", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "LEISTE2START", "BIT", gdApp
    
    Dim rsKA As DAO.Recordset
    
    Set rsKA = gdBase.OpenRecordset("KASSEIN", dbOpenTable)
    If Not rsKA.EOF Then
        gbLeiste2Start = IIf(IsNull(rsKA!Leiste2Start), False, rsKA!Leiste2Start)
    Else
        gbLeiste2Start = False
    End If
    rsKA.Close
    
    If gbLeiste2Start = False Then
        sSQL = "Update WKEINSTE Set LEISTE2START = false "
        gdApp.Execute sSQL, dbFailOnError
    ElseIf gbLeiste2Start = True Then
        sSQL = "Update WKEINSTE Set LEISTE2START = true "
        gdApp.Execute sSQL, dbFailOnError
    End If

    WKVersion = 2254
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2254"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2270()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ZVTOPT", gdApp) = True Then

        If SpalteInTabellegefundenNEW("ZVTOPT", "PNAME", gdApp) Then Exit Sub
        
        SpalteAnfuegenNEW "ZVTOPT", "PNAME", "TEXT(30)", gdApp
            
        sSQL = "Update ZVTOPT Set PNAME = 'ZVT_2014.exe' "
        gdApp.Execute sSQL, dbFailOnError
        
    End If
    
    WKVersion = 2270
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2270"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2290()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ZVTOPT", gdApp) = True Then

        If SpalteInTabellegefundenNEW("ZVTOPT", "PTITEL", gdApp) Then Exit Sub
        
        SpalteAnfuegenNEW "ZVTOPT", "PTITEL", "TEXT(30)", gdApp
            
        sSQL = "Update ZVTOPT Set PTITEL = '' "
        gdApp.Execute sSQL, dbFailOnError
        
    End If
    
    WKVersion = 2290
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2290"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2352()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ZVTOPT", gdApp) = True Then

        If SpalteInTabellegefundenNEW("ZVTOPT", "TIMEOUT", gdApp) Then Exit Sub
        
        SpalteAnfuegenNEW "ZVTOPT", "TIMEOUT", "TEXT(3)", gdApp
            
        sSQL = "Update ZVTOPT Set TIMEOUT = '120' "
        gdApp.Execute sSQL, dbFailOnError
        
    End If
    
    WKVersion = 2352
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2352"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2408()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "stadap", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "stadap", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set stadap = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2408
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2408"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2439()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KARTENSCHWELLENWERT", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KARTENSCHWELLENWERT", "DOUBLE", gdApp

    sSQL = "Update WKEINSTE Set KARTENSCHWELLENWERT = 0 "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 2439
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2439"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2453()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "PfadBestandlive", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "PfadBestandlive", "Text(100)", gdApp

    sSQL = "Update WKEINSTE Set PfadBestandlive = '' "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 2453
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2453"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2490()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "EDITKASSNR", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "EDITKASSNR", "BIT", gdApp
    
    
    Dim rsKA As DAO.Recordset
    
    Set rsKA = gdBase.OpenRecordset("KASSEIN", dbOpenTable)
    If Not rsKA.EOF Then
        gbEDITKASSNR = IIf(IsNull(rsKA!EDITKASSNR), False, rsKA!EDITKASSNR)
    
    End If
    rsKA.Close
    
    If gbEDITKASSNR = False Then
        sSQL = "Update WKEINSTE Set EDITKASSNR = false "
    Else
        sSQL = "Update WKEINSTE Set EDITKASSNR = true "
    End If
    
    
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2490
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2490"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2518()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "ISDEMO", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "ISDEMO", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set ISDEMO = FALSE "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2518
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2518"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2537()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "Converterpfad", gdApp) Then Exit Sub
    
    SpalteAnfuegenNEW "WKEINSTE", "Converterpfad", "TEXT(255)", gdApp
        
    sSQL = "Update WKEINSTE Set Converterpfad = '' "
    gdApp.Execute sSQL, dbFailOnError
    
    gsConverterPfad = ""
    
    WKVersion = 2537
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2537"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2578()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("WKEINSTE", "KOPOHNEAUSWERTUNG", gdApp) Then
    
        SpalteAnfuegenNEW "WKEINSTE", "KOPOHNEAUSWERTUNG", "BIT", gdApp
        
        sSQL = "Update WKEINSTE Set KOPOHNEAUSWERTUNG = false "
        gdApp.Execute sSQL, dbFailOnError
                
    End If

    WKVersion = 2578
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2578"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2589()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KL_DSN", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KL_DSN", "TEXT(50)", gdApp
    
    sSQL = "Update WKEINSTE Set KL_DSN = '' "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2589
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2589"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2651()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("ABREPORT", gdApp) = False Then
        CreateTable "ABREPORT", gdApp
    Else
        If SpalteInTabellegefundenNEW("ABREPORT", "ARTKUM_OHNEWGN", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "ABREPORT", "ARTKUM_OHNEWGN", "BIT", gdApp
    
        sSQL = "Update ABREPORT Set ARTKUM_OHNEWGN = false "
        gdApp.Execute sSQL, dbFailOnError
    End If
    
    WKVersion = 2651
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2651"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2683()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "ANZZEICHENBON", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "ANZZEICHENBON", "long", gdApp
   
    sSQL = "Update WKEINSTE Set ANZZEICHENBON = 32 "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 2683
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2683"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2684()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONFONTSIZE", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONFONTSIZE", "double", gdApp
    SpalteAnfuegenNEW "WKEINSTE", "BONFONTNAME", "TEXT(50)", gdApp
   
    sSQL = "Update WKEINSTE Set BONFONTNAME = 'Standard' "
    gdApp.Execute sSQL, dbFailOnError
   
    sSQL = "Update WKEINSTE Set BONFONTSIZE = 8 "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 2684
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2684"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2687()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "DRITTEARTIKELZEILE", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "DRITTEARTIKELZEILE", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set DRITTEARTIKELZEILE = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2687
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2687"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2751()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KAMAIL", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KAMAIL", "TEXT(50)", gdApp
    
    sSQL = "Update WKEINSTE Set KAMAIL = '' "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2751
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2751"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2761()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "ZBONDINA4HOCH", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "ZBONDINA4HOCH", "BIT", gdApp
    

    sSQL = "Update WKEINSTE Set ZBONDINA4HOCH = false "
    gdApp.Execute sSQL, dbFailOnError

    
    WKVersion = 2761
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2761"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2781()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "UmsAnz", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "UmsAnz", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set UmsAnz = true "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2781
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2781"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2818()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "KassPass", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "KassPass", "Text(10)", gdApp
    
    Dim rsrs As Recordset
    Dim sTempKassPass As String
    sTempKassPass = ""

    sSQL = " Select KassPass from DBEINSTE "
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then

        rsrs.MoveFirst
        If Not IsNull(rsrs!KassPass) Then
            sTempKassPass = rsrs!KassPass
        End If

    End If
    rsrs.Close: Set rsrs = Nothing
    
    
    
    sSQL = "Update WKEINSTE Set KassPass = '" & sTempKassPass & "' "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2818
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2818"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub AppCheckV2825()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ZVTOPT2", gdApp) Then

        If SpalteInTabellegefundenNEW("ZVTOPT2", "KBDrucken", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "ZVTOPT2", "KBDrucken", "BIT", gdApp
        
        sSQL = "Update ZVTOPT2 Set KBDrucken = false "
        gdApp.Execute sSQL, dbFailOnError
        
    End If

    WKVersion = 2825
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2825"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Sub AppCheckV2856()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ZVTOPT2", gdApp) Then

        If SpalteInTabellegefundenNEW("ZVTOPT2", "Kartenwahl", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "ZVTOPT2", "Kartenwahl", "BIT", gdApp
        
        sSQL = "Update ZVTOPT2 Set Kartenwahl = false "
        gdApp.Execute sSQL, dbFailOnError
        
    End If

    WKVersion = 2856
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2856"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2912()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "BONTERMIN", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BONTERMIN", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set BONTERMIN = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2912
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2912"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2925()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "TERMINREMINDERSTART", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "TERMINREMINDERSTART", "TEXT(8)", gdApp
    
    sSQL = "Update WKEINSTE Set TERMINREMINDERSTART = '' "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2925
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2925"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2940()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    gbFTPautomatic = False
    sSQL = "Update WKEINSTE Set FTPauto = False "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 2940
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2940"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2946()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "WVNOT", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "WVNOT", "BIT", gdApp
    
    gbWVNOT = False
    sSQL = "Update WKEINSTE Set WVNOT = False "
    gdApp.Execute sSQL, dbFailOnError
    
    WKVersion = 2946
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2946"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2955()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("WKEINSTE", "BARDINA4", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "BARDINA4", "BIT", gdApp

    sSQL = "Update WKEINSTE Set BARDINA4 = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2955
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2955"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2958()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "TageVorTermin", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "TageVorTermin", "long", gdApp
    
    sSQL = "Update WKEINSTE Set TageVorTermin = 2 "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2958
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2925"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2965()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ZVTOPT2", gdApp) Then

        If SpalteInTabellegefundenNEW("ZVTOPT2", "HBDrucken", gdApp) Then Exit Sub
        SpalteAnfuegenNEW "ZVTOPT2", "HBDrucken", "BIT", gdApp
        
        sSQL = "Update ZVTOPT2 Set HBDrucken = false "
        gdApp.Execute sSQL, dbFailOnError
        
        
        SpalteAnfuegenNEW "ZVTOPT2", "TIMEOUT", "long", gdApp
    
        sSQL = "Update ZVTOPT2 Set TIMEOUT = 0 "
        gdApp.Execute sSQL, dbFailOnError
        
        SpalteAnfuegenNEW "ZVTOPT2", "VIRTUELLEID", "TEXT(50)", gdApp
    
        sSQL = "Update ZVTOPT2 Set VIRTUELLEID = '' "
        gdApp.Execute sSQL, dbFailOnError
        
        
        
        
    End If

    WKVersion = 2965
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2965"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub AppCheckV2966()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("WKEINSTE", "ZWEITMONIMINI", gdApp) Then Exit Sub
    SpalteAnfuegenNEW "WKEINSTE", "ZWEITMONIMINI", "BIT", gdApp
    
    sSQL = "Update WKEINSTE Set ZWEITMONIMINI = false "
    gdApp.Execute sSQL, dbFailOnError

    WKVersion = 2966
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AppCheckV2966"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub

Public Function checkpic() As Boolean
On Error GoTo LOKAL_ERROR

    Dim cPfad As String
    Dim i As Integer
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    checkpic = False
    
    For i = 0 To 14
        If FileExists(cPfad & "Picture\EUR\" & i & "k.jpg") Then
            checkpic = True
        Else
            checkpic = False
            Exit For
        End If
        
        If FileExists(cPfad & "Picture\EUR\" & i & "g.jpg") Then
            checkpic = True
        Else
            checkpic = False
            Exit For
        End If
    Next i
        
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "checkpic"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub doIt(dn$, reg As Boolean)
On Error GoTo LOKAL_ERROR
    
    Dim R&, a$
    
    If FileExist(dn) Then
        R = Register(dn, reg)
    End If
      
    Select Case R
        Case 1: a = "Erfolg (Status 1)"
        Case 0: a = "Datei nicht vorhanden. (Status 0)"
        Case -2: a = "Datei nicht vorhanden oder keine gültige DLL (Status -2)"
        Case -3: a = "Adresse der DLL Funktion kann nicht ermittelt werden (Status -3)"
        Case -4: a = "Aufruf der DLL Funktion gescheitert (Status -4)"
        Case -5: a = "DLL Funktion gescheitert (möglicherweise Time-Out) (Status -5)"
        Case Else: a = "sonstiger Fehler (Status " & R & ")"
    End Select
    '  MsgBox a

    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "doIt"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function SpalteInTabellegefundenNEW(Tabelle As String, spalte As String, daba As Database) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim tdTd As TableDef
    Dim lAnzFelder As Long
    Dim lcount As Long
    Dim cFeldName As String
    
    SpalteInTabellegefundenNEW = False
    
    daba.TableDefs.Refresh
    Set tdTd = daba.TableDefs(Tabelle)

    lAnzFelder = tdTd.Fields.Count
    For lcount = 0 To lAnzFelder - 1
        
        cFeldName = tdTd.Fields(lcount).name
        If UCase(cFeldName) = UCase(spalte) Then
            SpalteInTabellegefundenNEW = True
            Exit For
        End If
    Next lcount
    
    Set tdTd = Nothing
    
    Exit Function
LOKAL_ERROR:
    If err.Number = 3167 Then 'Datensatz ist schon gelöscht
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SpalteInTabellegefundenNEW"
        Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten. " & Tabelle & " " & spalte
        
        Fehlermeldung1
        
    End If
End Function
Public Sub SpalteAnfuegenNEW(Tabelle As String, SpaltenName As String, Spaltentyp As String, db As Database)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Alter table " & Tabelle & " add column " & SpaltenName & " " & Spaltentyp
    db.Execute sSQL, dbFailOnError
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 3380 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "SpalteAnfuegenNEW"
        Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV602()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 602
    
    If SpalteInTabellegefundenNEW("DBEINSTE", "ABda", gdBase) Then Exit Sub
    
    SpalteAnfuegenNEW "DBEINSTE", "ABda", "BIT", gdBase
    SpalteAnfuegenNEW "DBEINSTE", "ABNr", "BIT", gdBase
    
    sSQL = "Update DBEINSTE Set ABda = False"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update DBEINSTE Set ABNr = False"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    gbAbschlussNummer = False
    gbAbschlussDatum = False
    
    lDBVersion = 602
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV602"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV612()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 612
    
    
    sSQL = "update kunden set titel = null where titel is null or len(titel)  = 0"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
   
    
    lDBVersion = 612
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV612"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV629()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 629
    
    
    sSQL = " Update Kassjour set UMS_OK = 'J' where KK_ART = 'MX' and UMS_OK is null "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
   
    
    lDBVersion = 629
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV629"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV637()
    On Error GoTo LOKAL_ERROR

    Dim sSQL As String

    lDBVersion = 637

    If SpalteInTabellegefundenNEW("LISRT", "HL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "LISRT", "HL", "BIT", gdBase

    sSQL = "Update LISRT Set HL = false"
    gdBase.Execute sSQL, dbFailOnError

    If NewTableSuchenDBKombi("ueberli", gdBase) Then

        sSQL = "Update lisrt inner join ueberli on lisrt.linr = ueberli.olinr"
        sSQL = sSQL & " set lisrt.hl = true "
        gdBase.Execute sSQL, dbFailOnError

    End If

    lDBVersion = 637

Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV637"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

        Fehlermeldung1
    End If

End Sub
Public Sub DbCheckV640()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 640
    
    loeschNEW "BEDtmp", gdBase
    
    sSQL = "select * into BEDtmp from BEDNAME "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    loeschNEW "BEDNAME", gdBase
    
    sSQL = "select * into BEDNAME from BEDtmp"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Create Index BEDNU on BEDNAME (BEDNU)"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    

    lDBVersion = 640
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV640"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV641()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    NEWTableSuchenDBLike "ILI"

    lDBVersion = 641
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV641"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV642()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 642
    
    loeschNEW "firtmp", gdBase
    
    sSQL = "select * into firtmp from FIRMA "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    loeschNEW "FIRMA", gdBase
    
    sSQL = "select * into FIRMA from firtmp"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
'    sSQL = "Create Index BEDNU on BEDNAME (BEDNU)"
'    schreibeProtokollDabaAblauf sSQL:gdBase.Execute sSQL, dbFailOnError
    

    lDBVersion = 642
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV642"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV646()
    On Error GoTo LOKAL_ERROR
    
    IndexLisrt
    lDBVersion = 646
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV646"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub DbCheckV654()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 654
    
    If SpalteInTabellegefundenNEW("DBEINSTE", "STORNO", gdBase) Then Exit Sub
    
    SpalteAnfuegenNEW "DBEINSTE", "STORNO", "BIT", gdBase
    
    sSQL = "Update DBEINSTE Set STORNO = False"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
'    gbStorno = False
    
    lDBVersion = 654
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV654"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV661()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 661

    If SpalteInTabellegefundenNEW("AGNDBF", "INVAB", gdBase) Then
        SpalteAnfuegenNEW "AGNDBF", "INVAB", "Double", gdBase
    End If
    
    sSQL = "Update AGNDBF Set INVAB = 0"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError

    
    lDBVersion = 661
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV661"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV666()
    On Error GoTo LOKAL_ERROR

    Dim cPfad As String

    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    If Not Modul6.FindFile(cPfad & "Picture", "Post.wav") Then
        If Modul6.FindFile(cPfad, "Post.wav") Then
            Name cPfad & "Post.wav" As cPfad & "Picture\Post.wav"
        End If
    End If
    Kill cPfad & "Post.wav"

    lDBVersion = 666

Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV666"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV669()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 669
    
    loeschNEW "LOG", gdBase
    
    CreateTable "LOG", gdBase

    lDBVersion = 669
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV669"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV670()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 670

'    If Not SpalteInTabellegefundenNEW("KASSJOUR", "ZBONNR", gdBase) Then
'        sSQL = " Alter table KASSJOUR add ZBONNR Integer "
'        schreibeProtokollDabaAblauf sSQL:gdBase.Execute sSQL, dbFailOnError
'
'        sSQL = "Update KASSJOUR Set ZBONNR = 31999"
'        schreibeProtokollDabaAblauf sSQL:gdBase.Execute sSQL, dbFailOnError
'
'    End If
    
    
    
    lDBVersion = 670
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV670"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV671()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim lLASTAB As Long

    lDBVersion = 671

    If Not NewTableSuchenDBKombi("ABSCHLUSS", gdBase) Then
    
        CreateTable "ABSCHLUSS", gdBase
        
        lLASTAB = ermLastAbschlussOld
        
        sSQL = "Insert into ABSCHLUSS (ZBONNR,Datum,Uhrzeit,KASNUM) values "
        sSQL = sSQL & "( " & lLASTAB & ", '" & DateValue(Now) & "','" & TimeValue(Now) & "', " & CByte(gcKasNum) & ")"
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
    End If

    lDBVersion = 671
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV671"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV673()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    

    lDBVersion = 673

    Kassjourabspecken
    


    lDBVersion = 673
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV673"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV701()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 701

    If Not SpalteInTabellegefundenNEW("ARTIKEL", "PGN", gdBase) Then
        sSQL = " Alter table ARTIKEL add PGN BYTE "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError

        sSQL = "Update ARTIKEL Set PGN = 0"
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Create Index PGN on ARTIKEL (PGN)"
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError

    End If
    
    
    
    lDBVersion = 701
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV701"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV702()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim sSpaltenname(0 To 30)       As String
    Dim iNr(0 To 30)                As Byte
    Dim i                           As Byte
    
    sSpaltenname(0) = "Reinigung"
    sSpaltenname(1) = "Tages-/Nachtcreme"
    sSpaltenname(2) = "Getönte Tagescreme"
    sSpaltenname(3) = "Augen-/Halspflege"
    sSpaltenname(4) = "Zusatzpflege"
    sSpaltenname(5) = "Körperpflege"
    sSpaltenname(6) = "Haarpflege"
    sSpaltenname(7) = "Sonnenpflege"
    sSpaltenname(8) = "Make up"
    sSpaltenname(9) = "Puder"
    sSpaltenname(10) = "Augenstifte"
    sSpaltenname(11) = "Eyeliner"
    sSpaltenname(12) = "Lidschatten"
    sSpaltenname(13) = "Mascara"
    sSpaltenname(14) = "Lippenkonturenstifte"
    sSpaltenname(15) = "Lippenstifte"
    sSpaltenname(16) = "Lipgloss"
    sSpaltenname(17) = "Rouge"
    sSpaltenname(18) = "Hand-/Nagelpflege"
    sSpaltenname(19) = "Nagellack"
    sSpaltenname(20) = "Kinder Duft"
    sSpaltenname(21) = "Kinder Duft Körperpflege"
    sSpaltenname(22) = "Damen Duft"
    sSpaltenname(23) = "Damen Duft Körperpflege"
    sSpaltenname(24) = "Unisex Duft"
    sSpaltenname(25) = "Unisex Duft Körperpflege"
    sSpaltenname(26) = "Herren Duft"
    sSpaltenname(27) = "Herren Duft Körperpflege"
    sSpaltenname(28) = "Herren Gesichtspflege"
    sSpaltenname(29) = "Sets"
    sSpaltenname(30) = "Depot Accessoires"
    
    iNr(0) = 1
    iNr(1) = 2
    iNr(2) = 3
    iNr(3) = 4
    iNr(4) = 5
    iNr(5) = 6
    iNr(6) = 7
    iNr(7) = 8
    
    iNr(8) = 21
    iNr(9) = 22
    iNr(10) = 23
    iNr(11) = 24
    iNr(12) = 25
    iNr(13) = 26
    iNr(14) = 27
    iNr(15) = 28
    iNr(16) = 29
    iNr(17) = 30
    iNr(18) = 31
    iNr(19) = 32
    iNr(20) = 34
    iNr(21) = 35
    iNr(22) = 41
    
    iNr(23) = 42
    iNr(24) = 44
    iNr(25) = 45
    iNr(26) = 47
    iNr(27) = 48
    iNr(28) = 49
    iNr(29) = 52
    iNr(30) = 53

    lDBVersion = 702

    If Not NewTableSuchenDBKombi("PGNDBF", gdBase) Then
    
        sSQL = "Create Table PGNDBF ("
        sSQL = sSQL & " PGN BYTE "
        sSQL = sSQL & " , PGNBEZEICH Text(35) "
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
        
        For i = 0 To 30
            sSQL = "Insert into PGNDBF (PGN,PGNBEZEICH) "
            sSQL = sSQL & " values ( " & iNr(i) & " ,'" & sSpaltenname(i) & "')"
            gdBase.Execute sSQL, dbFailOnError
        Next i
        
    End If
    
    
    lDBVersion = 702
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV702"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV703()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 703

    sSQL = "Drop Index PLZ on LISRT"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table LISRT add PLZ7 Text(7) "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update LISRT Set PLZ7 = PLZ "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table LISRT DROP PLZ "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table LISRT add PLZ Text(7) "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update LISRT Set PLZ = PLZ7 "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table LISRT DROP PLZ7 "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Create Index PLZ on LISRT (PLZ)"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    

    lDBVersion = 703
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV703"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV712()
    On Error GoTo LOKAL_ERROR
    
    lDBVersion = 712
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV712"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1

End Sub
Public Sub DbCheckV721()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 721
    
    If NewTableSuchenDBKombi("STEMPEL", gdBase) = False Then
        CreateTable "STEMPEL", gdBase
        
    Else
        If SpalteInTabellegefundenNEW("STEMPEL", "lfnr", gdBase) Then
        
            sSQL = " Alter table STEMPEL drop lfnr "
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
            
            sSQL = " Alter table STEMPEL add llfnr autoincrement"
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
        End If
    End If
    
    
    
    lDBVersion = 721
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV721"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV725()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("PAUSENZ", gdBase) = False Then
        CreateTable "PAUSENZ", gdBase
        
        sSQL = "Insert into Pausenz (Pausenz,Krit) values ( '00:30','04:00')"
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into Pausenz (Pausenz,Krit) values ( '00:45','06:00' )"
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    lDBVersion = 725

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV725"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV728()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 728
    

    
    If NewTableSuchenDBKombi("STEMPEL", gdBase) = False Then
        CreateTable "STEMPEL", gdBase
        
    Else
        If Not SpalteInTabellegefundenNEW("STEMPEL", "llfnr", gdBase) Then
        
            sSQL = " Alter table STEMPEL drop lfnr "
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
            
            sSQL = " Alter table STEMPEL add llfnr autoincrement"
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
        End If
    End If
    
    
    
    lDBVersion = 728
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV728"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV739()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 739
    
    loeschNEW "Kred2", gdBase
    sSQL = "Select * into kred2 from kredit"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
    sSQL = "Update Kredit set artnr = 0 where artnr is null "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Delete from kredit where artnr = 0"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Delete from kredit where kundnr not in (select kundnr from kunden where "
    sSQL = sSQL & " kunden.kundnr = kredit.kundnr) "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 739
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV739"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV761()
    On Error GoTo LOKAL_ERROR

    Dim cPfad       As String
    Dim lRet        As Long
    Dim lfail       As Long
    Dim i           As Integer

    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
        
    For i = 0 To 14
        lRet = CopyFile(cPfad & i & "kl.jpg", cPfad & "Picture\EUR\" & i & "kl.jpg", lfail)
        
        lRet = CopyFile(cPfad & i & "k.jpg", cPfad & "Picture\EUR\" & i & "k.jpg", lfail)
        Kill cPfad & i & "kl.jpg"
        Kill cPfad & i & "k.jpg"
        Kill cPfad & "Picture\" & i & "kl.jpg"
        Kill cPfad & "Picture\" & i & "k.jpg"
    Next i

    

    lDBVersion = 761

Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV761"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV762()
    On Error GoTo LOKAL_ERROR

    Dim cPfad       As String
    Dim lRet        As Long
    Dim lfail       As Long
    Dim i           As Integer

    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
        
    For i = 0 To 13
        lRet = CopyFile(cPfad & i & "s.jpg", cPfad & "Picture\SFR\" & i & "s.jpg", lfail)
        Kill cPfad & i & "s.jpg"
        
    Next i

    

    lDBVersion = 762

Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV762"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV764()
    On Error GoTo LOKAL_ERROR

    Dim cPfad       As String
    Dim lRet        As Long
    Dim lfail       As Long
    Dim i           As Integer

    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
        
    For i = 0 To 14
        lRet = CopyFile(cPfad & i & "DM.jpg", cPfad & "Picture\DEM\" & i & "DM.jpg", lfail)
        Kill cPfad & i & "DM.jpg"
        
    Next i

    

    lDBVersion = 764

Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV764"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV770()
    On Error GoTo LOKAL_ERROR

    loeschNEW "WKVERSIONEN", gdBase
    CreateTable "WKVERSIONEN", gdBase
    
    SchreibeLOG

    lDBVersion = 770

Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV770"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
    
End Sub

Public Sub DbCheckV792()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("ZZZ", gdBase) = False Then
        CreateTable "ZZZ", gdBase
        
    
        sSQL = "Insert into ZZZ (BEZEICH) values ( 'Letzte Tabelle')"
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
       
    End If
    lDBVersion = 792

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV792"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV830()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String
    
    loeschNEW "RETO1", gdBase

    sSQL = "Select * into reto1 from retoure"
    gdBase.Execute sSQL, dbFailOnError

    loeschNEW "RETOURE", gdBase
    CreateTable "RETOURE", gdBase
    
    sSQL = "insert into Retoure Select ARTNR "
    sSQL = sSQL & ", BEZEICH "
    sSQL = sSQL & ", MENGE "
    sSQL = sSQL & ", PREIS "
    sSQL = sSQL & ", ADATE "
    sSQL = sSQL & ", AZEIT"
    sSQL = sSQL & ", BEDIENER "
    sSQL = sSQL & ", KUNDNR "
    sSQL = sSQL & ", FILIALE "
    sSQL = sSQL & ", KASNUM "
    sSQL = sSQL & ", LINR "
    sSQL = sSQL & ", LPZ "
    sSQL = sSQL & ", AGN "
    sSQL = sSQL & ", EAN "
    sSQL = sSQL & ", MWST "
    sSQL = sSQL & ", EKPR "
    sSQL = sSQL & ", VKPR "
    sSQL = sSQL & ", MOPPREIS "
    sSQL = sSQL & ", BELEGNR "
    sSQL = sSQL & ", IN_BESTELL "
    sSQL = sSQL & ", BEST1 "
    sSQL = sSQL & ", RABKENN from reto1"
    gdBase.Execute sSQL, dbFailOnError
    
    frmWKL00!Label2.Caption = "ReIndiziere Retoure-Datenbank: ARTNR"
    frmWKL00!Label2.Refresh
    
    sSQL = "Create Index ARTNR on RETOURE (ARTNR)"
    gdBase.Execute sSQL, dbFailOnError
    
    frmWKL00!Label2.Caption = "ReIndiziere Retoure-Datenbank: ADATE"
    frmWKL00!Label2.Refresh
    
    sSQL = "Create Index ADATE on RETOURE (ADATE)"
    gdBase.Execute sSQL, dbFailOnError
    
    frmWKL00!Label2.Caption = "ReIndiziere Retoure-Datenbank: KUNDNR"
    frmWKL00!Label2.Refresh
    
    sSQL = "Create Index KUNDNR on RETOURE (KUNDNR)"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 830

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV830"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV839()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("Proto", gdBase) = False Then
        CreateTable "Proto", gdBase
    Else
    
        If SpalteInTabellegefundenNEW("Proto", "Datum", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "Proto", "Datum", "Datetime", gdBase

        sSQL = "Update Proto set datum = datevalue(now)-100"
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    End If
    lDBVersion = 839

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV839"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV848()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("BESTAEND", gdBase) = False Then
        CreateTable "BESTAEND", gdBase
    Else
    
        If SpalteInTabellegefundenNEW("BESTAEND", "SENDOK", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "BESTAEND", "SENDOK", "BIT", gdBase
        SpalteAnfuegenNEW "BESTAEND", "KVKPR1", "SINGLE", gdBase
        SpalteAnfuegenNEW "BESTAEND", "LEKPR", "SINGLE", gdBase
        
        sSQL = "Delete from BESTAEND where Jahr = 2002 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Delete from BESTAEND where Jahr = 2003 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError

        sSQL = "Update BESTAEND set SENDOK = false "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    End If
    lDBVersion = 848

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV848"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV867()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("STEMPEL", gdBase) = False Then
        CreateTable "STEMPEL", gdBase
    Else
    
        If SpalteInTabellegefundenNEW("STEMPEL", "SENDOK", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "STEMPEL", "SENDOK", "BIT", gdBase
        
        sSQL = "Update STEMPEL set SENDOK = false "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    lDBVersion = 867

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV867"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV876()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("KUNDEN", "BE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNDEN", "BE", "BIT", gdBase
    
    sSQL = "Update KUNDEN set BE = false "
    gdBase.Execute sSQL, dbFailOnError
    
    SpalteAnfuegenNEW "KUNDEN", "AWM", "TEXT(2)", gdBase
    
    sSQL = "Update KUNDEN set AWM = '0' "
    gdBase.Execute sSQL, dbFailOnError
    
    IndexKunden
    
    lDBVersion = 876

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV876"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV877()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("KUNDEN", "MOBILTEL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNDEN", "MOBILTEL", "TEXT(15)", gdBase
    
    IndexKunden
    
    lDBVersion = 877

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV877"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV878()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("ZUGANG", "REK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "ZUGANG", "REK", "Single", gdBase
    
    CheckIndexuDEL "ZUGANG", "ADATE", "", gdBase
    CheckIndexuDEL "ZUGANG", "ARTNR", "", gdBase
    
    lDBVersion = 878

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV878"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV881()
On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("LINBEZ", "MARKE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "LINBEZ", "MARKE", "TEXT(20)", gdBase
    

    lDBVersion = 881

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV881"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV882()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("LISRT", "ZIELEK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "LISRT", "ZIELEK", "SINGLE", gdBase
    
    IndexLisrt
    
    lDBVersion = 882

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV882"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV887()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("LAYOUT", gdBase) = True Then
        
        sSQL = "Delete from LAYOUT where TABELLE = 'ARTIKEL' "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Delete from LAYOUT where TABELLE = 'VORSCHLZ' "
        gdBase.Execute sSQL, dbFailOnError
        
    End If
    
    lDBVersion = 887

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV887"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV899()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("BESTPROT", gdBase) = False Then
        CreateTable "BESTPROT", gdBase
    Else
    
        If SpalteInTabellegefundenNEW("BESTPROT", "SENDOK", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "BESTPROT", "SENDOK", "BIT", gdBase

        sSQL = "Update BESTPROT set SENDOK = false "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    lDBVersion = 899

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV899"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV900()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If Not SpalteInTabellegefundenNEW("LISRT", "EMAIL", gdBase) Then
        SpalteAnfuegenNEW "LISRT", "EMAIL", "Text(50)", gdBase
    
        sSQL = "Update LISRT set EMAIL = '' "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    If Not SpalteInTabellegefundenNEW("LISRT", "KTEXT", gdBase) Then
        SpalteAnfuegenNEW "LISRT", "KTEXT", "Text(50)", gdBase
    
        sSQL = "Update LISRT set KTEXT = '' "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    lDBVersion = 900

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV900"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV901()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If Not SpalteInTabellegefundenNEW("ETIDRU", "PCNAME", gdBase) Then
        SpalteAnfuegenNEW "ETIDRU", "PCNAME", "Text(30)", gdBase
    
        sSQL = "Update ETIDRU set PCNAME = '' "
        gdBase.Execute sSQL, dbFailOnError
    
    End If

    lDBVersion = 901

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV901"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV910()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If Not SpalteInTabellegefundenNEW("PRSTERM", "FILIALE", gdBase) Then
    
        
        SpalteAnfuegenNEW "PRSTERM", "PREISNR", "INTEGER", gdBase
        SpalteAnfuegenNEW "PRSTERM", "FILIALE", "BYTE", gdBase
    
        sSQL = "Update PRSTERM set FILIALE = " & gcFilNr
        gdBase.Execute sSQL, dbFailOnError
    
        sSQL = "Update PRSTERM set PREISNR = -1 "
        gdBase.Execute sSQL, dbFailOnError
    End If

    lDBVersion = 910

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV910"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV915()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim sSpaltenname(0 To 1)       As String
    Dim iNr(0 To 1)                As Byte
    Dim i                           As Byte
    
    sSpaltenname(0) = "Gesundheitspflege/Wellness"
    sSpaltenname(1) = "Mehrfachprodukte"
    
    iNr(0) = 9
    iNr(1) = 33
    

    lDBVersion = 915

    If Not NewTableSuchenDBKombi("PGNDBF", gdBase) Then
    
        sSQL = "Create Table PGNDBF ("
        sSQL = sSQL & " PGN BYTE "
        sSQL = sSQL & " , PGNBEZEICH Text(35) "
        sSQL = sSQL & " ) "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
        
        For i = 0 To 1
            sSQL = "Insert into PGNDBF (PGN,PGNBEZEICH) "
            sSQL = sSQL & " values ( " & iNr(i) & " ,'" & sSpaltenname(i) & "')"
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        Next i
    Else
        For i = 0 To 1
            sSQL = "Insert into PGNDBF (PGN,PGNBEZEICH) "
            sSQL = sSQL & " values ( " & iNr(i) & " ,'" & sSpaltenname(i) & "')"
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        Next i
    End If
    
    lDBVersion = 915
    
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV915"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
   
    
End Sub
Public Sub DbCheckV919()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If Not SpalteInTabellegefundenNEW("Kunden", "EMAIL", gdBase) Then
        SpalteAnfuegenNEW "Kunden", "EMAIL", "Text(50)", gdBase
    
        sSQL = "Update Kunden set EMAIL = '' "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    If Not SpalteInTabellegefundenNEW("KONDITIONEN", "FAKTOR", gdBase) Then
        SpalteAnfuegenNEW "KONDITIONEN", "FAKTOR", "INTEGER", gdBase
    
        sSQL = "Update KONDITIONEN set FAKTOR = 1 "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    IndexKunden
    lDBVersion = 919

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV919"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV930()
    On Error GoTo LOKAL_ERROR
    
    loeschNEW "WKVERSIONEN", gdBase
    CreateTable "WKVERSIONEN", gdBase
    lDBVersion = 930

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV930"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV931()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("AFCSTAT", "GUTSCHGUTSCH", gdBase) Then
        SpalteAnfuegenNEW "AFCSTAT", "GUTSCHGUTSCH", "double", gdBase
    
        sSQL = "Update AFCSTAT set GUTSCHGUTSCH = 0 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    If Not SpalteInTabellegefundenNEW("AFCSTATP", "GUTSCHGUTSCH", gdBase) Then
        SpalteAnfuegenNEW "AFCSTATP", "GUTSCHGUTSCH", "double", gdBase
    
        sSQL = "Update AFCSTATP set GUTSCHGUTSCH = 0 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    End If
    lDBVersion = 931

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV931"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV934()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("AFCSTAT", "ABSCHOPF", gdBase) Then
        SpalteAnfuegenNEW "AFCSTAT", "ABSCHOPF", "double", gdBase
    
        sSQL = "Update AFCSTAT set ABSCHOPF = 0 "
        
        
        SpalteAnfuegenNEW "AFCSTAT", "WECHSEL", "double", gdBase
    
        sSQL = "Update AFCSTAT set WECHSEL = 0 "
        
    
    End If
    
    If Not SpalteInTabellegefundenNEW("AFCSTATP", "ABSCHOPF", gdBase) Then
        SpalteAnfuegenNEW "AFCSTATP", "ABSCHOPF", "double", gdBase
    
        sSQL = "Update AFCSTATP set ABSCHOPF = 0 "
        
        
        SpalteAnfuegenNEW "AFCSTAT", "WECHSEL", "double", gdBase
    
        sSQL = "Update AFCSTAT set WECHSEL = 0 "
        
    
    End If
    
    loeschNEW "LAYOUT", gdBase
    lDBVersion = 934

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV934"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV937()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("AFCSTAT", "TDIFF", gdBase) Then
        SpalteAnfuegenNEW "AFCSTAT", "TDIFF", "double", gdBase
    
        sSQL = "Update AFCSTAT set TDIFF = 0 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
        SpalteAnfuegenNEW "AFCSTAT", "KDIFF", "double", gdBase
    
        sSQL = "Update AFCSTAT set KDIFF = 0 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    If Not SpalteInTabellegefundenNEW("AFCSTATP", "TDIFF", gdBase) Then
        SpalteAnfuegenNEW "AFCSTATP", "TDIFF", "double", gdBase
    
        sSQL = "Update AFCSTATP set TDIFF = 0 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
        SpalteAnfuegenNEW "AFCSTAT", "KDIFF", "double", gdBase
    
        sSQL = "Update AFCSTAT set KDIFF = 0 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    
    lDBVersion = 937

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV937"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV939()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("LINBEZ", "KUERZEL", gdBase) Then
        SpalteAnfuegenNEW "LINBEZ", "KUERZEL", "TEXT(5)", gdBase
    End If
    lDBVersion = 939

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV939"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV944()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("BARGELD", gdBase) = False Then
        CreateTable "BARGELD", gdBase
    Else
        If SpalteInTabellegefundenNEW("BARGELD", "SENDOK", gdBase) = False Then
            SpalteAnfuegenNEW "BARGELD", "SENDOK", "BIT", gdBase
    
            sSQL = "Update BARGELD set SENDOK = false "
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        End If
    End If
    
    
    If NewTableSuchenDBKombi("DTA", gdBase) = False Then
        CreateTable "DTA", gdBase
    Else
    
        If SpalteInTabellegefundenNEW("DTA", "SENDOK", gdBase) = False Then
            SpalteAnfuegenNEW "DTA", "SENDOK", "BIT", gdBase
    
            sSQL = "Update DTA set SENDOK = false "
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        End If
        
        If SpalteInTabellegefundenNEW("DTA", "FILIALE", gdBase) = False Then
            SpalteAnfuegenNEW "DTA", "FILIALE", "INTEGER", gdBase
    
            sSQL = "Update DTA set FILIALE = " & gcFilNr
            schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        End If
    
    End If
    lDBVersion = 944

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV944"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV946()
    On Error GoTo LOKAL_ERROR
    
    
    
    tabnameGross "BEDNAME", gdBase

    
    lDBVersion = 946

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV946"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV950()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 950
    
    sSQL = "Alter table GUTSCH add BEDNU45 integer "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update GUTSCH Set BEDNU45 = BEDNU "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table GUTSCH DROP BEDNU "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table GUTSCH add BEDNU INTEGER "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update GUTSCH Set BEDNU = BEDNU45 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table GUTSCH DROP BEDNU45 "
    gdBase.Execute sSQL, dbFailOnError
    
    IndexGutsch

    lDBVersion = 950
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV950"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV953()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

'    lDBVersion = 953
    
    'afcbuch
    
    If Not NewTableSuchenDBKombi("afctt", gdBase) Then
        loeschNEW "afctt", gdBase
        
        sSQL = "Select * into afctt from AFCBUCH "
        gdBase.Execute sSQL, dbFailOnError
    End If
    
    sSQL = "Alter table AFCBUCH add BEDNU45 integer "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update AFCBUCH Set BEDNU45 = aBEDNU "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table AFCBUCH DROP aBEDNU "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table AFCBUCH add aBEDNU INTEGER "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update AFCBUCH Set aBEDNU = BEDNU45 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table AFCBUCH DROP BEDNU45 "
    gdBase.Execute sSQL, dbFailOnError
    
    'Gutsch
    If SpalteInTabellegefundenNEW("Gutsch", "FILIALE", gdBase) = False Then
        SpalteAnfuegenNEW "Gutsch", "FILIALE", "INTEGER", gdBase

        sSQL = "Update Gutsch set FILIALE = 0"
        gdBase.Execute sSQL, dbFailOnError
    End If
    
    IndexGutsch

    lDBVersion = 953
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3372 Or err.Number = 53 Or err.Number = 3256 Or err.Number = 3376 Or err.Number = 3043 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV953"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
'        Resume Next
    End If
    
End Sub
Public Sub DbCheckV957()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
'    NUMSKARTE
    If Not SpalteInTabellegefundenNEW("AFCSTAT", "DUKA", gdBase) Then
        SpalteAnfuegenNEW "AFCSTAT", "DUKA", "double", gdBase
    
        sSQL = "Update AFCSTAT set DUKA = 0 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    If Not SpalteInTabellegefundenNEW("AFCSTATP", "DUKA", gdBase) Then
        SpalteAnfuegenNEW "AFCSTATP", "DUKA", "double", gdBase
    
        sSQL = "Update AFCSTATP set DUKA = 0 "
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
    End If
    
    
    lDBVersion = 957

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV957"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV959()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("RETOURE", gdBase) = False Then
        CreateTable "RETOURE", gdBase
    Else
        If SpalteInTabellegefundenNEW("RETOURE", "SENDOK", gdBase) = False Then
            SpalteAnfuegenNEW "RETOURE", "SENDOK", "BIT", gdBase
    
            sSQL = "Update RETOURE set SENDOK = false "
            gdBase.Execute sSQL, dbFailOnError
        End If
    End If
    
    lDBVersion = 959

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV959"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV970()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset

    loeschNEW "KASSEIN", gdBase
    CreateTableT3 "KASSEIN", gdBase
        
    sSQL = "Insert into KASSEIN (AUSBLDU,AUSBLSH, AUSBLLS , RESTGU) values(FALSE,FALSE,FALSE,0)"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 970

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV970"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV975()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "PL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "PL", "BIT", gdBase

    sSQL = "Update KASSEIN Set PL = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 975

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV975"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV977()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BARDINA4", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BARDINA4", "BIT", gdBase

    sSQL = "Update KASSEIN Set BARDINA4 = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 977

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV977"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV979()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "NOBONGU", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "NOBONGU", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "NOGRAFIK", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "FILALI", "INTEGER", gdBase

    sSQL = "Update KASSEIN Set NOBONGU = false "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set FILALI = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set NOGRAFIK = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 979

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV979"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV983()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KUDU", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KUDU", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "GEBRABK", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "STAPAU", "double", gdBase

    sSQL = "Update KASSEIN Set KUDU = false "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set GEBRABK = false "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set STAPAU = 0.1 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 983

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV983"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV984()
    On Error GoTo LOKAL_ERROR

    loeschNEW "FEEDB", gdBase
    lDBVersion = 984

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV984"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV989()
    On Error GoTo LOKAL_ERROR

    loeschNEW "BONPAUSE", gdBase
    CreateTable "BONPAUSE", gdBase
    lDBVersion = 989

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV989"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1006()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "OhnebestProt", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "OhnebestProt", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set OhnebestProt = false "
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    lDBVersion = 1006

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1006"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1008()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "UMSANZ", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "UMSANZ", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set UMSANZ = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1008

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1008"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1021()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZGAUSBLEND", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ZGAUSBLEND", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set ZGAUSBLEND = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1021

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1021"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1029()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("GUTZ", "FILIALE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "GUTZ", "FILIALE", "BYTE", gdBase
    SpalteAnfuegenNEW "GUTZ", "BEDNU", "INTEGER", gdBase
   
    sSQL = "Update GUTZ Set BEDNU = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update GUTZ Set FILIALE =  " & gcFilNr
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1029

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1029"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1030()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("GUTZ", "SENDOK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "GUTZ", "SENDOK", "BIT", gdBase
    
    sSQL = "Update GUTZ set SENDOK = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1030

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1030"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1046()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "MGDETAILS", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "MGDETAILS", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set MGDETAILS = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1046

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1046"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1052()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BEDLEER", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BEDLEER", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set BEDLEER = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1052

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1052"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1053()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BONNEIN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BONNEIN", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set BONNEIN = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1053

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1053"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1057()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BONWAHL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BONWAHL", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set BONWAHL = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1057

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1057"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1061()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("GEMZ", "FILIALE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "GEMZ", "FILIALE", "BYTE", gdBase
    
    
    sSQL = "Update GEMZ Set FILIALE =  " & gcFilNr
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1061

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1061"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1066()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KASSGEFUEHRT", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KASSGEFUEHRT", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set KASSGEFUEHRT = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1066

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1066"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1084()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASQL", "AWM", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASQL", "AWM", "Text(2)", gdBase
   
    sSQL = "Update KASQL Set AWM = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1084

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1084"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1086()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
        
    If SpalteInTabellegefundenNEW("ZUGANG", "LFNR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "ZUGANG", "LFNR", "AUTOINCREMENT", gdBase
   
    lDBVersion = 1086

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1086"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1090()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNDBEST", "MBBLOCK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNDBEST", "MBBLOCK", "BIT", gdBase
    
    sSQL = "Update KUNDBEST set MBBLOCK = False "
    gdBase.Execute sSQL, dbFailOnError
   
    lDBVersion = 1090

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1090"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1091()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If NewTableSuchenDBKombi("FEEDB", gdBase) = True Then
        If SpalteInTabellegefundenNEW("FEEDB", "transpack", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "FEEDB", "transpack", "double", gdBase
    End If
   
    lDBVersion = 1091

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1091"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1103()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNPFLGH", "Tonic", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLGH", "Tonic", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLGH", "Peeling", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLGH", "Massage", "Text(250)", gdBase
   
    lDBVersion = 1103

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1103"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1104()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNPFLEG", "Hauttyp", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLEG", "Hauttyp", "Text(50)", gdBase
    
   
    lDBVersion = 1104

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1104"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1105()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNPFLEG", "RAUCHER", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLEG", "RAUCHER", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "WASSER", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "SPORT", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "SONNENBANK", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "KAFFEEGENUSS", "Text(250)", gdBase
   
    lDBVersion = 1105

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1105"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1113()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    
    sSQL = "Update KUNDEN set MERKMAL2 = 'J' "
    gdBase.Execute sSQL, dbFailOnError
   
    lDBVersion = 1113

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1113"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1118()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("FIRMA", "EMAIL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "FIRMA", "EMAIL", "Text(50)", gdBase
   
    lDBVersion = 1118

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1118"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1119()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    
    sSQL = "Update UMSATZ set UMSG1 = 0 where umsg1 is null "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update UMSATZ set UMSv1 = 0 where umsv1 is null "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update UMSATZ set UMSe1 = 0 where umse1 is null "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update UMSATZ set UMSo1 = 0 where umso1 is null "
    gdBase.Execute sSQL, dbFailOnError
   
    lDBVersion = 1119

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1119"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1133()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("BEDTERM", "KUNDNR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "BEDTERM", "KUNDNR", "LONG", gdBase
   
    lDBVersion = 1133

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1133"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1142()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ARTRABH", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ARTRABH", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set ARTRABH = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1142

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1142"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1144()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    sSQL = "Update KUNDEN set MERKMAL2 = '' where MERKMAL2 is null "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KUNDEN set MERKMAL2 = 'J' where MERKMAL2 = ''  "
    gdBase.Execute sSQL, dbFailOnError
   
    lDBVersion = 1144

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1144"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1180()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSBON", "FILIALE", gdBase) = False Then
        SpalteAnfuegenNEW "KASSBON", "FILIALE", "BYTE", gdBase
        SpalteAnfuegenNEW "KASSBON", "SENDOK", "BIT", gdBase
        SpalteAnfuegenNEW "KASSBON", "KK_ART", "TEXT(2)", gdBase
        SpalteAnfuegenNEW "KASSBON", "KUNDNR", "LONG", gdBase
        
        sSQL = "Update KASSBON Set SENDOK = false "
        gdBase.Execute sSQL, dbFailOnError
         
        sSQL = "Update KASSBON Set FILIALE =  " & Val(gcFilNr)
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update KASSBON Set KK_ART =  'UB'"
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update KASSBON Set KUNDNR =  0 "
        gdBase.Execute sSQL, dbFailOnError
         
        Kill "c:\aleer\kissdata.mdb"
    End If
            
    lDBVersion = 1180

Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV1180"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
    
        Fehlermeldung1
    End If
    
End Sub
Public Sub DbCheckV1199()
    On Error GoTo LOKAL_ERROR
    
    loeschNEW "ZEITE", gdBase
    CreateTable "ZEITE", gdBase
    
    lDBVersion = 1199

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1199"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1200()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Delete from KABUCH"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1200

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1200"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1201()
    On Error GoTo LOKAL_ERROR
    
    rechneNeuKunden
    
    lDBVersion = 1201

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1201"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1204()
    On Error GoTo LOKAL_ERROR
    
    
    Dim sSQL As String
    Dim lLinr(50) As Long
    Dim i As Integer
    i = 0
    
    If Not SpalteInTabellegefundenNEW("DELSTADAL", "BESCHR", gdBase) Then
        SpalteAnfuegenNEW "DELSTADAL", "BESCHR", "Text(30)", gdBase
    End If
    
    lLinr(i) = 800001: i = i + 1
    lLinr(i) = 800002: i = i + 1
    lLinr(i) = 800003: i = i + 1
    lLinr(i) = 800004: i = i + 1
    lLinr(i) = 800007: i = i + 1
    lLinr(i) = 800013: i = i + 1
    lLinr(i) = 800016: i = i + 1
    lLinr(i) = 800020: i = i + 1
    lLinr(i) = 800021: i = i + 1
    lLinr(i) = 800022: i = i + 1
    lLinr(i) = 800025: i = i + 1
    lLinr(i) = 800028: i = i + 1
    lLinr(i) = 800031: i = i + 1
    lLinr(i) = 800032: i = i + 1
    lLinr(i) = 800034: i = i + 1
    lLinr(i) = 800035: i = i + 1
    lLinr(i) = 800044: i = i + 1
    lLinr(i) = 800048: i = i + 1
    lLinr(i) = 800051: i = i + 1
    lLinr(i) = 800055: i = i + 1
    lLinr(i) = 800070: i = i + 1
    lLinr(i) = 800079: i = i + 1
    lLinr(i) = 800080: i = i + 1
    lLinr(i) = 800082: i = i + 1
    lLinr(i) = 800101: i = i + 1
    lLinr(i) = 800118: i = i + 1
    lLinr(i) = 800127: i = i + 1
    lLinr(i) = 800138: i = i + 1
    lLinr(i) = 800142: i = i + 1
    lLinr(i) = 800144: i = i + 1
    lLinr(i) = 800146: i = i + 1
    lLinr(i) = 800150: i = i + 1
    lLinr(i) = 800162: i = i + 1
    lLinr(i) = 800165: i = i + 1
    lLinr(i) = 800205: i = i + 1
    lLinr(i) = 800217: i = i + 1
    lLinr(i) = 800231: i = i + 1
    lLinr(i) = 800251: i = i + 1
    lLinr(i) = 800268: i = i + 1
    lLinr(i) = 800276: i = i + 1
    lLinr(i) = 800378: i = i + 1
    lLinr(i) = 800392: i = i + 1
    lLinr(i) = 800418: i = i + 1
    lLinr(i) = 800520: i = i + 1
    lLinr(i) = 800656: i = i + 1
    lLinr(i) = 800701: i = i + 1
    lLinr(i) = 800783: i = i + 1
    lLinr(i) = 800841: i = i + 1
    lLinr(i) = 800890: i = i + 1
    lLinr(i) = 800899: i = i + 1
    lLinr(i) = 800921

    For i = 0 To 50
        sSQL = "Delete from DELSTADAL where LINR = " & lLinr(i)
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DELSTADAL (LINR,BESCHR) values ( " & lLinr(i) & ",'KISS Hannover')"
        gdBase.Execute sSQL, dbFailOnError
    Next i
    
    lDBVersion = 1204

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1204"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1205()
    On Error GoTo LOKAL_ERROR
    
    
    Dim sSQL As String
    Dim lLinr(50) As Long
    Dim sLiefBez(50) As String
    Dim i As Integer
    i = 0
    
    If Not SpalteInTabellegefundenNEW("DELSTADAL", "BESCHR", gdBase) Then
        SpalteAnfuegenNEW "DELSTADAL", "BESCHR", "Text(30)", gdBase
    End If
    
    i = 0
    
    
    sLiefBez(i) = "ALCINA COSMETIC, DR.WOLFF GMBH": i = i + 1
    sLiefBez(i) = "BURNUS GESELLSCHAFT MBH KOSM": i = i + 1
    sLiefBez(i) = "KLOSTERFRAU VERTRIEB AUTAN": i = i + 1
    sLiefBez(i) = "KLOSTERFRAU VERTRIEB RICOLA": i = i + 1
    sLiefBez(i) = "BEIERSDORF AG": i = i + 1
    sLiefBez(i) = "MAGNUS SALES&SERVICE GMBH&COKG": i = i + 1
    sLiefBez(i) = "LOREAL HAARK.U.PARF.GMBH / JADE": i = i + 1
    sLiefBez(i) = "SARA LEE DEUTSCHLAND GMBH": i = i + 1
    sLiefBez(i) = "UNILEVER DEUTSCHLAND GMBH": i = i + 1
    sLiefBez(i) = "ERDAL REX GMBH": i = i + 1
    sLiefBez(i) = "MERZ & CO. GMBH DEMAK'UP": i = i + 1
    sLiefBez(i) = "LORNAMEAD GMBH": i = i + 1
    sLiefBez(i) = "JOHNSON & JOHNSON GMBH": i = i + 1
    sLiefBez(i) = "MARKWINS BEAUTY PRODUCTS GMBH": i = i + 1
    sLiefBez(i) = "HARTMANN PAUL AG": i = i + 1
    sLiefBez(i) = "QUEISSER PHARMA GMBH&CO.": i = i + 1
    sLiefBez(i) = "KLOSTERFRAU VERTRIEBS GMBH": i = i + 1
    sLiefBez(i) = "GSK GLAXOSMITHKLINE GMBH&KO KG": i = i + 1
    sLiefBez(i) = "JOHNSON WAX GMBH": i = i + 1
    sLiefBez(i) = "MERZ CONSUMER CARE GMBH": i = i + 1
    sLiefBez(i) = "DR. POEHLMANN & CO GMBH": i = i + 1
    sLiefBez(i) = "SSL HEALTHCARE GMBH&CO KG": i = i + 1
    sLiefBez(i) = "SCHWARZKOPF&HENKEL COSM GMBH": i = i + 1
    sLiefBez(i) = "DR.C.SOLDAN GMBH": i = i + 1
    sLiefBez(i) = "FASHY GMBH": i = i + 1
    sLiefBez(i) = "KAPPUS M. GMBH & CO.": i = i + 1
    sLiefBez(i) = "HAKLE -KIMBERLY": i = i + 1
    sLiefBez(i) = "COLGATE-PALMOLIVE GMBH HAUSH": i = i + 1
    sLiefBez(i) = "RECKITT BENCKISER DEUTSCHLAND": i = i + 1
    sLiefBez(i) = "COLGATE-PALMOLIVE GMBH KÖRPER": i = i + 1
    sLiefBez(i) = "KNEIPP -WERKE": i = i + 1
    sLiefBez(i) = "PROCTER UND GAMBLE ORAL B": i = i + 1
    sLiefBez(i) = "PROCTER&GAMBLE GMBH WPR/TISSUE": i = i + 1
    sLiefBez(i) = "BRAUNS-HEITMANN GMBH & CO KG": i = i + 1
    sLiefBez(i) = "BÖRNER GMBH": i = i + 1
    sLiefBez(i) = "SEBAPHARMA GMBH & CO": i = i + 1
    sLiefBez(i) = "WILKINSON SWORD GMBH": i = i + 1
    sLiefBez(i) = "BURNUS GESELLSCHAFT MBH WPR": i = i + 1
    sLiefBez(i) = "ALPENLÄNDISCHES KRÄUTERHAUS": i = i + 1
    sLiefBez(i) = "GABA GMBH": i = i + 1
    sLiefBez(i) = "GARDA GARTENARTIKEL GMBH": i = i + 1
    sLiefBez(i) = "POLIBOY BRANDT & WALTHER": i = i + 1
    sLiefBez(i) = "COTY DEUTSCHLAND GMBH RIMMEL": i = i + 1
    sLiefBez(i) = "PROCTER&GAMBLE GMBH GILLETTE": i = i + 1
    sLiefBez(i) = "PROCTER&GAMBLE BEAUTY BLENDAX": i = i + 1
    sLiefBez(i) = "JEYES DEUTSCHLAND GMBH": i = i + 1
    sLiefBez(i) = "FLORENA COSMETIC GMBH": i = i + 1
    sLiefBez(i) = "HENKEL WASCHMITTEL GMBH": i = i + 1
    sLiefBez(i) = "MAPA GMBH": i = i + 1
    sLiefBez(i) = "RECKHAUS GMBH": i = i + 1
    sLiefBez(i) = "HERBACIN COSMETIC GMBH"

    
    
    
    
    i = 0
    lLinr(i) = 800001: i = i + 1
    lLinr(i) = 800002: i = i + 1
    lLinr(i) = 800003: i = i + 1
    lLinr(i) = 800004: i = i + 1
    lLinr(i) = 800007: i = i + 1
    lLinr(i) = 800013: i = i + 1
    lLinr(i) = 800016: i = i + 1
    lLinr(i) = 800020: i = i + 1
    lLinr(i) = 800021: i = i + 1
    lLinr(i) = 800022: i = i + 1
    lLinr(i) = 800025: i = i + 1
    lLinr(i) = 800028: i = i + 1
    lLinr(i) = 800031: i = i + 1
    lLinr(i) = 800032: i = i + 1
    lLinr(i) = 800034: i = i + 1
    lLinr(i) = 800035: i = i + 1
    lLinr(i) = 800044: i = i + 1
    lLinr(i) = 800048: i = i + 1
    lLinr(i) = 800051: i = i + 1
    lLinr(i) = 800055: i = i + 1
    lLinr(i) = 800070: i = i + 1
    lLinr(i) = 800079: i = i + 1
    lLinr(i) = 800080: i = i + 1
    lLinr(i) = 800082: i = i + 1
    lLinr(i) = 800101: i = i + 1
    lLinr(i) = 800118: i = i + 1
    lLinr(i) = 800127: i = i + 1
    lLinr(i) = 800138: i = i + 1
    lLinr(i) = 800142: i = i + 1
    lLinr(i) = 800144: i = i + 1
    lLinr(i) = 800146: i = i + 1
    lLinr(i) = 800150: i = i + 1
    lLinr(i) = 800162: i = i + 1
    lLinr(i) = 800165: i = i + 1
    lLinr(i) = 800205: i = i + 1
    lLinr(i) = 800217: i = i + 1
    lLinr(i) = 800231: i = i + 1
    lLinr(i) = 800251: i = i + 1
    lLinr(i) = 800268: i = i + 1
    lLinr(i) = 800276: i = i + 1
    lLinr(i) = 800378: i = i + 1
    lLinr(i) = 800392: i = i + 1
    lLinr(i) = 800418: i = i + 1
    lLinr(i) = 800520: i = i + 1
    lLinr(i) = 800656: i = i + 1
    lLinr(i) = 800701: i = i + 1
    lLinr(i) = 800783: i = i + 1
    lLinr(i) = 800841: i = i + 1
    lLinr(i) = 800890: i = i + 1
    lLinr(i) = 800899: i = i + 1
    lLinr(i) = 800921

    For i = 0 To 50
        sSQL = "Delete from DELSTADAL where LINR = " & lLinr(i)
        gdBase.Execute sSQL, dbFailOnError
        
        sLiefBez(i) = SwapStr(sLiefBez(i), "'", " ")
        sLiefBez(i) = SwapStr(sLiefBez(i), "&", " ")
        
        sSQL = "Insert into DELSTADAL (LINR,BESCHR) values ( " & lLinr(i) & ",'" & sLiefBez(i) & "')"
        gdBase.Execute sSQL, dbFailOnError
    Next i
    
    lDBVersion = 1205

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1205"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1207()
    On Error GoTo LOKAL_ERROR
    
    IndexKunden
    ermBestMitarbeiter

    lDBVersion = 1207

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1207"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1220()
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rsrs As Recordset
    Dim sHauptext As String
    Dim sKurztext As String
    
    
    sSQL = "Select * from TEXTBLOCK "
    Set rsrs = gdBase.OpenRecordset(sSQL)
    
    sHauptext = "Sicherlich haben Sie übersehen, die oben genannte Rechnung zu bezahlen." & vbCrLf
    sHauptext = sHauptext & "Der genannte Betrag ist sofort fällig." & vbCrLf
    sHauptext = sHauptext & "Wir bitten um Überweisung auf das unten angegebene Konto." & vbCrLf
    
    sKurztext = "1. Mahnung"
    
    rsrs.AddNew
    rsrs!kurzbeschreib = sKurztext
    rsrs!BESCHREIB = sHauptext
    rsrs!TEXTART = "MAHNUNG"
    rsrs.Update
    
    sHauptext = "Unsere Forderung ist seit Wochen offen, dürfen wir vielleicht noch hoffen, dass Sie es nur haben übersehn und jetzt gleich zum Bankschalter gehn, ansonsten kommt das nächste Mal nicht mehr ein Gedicht, sondern ein Schrieb vom Mahngericht."
    sKurztext = "Mahnung Gedicht"
    
    rsrs.AddNew
    rsrs!kurzbeschreib = sKurztext
    rsrs!BESCHREIB = sHauptext
    rsrs!TEXTART = "MAHNUNG"
    rsrs.Update
    
    sHauptext = "Wir freuen uns Ihnen mitteilen zu können, dass es uns gelungen ist, Herrn Mike Tyson für unsere Mahn- und Inkassoabteilung zu gewinnen. Er brennt schon darauf Sie kennenzulernen. Jetzt aber Spaß beiseite: Zahlen Sie bitte bis spätestens [...]"
    sKurztext = "Mahnung Mike Tyson"

    rsrs.AddNew
    rsrs!kurzbeschreib = sKurztext
    rsrs!BESCHREIB = sHauptext
    rsrs!TEXTART = "MAHNUNG"
    rsrs.Update
    
    sHauptext = "Selbst wenn Sie Ihren Scheck einer Schildkröte auf den Panzer geschnallt hätten, wäre er jetzt schon hier. Nachdem wir sowieso vorziehen, Schecks per Post zu erhalten, bitten wir um Übersendung bis spätestens [...]. "
    sKurztext = "Schildkröte"

    rsrs.AddNew
    rsrs!kurzbeschreib = sKurztext
    rsrs!BESCHREIB = sHauptext
    rsrs!TEXTART = "MAHNUNG"
    rsrs.Update
    
    
    
    rsrs.Close: Set rsrs = Nothing
    
    lDBVersion = 1220



Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1220"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub DbCheckV1221()
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rsrs As Recordset
    Dim sHauptext As String
    Dim sKurztext As String
    
    
    sSQL = "Select * from TEXTBLOCK "
    Set rsrs = gdBase.OpenRecordset(sSQL)
    
    sHauptext = "In der Anlage übersenden wir Ihnen eine Büroklammer. "
    sHauptext = sHauptext & "Es handelt sich dabei um eine Klammer mit magischer Wirkung. "
    sHauptext = sHauptext & "Sie wird nämlich Ihnen und uns einen Haufen Unannehmlichkeiten ersparen. "
    sHauptext = sHauptext & "Es ist eine Büroklammer, die Sie benötigen, um Ihren Scheck an die beiliegende Rechnungskopie zu heften. "
    sHauptext = sHauptext & "Bitte beeilen Sie sich! Wir brauchen diese Klammer auch noch für andere Kunden."
    
    
    sKurztext = "Mahnung Büroklammer"
    
    rsrs.AddNew
    rsrs!kurzbeschreib = sKurztext
    rsrs!BESCHREIB = sHauptext
    rsrs!TEXTART = "MAHNUNG"
    rsrs.Update
    
    
         
    
    sHauptext = "Gehören Sie vielleicht auch zu den Schuldnern, die die erste und die zweite Mahnung "
    sHauptext = sHauptext & "grundsätzlich in den Papierkorb werfen, in der Hoffnung, dass schon noch eine dritte Mahnung "
    sHauptext = sHauptext & "kommen wird und nicht gleich ein Mahnbescheid vom Gericht? Da können Sie aber manchmal "
    sHauptext = sHauptext & "auch Pech haben! Wir wollen jedoch keine Spielverderber sein: Hier ist sie, "
    sHauptext = sHauptext & "Ihre dritte Mahnung! Letzte Zahlungsfrist:"
    
    sKurztext = "Dritte Mahnung"
    
    rsrs.AddNew
    rsrs!kurzbeschreib = sKurztext
    rsrs!BESCHREIB = sHauptext
    rsrs!TEXTART = "MAHNUNG"
    rsrs.Update
    
    rsrs.Close: Set rsrs = Nothing
    
    lDBVersion = 1221



Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1221"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub DbCheckV1223()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("LINBEZ", "SORTI", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "LINBEZ", "SORTI", "INTEGER", gdBase
   
    sSQL = "Update LINBEZ Set SORTI = LPZ "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1223

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1223"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1230()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("TABDATUM", "LIEFBEZ", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "TABDATUM", "LIEFBEZ", "Text(35)", gdBase
    SpalteAnfuegenNEW "TABDATUM", "Kurzinfo", "Text(35)", gdBase
    SpalteAnfuegenNEW "TABDATUM", "Auftragsnr", "LONG", gdBase
    
   
    sSQL = "Update TABDATUM Set Kurzinfo = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update TABDATUM Set Auftragsnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update TABDATUM Set LIEFBEZ = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    neuFildatschreiben
    
    lDBVersion = 1230

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1230"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1239()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SPARSATZ", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SPARSATZ", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set SPARSATZ = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1239

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1239"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1241()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    loeschNEW "ARTMERK", gdBase
    CreateTable "ARTMERK", gdBase
    
    lDBVersion = 1241

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1241"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1243()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("ZEITSTEU", gdApp) = False Then
'        CreateTable "ZEITSTEU", gdApp
    Else
        If SpalteInTabellegefundenNEW("ZEITSTEU", "Art", gdApp) = False Then
            SpalteAnfuegenNEW "ZEITSTEU", "Art", "INTEGER", gdApp
    
            sSQL = "Update ZEITSTEU set Art = 1 "
            gdApp.Execute sSQL, dbFailOnError
            
            
        End If
        
        If SpalteInTabellegefundenNEW("ZEITSTEU", "ZeitStart", gdApp) = False Then
            SpalteAnfuegenNEW "ZEITSTEU", "ZeitStart", "Text(8)", gdApp
    
            sSQL = "Update ZEITSTEU set ZeitStart = '0' "
            gdApp.Execute sSQL, dbFailOnError
            
        End If
    End If
    
    lDBVersion = 1243
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1243"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1260()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "RABVS", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "RABVS", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set RABVS = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1260

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1260"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1277()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("PRSTERM", "POS", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "PRSTERM", "POS", "LONG", gdBase
   
    sSQL = "Update PRSTERM Set POS = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1277

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1277"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1285()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("GANALYSEALL", "SENDOK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "GANALYSE", "SENDOK", "BIT", gdBase
    SpalteAnfuegenNEW "GANALYSEALL", "SENDOK", "BIT", gdBase
    
    sSQL = "Update GANALYSEALL set SENDOK = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1285

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1285"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1290()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "RABATT", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "RABATT", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set RABATT = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1290

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1290"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1292()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "LEISTE2START", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "LEISTE2START", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set LEISTE2START = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1292

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1292"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1297()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    LeseStatistMonat
    
    sSQL = "Update STATIST Set Lastausw = null "
    sSQL = sSQL & " where Art = 'M'"
    gdBase.Execute sSQL, dbFailOnError
    
    If Trim(gsMStatkundnr) <> "" Then
        If unistatMonat1Mal(frmWKL00.txtStatus, frmWKL00.picprogress) Then
        
            DatumLastSuniM

        End If
        
    End If
    
    lDBVersion = 1297

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1297"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1315()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KUNPFLEG", "VORGESCHM", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLEG", "VORGESCHM", "MEMO", gdBase
   
    sSQL = "Update KUNPFLEG Set VORGESCHM = VORGESCH "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1315

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1315"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1319()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("PREISE", gdBase) = False Then
        CreateTableT2 "PREISE", gdBase
    End If
    
    CheckIndex "PREISE", "ARTNR", "", gdBase
    
    lDBVersion = 1319

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1319"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1334()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("EMAIL", "THEMA", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "EMAIL", "THEMA", "TEXT(20)", gdBase
   
    sSQL = "Update EMAIL Set THEMA = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    SpalteAnfuegenNEW "EMAIL", "LASTDATE", "DATETIME", gdBase
   
    sSQL = "Update EMAIL Set LASTDATE = '" & DateValue(Now) & "'"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "INSERT into EMAIL (Adresse,Alias,Thema,LASTDATE) values "
    sSQL = sSQL & " ('sdp@kisswws.de','KISS STAMMDATEN','STADA', '" & DateValue(Now) & "')"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "INSERT into EMAIL (Adresse,Alias,Thema,LASTDATE) values "
    sSQL = sSQL & " ('juergen.wirnitzer@dtvtabak.de','Tabakunion Barkow','STADA', '" & DateValue(Now) & "')"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "INSERT into EMAIL (Adresse,Alias,Thema,LASTDATE) values "
    sSQL = sSQL & " ('m.dangelat@pressevertrieb-craemer.de','Pressevertrieb','STADA', '" & DateValue(Now) & "')"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1334

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1334"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1336()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Delete from EMAIL where Alias ='Pressevertieb'"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Delete from EMAIL where Alias ='Pressevertrieb'"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "INSERT into EMAIL (Adresse,Alias,Thema,LASTDATE) values "
    sSQL = sSQL & " ('m.dangelat@pressevertrieb-craemer.de','Pressevertrieb','STADA', '" & DateValue(Now) & "')"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1336

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1336"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1337()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("RECHUE", "EINZUG", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "RECHUE", "EINZUG", "TEXT(1)", gdBase
   
    sSQL = "Update RECHUE Set EINZUG = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    lDBVersion = 1337

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1337"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1338()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("UMS_LINR", gdBase) = True Then
        If SpalteInTabellegefundenNEW("UMS_LINR", "LASTDATE", gdBase) = False Then
            SpalteAnfuegenNEW "UMS_LINR", "LASTDATE", "DATETIME", gdBase
        End If
    Else
        CreateTableT2 "UMS_LINR", gdBase
    End If
    
    sSQL = "Update UMS_LINR set LASTDATE  = '" & DateValue(Now) - 1 & "'"
    gdBase.Execute sSQL, dbFailOnError
    
    If NewTableSuchenDBKombi("UMS_LPZ", gdBase) = True Then
        If SpalteInTabellegefundenNEW("UMS_LPZ", "LASTDATE", gdBase) = False Then
            SpalteAnfuegenNEW "UMS_LPZ", "LASTDATE", "DATETIME", gdBase
        End If
    Else
        CreateTableT2 "UMS_LPZ", gdBase
    End If
    
    sSQL = "Update UMS_LPZ set LASTDATE  = '" & DateValue(Now) - 1 & "'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1338

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1338"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1350()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2009 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1350

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1350"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1357()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "IDENTUSER", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "IDENTUSER", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set IDENTUSER = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1357

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1357"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1367()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("TERM_STD", "GLIEDERUNG", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "TERM_STD", "GLIEDERUNG", "TEXT(30)", gdBase
   
    sSQL = "Update TERM_STD Set GLIEDERUNG = 'Körper'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1367

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1367"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1377()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "MBBLOCKFRAGE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "MBBLOCKFRAGE", "BIT", gdBase
    
    
    sSQL = "Update KASSEIN Set MBBLOCKFRAGE = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1377

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1377"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1381()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "STERNE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "STERNE", "BIT", gdBase
    
    
    sSQL = "Update KASSEIN Set STERNE = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1381

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1381"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1393()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "NEUKUNDEN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "NEUKUNDEN", "BIT", gdBase
    
    
    sSQL = "Update KASSEIN Set NEUKUNDEN = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1393

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1393"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1415()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("LISRT", "GLN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "LISRT", "GLN", "Text(20)", gdBase
    SpalteAnfuegenNEW "LISRT", "USTID", "Text(35)", gdBase
    
    lDBVersion = 1415

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1415"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1420()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("SPZUORDLINR", gdBase) = True Then
        If SpalteInTabellegefundenNEW("SPZUORDLINR", "KUERZEL", gdBase) = False Then
            SpalteAnfuegenNEW "SPZUORDLINR", "KUERZEL", "Text(3)", gdBase
        End If
    Else
        CreateTableT2 "SPZUORDLINR", gdBase
    End If
    
    lDBVersion = 1420

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1420"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1434()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("ZADRESS", "TITEL", gdBase) = False Then
        SpalteAnfuegenNEW "ZADRESS", "TITEL", "Text(35)", gdBase
    End If
    
    lDBVersion = 1434

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1434"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1447()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KASSMBEST", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KASSMBEST", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set KASSMBEST = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1447

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1447"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1455()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    'email
    
    SpalteAnfuegenNEW "LISRT", "EMAILLANG", "TEXT(100)", gdBase
   
    sSQL = "Update LISRT Set EMAILLANG = EMAIL "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table LISRT drop EMAIL "
    gdBase.Execute sSQL, dbFailOnError
    
    SpalteAnfuegenNEW "LISRT", "EMAIL", "TEXT(100)", gdBase
    
    sSQL = "Update LISRT Set EMAIL= EMAILLANG  "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table LISRT drop EMAILLANG "
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    
    
    
    'adress
    
    SpalteAnfuegenNEW "LISRT", "ADRESSLANG", "TEXT(100)", gdBase
   
    sSQL = "Update LISRT Set ADRESSLANG = ADRESS "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table LISRT drop ADRESS "
    gdBase.Execute sSQL, dbFailOnError
    
    SpalteAnfuegenNEW "LISRT", "ADRESS", "TEXT(100)", gdBase
    
    sSQL = "Update LISRT Set ADRESS= ADRESSLANG "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Alter table LISRT drop ADRESSLANG "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1455

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1455"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1456()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If DatendrinSQL("select * from lisrt where linr = 400001", gdBase) Then
        sSQL = "Update Lisrt set format = 'EDIREWE', GLN = '4388449000000' where linr = 400001"
        gdBase.Execute sSQL, dbFailOnError
    Else
        sSQL = "Insert into  Lisrt (LINR,KUERZEL,LIEFBEZ,FORMAT,GLN) values (400001,'REWE','REWE','EDIREWE','4388449000000')"
        gdBase.Execute sSQL, dbFailOnError
    End If
    
    lDBVersion = 1456

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1456"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1457()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4004770000006' where linr = 800418"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4004770000006' where linr = 300277"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4004770000006' where linr = 300170"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300212"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300174"
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    
    
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300009"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 213249"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 212740"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300209"
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300229"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300230"
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300231"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 100006"
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 312139"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300214"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300001"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300184"
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 300138"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', GLN = '4019977000001' where linr = 312125"
    gdBase.Execute sSQL, dbFailOnError
    
    
    lDBVersion = 1457

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1457"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1459()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If DatendrinSQL("select * from lisrt where linr = 400001", gdBase) Then
        sSQL = "Update Lisrt set format = 'EDIREWE', GLN = '4388449000000' where linr = 400001"
        gdBase.Execute sSQL, dbFailOnError
    Else
        sSQL = "Insert into  Lisrt (LINR,KUERZEL,LIEFBEZ,FORMAT,GLN) values (400001,'REWE','REWE','EDIREWE','4388449000000')"
        gdBase.Execute sSQL, dbFailOnError
    End If
    
    lDBVersion = 1459

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1459"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1463()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("ARTIKEL", "GROESSE", gdBase) = False Then
        SpalteAnfuegenNEW "ARTIKEL", "GROESSE", "Text(10)", gdBase
    End If
    
    lDBVersion = 1463

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1463"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1464()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KBMBI", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KBMBI", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set KBMBI = true "
    gdBase.Execute sSQL, dbFailOnError
    
    gbKBmBI = True
    
    lDBVersion = 1464

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1464"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1467()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4004770000006' where linr = 800418"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4004770000006' where linr = 300277"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4004770000006' where linr = 300170"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300212"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300174"
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    
    
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300009"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 213249"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 212740"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300209"
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300229"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300230"
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300231"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 100006"
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 312139"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300214"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300001"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300184"
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 300138"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Lisrt set format = 'EDICOTY', adress = 'bis_mainz@cotyinc.com', GLN = '4019977000001' where linr = 312125"
    gdBase.Execute sSQL, dbFailOnError
    
    
    lDBVersion = 1467

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1467"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1472()
    On Error GoTo LOKAL_ERROR
    
    If SpalteInTabellegefundenNEW("SPZUORDLINR", "MWSTV", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "SPZUORDLINR", "MWSTV", "TEXT(10)", gdBase
    SpalteAnfuegenNEW "SPZUORDLINR", "MWSTE", "TEXT(10)", gdBase
    
    lDBVersion = 1472

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1472"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1476()
    On Error GoTo LOKAL_ERROR
    
    lDBVersion = 1476
    
    NachtragAGNDBF 1000, "Getreide/Brot"
    NachtragAGNDBF 1001, "Milcherzeugnisse"
    NachtragAGNDBF 1002, "Tofu und Co"
    NachtragAGNDBF 1003, "Nüsse/Früchte/Saaten"
    NachtragAGNDBF 1004, "Flocken"
    NachtragAGNDBF 1005, "Teigwaren"
    NachtragAGNDBF 1006, "Getreidefertigprodukte"
    NachtragAGNDBF 1007, "Brotaufstriche"
    NachtragAGNDBF 1008, "Honigprodukte"
    NachtragAGNDBF 1009, "Kräuter und Gewürze"
    NachtragAGNDBF 1010, "Essige und Öle"
    NachtragAGNDBF 1011, "Suppen und Saucen"
    NachtragAGNDBF 1012, "Konserven"
    NachtragAGNDBF 1013, "Fertiggerichte"
    NachtragAGNDBF 1014, "Süßmittel"
    NachtragAGNDBF 1015, "Pudding-/Eispulver"
    NachtragAGNDBF 1016, "Backzutaten, Gelier-, Bindemittel"
    NachtragAGNDBF 1017, "Kochhilfen , Fermente"
    NachtragAGNDBF 1018, "fernöstliche Spezialitäten"
    NachtragAGNDBF 1019, "Kaffee/Kakao"
    NachtragAGNDBF 1020, "Mineralwasser/Fruchtsäfte"
    NachtragAGNDBF 1021, "Spirituosen"
    NachtragAGNDBF 1022, "Bastel-/Malbedarf/Spielzeug"
    NachtragAGNDBF 1023, "Duftästhetik allgemein"
    NachtragAGNDBF 1024, "Dekorative allgemein"
    NachtragAGNDBF 1025, "Pflege allgemein"
    NachtragAGNDBF 1026, "Bücher"
    NachtragAGNDBF 1027, "Info -Material"

    loeschNEW "BIOGART", gdBase
    CreateTableT2 "BIOGART", gdBase
    
    EintragBiogart "0101", 1000
    EintragBiogart "0112", 414
    EintragBiogart "0201", 1001
    EintragBiogart "0251", 1002
    EintragBiogart "0253", 1002
    EintragBiogart "0254", 1000
    EintragBiogart "0501", 1000
    EintragBiogart "0502", 1003
    EintragBiogart "0511", 1003
    EintragBiogart "0521", 1003
    EintragBiogart "0531", 1003
    EintragBiogart "0601", 1000
    EintragBiogart "0602", 1004
    EintragBiogart "0603", 1005
    EintragBiogart "0611", 1002
    EintragBiogart "0621", 1003
    EintragBiogart "0631", 1006
    EintragBiogart "0632", 1006
    EintragBiogart "0701", 1007
    EintragBiogart "0702", 1007
    EintragBiogart "0711", 1008
    EintragBiogart "0712", 1008
    EintragBiogart "0721", 1007
    EintragBiogart "0801", 1009
    EintragBiogart "0802", 1010
    EintragBiogart "0803", 1009
    EintragBiogart "0804", 1011
    EintragBiogart "0805", 1011
    EintragBiogart "0806", 1009
    EintragBiogart "0811", 1009
    EintragBiogart "0812", 1009
    EintragBiogart "0821", 1010
    EintragBiogart "0831", 1012
    EintragBiogart "0832", 1012
    EintragBiogart "0841", 1013
    EintragBiogart "0842", 1013
    EintragBiogart "0901", 414
    EintragBiogart "0902", 414
    EintragBiogart "0903", 414
    EintragBiogart "0904", 414
    EintragBiogart "0911", 414
    EintragBiogart "0912", 1006
    EintragBiogart "0913", 414
    EintragBiogart "0914", 414
    EintragBiogart "0921", 1014
    EintragBiogart "0931", 1015
    EintragBiogart "0932", 1016
    EintragBiogart "0933", 1017
    EintragBiogart "970", 1027
    EintragBiogart "1001", 297
    EintragBiogart "1002", 297
    EintragBiogart "1011", 1018
    EintragBiogart "1051", 419
    EintragBiogart "1101", 614
    EintragBiogart "1102", 614
    EintragBiogart "1103", 614
    EintragBiogart "1104", 614
    EintragBiogart "1105", 614
    EintragBiogart "1111", 614
    EintragBiogart "1112", 614
    EintragBiogart "1113", 614
    EintragBiogart "1121", 1019
    EintragBiogart "1122", 1019
    EintragBiogart "1131", 1019
    EintragBiogart "1132", 1019
    EintragBiogart "1201", 1020
    EintragBiogart "1211", 1020
    EintragBiogart "1251", 1021
    EintragBiogart "1301", 614
    EintragBiogart "1302", 614
    EintragBiogart "1311", 1019
    EintragBiogart "1312", 1020
    EintragBiogart "1321", 248
    EintragBiogart "1322", 248
    EintragBiogart "1331", 247
    EintragBiogart "1332", 247
    EintragBiogart "1341", 1021
    EintragBiogart "1341", 1021
    EintragBiogart "1401", 222
    EintragBiogart "1402", 214
    EintragBiogart "1403", 222
    EintragBiogart "1404", 224
    EintragBiogart "1405", 228
    EintragBiogart "1406", 221
    EintragBiogart "1407", 227
    EintragBiogart "1411", 222
    EintragBiogart "1412", 1023
    EintragBiogart "1413", 264
    EintragBiogart "1414", 225
    EintragBiogart "1415", 298
    EintragBiogart "1421", 1024
    EintragBiogart "1422", 241
    EintragBiogart "1423", 1025
    EintragBiogart "1431", 228
    EintragBiogart "1432", 313
    EintragBiogart "1433", 226
    EintragBiogart "1441", 229
    EintragBiogart "1451", 419
    EintragBiogart "1501", 415
    EintragBiogart "1502", 415
    EintragBiogart "1503", 415
    EintragBiogart "1511", 415
    EintragBiogart "1521", 414
    EintragBiogart "1531", 417
    EintragBiogart "1611", 416
    EintragBiogart "1612", 416
    EintragBiogart "1621", 416
    EintragBiogart "1622", 416
    EintragBiogart "1631", 416
    EintragBiogart "1701", 1026
    EintragBiogart "1702", 1026
    EintragBiogart "1703", 1026
    EintragBiogart "1704", 1026
    EintragBiogart "1706", 1026
    EintragBiogart "1707", 1026
    EintragBiogart "1811", 1022
    EintragBiogart "1812", 1022
    EintragBiogart "1821", 327
    EintragBiogart "1831", 1022
    EintragBiogart "1832", 1022
    
    lDBVersion = 1476

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1476"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1480()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    lDBVersion = 1480
    
    If SpalteInTabellegefundenNEW("DBEINSTE", "DBPAUSE", gdBase) Then Exit Sub
    
    SpalteAnfuegenNEW "DBEINSTE", "DBPAUSE", "SINGLE", gdBase
    
    sSQL = "Update DBEINSTE Set DBPAUSE = 0"
    gdBase.Execute sSQL, dbFailOnError
    
    gdDBPAUSE = 0
    
    lDBVersion = 1480
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1480"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub DbCheckV1496()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "TPBF", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "TPBF", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set TPBF = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1496

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1496"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1505()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "EKMAX", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "EKMAX", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set EKMAX = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1505

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1505"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1514()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Update DBEINSTE Set DBPAUSE = 1 "
    gdBase.Execute sSQL, dbFailOnError
    
    gdDBPAUSE = 1
    
    lDBVersion = 1514

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1514"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1521()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2010 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1521

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1521"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1537()
    On Error GoTo LOKAL_ERROR
   
    Dim sSQL As String
    
    sSQL = "Update DBEINSTE Set TagAkt = False "
    gdBase.Execute sSQL, dbFailOnError
    
    gbTagAkt = False
    
    lDBVersion = 1537

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1537"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1550()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "NachKBbeiEC", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "NachKBbeiEC", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set NachKBbeiEC = false "
    gdBase.Execute sSQL, dbFailOnError
    
    gbNachKBbeiEC = True
    
    lDBVersion = 1550

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1550"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1559()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "OpenSchubRetoure", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "OpenSchubRetoure", "BIT", gdBase
    
    sSQL = "Update KASSEIN Set OpenSchubRetoure = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1559

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1559"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1574()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Update DBEINSTE Set DBPAUSE = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    gdDBPAUSE = 0
    
    lDBVersion = 1574

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1574"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1584()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("SONDTEXT", gdBase) = True Then
        If SpalteInTabellegefundenNEW("SONDTEXT", "UEBERS", gdBase) = False Then
            SpalteAnfuegenNEW "SONDTEXT", "UEBERS", "LONG", gdBase
            SpalteAnfuegenNEW "SONDTEXT", "Zeile1S", "LONG", gdBase
            SpalteAnfuegenNEW "SONDTEXT", "Zeile2S", "LONG", gdBase
            SpalteAnfuegenNEW "SONDTEXT", "altPrS", "LONG", gdBase
            SpalteAnfuegenNEW "SONDTEXT", "neuPrS", "LONG", gdBase
            SpalteAnfuegenNEW "SONDTEXT", "Zeile3S", "LONG", gdBase
            SpalteAnfuegenNEW "SONDTEXT", "durchge", "BIT", gdBase
        End If
    Else
        CreateTable "SONDTEXT", gdBase
    End If
    
    lDBVersion = 1584

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1584"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1588()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("ZUGANG", gdBase) = True Then
        If SpalteInTabellegefundenNEW("ZUGANG", "REK", gdBase) = False Then
            SpalteAnfuegenNEW "ZUGANG", "REK", "DOUBLE", gdBase
        End If
    End If
    
    lDBVersion = 1588

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1588"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1590()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("ZUGANG", gdBase) = True Then
        If SpalteInTabellegefundenNEW("ZUGANG", "LFNR", gdBase) = False Then
            SpalteAnfuegenNEW "ZUGANG", "LFNR", "LONG", gdBase
        End If
    End If
    
    lDBVersion = 1590

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1590"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1601()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi(srechnertab & "ATI", gdBase) = False Then
        CreateTableT2 srechnertab & "ATI", gdBase
    End If
    
    lDBVersion = 1601

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1601"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1635()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("FILA", gdBase) = False Then
        CreateTable "FILA", gdBase
    Else
        loeschNEW "FILASIC", gdBase
        
        sSQL = "Select * into Filasic from Fila "
        gdBase.Execute sSQL, dbFailOnError
        
        loeschNEW "FILA", gdBase
        CreateTable "FILA", gdBase
        
        sSQL = "Insert into Fila Select * from Filasic "
        gdBase.Execute sSQL, dbFailOnError
        
        loeschNEW "FILASIC", gdBase
    End If
    
    lDBVersion = 1635

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1635"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1636()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KUWAHLROT", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KUWAHLROT", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KUWAHLMAIL", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set KUWAHLMAIL = false "
    gdBase.Execute sSQL, dbFailOnError
   
    sSQL = "Update KASSEIN Set KUWAHLROT = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1636

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1636"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1642()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2011 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1642

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1642"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1643()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("INTERART", "SHOPKVK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "INTERART", "SHOPKVK", "SINGLE", gdBase
    SpalteAnfuegenNEW "INTERART", "Kategorie", "Text (50)", gdBase
   
    sSQL = "Update INTERART i inner join Artikel a on i.artnr = a.artnr set i.SHOPKVK = a.kvkpr1 "
    gdBase.Execute sSQL, dbFailOnError
   
    lDBVersion = 1643

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1643"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1652()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("INTERART", "Kategorie2", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "INTERART", "Kategorie2", "Text (50)", gdBase
   
   
    lDBVersion = 1652

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1652"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1656()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("INTERART", "LASTEXPORT", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "INTERART", "LASTEXPORT", "DATETIME", gdBase
   
   
    lDBVersion = 1656

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1656"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1659()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("TAUSCH", "BEDIENER", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "TAUSCH", "BEDIENER", "INTEGER", gdBase
    
    sSQL = "Update TAUSCH set BEDIENER = 0 "
    gdBase.Execute sSQL, dbFailOnError
   
    lDBVersion = 1659

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1659"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1670()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("BESTPROT", gdBase) = False Then
        CreateTable "BESTPROT", gdBase
    Else

        If SpalteInTabellegefundenNEW("BESTPROT", "AENGRUND", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "BESTPROT", "AENGRUND", "TEXT(20)", gdBase

        sSQL = "Update BESTPROT set AENGRUND = '' "
        gdBase.Execute sSQL, dbFailOnError

    End If
    lDBVersion = 1670

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1670"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV1697()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("STATIST", gdBase) = False Then
        CreateTable "STATIST", gdBase
    Else

        If SpalteInTabellegefundenNEW("STATIST", "KISSZUSATZ", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "STATIST", "KISSZUSATZ", "TEXT(20)", gdBase

        sSQL = "Update STATIST set KISSZUSATZ = '' "
        gdBase.Execute sSQL, dbFailOnError

    End If
    lDBVersion = 1697

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1697"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV1701()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("OFPO", gdBase) = False Then
        CreateTableT2 "OFPO", gdBase

        sSQL = "Insert into OFPO Select * from rekopf where REDATUM > DATEVALUE(now)- 300 "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update OFPO Set statusbez = 'nicht bezahlt' "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update OFPO set ZAHLUNGSZIEL = Datevalue(REDATUM) + " & 14 & " "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update OFPO set UEBERSCHREITUNG = cstr(Datevalue(now)- Datevalue(ZAHLUNGSZIEL)) + ' Tage überschritten'"
        gdBase.Execute sSQL, dbFailOnError
            
    End If
    lDBVersion = 1701

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1701"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV1702()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("BWWBONTEXTE", gdBase) = False Then
        CreateTableT2 "BWWBONTEXTE", gdBase
    Else

        If SpalteInTabellegefundenNEW("BWWBONTEXTE", "KUNDBI", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "BWWBONTEXTE", "KUNDBI", "BIT", gdBase
    End If
    
    sSQL = "Update BWWBONTEXTE Set KUNDBI = False"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1702
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1702"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV1705()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("INTERART", gdBase) = True Then
    
        loeschNEW "INTERARTB", gdBase
        sSQL = "Select * into INTERARTB from INTERART"
        gdBase.Execute sSQL, dbFailOnError
    
        loeschNEW "INTERART", gdBase
        CreateTableT2 "INTERART", gdBase
        
        sSQL = "INSERT Into INTERART Select * from INTERARTB"
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Create Index ARTNR on INTERART (ARTNR)"
        gdBase.Execute sSQL, dbFailOnError
        
        loeschNEW "INTERARTB", gdBase
    Else
        CreateTableT2 "INTERART", gdBase
    End If
    
    If NewTableSuchenDBKombi("INTERART", gdBase) = False Then
        CreateTableT2 "INTERART", gdBase
    Else
        If SpalteInTabellegefundenNEW("INTERART", "VERSAND", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "INTERART", "VERSAND", "TEXT(15)", gdBase
        SpalteAnfuegenNEW "INTERART", "WARNTEXT", "TEXT(100)", gdBase
    End If
    
    sSQL = "Update INTERART Set VERSAND = ''"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1705
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1705"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1718()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KUBONUS", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KUBONUS", "BIT", gdBase
    
    sSQL = "Update KASSEIN Set KUBONUS = True "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1718

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1718"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1728()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("STATIST", gdBase) = False Then
        CreateTable "STATIST", gdBase
    Else
        If SpalteInTabellegefundenNEW("STATIST", "PERMAIL", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "STATIST", "PERMAIL", "BIT", gdBase

        sSQL = "Update STATIST set PERMAIL = false "
        gdBase.Execute sSQL, dbFailOnError

    End If
    lDBVersion = 1728

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1728"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV1745()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2012 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1745

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1745"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1759()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("BONUSNR", gdBase) = False Then
        CreateTable "BONUSNR", gdBase
    Else
        If SpalteInTabellegefundenNEW("BONUSNR", "BELEGNR", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "BONUSNR", "BELEGNR", "LONG", gdBase

        sSQL = "Update BONUSNR set BELEGNR = 0 "
        gdBase.Execute sSQL, dbFailOnError

    End If
    
    lDBVersion = 1759

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1759"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1781()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "MITPREIS", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "MITPREIS", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set MITPREIS = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1781

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1781"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1788()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "EDITKASSNR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "EDITKASSNR", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set EDITKASSNR = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1788

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1788"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1803()
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    cPfad = gcDBPfad    'dabapfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    Kill cPfad & "PICTURE\Artikel\*.*"
    
    lDBVersion = 1803

Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV1803"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
    
        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV1804()
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    cPfad = gcDBPfad    'dabapfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If

    Kill cPfad & "PICTURE\Artikel\*.*"
    
    lDBVersion = 1804

Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV1804"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
    
        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV1813()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("TERMINE", "BEDEINTRAG", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "TERMINE", "BEDEINTRAG", "INTEGER", gdBase
   
    sSQL = "Update TERMINE Set BEDEINTRAG = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1813

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1813"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1814()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "AUTOSEEK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "AUTOSEEK", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set AUTOSEEK = TRUE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1814

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1814"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1822()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZOLLARTBEZ", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ZOLLARTBEZ", "Text(50)", gdBase
   
    sSQL = "Update KASSEIN Set ZOLLARTBEZ = 'Parfümerieartikel' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1822

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1822"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1832()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("GFKSTAT", gdBase) = True Then
        
    
    
        If SpalteInTabellegefundenNEW("GFKSTAT", "AUTOMATIK", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "GFKSTAT", "AUTOMATIK", "BIT", gdBase
        SpalteAnfuegenNEW "GFKSTAT", "EMAIL", "Text(100)", gdBase
        SpalteAnfuegenNEW "GFKSTAT", "LASTDATE", "DATETIME", gdBase
    
        sSQL = "Update GFKSTAT Set EMAIL = '',Automatik = FALSE "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    lDBVersion = 1832

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1832"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub

Public Sub DbCheckV1833()
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad           As String
    
    cPfad = gcDBPfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "SAFE.MDB"
    
    Kill cPfad
    
    lDBVersion = 1833

Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "DbCheckV1833"
        Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."
    
        Fehlermeldung1
    End If
End Sub
Public Sub DbCheckV1837()
    On Error GoTo LOKAL_ERROR
    
    loeschNEW "TABCODE", gdBase
    CreateTableT2 "TABCODE", gdBase
    
    InsertTabCode 2, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 30, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 40, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 50, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 60, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 70, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 31, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 41, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 51, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 61, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 71, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 32, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 42, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 52, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 62, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 72, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 33, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 43, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 53, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 63, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 73, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 34, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 44, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 54, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 64, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 74, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 35, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 45, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 55, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 65, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 75, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 36, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 46, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 56, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 66, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 76, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 37, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 47, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 57, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 67, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 77, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 38, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 48, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 58, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 68, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 78, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 39, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 49, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 59, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 69, "a", "s", "d", "f", "g", "h", "j", "k", "l", "ö"
    InsertTabCode 79, "q", "w", "e", "r", "t", "z", "u", "i", "o", "p"
    InsertTabCode 8, "y", "x", "c", "v", "b", "n", "m", ",", ".", "-"
    
    lDBVersion = 1837

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1837"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1855()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = " Delete from Tablay" & srechnertab & " where tabname = 'STADAPRI'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1855

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1855"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1858()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("BWWBonTexte", gdBase) = True Then
        
        If SpalteInTabellegefundenNEW("BWWBonTexte", "BONUSARTNR", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "BWWBonTexte", "BONUSARTNR", "LONG", gdBase
        
    
        sSQL = "Update BWWBonTexte Set BONUSARTNR = 0 "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    lDBVersion = 1858

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1858"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1860()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2013 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1860

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1860"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1868()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "HENKEL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "HENKEL", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set HENKEL = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1868

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1868"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1869()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "PLZGEBIET", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "PLZGEBIET", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set PLZGEBIET = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1869

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1869"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub

Public Sub DbCheckV1889()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("DATEVIP", gdBase) = False Then
        
        sSQL = "Create Table DATEVIP "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " KONTO long "
        sSQL = sSQL & ", KONTOBEZ Text(35) "
        sSQL = sSQL & " ) "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (8400,'Umsatz volle MwSt') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (8300,'Umsatz erm MwSt') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (8200,'Umsatz ohne MwSt') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1360,'Kreditkarten Eurocard') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1360,'Kreditkarten Amex') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1360,'Kreditkarten Visa') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1360,'Karte EC/ELV') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1410,'Kreditverkauf') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1361,'Geldtransit zur Bank') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (4900,'Ausgaben') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (8401,'Kassendifferenzen') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1719,'Gutscheine') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1719,'VK Gutschein über Bar') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1719,'VK Gutschein über Kredite') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1719,'VK Gutschein über Karte') "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Insert into DATEVIP (Konto,KONTOBEZ) values (1719,'VK Gutschein über Gutschein') "
        gdBase.Execute sSQL, dbFailOnError

    End If
    
    lDBVersion = 1889

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1889"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1909()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim i           As Integer
    Dim sStandText(17) As String

    If NewTableSuchenDBKombi("DATEVALLG", gdBase) = True Then
    
        sSQL = "Insert into DATEVALLG (KONTOBEZ) values ('Einzahlungen') "
        gdBase.Execute sSQL, dbFailOnError
        
    Else
    
        CreateTableT2 "DATEVALLG", gdBase
    
        sStandText(0) = "Umsatz volle MwSt"
        sStandText(1) = "Umsatz erm MwSt"
        sStandText(2) = "Umsatz ohne MwSt"
        sStandText(3) = "Kreditkarten Amex"
        sStandText(4) = "Kreditkarten Eurocard"
        sStandText(5) = "Kreditkarten Visa"
        sStandText(6) = "Karte EC/ELV"
        sStandText(7) = "Kreditverkauf"
        sStandText(8) = "Geldtransit zur Bank"
        sStandText(9) = "Ausgaben"
        sStandText(10) = "Kassendifferenzen"
        sStandText(11) = "Gutscheine"
        
        sStandText(12) = "nicht umsrel. VK"
        sStandText(13) = "VK Gutschein über Bar"
        sStandText(14) = "VK Gutschein über Kredite"
        sStandText(15) = "VK Gutschein über Karte"
        sStandText(16) = "VK Gutschein über Gutschein"
        sStandText(17) = "Einzahlungen"
        
        For i = 0 To 17
            sSQL = "Delete from DATEVALLG where KONTOBEZ = '" & sStandText(i) & "'"
            gdBase.Execute sSQL, dbFailOnError
            
            sSQL = "Insert into DATEVALLG (KONTOBEZ) values ('" & sStandText(i) & "') "
            gdBase.Execute sSQL, dbFailOnError
        Next i
        
    End If
    
    lDBVersion = 1909

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1909"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1921()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("GESCHWART", gdBase) = False Then
        CreateTableT2 "GESCHWART", gdBase
    Else
        If SpalteInTabellegefundenNEW("GESCHWART", "IMETI", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "GESCHWART", "IMETI", "BIT", gdBase

        sSQL = "Update GESCHWART set IMETI = true "
        gdBase.Execute sSQL, dbFailOnError

    End If
    
    lDBVersion = 1921

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1921"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1923()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If NewTableSuchenDBKombi("LASTFOCUS", gdBase) = False Then
        CreateTableT2 "LASTFOCUS", gdBase
    Else
        If SpalteInTabellegefundenNEW("LASTFOCUS", "SORTIERUNG", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "LASTFOCUS", "SORTIERUNG", "Text (50)", gdBase

        sSQL = "Update LASTFOCUS set Sortierung = ' order by MOPREIS, BEZEICH ' "
        gdBase.Execute sSQL, dbFailOnError

    End If
    
    lDBVersion = 1923

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1923"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1934()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String

    If SpalteInTabellegefundenNEW("FIRMA", "BIC", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "FIRMA", "BIC", "Text (15)", gdBase
    SpalteAnfuegenNEW "FIRMA", "IBAN", "Text (30)", gdBase

    sSQL = "Update FIRMA set BIC = '',IBAN ='' "
    gdBase.Execute sSQL, dbFailOnError

    lDBVersion = 1934

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1934"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1938()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("RETOURE", gdBase) = False Then
        CreateTable "RETOURE", gdBase
    Else

        If SpalteInTabellegefundenNEW("RETOURE", "AENGRUND", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "RETOURE", "AENGRUND", "TEXT(20)", gdBase

        sSQL = "Update RETOURE set AENGRUND = '' "
        gdBase.Execute sSQL, dbFailOnError

    End If
    lDBVersion = 1938

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1938"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV1940()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("PFLEGORT", gdBase) = False Then
        CreateTable "PFLEGORT", gdBase
    Else

        If SpalteInTabellegefundenNEW("PFLEGORT", "ANZEIGEN", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "PFLEGORT", "ANZEIGEN", "BIT", gdBase

        sSQL = "Update PFLEGORT set ANZEIGEN = TRUE "
        gdBase.Execute sSQL, dbFailOnError

    End If
    lDBVersion = 1940

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1940"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1944()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZWEITMONI", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ZWEITMONI", "BIT", gdBase
    

    sSQL = "Update KASSEIN Set ZWEITMONI = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1944

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1944"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1949()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("EDEKE", gdBase) = True Then
        
        If SpalteInTabellegefundenNEW("EDEKE", "BO1", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "EDEKE", "BO1", "BIT", gdBase
        SpalteAnfuegenNEW "EDEKE", "BO2", "BIT", gdBase
        SpalteAnfuegenNEW "EDEKE", "BO3", "BIT", gdBase
    
        sSQL = "Update EDEKE Set BO1 = false "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update EDEKE Set BO2 = false "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update EDEKE Set BO3 = false "
        gdBase.Execute sSQL, dbFailOnError
        
    End If
    
    lDBVersion = 1949

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1949"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1952()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("EDEKE", gdBase) = True Then
        
        If SpalteInTabellegefundenNEW("EDEKE", "BO4", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "EDEKE", "BO4", "BIT", gdBase
        
        sSQL = "Update EDEKE Set BO4 = false "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    lDBVersion = 1952

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1952"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1956()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KUNPFLEG", "ALLERGIEN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLEG", "ALLERGIEN", "MEMO", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "ERKRANK", "MEMO", gdBase
   
    sSQL = "Update KUNPFLEG Set ALLERGIEN = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KUNPFLEG Set ERKRANK = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1956

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1956"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1957()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNPFLEG", "FNAGEL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLEG", "FNAGELD", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "FNAGEL", "Text(50)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "FUSS", "Text(50)", gdBase
    
    SpalteAnfuegenNEW "KUNPFLEG", "NAGELINFO", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "FUSSINFO", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "SCHUHGR", "Text(10)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "EINLAGEHERST", "BIT", gdBase
    
    sSQL = "Update KUNPFLEG Set FNAGELD = '' ,FNAGEL = '',FUSS = '', NAGELINFO = '' ,FUSSINFO = '',SCHUHGR = '',EINLAGEHERST = true"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1957

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1957"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1958()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNPFLEG", "RISIKEN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLEG", "RISIKEN", "Text(10)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "FINGERINFO", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "TIPTYP", "Text(250)", gdBase
    
    sSQL = "Update KUNPFLEG Set RISIKEN = '' , FINGERINFO = '' , TIPTYP = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1958

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1958"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1959()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNPFLGH", "NAGELLACK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLGH", "NAGELLACK", "Text(250)", gdBase
   
    lDBVersion = 1959

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1959"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1961()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("TERM_STD", "ARTNR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "TERM_STD", "ARTNR", "INTEGER", gdBase
   
    sSQL = "Update TERM_STD Set ARTNR = 0"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1961

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1961"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1962()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "RETVK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "RETVK", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set RETVK = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1962

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1962"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1968()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNPFLEG", "VERPRONA", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLEG", "VERPRONA", "Text(250)", gdBase
    SpalteAnfuegenNEW "KUNPFLEG", "VERPROFU", "Text(250)", gdBase
    
    sSQL = "Update KUNPFLEG Set VERPRONA = '' , VERPROFU = ''  "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1968

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1968"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1969()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("OPENINGS", "TERMINANLAGE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "OPENINGS", "TERMINANLAGE", "Text(15)", gdBase
    
    sSQL = "Update OPENINGS Set TERMINANLAGE = 'ohne Begrenzung' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1969

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1969"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1970()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If SpalteInTabellegefundenNEW("KUNPFLGH", "BEHANDLUNG", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNPFLGH", "BEHANDLUNG", "Text(50)", gdBase
   
    lDBVersion = 1970

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1970"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1979()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If NewTableSuchenDBKombi("TERMDEL", gdBase) = True Then
        If SpalteInTabellegefundenNEW("TERMDEL", "ERSTBED", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "TERMDEL", "ERSTBED", "integer", gdBase
        SpalteAnfuegenNEW "TERMDEL", "DAUER", "double", gdBase
        SpalteAnfuegenNEW "TERMDEL", "BEGINDAT", "DATETIME", gdBase
        SpalteAnfuegenNEW "TERMDEL", "BEGINZEIT", "Text(8)", gdBase
        
    End If
   
    lDBVersion = 1979

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1979"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2006()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If NewTableSuchenDBKombi("FEIERTAGE", gdBase) = False Then
        CreateTableT2 "FEIERTAGE", gdBase
    
        'bundesweit fix
        insert_Feiertag "01.01.", "", "Neujahr", 1, 1
        insert_Feiertag "01.05.", "", "Tag der Arbeit", 1, 1
        insert_Feiertag "03.10.", "", "Tag der Deutschen Einheit", 1, 1
        insert_Feiertag "25.12.", "", "1. Weihnachtstag", 1, 1
        insert_Feiertag "26.12.", "", "2. Weihnachtstag", 1, 1
        
        'bundesweit beweglich
        insert_Feiertag "18.04.", "2014", "Karfreitag", 1, 1
        insert_Feiertag "04.04.", "2015", "Karfreitag", 1, 1
        insert_Feiertag "25.03.", "2016", "Karfreitag", 1, 1
        
        
        insert_Feiertag "21.04.", "2014", "Ostermontag", 1, 1
        insert_Feiertag "06.04.", "2015", "Ostermontag", 1, 1
        insert_Feiertag "28.03.", "2016", "Ostermontag", 1, 1
        
        insert_Feiertag "29.05.", "2014", "Christi Himmelfahrt", 1, 1
        insert_Feiertag "14.05.", "2015", "Christi Himmelfahrt", 1, 1
        insert_Feiertag "05.05.", "2016", "Christi Himmelfahrt", 1, 1
        
        insert_Feiertag "09.06.", "2014", "Pfingstmontag", 1, 1
        insert_Feiertag "25.05.", "2015", "Pfingstmontag", 1, 1
        insert_Feiertag "16.05.", "2016", "Pfingstmontag", 1, 1
        
        
        'Nicht bundesweit fix
        insert_Feiertag "06.01.", "", "Heilige Drei Könige", 0, 0
        insert_Feiertag "15.08.", "", "Mariä Himmelfahrt", 0, 0
        insert_Feiertag "31.10.", "", "Reformationstag", 0, 0
        insert_Feiertag "01.11.", "", "Allerheiligen", 0, 0
        
        'Nicht bundesweit beweglich
        insert_Feiertag "19.06.", "2014", "Fronleichnam", 0, 0
        insert_Feiertag "04.06.", "2015", "Fronleichnam", 0, 0
        insert_Feiertag "26.05.", "2016", "Fronleichnam", 0, 0
        
        insert_Feiertag "20.11.", "2013", "Buß- und Bettag", 0, 0
        insert_Feiertag "19.11.", "2014", "Buß- und Bettag", 0, 0
        insert_Feiertag "18.11.", "2015", "Buß- und Bettag", 0, 0
        insert_Feiertag "16.11.", "2016", "Buß- und Bettag", 0, 0
    
    End If
   
    lDBVersion = 2006

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2006"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV1997()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZOLLmMWST", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ZOLLmMWST", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "ZOLLonlyFirstPage", "BIT", gdBase
   
    
    sSQL = "Update KASSEIN Set ZOLLmMWST = False "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set ZOLLonlyFirstPage = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 1997

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV1997"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2009()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL  As String
    
    If NewTableSuchenDBKombi("GARANTIE", gdBase) = True Then
        If SpalteInTabellegefundenNEW("GARANTIE", "GEDRUCKT", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "GARANTIE", "GEDRUCKT", "BIT", gdBase
        
        sSQL = "Update GARANTIE Set GEDRUCKT = True "
        gdBase.Execute sSQL, dbFailOnError
    End If
   
    lDBVersion = 2009

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2009"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2026()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2014 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2026

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2026"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2032()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "Handelsspanne_Ausblenden", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "Handelsspanne_Ausblenden", "BIT", gdBase
    
    sSQL = "Update KASSEIN Set Handelsspanne_Ausblenden = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2032

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2032"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub

Public Sub DbCheckV2042()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("REKOPF", gdBase) = True Then
        If SpalteInTabellegefundenNEW("REKOPF", "KOMMENTAR", gdBase) = True Then
            SpalteAnfuegenNEW "REKOPF", "KOMMENTAR_TEMP", "memo", gdBase
            
            sSQL = "Update REKOPF Set KOMMENTAR_TEMP = KOMMENTAR "
            gdBase.Execute sSQL, dbFailOnError
            
            sSQL = "alter table REKOPF drop column KOMMENTAR"
            gdBase.Execute sSQL, dbFailOnError
            
            SpalteAnfuegenNEW "REKOPF", "KOMMENTAR", "memo", gdBase
            
            sSQL = "Update REKOPF Set KOMMENTAR = KOMMENTAR_TEMP "
            gdBase.Execute sSQL, dbFailOnError
            
            sSQL = "alter table REKOPF drop column KOMMENTAR_TEMP"
            gdBase.Execute sSQL, dbFailOnError
            
        Else
            SpalteAnfuegenNEW "REKOPF", "KOMMENTAR", "memo", gdBase
        End If
        
        If SpalteInTabellegefundenNEW("REKOPF", "IHR_ZEICHEN", gdBase) = False Then
            SpalteAnfuegenNEW "REKOPF", "IHR_ZEICHEN", "Text(30)", gdBase
            SpalteAnfuegenNEW "REKOPF", "ERSTELLT_VON", "Text(30)", gdBase
            SpalteAnfuegenNEW "REKOPF", "ZAHLUNGS_ZIEL", "Text(250)", gdBase
        End If
    Else
        CreateTableT2 "REKOPF", gdBase
    End If
    
    If NewTableSuchenDBKombi("OFPO", gdBase) = True Then
        If SpalteInTabellegefundenNEW("OFPO", "KOMMENTAR", gdBase) = True Then
            SpalteAnfuegenNEW "OFPO", "KOMMENTAR_TEMP", "memo", gdBase
            
            sSQL = "Update OFPO Set KOMMENTAR_TEMP = KOMMENTAR "
            gdBase.Execute sSQL, dbFailOnError
            
            sSQL = "alter table OFPO drop column KOMMENTAR"
            gdBase.Execute sSQL, dbFailOnError
            
            SpalteAnfuegenNEW "OFPO", "KOMMENTAR", "memo", gdBase
            
            sSQL = "Update OFPO Set KOMMENTAR = KOMMENTAR_TEMP "
            gdBase.Execute sSQL, dbFailOnError
            
            sSQL = "alter table OFPO drop column KOMMENTAR_TEMP"
            gdBase.Execute sSQL, dbFailOnError
            
        Else
            SpalteAnfuegenNEW "OFPO", "KOMMENTAR", "memo", gdBase
        End If
        
        If SpalteInTabellegefundenNEW("OFPO", "IHR_ZEICHEN", gdBase) = False Then
            SpalteAnfuegenNEW "OFPO", "IHR_ZEICHEN", "Text(30)", gdBase
            SpalteAnfuegenNEW "OFPO", "ERSTELLT_VON", "Text(30)", gdBase
            SpalteAnfuegenNEW "OFPO", "ZAHLUNGS_ZIEL", "Text(250)", gdBase
        End If
    Else
        CreateTableT2 "OFPO", gdBase
    End If
    
    
    
    
    
    
    
    sSQL = "Update KASSEIN Set Handelsspanne_Ausblenden = False "
    gdBase.Execute sSQL, dbFailOnError
    
    
    lDBVersion = 2042

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2042"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2043()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String

    If NewTableSuchenDBKombi("BONPAUSE", gdBase) = False Then
        CreateTable "BONPAUSE", gdBase
    Else

        If SpalteInTabellegefundenNEW("BONPAUSE", "ADATE", gdBase) = False Then
            SpalteAnfuegenNEW "BONPAUSE", "ADATE", "DATETIME", gdBase
        End If

        If SpalteInTabellegefundenNEW("BONPAUSE", "AZEIT", gdBase) = False Then
            SpalteAnfuegenNEW "BONPAUSE", "AZEIT", "TEXT(8)", gdBase
        End If

    End If
    lDBVersion = 2043

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2043"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2048()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("TERMINE", "NEU", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "TERMINE", "NEU", "BIT", gdBase
   
    sSQL = "Update TERMINE Set NEU = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2048

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2048"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2049()
    On Error GoTo LOKAL_ERROR
    
    CheckThis
    
    lDBVersion = 2049

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2049"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2055()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KUBONUS_WENN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KUBONUS_WENN", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KUBONUS_SCHWELLE", "single", gdBase
    
    sSQL = "Update KASSEIN Set KUBONUS_WENN = True "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set KUBONUS_SCHWELLE = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2055

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2055"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2073()
    On Error GoTo LOKAL_ERROR
    
    erstelle_GDPdU
    
    lDBVersion = 2073

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2073"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2089()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "NOBONPAE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "NOBONPAE", "BIT", gdBase
    

    sSQL = "Update KASSEIN Set NOBONPAE = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2089

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2089"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2091()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "NOKUBONUS_AGRAB", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "NOKUBONUS_AGRAB", "BIT", gdBase
    
    sSQL = "Update KASSEIN Set NOKUBONUS_AGRAB = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2091

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2091"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2096()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BARANZ", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BARANZ", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set BARANZ = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2096

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2096"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2111()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("WEBSHOP_E", gdBase) = False Then
        CreateTableT2 "WEBSHOP_E", gdBase
    Else
        If SpalteInTabellegefundenNEW("WEBSHOP_E", "MySQL_PHP_SCRIPT_PFAD", gdBase) Then Exit Sub
    
        SpalteAnfuegenNEW "WEBSHOP_E", "MySQL_PHP_SCRIPT_PFAD", "TEXT(255)", gdBase
    
        
        sSQL = "Update WEBSHOP_E Set MySQL_PHP_SCRIPT_PFAD = '' "
        gdBase.Execute sSQL, dbFailOnError
        
        gsMySQL_PHP_SCRIPT_PFAD = ""

    End If

    WKVersion = 2111
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2111"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & WKVersion & " ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub DbCheckV2142()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("BWWBonTexte", gdBase) = True Then
        
        If SpalteInTabellegefundenNEW("BWWBonTexte", "GDAUER", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "BWWBonTexte", "GDAUER", "LONG", gdBase
        
    
        sSQL = "Update BWWBonTexte Set GDAUER = 0 "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    lDBVersion = 2142

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2142"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2153()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SAVEREPORT", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SAVEREPORT", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set SAVEREPORT = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2153

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2153"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2171()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("ETIDRU", "LFNR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "ETIDRU", "LFNR", "autoincrement", gdBase
   
   
    
    lDBVersion = 2171

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2171"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2173()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("StammFTP", gdBase) Then
'        sSQL = "Update StammFTP Set FTPoft = 0 "
'        gdBase.Execute sSQL, dbFailOnError
    End If
    
    lDBVersion = 2173

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2173"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2206()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2015 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2206

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2206"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2208()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ARTLIEF", gdBase) = True Then
        
        If SpalteInTabellegefundenNEW("ARTLIEF", "EXDAT", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "ARTLIEF", "EXDAT", "DATETIME", gdBase
        SpalteAnfuegenNEW "ARTLIEF", "RKZ", "TEXT (1)", gdBase
        
        sSQL = "Update ARTLIEF inner join Artikel on ARTLIEF.artnr = artikel.artnr "
        sSQL = sSQL & " set artlief.rkz = artikel.rkz , artlief.exdat = artikel.exdat "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update ARTLIEF set RKZ = 'N' where RKZ = ''"
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update ARTLIEF set RKZ = 'N' where RKZ is null "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
   
    
    lDBVersion = 2208

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2208"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub

Public Sub DbCheckV2311()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("ARTLIEF", gdBase) = True Then
        
       
        
        sSQL = "Update ARTLIEF set RKZ = 'N' where RKZ = ''"
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update ARTLIEF set RKZ = 'N' where RKZ is null "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
   
    
    lDBVersion = 2311

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2311"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2234()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("AFCSTATP", gdBase) = True Then
        If SpalteInTabellegefundenNEW("AFCSTATP", "SENDOK", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "AFCSTATP", "SENDOK", "BIT", gdBase
        
        sSQL = "Update AFCSTATP set SENDOK = false "
        gdBase.Execute sSQL, dbFailOnError
    End If
   
    
    lDBVersion = 2234

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2234"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2225()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("Artikelsic", gdBase) = False Then
        
        CreateArtikelsic
    
    End If
   
    
    lDBVersion = 2225

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2225"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2243()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "VOREINPLZ1", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "VOREINPLZ1", "Text(5)", gdBase
    SpalteAnfuegenNEW "KASSEIN", "VOREINPLZ2", "Text(5)", gdBase
   
    sSQL = "Update KASSEIN Set VOREINPLZ1 = 'PLZ 1' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set VOREINPLZ2 = 'PLZ 2' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2243

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2243"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2248()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    
    
    If SpalteInTabellegefundenNEW("KASSEIN", "RRArtnr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "RRArtnr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set RRArtnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2248

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2248"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2259()
    On Error GoTo LOKAL_ERROR
    
    erstelle_KASSBON
    
    lDBVersion = 2259

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2259"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2293()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("TAUSCH", "TRANSPACK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "TAUSCH", "TRANSPACK", "SINGLE", gdBase
    
    sSQL = "Update TAUSCH set TRANSPACK = 0 "
    gdBase.Execute sSQL, dbFailOnError
   
    lDBVersion = 2293

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2293"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2305()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "EinfacheZollErstattung", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "EinfacheZollErstattung", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set EinfacheZollErstattung = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2305

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2305"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2307()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BestDateien", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BestDateien", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set BestDateien = false "
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    lDBVersion = 2307

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2307"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2318()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "AlterGutschein_Ausblenden", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "AlterGutschein_Ausblenden", "BIT", gdBase
    
    sSQL = "Update KASSEIN Set AlterGutschein_Ausblenden = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2318

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2318"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2329()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("MBORDER", gdBase) = False Then
        CreateTableT2 "MBORDER", gdBase
    Else
        sSQL = "Update MBORDER Set SENDOK = True "
        gdBase.Execute sSQL, dbFailOnError
    End If
    
    
    
    lDBVersion = 2329

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2329"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2335()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "FarbebeiPark", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "FarbebeiPark", "INTEGER", gdBase
   
    sSQL = "Update KASSEIN Set FarbebeiPark = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    lDBVersion = 2335

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2335"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2344()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "GSArtnr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "GSArtnr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set GSArtnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2344

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2344"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2364()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2016 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2364

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2364"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2371()
    On Error GoTo LOKAL_ERROR
    
    loeschNEW "VEDESFTP", gdBase
    
    lDBVersion = 2371

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2371"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2405()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("LAGERPLATZ", gdBase) = False Then
        CreateTable "LAGERPLATZ", gdBase
    Else
        sSQL = "Alter table LAGERPLATZ add LAGERP7 double "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update LAGERPLATZ Set LAGERP7 = LAGERP "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Alter table LAGERPLATZ DROP LAGERP "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Alter table LAGERPLATZ add LAGERP double "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update LAGERPLATZ Set LAGERP = LAGERP7 "
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Alter table LAGERPLATZ DROP LAGERP7 "
        gdBase.Execute sSQL, dbFailOnError
    End If
    

    
    
    lDBVersion = 2405

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2405"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2440()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZEITUNGSSPANNE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ZEITUNGSSPANNE", "Double", gdBase
   
    sSQL = "Update KASSEIN Set ZEITUNGSSPANNE = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2440

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2440"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2449()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "PrimLinr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "PrimLinr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set PrimLinr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2449

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2449"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2455()
    On Error GoTo LOKAL_ERROR
    
    loeschNEW "ETIPROT", gdBase
    CreateTable "ETIPROT", gdBase
    
    lDBVersion = 2455

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2455"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2463()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("RETPRINT", "LIEFBEZ", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "RETPRINT", "LIEFBEZ", "Text(35)", gdBase
    
    SpalteAnfuegenNEW "RETPRINT", "LIBESNR", "Text(13)", gdBase
    SpalteAnfuegenNEW "RETPRINT", "KUNDNR", "Text(15)", gdBase
    SpalteAnfuegenNEW "RETPRINT", "PLZ", "Text(7)", gdBase
    
    SpalteAnfuegenNEW "RETPRINT", "STADT", "Text(30)", gdBase
    SpalteAnfuegenNEW "RETPRINT", "STRASSE", "Text(30)", gdBase
    SpalteAnfuegenNEW "RETPRINT", "Firma_Name", "Text(50)", gdBase
    
    SpalteAnfuegenNEW "RETPRINT", "Firma_Strasse", "Text(50)", gdBase
    SpalteAnfuegenNEW "RETPRINT", "Firma_Plz", "Text(7)", gdBase
    SpalteAnfuegenNEW "RETPRINT", "Firma_Ort", "Text(50)", gdBase
    
   
    lDBVersion = 2463

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2463"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2465()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SPERRFRAGE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SPERRFRAGE", "Text(250)", gdBase
   
   
    Dim ctmpSp As String
    ctmpSp = "(Ja: Keine weitere Lieferung mehr (MB wird auf 0 gesetzt))" & vbCrLf
    ctmpSp = ctmpSp & "(Nein: MB bleibt unverändert)" & vbCrLf
    
    
    sSQL = "Update KASSEIN Set SPERRFRAGE = '" & ctmpSp & "' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2465

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2465"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2467()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "PAKETLINR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "PAKETLINR", "Long", gdBase
   
    sSQL = "Update KASSEIN Set PAKETLINR = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2467

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2467"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2470()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    loeschNEW "IPSTAT", gdBase
    
    
    
    lDBVersion = 2470

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2470"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2474()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SPEZARTIKEL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SPEZARTIKEL", "TEXT(250)", gdBase
   
    sSQL = "Update KASSEIN Set SPEZARTIKEL = ''"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2474
    


Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2474"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2484()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "COUPON", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "COUPON", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set COUPON = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2484

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2484"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2494()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As DAO.Recordset
    
    
        
    
    
    If NewTableSuchenDBKombi("STAFFEL_KVK_ARTIKEL", gdBase) = False Then
        CreateTableT2 "STAFFEL_KVK_ARTIKEL", gdBase
    End If
    
    If NewTableSuchenDBKombi("STAFFEL_KVK_GRUPPE", gdBase) = False Then
        CreateTableT2 "STAFFEL_KVK_GRUPPE", gdBase
    End If
    
    Dim lartnr As Long
    Dim iMenge As Integer
    Dim dKVK As Double
    Dim lStaffNr As Long
    Dim sStaffName As String
    
    lStaffNr = 0
    sStaffName = ""
    
    If NewTableSuchenDBKombi("STAFFELPRKVK", gdBase) = True Then
        sSQL = "Select * from STAFFELPRKVK "
        Set rsrs = gdBase.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
            rsrs.MoveFirst
            Do While Not rsrs.EOF
            
                lartnr = 0
                iMenge = 0
                dKVK = 0
                
                lStaffNr = lStaffNr + 1
                
                sStaffName = "Staffel" & lStaffNr
            
                If Not IsNull(rsrs!artnr) Then
                    lartnr = rsrs!artnr
                End If
                
                If Not IsNull(rsrs!Menge) Then
                    iMenge = rsrs!Menge
                End If
                
                If Not IsNull(rsrs!KVKPR1) Then
                    dKVK = rsrs!KVKPR1
                End If
                
                sSQL = "Insert into STAFFEL_KVK_ARTIKEL (STAFFNR,ARTNR)"
                sSQL = sSQL & " values "
                sSQL = sSQL & " ( " & lStaffNr & " "
                sSQL = sSQL & " , " & lartnr & " "
                sSQL = sSQL & " ) "
                gdBase.Execute sSQL, dbFailOnError
                
                sSQL = "Insert into STAFFEL_KVK_GRUPPE (STAFFNR,STAFFNAME,KVKPR1,MENGE)"
                sSQL = sSQL & " values "
                sSQL = sSQL & " ( " & lStaffNr & " "
                sSQL = sSQL & " , '" & sStaffName & "' "
                sSQL = sSQL & " , '" & dKVK & "' "
                sSQL = sSQL & " , " & iMenge & " "
                sSQL = sSQL & " ) "
                gdBase.Execute sSQL, dbFailOnError
                
                
                
                
                
                rsrs.MoveNext
            Loop
        End If
        rsrs.Close: Set rsrs = Nothing
        
    End If
    
    lDBVersion = 2494

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2494"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2499()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "GUSTATTBAR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "GUSTATTBAR", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set GUSTATTBAR = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2499

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2499"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2505()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SpezFotoArtikel", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SpezFotoArtikel", "Long", gdBase
   
    sSQL = "Update KASSEIN Set SpezFotoArtikel = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2505

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2505"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2524()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2017 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2524

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2524"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2528()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZOLLPrintDirekt", gdBase) Then Exit Sub
    
    SpalteAnfuegenNEW "KASSEIN", "ZOLLPrintDirekt", "BIT", gdBase
   
   
    
    sSQL = "Update KASSEIN Set ZOLLPrintDirekt = False "
    gdBase.Execute sSQL, dbFailOnError
    

    
    lDBVersion = 2528

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2528"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2535()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    loeschNEW "BONUS_TEMP", gdBase
    
    sSQL = "Select * into BONUS_TEMP from BONUS_SYS "
    gdBase.Execute sSQL, dbFailOnError
    
    
    loeschNEW "BONUS_SYS", gdBase
    CreateTableT2 "BONUS_SYS", gdBase
    
    sSQL = "Insert into BONUS_SYS select   "
    sSQL = sSQL & " BONUS_NR "
    sSQL = sSQL & ", BONUS_BETRAG "
    sSQL = sSQL & ", BONUS_AUSGABEDAT "
    sSQL = sSQL & ", BONUS_AUSGABEZEIT "
    sSQL = sSQL & ", BONUS_EINLDAT "
    sSQL = sSQL & ", BONUS_EINLZEIT "
    sSQL = sSQL & " from BONUS_TEMP"
    gdBase.Execute sSQL, dbFailOnError
    

   
    sSQL = "Update BONUS_SYS set SENDOK = false "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update BONUS_SYS Set BONUS_AUSGABEFIL = 0"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2535

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2535"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2539()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SPEZBONTEXT", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SPEZBONTEXT", "Memo", gdBase
   
    sSQL = "Update KASSEIN Set SPEZBONTEXT = 'Der Mensch hat wohl täglich Gelegenheit, in Emmendingen und Gundelfingen so gut als in Amsterdam Betrachtungen über den Unbestand aller irdischen Dinge anzustellen, wenn er will, und zufrieden zu werden mit seinem Schicksal, wenn auch nicht viel gebratene Tauben für ihn in der Luft herumfliegen. '"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2539

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2539"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2554()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SPEZBONTEXTU", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SPEZBONTEXTU", "Text(32)", gdBase
    SpalteAnfuegenNEW "KASSEIN", "SPEZBONARTRAB", "Text(5)", gdBase
    
    sSQL = "Update KASSEIN Set SPEZBONTEXTU = 'Überschrift'"
    gdBase.Execute sSQL, dbFailOnError
   
    sSQL = "Update KASSEIN Set SPEZBONARTRAB = '10'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2554

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2554"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2555()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KUWAHLFBIMMER", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KUWAHLFBIMMER", "BIT", gdBase
    
   
    sSQL = "Update KASSEIN Set KUWAHLFBIMMER = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2555

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2555"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV2557()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SPEZBONTEXT2", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SPEZBONTEXT2", "Memo", gdBase
   
    sSQL = "Update KASSEIN Set SPEZBONTEXT2 = 'Der Mensch hat wohl täglich Gelegenheit, in Emmendingen und Gundelfingen so gut als in Amsterdam Betrachtungen über den Unbestand aller irdischen Dinge anzustellen, wenn er will, und zufrieden zu werden mit seinem Schicksal, wenn auch nicht viel gebratene Tauben für ihn in der Luft herumfliegen. '"
    gdBase.Execute sSQL, dbFailOnError
    
    SpalteAnfuegenNEW "KASSEIN", "SPEZBONTEXT3", "Memo", gdBase
   
    sSQL = "Update KASSEIN Set SPEZBONTEXT3 = 'Der Mensch hat wohl täglich Gelegenheit, in Emmendingen und Gundelfingen so gut als in Amsterdam Betrachtungen über den Unbestand aller irdischen Dinge anzustellen, wenn er will, und zufrieden zu werden mit seinem Schicksal, wenn auch nicht viel gebratene Tauben für ihn in der Luft herumfliegen. '"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2557

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2557"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2564()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If Not SpalteInTabellegefundenNEW("AFCSTAT", "NUMSKARTE", gdBase) Then
        SpalteAnfuegenNEW "AFCSTAT", "NUMSKARTE", "double", gdBase
    
        sSQL = "Update AFCSTAT set NUMSKARTE = 0 "
    End If
    
    If Not SpalteInTabellegefundenNEW("AFCSTATP", "NUMSKARTE", gdBase) Then
        SpalteAnfuegenNEW "AFCSTATP", "NUMSKARTE", "double", gdBase
    
        sSQL = "Update AFCSTATP set NUMSKARTE = 0 "
    End If
    
    
    lDBVersion = 2564

Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2564"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV2573()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KUWAHLGESPERRTROT", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KUWAHLGESPERRTROT", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set KUWAHLGESPERRTROT = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2573

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2573"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2579()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BARGELDART", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BARGELDART", "Integer", gdBase
   
    sSQL = "Update KASSEIN Set BARGELDART = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2579

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2579"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2583()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "RABATTAUSNAHMEARTIKEL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "RABATTAUSNAHMEARTIKEL", "TEXT(250)", gdBase
   
    sSQL = "Update KASSEIN Set RABATTAUSNAHMEARTIKEL = ''"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2583

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2583"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2593()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ABRUNDEN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ABRUNDEN", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set ABRUNDEN = TRUE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2593

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2593"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2605()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "RUNDEN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "RUNDEN", "Text(1)", gdBase
    
    
    sSQL = "Update KASSEIN Set RUNDEN = '1' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2605

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2605"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2607()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SCHWELLEWK", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SCHWELLEWK", "double", gdBase
   
    sSQL = "Update KASSEIN Set SCHWELLEWK = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2607

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2607"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2608()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "NURBONUSFRUNDEN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "NURBONUSFRUNDEN", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set NURBONUSFRUNDEN = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2608

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2608"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2631()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "MitMwstAnteile", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "MitMwstAnteile", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set MitMwstAnteile = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2631

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2631"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2642()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "AutoKundnrforKundBest", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "AutoKundnrforKundBest", "Long", gdBase
   
    sSQL = "Update KASSEIN Set AutoKundnrforKundBest = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2642

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2642"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2647()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "NachfragenbeiWGNohnePreis", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "NachfragenbeiWGNohnePreis", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set NachfragenbeiWGNohnePreis = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2647

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2647"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub


Public Sub DbCheckV2657()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "RESTinBAR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "RESTinBAR", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set RESTinBAR = True "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2657

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2657"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2658()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "PLZGEBIET_AuchBeiKUWAHL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "PLZGEBIET_AuchBeiKUWAHL", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set PLZGEBIET_AuchBeiKUWAHL = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2658

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2658"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2670()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("PLZGEBIET", gdBase) = True Then
    
        If SpalteInTabellegefundenNEW("PLZGEBIET", "GELDWERT", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "PLZGEBIET", "GELDWERT", "DOUBLE", gdBase
       
        sSQL = "Update PLZGEBIET Set GELDWERT = 0 "
        gdBase.Execute sSQL, dbFailOnError
    
    End If
    
    lDBVersion = 2670

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2670"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2688()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "FARBKASSE", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "FARBKASSE", "Text(1)", gdBase
    
   
    sSQL = "Update KASSEIN Set FARBKASSE = '1'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2688

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2688"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2701()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("STAFFEL_KVK_GRUPPE", "KVKPR2", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "STAFFEL_KVK_GRUPPE", "KVKPR2", "Double", gdBase
    SpalteAnfuegenNEW "STAFFEL_KVK_GRUPPE", "MENGE2", "Double", gdBase
    SpalteAnfuegenNEW "STAFFEL_KVK_GRUPPE", "KVKPR3", "Double", gdBase
    SpalteAnfuegenNEW "STAFFEL_KVK_GRUPPE", "MENGE3", "Double", gdBase
    
   
    sSQL = "Update STAFFEL_KVK_GRUPPE Set KVKPR2 = 0,KVKPR3 = 0,MENGE2 = 0,MENGE3 = 0"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2701

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2701"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2709()
    On Error GoTo LOKAL_ERROR
    
    If DatendrinSQL("select * from AGNDBF where agn = 134 and AGTEXT = 'DEPOT LIPPEN' ", gdBase) = True Then
    
        If DatendrinSQL("select * from AGNDBF where agn = 119", gdBase) = False Then
            NachtragAGNDBF 119, "DEPOT LIPPENPFLEGE"
        End If
        
        If DatendrinSQL("select * from AGNDBF where agn = 248", gdBase) = False Then
            NachtragAGNDBF 248, "KONSUM DUFTESSENZEN/KERZEN"
        End If
        
    End If
    
    lDBVersion = 2709

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2709"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2713()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    Dim lLinr As Long
    lLinr = ermLinrInZeitE
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZeitungsLinr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ZeitungsLinr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set ZeitungsLinr = " & lLinr & " "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2713

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2713"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2715()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2018 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2715

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2715"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2723()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SpezLottoauszahlartikel", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SpezLottoauszahlartikel", "Long", gdBase
   
    sSQL = "Update KASSEIN Set SpezLottoauszahlartikel = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2723

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2723"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2724()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BonusGrenzeArtnr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BonusGrenzeArtnr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set BonusGrenzeArtnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2724

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2724"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2746()
    On Error GoTo LOKAL_ERROR
    
    CheckIndex "ZUORDEAN", "GPEAN", "", gdBase
    lDBVersion = 2746

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2746"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2747()
    On Error GoTo LOKAL_ERROR
    
    CheckIndex "ARTLIEF", "LEKPR", "", gdBase
    CheckIndex "BESTREST", "ARTNR", "", gdBase
    CheckIndex "ARTMERK", "ARTNR", "", gdBase
    lDBVersion = 2747

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2747"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2748()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "AutoAusSchFiliale", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "AutoAusSchFiliale", "Long", gdBase
   
    sSQL = "Update KASSEIN Set AutoAusSchFiliale = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2748

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2748"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2758()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "MITSTAFFELPREIS", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "MITSTAFFELPREIS", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set MITSTAFFELPREIS = TRUE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2758

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2758"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2767()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KUNDEN", "DS", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KUNDEN", "DS", "BIT", gdBase
   
    sSQL = "Update KUNDEN Set DS = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2767

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2767"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2769()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "DSDRUCKEN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "DSDRUCKEN", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set DSDRUCKEN = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2769

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2769"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2783()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "DSKLEIN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "DSKLEIN", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set DSKLEIN = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2783

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2783"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2784()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    
    If NewTableSuchenDBKombi("DATENSCHUTZ", gdBase) = True Then
    
        If SpalteInTabellegefundenNEW("DATENSCHUTZ", "Element15", gdBase) Then Exit Sub
        SpalteAnfuegenNEW "DATENSCHUTZ", "Element15", "memo", gdBase
        SpalteAnfuegenNEW "DATENSCHUTZ", "Element16", "memo", gdBase
         SpalteAnfuegenNEW "DATENSCHUTZ", "Element17", "memo", gdBase
         SpalteAnfuegenNEW "DATENSCHUTZ", "Element18", "memo", gdBase
         SpalteAnfuegenNEW "DATENSCHUTZ", "Element19", "memo", gdBase
        
         sSQL = "Update DATENSCHUTZ Set Element19 = Element14 "
         gdBase.Execute sSQL, dbFailOnError
         
         sSQL = "Update DATENSCHUTZ Set Element14 = Element13 "
         gdBase.Execute sSQL, dbFailOnError
         
         sSQL = "Update DATENSCHUTZ Set Element13 = Element12 "
         gdBase.Execute sSQL, dbFailOnError
         
         sSQL = "Update DATENSCHUTZ Set Element12 = '' "
         gdBase.Execute sSQL, dbFailOnError
    
    Else
    
        CreateTableT2 "DATENSCHUTZ", gdBase
        
    
    End If
    
    lDBVersion = 2784
    
    

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2784"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2785()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    
    
    If SpalteInTabellegefundenNEW("DATENSCHUTZ", "PflichtNAME", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtNAME", "bit", gdBase
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtVORNAME", "bit", gdBase
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtSTADT", "bit", gdBase
    
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtPLZ", "bit", gdBase
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtSTRASSE", "bit", gdBase
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtGEBDATUM", "bit", gdBase
    
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtMAIL", "bit", gdBase
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtTEL", "bit", gdBase
    SpalteAnfuegenNEW "DATENSCHUTZ", "PflichtMOBIL", "bit", gdBase
   
    
    
    sSQL = "Update DATENSCHUTZ Set PflichtNAME = False "
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update DATENSCHUTZ Set PflichtVORNAME = False "
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update DATENSCHUTZ Set PflichtSTADT = False "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update DATENSCHUTZ Set PflichtPLZ = False "
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update DATENSCHUTZ Set PflichtSTRASSE = False "
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update DATENSCHUTZ Set PflichtGEBDATUM = False "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update DATENSCHUTZ Set PflichtMAIL = False "
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update DATENSCHUTZ Set PflichtTEL = False "
    gdBase.Execute sSQL, dbFailOnError
    sSQL = "Update DATENSCHUTZ Set PflichtMOBIL = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2785
    
    
    


Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2785"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2787()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "MitKundeWahlHinweis", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "MitKundeWahlHinweis", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set MitKundeWahlHinweis = FALSE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2787

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2787"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2791()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "DSMeldungErfolg", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "DSMeldungErfolg", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set DSMeldungErfolg = TRUE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2791

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2791"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2795()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASQL", "DS", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASQL", "DS", "BIT", gdBase
   
    sSQL = "Update KASQL Set DS = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2795

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2795"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2802()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "DS_GEB_DRUCKEN", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "DS_GEB_DRUCKEN", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set DS_GEB_DRUCKEN = TRUE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2802

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2802"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2807()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ECauszahlartnr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ECauszahlartnr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set ECauszahlartnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2807

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2807"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2814()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "kPW", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "kPW", "Text(10)", gdBase
   
    sSQL = "Update KASSEIN Set kPW = 'ß' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2814

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2814"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2820()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("DBEINSTE", "NACHTSTART", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "DBEINSTE", "NACHTSTART", "Text(8)", gdBase
   
    sSQL = "Update DBEINSTE Set NACHTSTART = '' "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2820

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2820"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2832()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KK_VISA", gdBase) Then Exit Sub
    
    
    
    SpalteAnfuegenNEW "KASSEIN", "KK_VISA", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KK_EurocardMastercard", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KK_AmericanExpress", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KK_DinersClub", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KK_ECKarte", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KK_Sonstige", "BIT", gdBase

   
    sSQL = "Update KASSEIN Set KK_VISA = TRUE "
    sSQL = sSQL & ",KK_EurocardMastercard = TRUE "
    sSQL = sSQL & ",KK_AmericanExpress = TRUE "
    sSQL = sSQL & ",KK_DinersClub = TRUE "
    sSQL = sSQL & ",KK_ECKarte = TRUE "
    sSQL = sSQL & ",KK_Sonstige = TRUE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2832

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2832"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub

Public Sub DbCheckV2833()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ECBILD", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ECBILD", "Text(1)", gdBase
    
   
    sSQL = "Update KASSEIN Set ECBILD = '1'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2833

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2833"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub

Public Sub DbCheckV2842()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KREDITZA", "BELEGNR", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KREDITZA", "BELEGNR", "Long", gdBase
    
   
    sSQL = "Update KREDITZA Set BELEGNR = 0"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2842

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2842"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2881()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2019 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2881

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2881"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2885()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KK_AliPay", gdBase) Then Exit Sub
    
    SpalteAnfuegenNEW "KASSEIN", "KK_AliPay", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KK_ApplePay", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KK_GooglePay", "BIT", gdBase
    SpalteAnfuegenNEW "KASSEIN", "KK_PayPal", "BIT", gdBase
    
'    KK_YabandPay
    
    sSQL = "Update KASSEIN Set KK_AliPay = False "
    sSQL = sSQL & ",KK_ApplePay = False "
    sSQL = sSQL & ",KK_GooglePay = False "
    sSQL = sSQL & ",KK_PayPal = False "
    
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2885

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2885"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2892()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KK_YabandPay", gdBase) Then Exit Sub
    
    SpalteAnfuegenNEW "KASSEIN", "KK_YabandPay", "BIT", gdBase
   
    
    sSQL = "Update KASSEIN Set KK_YabandPay = False "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2892

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2892"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub

Public Sub DbCheckV2896()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BonusAuszahlungArtnr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BonusAuszahlungArtnr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set BonusAuszahlungArtnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2896

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2896"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2909()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Update Artikel set EAN = '' where EAN = '9823214133002'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2909

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2909"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2913()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ArtsucheArtFarb", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ArtsucheArtFarb", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set ArtsucheArtFarb = TRUE "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2913

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2913"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2922()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BONGU2J", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BONGU2J", "BIT", gdBase
    
    sSQL = "Update KASSEIN Set BONGU2J = false "
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    lDBVersion = 2922

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2922"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2927()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("LISRT", "DEPOTRABATT1", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "LISRT", "DEPOTRABATT1", "double", gdBase
    
    
    lDBVersion = 2927

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2927"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2931()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("LISRT", "LEK_ABSCHLAG", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "LISRT", "LEK_ABSCHLAG", "double", gdBase
    
    
    lDBVersion = 2931

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2931"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2933()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SMTP_SERVER", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SMTP_SERVER", "Text(50)", gdBase
    SpalteAnfuegenNEW "KASSEIN", "SMTP_USER", "Text(50)", gdBase
    SpalteAnfuegenNEW "KASSEIN", "SMTP_PW", "Text(50)", gdBase
    SpalteAnfuegenNEW "KASSEIN", "SMTP_PORT", "Text(8)", gdBase
    
    
    
   
    sSQL = "Update KASSEIN Set SMTP_SERVER = 'smtp.strato.de'"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set SMTP_USER = 'bestsend@kisswws.de'"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set SMTP_PW = 'Ki55!Ww52020'"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set SMTP_PORT = '587'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2933

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2933"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2935()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SMTP_SSL", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SMTP_SSL", "BIT", gdBase
    
    sSQL = "Update KASSEIN Set SMTP_SSL = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2935

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2935"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2941()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If NewTableSuchenDBKombi("REKOPF", gdBase) = True Then
        If SpalteInTabellegefundenNEW("REKOPF", "SPEZIALSATZ", gdBase) = False Then
            SpalteAnfuegenNEW "REKOPF", "SPEZIALSATZ", "Text(250)", gdBase
        End If
    Else
        CreateTableT2 "REKOPF", gdBase
    End If
    
    If NewTableSuchenDBKombi("OFPO", gdBase) = True Then
        If SpalteInTabellegefundenNEW("OFPO", "SPEZIALSATZ", gdBase) = False Then
            SpalteAnfuegenNEW "OFPO", "SPEZIALSATZ", "Text(250)", gdBase
        End If
    Else
        CreateTableT2 "OFPO", gdBase
    End If
    
    lDBVersion = 2941

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2941"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2968()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "SonderPreisDarstellen", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "SonderPreisDarstellen", "BIT", gdBase
    

    sSQL = "Update KASSEIN Set SonderPreisDarstellen = true "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2968

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2968"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2970()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KeineBestVerWarengru", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KeineBestVerWarengru", "BIT", gdBase
   
    sSQL = "Update KASSEIN Set KeineBestVerWarengru = false "
    gdBase.Execute sSQL, dbFailOnError
    
    
    
    lDBVersion = 2970

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2970"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2977()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "BaganzArtnr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "BaganzArtnr", "Long", gdBase
    SpalteAnfuegenNEW "KASSEIN", "BaganzAr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set BaganzArtnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set BaganzAr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2977

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2977"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV2991()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim cKW As String
    
    cKW = DatePart("ww", DateValue(Now))
    
    sSQL = "delete from masterpro where jahr = 2020 and KW >= " & cKW
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 2991

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV2991"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV3001()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "KUWAHLFBIMMER", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "KUWAHLFBIMMER", "BIT", gdBase
    
   
    sSQL = "Update KASSEIN Set KUWAHLFBIMMER = false "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 3001

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV3001"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Sub DbCheckV3002()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "LieblingArtnr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "LieblingArtnr", "Long", gdBase
    SpalteAnfuegenNEW "KASSEIN", "LieblingAr", "Long", gdBase
   
    sSQL = "Update KASSEIN Set LieblingArtnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set LieblingAr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 3002

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV3002"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV3004()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    
   
    sSQL = "Update Artikel Set EAN = '' where EAN = '9823252055007' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Artikel Set EAN2 = '' where EAN2 = '9823252055007' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Artikel Set EAN3 = '' where EAN3 = '9823252055007' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "delete from artean_k where ean = '9823252055007'"
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 3004

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV3004"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV3015()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "WarenkorbWert", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "WarenkorbWert", "Double", gdBase
    SpalteAnfuegenNEW "KASSEIN", "WarenkorbGR", "Double", gdBase
   
    sSQL = "Update KASSEIN Set WarenkorbWert = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update KASSEIN Set WarenkorbGR = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 3015

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV3015"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV3018()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZehnProzLinr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ZehnProzLinr", "Long", gdBase
    
    sSQL = "Update KASSEIN Set ZehnProzLinr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 3018

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV3018"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub DbCheckV3019()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    If SpalteInTabellegefundenNEW("KASSEIN", "ZehnProzArtnr", gdBase) Then Exit Sub
    SpalteAnfuegenNEW "KASSEIN", "ZehnProzArtnr", "Long", gdBase
    
    sSQL = "Update KASSEIN Set ZehnProzArtnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    lDBVersion = 3019

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DbCheckV3019"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub CheckThis()
    On Error GoTo LOKAL_ERROR
        
    Dim sSQL        As String
    Dim rsrs        As DAO.Recordset
    Dim rsZ         As DAO.Recordset
    Dim cPfad       As String
    
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    cPfad = cPfad & "IN\"
    
    If FileExists(cPfad & "mwst_V.xls") = False Then
        Exit Sub
    End If
    
    loeschNEW "MWST_V", gdBase
    CreateTableT2 "MWST_V", gdBase
        
    Dim dbExcel As Database
    Dim gsExcel50 As String
    gsExcel50 = "Excel 5.0;HDR=yes;IMEX=1;"
    
    Set dbExcel = OpenDatabase(cPfad & "mwst_V.xls", 0, 0, gsExcel50)
    Set rsZ = dbExcel.OpenRecordset("MWST$")
    Set rsrs = gdBase.OpenRecordset("MWST_V")

    If Not rsZ.EOF Then
        rsZ.MoveFirst
        Do While Not rsZ.EOF
            rsrs.AddNew
            
            If Not IsNull(rsZ!EAN) Then
                rsrs!EAN = Trim(Left(rsZ!EAN, 13))
            End If
            
            rsrs!artnr = 0
            rsrs.Update
            
        rsZ.MoveNext
        Loop
    End If
    rsZ.Close: Set rsZ = Nothing
    rsrs.Close: Set rsrs = Nothing
    
    sSQL = "Update mwst_V m inner join artikel a on m.ean = a.ean "
    sSQL = sSQL & " set m.artnr = a.artnr "
    sSQL = sSQL & " where m.artnr = 0"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update mwst_V m inner join artikel a on m.ean = a.ean2 "
    sSQL = sSQL & " set m.artnr = a.artnr "
    sSQL = sSQL & " where m.artnr = 0"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update mwst_V m inner join artikel a on m.ean = a.ean3 "
    sSQL = sSQL & " set m.artnr = a.artnr "
    sSQL = sSQL & " where m.artnr = 0"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Delete from MWST_V where Artnr = 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Kassjour k inner join mwst_V m on k.artnr = m.artnr"
    sSQL = sSQL & " set k.mwst = 'V' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Artikel a inner join mwst_V m on a.artnr = m.artnr"
    sSQL = sSQL & " set a.mwst = 'V' "
    gdBase.Execute sSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "CheckThis"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub insert_Feiertag(sF_Tag_Mon As String, sF_Jahr As String, FBEZ As String, iBUNDESWEIT As Integer, iANWENDEN As Integer)
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    
    sSQL = "Insert into FEIERTAGE (FDAT,FDATJAHR,FEIERTAGBEZ,BUNDESWEIT,ANWENDEN) Values "
    sSQL = sSQL & "( "
    sSQL = sSQL & " '" & sF_Tag_Mon & "'"
    sSQL = sSQL & ", '" & sF_Jahr & "'"
    sSQL = sSQL & ", '" & FBEZ & "'"
    sSQL = sSQL & "," & iBUNDESWEIT & ""
    sSQL = sSQL & "," & iANWENDEN & ""
    sSQL = sSQL & " ) "
    gdBase.Execute sSQL, dbFailOnError

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "insert_Feiertag"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Private Sub InsertTabCode(byStelle As Byte, a1 As String, a2 As String, a3 As String, a4 As String, _
a5 As String, a6 As String, a7 As String, a8 As String, a9 As String, a0 As String)
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    
    sSQL = "Insert into TABCODE (Stelle_Ziffer1,A_1,A_2,A_3,A_4,A_5,A_6,A_7,A_8,A_9,A_0) Values "
    sSQL = sSQL & "(" & byStelle & ""
    sSQL = sSQL & ",'" & a1 & "'"
    sSQL = sSQL & ",'" & a2 & "'"
    sSQL = sSQL & ",'" & a3 & "'"
    sSQL = sSQL & ",'" & a4 & "'"
    sSQL = sSQL & ",'" & a5 & "'"
    sSQL = sSQL & ",'" & a6 & "'"
    sSQL = sSQL & ",'" & a7 & "'"
    sSQL = sSQL & ",'" & a8 & "'"
    sSQL = sSQL & ",'" & a9 & "'"
    sSQL = sSQL & ",'" & a0 & "'"
    sSQL = sSQL & " ) "
    gdBase.Execute sSQL, dbFailOnError

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "InsertTabCode"
    Fehler.gsFehlertext = "Bei dem Datenbankupdate " & lDBVersion & " ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub aktuali_newOFPO(sReNr As String)
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim iZahlZielTage As Integer
    iZahlZielTage = ermZahlZielTage

    sSQL = "Update OFPO Set statusbez = 'nicht bezahlt' "
    sSQL = sSQL & " where SCHLUESSEL = '" & sReNr & "' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update OFPO set ZAHLUNGSZIEL = Datevalue(REDATUM) + " & iZahlZielTage & " "
    sSQL = sSQL & " where SCHLUESSEL = '" & sReNr & "' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update OFPO set UEBERSCHREITUNG = cstr(Datevalue(now)- Datevalue(ZAHLUNGSZIEL)) + ' Tage überschritten'"
    sSQL = sSQL & " where SCHLUESSEL = '" & sReNr & "' "
    gdBase.Execute sSQL, dbFailOnError
        
Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "aktuali_newOFPO"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Private Function ermZahlZielTage() As Integer
On Error GoTo LOKAL_ERROR

ermZahlZielTage = 0

Dim cSQL    As String
Dim rec     As Recordset

If NewTableSuchenDBKombi("E24O", gdApp) Then

    cSQL = " Select ZHLZIEL from E24O "
    Set rec = gdApp.OpenRecordset(cSQL)
    If Not rec.EOF Then
        If Not IsNull(rec!ZHLZIEL) Then
            ermZahlZielTage = rec!ZHLZIEL
        End If
    End If
    rec.Close
End If

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "mdlUpdate"
    Fehler.gsFunktion = "ermZahlZielTage"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermAgnoverBio(lBIOAGN As Long) As Long
On Error GoTo LOKAL_ERROR

ermAgnoverBio = 0

Dim cSQL    As String
Dim rec     As Recordset

cSQL = " Select AGN from BIOGART "
cSQL = cSQL & " where val(BIOAGN) = " & lBIOAGN & " "
Set rec = gdBase.OpenRecordset(cSQL)
If Not rec.EOF Then
    If Not IsNull(rec!AGN) Then
        ermAgnoverBio = rec!AGN
    End If
End If
rec.Close

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "mdlUpdate"
    Fehler.gsFunktion = "ermAgnoverBio"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Private Sub EintragBiogart(sBIOAGN As String, lagn As Long)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    
    sSQL = "Delete from BIOGART where BIOAGN = '" & sBIOAGN & "' "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into BIOGART (BIOAGN,AGN) values ('" & sBIOAGN & "'," & lagn & ")"
    gdBase.Execute sSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "EintragBiogart"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Private Sub NachtragAGNDBF(lRNR As Long, sRText As String)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    
    sSQL = "Delete from AGNDBF where AGN = " & lRNR
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Insert into AGNDBF (AGN,AGTEXT) values (" & lRNR & ",'" & UCase(sRText) & "')"
    gdBase.Execute sSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "NachtragAGNDBF"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub tabnameGross(sTab As String, db As Database)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    loeschNEW "sTXT", db
    
    sSQL = "Select * into sTXT from " & sTab
    db.Execute sSQL, dbFailOnError
    
    loeschNEW sTab, db
    CreateTable sTab, db
    
    sSQL = "Insert into " & sTab & " Select * from sTXT "
    db.Execute sSQL, dbFailOnError
    
    loeschNEW "sTXT", db
Exit Sub
LOKAL_ERROR:

    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "tabnameGross"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1

End Sub
Public Function ermLastAbschlussOld() As Long
    On Error GoTo LOKAL_ERROR

    Dim ctmp        As String
    Dim iFileNr     As Integer
     
    ermLastAbschlussOld = 0

    iFileNr = FreeFile
    Open gcDBPfad & "\ABSCHLUS.TXT" For Binary As #iFileNr
    If LOF(iFileNr) > 0 Then
        ctmp = Space$(LOF(iFileNr))
        Get #iFileNr, 1, ctmp
        Close iFileNr
        If Len(ctmp) > 6 Then
            ermLastAbschlussOld = CLng(Right(ctmp, 6))
        End If
    Else
        Close iFileNr
        ermLastAbschlussOld = 0
    End If
        
Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermLastAbschlussOld"
    Fehler.gsFehlertext = "Bei Ermitteln des letzten Abschlusses ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function ErmlastREK(cART As String) As String
    On Error GoTo LOKAL_ERROR
    
    ErmlastREK = "0.00"
    
    Dim cSQL As String
    Dim rsINB As Recordset
    
    cSQL = "Select Top 1 rek from Zugang where ARTNR = " & cART & " order by lfnr desc "
    
    Set rsINB = gdBase.OpenRecordset(cSQL)
    If Not rsINB.EOF Then
        If Not IsNull(rsINB!rek) Then
            ErmlastREK = Format$(rsINB!rek, "###0.00")
        End If
    End If
    rsINB.Close: Set rsINB = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ErmlastREK"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub UpdateLastREK(cART As String, dREK As Double)
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsINB As Recordset
    
    Dim lLFNR As Long
    
   
    
    cSQL = "Select Top 1 rek, lfnr from Zugang where ARTNR = " & cART & " order by lfnr desc "
    
    Set rsINB = gdBase.OpenRecordset(cSQL)
    If Not rsINB.EOF Then
        If Not IsNull(rsINB!lfnr) Then
            lLFNR = rsINB!lfnr
        End If
    End If
    rsINB.Close: Set rsINB = Nothing
    
    cSQL = "Update zugang set rek = '" & dREK & "' "
    cSQL = cSQL & " where artnr = " & cART & " "
    cSQL = cSQL & " and lfnr = " & lLFNR & " "
    gdBase.Execute cSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "UpdateLastREK"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function ermDIEaktuelleAbschlussNR(cKassa As Byte) As Long
    On Error GoTo LOKAL_ERROR

    Dim sSQL    As String
    Dim rs      As Recordset
    Dim iTmp    As Long
     
    ermDIEaktuelleAbschlussNR = 0
    
    sSQL = "Select max(ZBONNR)as Maxi from ABSCHLUSS where Kasnum = " & cKassa
    
    Set rs = gdBase.OpenRecordset(sSQL)
    If Not rs.EOF Then
        If Not IsNull(rs!maxi) Then
            iTmp = rs!maxi
            ermDIEaktuelleAbschlussNR = iTmp + 1
        End If
    End If
    rs.Close: Set rs = Nothing

Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermDIEaktuelleAbschlussNR"
    Fehler.gsFehlertext = "Bei Ermitteln des letzten Abschlusses ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function ermMaxPreisnr() As Integer
    On Error GoTo LOKAL_ERROR

    Dim sSQL  As String
    Dim rs As Recordset
    Dim iTmp As Integer
     
    ermMaxPreisnr = 0
    
    sSQL = "Select max(Preisnr)as Maxi from Preisterm "
    Set rs = gdBase.OpenRecordset(sSQL)
    If Not rs.EOF Then
        If Not IsNull(rs!maxi) Then
            iTmp = rs!maxi
            ermMaxPreisnr = iTmp + 1
        End If
    End If
    rs.Close: Set rs = Nothing

Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermMaxPreisnr"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Function checksPreisname(sPN As String) As Boolean
    On Error GoTo LOKAL_ERROR

    Dim sSQL  As String
    Dim rs As Recordset
    Dim iTmp As Integer
     
    checksPreisname = False
    
    sSQL = "Select * from Preisterm where Preisname = '" & sPN & "'"
    Set rs = gdBase.OpenRecordset(sSQL)
    If rs.EOF Then
        checksPreisname = True
    End If
    rs.Close: Set rs = Nothing

Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "checksPreisname"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Sub SpielSound(sSound As String)
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    
    cPfad = gcPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    cPfad = cPfad & "Sounds\" & sSound & ".wav"

    Call PlaySound(cPfad, 0)
    
Exit Sub
LOKAL_ERROR:
   
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SpielSound"
    Fehler.gsFehlertext = "Bei dem Abspielen von eine WAV - Datei ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub IndexKunden()
    On Error GoTo LOKAL_ERROR
    
    With frmWKL00!Label2
        .Caption = "ReIndiziere Kunden-Datenbank: KUNDNR": .Refresh
        exe "Create Index KUNDNR on KUNDEN (KUNDNR)"
        
        .Caption = "ReIndiziere Kunden-Datenbank: RECHNR": .Refresh
        exe "Create Index KUNDNR on KUNDEN (RECHNR)"
         
        .Caption = "ReIndiziere Kunden-Datenbank: KUERZEL": .Refresh
        exe "Create Index KUERZEL on KUNDEN (KUERZEL)"
        
        .Caption = "ReIndiziere Kunden-Datenbank: NAME": .Refresh
        exe "Create Index NAME on KUNDEN (NAME)"
        
        .Caption = "ReIndiziere Kunden-Datenbank: PLZ": .Refresh
        exe "Create Index PLZ on KUNDEN (PLZ)"
        
        .Caption = "ReIndiziere Kunden-Datenbank: Titel": .Refresh
        exe "Create Index Titel on KUNDEN (Titel)"
        
        .Caption = "ReIndiziere Kunden-Datenbank: STADT": .Refresh
        exe "Create Index STADT on KUNDEN (STADT)"
        
        .Caption = "ReIndiziere Kunden-Datenbank: KUNDKART": .Refresh
        exe "Create Index KUNDKART on KUNDEN (KUNDKART)"
        
        .Caption = "ReIndiziere Kunden-Datenbank: AENDER": .Refresh
        exe "Create Index AENDER on KUNDEN (AENDER)"
         
        .Caption = "ReIndiziere Kunden-Datenbank: LastDate": .Refresh
        exe "Create Index LastDate on KUNDEN (LastDate)"
        
        .Caption = "Anwender aktiv": .Refresh
    End With
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "IndexKunden"
    Fehler.gsFehlertext = "Beim Indizieren der Tabelle Kunden ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub IndexARTLIEF()
    On Error GoTo LOKAL_ERROR
    
    With frmWKL00!Label2
        .Caption = "ReIndiziere Artikel-Lieferanten-Datenbank: ARTNR": .Refresh
        exe "Create Index ARTNR on ARTLIEF (ARTNR)"
        
        
        .Caption = "ReIndiziere Artikel-Lieferanten-Datenbank: LINR": .Refresh
        exe "Create Index LINR on ARTLIEF (LINR)"
        
        
        .Caption = "ReIndiziere Artikel-Lieferanten-Datenbank: ARTLINR": .Refresh
        exe "Create Index ARTLINR on ARTLIEF (ARTNR, LINR)"
        
        .Caption = "ReIndiziere Artikel-Lieferanten-Datenbank: LIEFERANTENBESTELLNUMMER": .Refresh
        exe "Create Index LIBESNR on ARTLIEF (LIBESNR)"
        
        exe "Create Index SYNSTATUS on ARTLIEF (SYNSTATUS)"
    
    
    End With
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "IndexARTLIEF"
    Fehler.gsFehlertext = "Beim Indizieren der Tabelle Artlief ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub IndexGutsch()
    On Error GoTo LOKAL_ERROR
    
    With frmWKL00!Label2
        .Caption = "ReIndiziere Gutschein-Datenbank: DAT_EINL": .Refresh
        exe "Create Index DAT_EINL on GUTSCH (DAT_EINL)"

        .Caption = "ReIndiziere Gutschein-Datenbank: GUTSCHNR": .Refresh
        exe "Create Index GUTSCHNR on GUTSCH (GUTSCHNR)"
        
        .Caption = "ReIndiziere Gutschein-Datenbank: LastDate": .Refresh
        exe "Create Index LastDate on GUTSCH (LastDate)"
    
        .Caption = "ReIndiziere Gutschein-Datenbank: LastTime": .Refresh
        exe "Create Index LASTTIME on GUTSCH (Lasttime)"
    End With
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "IndexGutsch"
    Fehler.gsFehlertext = "Beim Indizieren der Tabelle Gutsch ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub IndexArtikel(lab As Label)
    On Error GoTo LOKAL_ERROR
    
    With lab
    
        .Caption = "ReIndiziere Artikel-Datenbank: ARTIKELNUMMER": .Refresh
        exe "Create Index ARTNR on ARTIKEL (ARTNR)"
    
        .Caption = "ReIndiziere Artikel-Datenbank: BESTAND": .Refresh
        exe "Create Index BESTAND on ARTIKEL(BESTAND)"
    
    
        .Caption = "ReIndiziere Artikel-Datenbank: EAN-CODE": .Refresh
        exe "Create Index EAN on ARTIKEL (EAN)"
        exe "Create Index EAN2 on ARTIKEL(EAN2)"
        exe "Create Index EAN3 on ARTIKEL(EAN3)"
    
        .Caption = "ReIndiziere Artikel-Datenbank: ARTIKEL-BEZEICHNUNG": .Refresh
        exe "Create Index BEZEICH on ARTIKEL (BEZEICH)"
   
        .Caption = "ReIndiziere Artikel-Datenbank: LIEFERANTENNUMMER": .Refresh
        exe "Create Index LINR on ARTIKEL (LINR)"
    
        .Caption = "ReIndiziere Artikel-Datenbank: ARTIKELGRUPPE": .Refresh
        exe "Create Index AGN on ARTIKEL (AGN)"
    
    
        .Caption = "ReIndiziere Artikel-Datenbank: LIBESNR": .Refresh
        exe "Create Index LIBESNR on ARTIKEL (LIBESNR)"
    
        .Caption = "ReIndiziere Artikel-Datenbank: LastDate": .Refresh
        exe "Create Index LastDate on ARTIKEL (LastDate)"
    
    End With
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "IndexArtikel"
    Fehler.gsFehlertext = "Beim Indizieren der Tabelle Artikel ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub IndexArtikel1()
    On Error GoTo LOKAL_ERROR
    
    With frmWKL00!Label2
    
        .Caption = "ReIndiziere Artikel-Datenbank: ARTIKELNUMMER": .Refresh
        exe "Create Index ARTNR on ARTIKEL (ARTNR)"
    
        .Caption = "ReIndiziere Artikel-Datenbank: BESTAND": .Refresh
        exe "Create Index BESTAND on ARTIKEL(BESTAND)"
    
    
        .Caption = "ReIndiziere Artikel-Datenbank: EAN-CODE": .Refresh
        exe "Create Index EAN on ARTIKEL (EAN)"
        exe "Create Index EAN2 on ARTIKEL(EAN2)"
        exe "Create Index EAN3 on ARTIKEL(EAN3)"
    
        .Caption = "ReIndiziere Artikel-Datenbank: ARTIKEL-BEZEICHNUNG": .Refresh
        exe "Create Index BEZEICH on ARTIKEL (BEZEICH)"
   
        .Caption = "ReIndiziere Artikel-Datenbank: LIEFERANTENNUMMER": .Refresh
        exe "Create Index LINR on ARTIKEL (LINR)"
    
        .Caption = "ReIndiziere Artikel-Datenbank: ARTIKELGRUPPE": .Refresh
        exe "Create Index AGN on ARTIKEL (AGN)"
        
    
        .Caption = "ReIndiziere Artikel-Datenbank: LIBESNR": .Refresh
        exe "Create Index LIBESNR on ARTIKEL (LIBESNR)"
    
        .Caption = "ReIndiziere Artikel-Datenbank: LastDate": .Refresh
        exe "Create Index LastDate on ARTIKEL (LastDate)"
    
    End With
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "IndexArtikel1"
    Fehler.gsFehlertext = "Beim Indizieren der Tabelle Artikel ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub IndexLisrt()
    On Error GoTo LOKAL_ERROR
    
    With frmWKL00!Label2
    
        .Caption = "ReIndiziere Lieferanten-Datenbank: LINR": .Refresh
        exe "Create Index LINR on LISRT (LINR)"
         
        .Caption = "ReIndiziere Lieferanten-Datenbank: KUERZEL": .Refresh
        exe "Create Index KUERZEL on LISRT (KUERZEL)"
         
        .Caption = "ReIndiziere Lieferanten-Datenbank: LIEFBEZ": .Refresh
        exe "Create Index LIEFBEZ on LISRT (LIEFBEZ)"
         
        .Caption = "ReIndiziere Lieferanten-Datenbank: PLZ": .Refresh
        exe "Create Index PLZ on LISRT (PLZ)"
         
        .Caption = "ReIndiziere Lieferanten-Datenbank: STADT": .Refresh
        exe "Create Index STADT on LISRT (STADT)"
         
        .Caption = "ReIndiziere Lieferanten-Datenbank: LastDate": .Refresh
        exe "Create Index LastDate on LISRT (LastDate)"
       
    End With
    
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "IndexLisrt"
    Fehler.gsFehlertext = "Beim Indizieren der Tabelle Lisrt ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub IndexKassjour()
    On Error GoTo LOKAL_ERROR
    
    With frmWKL00!Label2
    
        .Caption = "ReIndiziere Kassenjournal-Datenbank: DATUM": .Refresh
        exe "Create Index ADATE on KASSJOUR (ADATE)"

        .Caption = "ReIndiziere Kassenjournal-Datenbank: ARTIKELNUMMER": .Refresh
        exe "Create Index ARTNR on KASSJOUR (ARTNR)"
    
        .Caption = "ReIndiziere Kassenjournal-Datenbank: KUNDNR": .Refresh
        exe "Create Index KUNDNR on KASSJOUR (KUNDNR)"
        
        .Caption = "ReIndiziere Kassenjournal-Datenbank: MOPREIS": .Refresh
        exe "Create Index MOPREIS on KASSJOUR (MOPREIS)"

    End With
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "IndexKassjour"
    Fehler.gsFehlertext = "Beim Indizieren der Tabelle Kassjour ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Private Sub Kassjourabspecken()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL            As String
    Dim rsKassjour      As Recordset
    Dim rsTemp          As Recordset
    Dim lcount          As Long
    Dim j               As Long

    'sicherheitskopie zuerst
    loeschNEW "Katemp33", gdBase

    sSQL = "Select * into Katemp33 from Kassjour"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    
    'sicherheitskopie ende

    loeschNEW "temp", gdBase
    loeschNEW "Kassjour1", gdBase
    
    'berein
    sSQL = "Update Kassjour set Bediener = 98 where Bediener > 255 "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Kassjour set Bediener = 98 where Bediener < 1 "
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    'berein ende

    Set rsTemp = gdBase.OpenRecordset("Kassjour", dbOpenTable)

    sSQL = "Create Table KASSJOUR1"
    sSQL = sSQL & "("
    sSQL = sSQL & " ARTNR LONG "
    sSQL = sSQL & ", BEZEICH TEXT(35) "
    sSQL = sSQL & ", MENGE INTEGER "
    sSQL = sSQL & ", PREIS SINGLE "
    sSQL = sSQL & ", ADATE DATETIME "
    sSQL = sSQL & ", AZEIT Text(8) "
    sSQL = sSQL & ", KUNDNR LONG "
    sSQL = sSQL & ", FILIALE BYTE "
    sSQL = sSQL & ", KASNUM BYTE "
    sSQL = sSQL & ", LINR long"
    sSQL = sSQL & ", LPZ INTEGER"
    sSQL = sSQL & ", AGN Long "
    sSQL = sSQL & ", EAN Text(13)"
    sSQL = sSQL & ", MWST Text(1)"
    sSQL = sSQL & ", EKPR SINGLE "
    sSQL = sSQL & ", VKPR SINGLE "
    sSQL = sSQL & ", MOPREIS SINGLE "
    sSQL = sSQL & ", BELEGNR INTEGER "
    sSQL = sSQL & ", BEST1 INTEGER "
    sSQL = sSQL & ", RABKENN Text(1)"
    sSQL = sSQL & ", KK_ART Text(2)"
    sSQL = sSQL & ", BEDIENER integer "
    sSQL = sSQL & ", UMS_OK Text(1)"
    sSQL = sSQL & ", ZBONNR integer"
    sSQL = sSQL & ", ABOK BIT"
    sSQL = sSQL & ")"
    gdBase.Execute sSQL, dbFailOnError

    frmWKL00.Label1(1).Caption = "Achtung: Computer nicht ausschalten, sonst Datenverlust...": frmWKL00.Label1(1).Refresh
    Set rsKassjour = gdBase.OpenRecordset("KASSJOUR1", dbOpenTable)
    
    frmWKL00.Label4(0).Visible = True
    frmWKL00.Label4(1).Visible = True
    frmWKL00.Label4(2).Visible = True
    If rsTemp.RecordCount <> 0 Then

        rsTemp.MoveLast
        lcount = rsTemp.RecordCount
        frmWKL00.Label4(2).Caption = lcount
        frmWKL00.Label4(2).Refresh
        rsTemp.MoveFirst
            Do While Not rsTemp.EOF

                lcount = lcount - 1
                j = lcount Mod 1000
                If j = 0 Then
                    frmWKL00.Label4(0).Caption = lcount
                    frmWKL00.Label4(0).Refresh
                    frmWKL00.Refresh
                Else
                    
                End If
                
                rsKassjour.AddNew
                rsKassjour!artnr = rsTemp!artnr
                rsKassjour!BEZEICH = rsTemp!BEZEICH
                rsKassjour!Menge = rsTemp!Menge
                rsKassjour!Preis = rsTemp!Preis
                rsKassjour!ADATE = rsTemp!ADATE
                rsKassjour!AZEIT = rsTemp!AZEIT
                rsKassjour!Kundnr = rsTemp!Kundnr
                rsKassjour!FILIALE = rsTemp!FILIALE
                rsKassjour!kasnum = rsTemp!kasnum
                rsKassjour!linr = rsTemp!linr
                rsKassjour!LPZ = rsTemp!LPZ
                rsKassjour!AGN = rsTemp!AGN
                rsKassjour!EAN = rsTemp!EAN
                rsKassjour!MWST = rsTemp!MWST
                rsKassjour!ekpr = rsTemp!ekpr
                rsKassjour!vkpr = rsTemp!vkpr
                rsKassjour!MOPREIS = rsTemp!MOPREIS
                rsKassjour!BELEGNR = rsTemp!BELEGNR
                rsKassjour!best1 = rsTemp!best1
                rsKassjour!RABKENN = rsTemp!RABKENN
                rsKassjour!kk_art = rsTemp!kk_art
                rsKassjour!BEDIENER = rsTemp!BEDIENER
                rsKassjour!UMS_OK = rsTemp!UMS_OK
                rsKassjour!ZbonNr = 31999
                rsKassjour!ABOK = True

                rsKassjour.Update
                rsTemp.MoveNext
            Loop
    End If
    rsKassjour.Close: Set rsKassjour = Nothing
    rsTemp.Close: Set rsTemp = Nothing

    loeschNEW "Temp", gdBase
    loeschNEW "Kassjour", gdBase
    
    frmWKL00.Label1(1).Caption = "Kassjour wird kopiert...": frmWKL00.Label1(1).Refresh
    
    frmWKL00.Label4(0).Visible = True
    frmWKL00.Label4(1).Visible = True
    frmWKL00.Label4(2).Visible = True
    frmWKL00.Label4(0).Caption = ""
    frmWKL00.Label4(1).Caption = ""
    frmWKL00.Label4(2).Caption = ""
    frmWKL00.Refresh

    sSQL = "Select * into KASSJOUR from Kassjour1"
    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
    loeschNEW "Kassjour1", gdBase
    
    IndexKassjour
    
    frmWKL00.Label1(1).Caption = "Fertig ": frmWKL00.Label1(1).Refresh

    Screen.MousePointer = 0
    
Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Kassjourabspecken"
    Fehler.gsFehlertext = "Beim Verkleinern der Kassjour ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
'    Resume Next
    
    MsgBox "Winkiss wird beendet. Melden Sie sich bei der Hotline. 0511/955910"
    gdBase.Close
    schreibeProtokoll "Abmeldung: meldet sich ab(kissdata.mdb)."
    schreibeProtokollBENUTZERablauf "Abmeldung"
    gdApp.Close
    schreibeProtokoll "Abmeldung: meldet sich ab(kissapp.mdb)."


    End 'Ende
    
End Sub
Public Sub exe(sSQL As String)
    On Error GoTo LOKAL_ERROR

    schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
    If err.Number = 3375 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "exe"
        Fehler.gsFehlertext = "Bei der Ausführung der SQL-Anweisung: " & sSQL & " ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Function Gutschein_nochfrei(lGutnr As Long) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsrs        As Recordset
    
    Gutschein_nochfrei = False
    
    sSQL = "Select Wert from gutsch where gutschnr = " & lGutnr
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
    
        If IsNull(rsrs!Wert) Then
            Gutschein_nochfrei = True
        End If
    
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Gutschein_nochfrei"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function erm_Gutschein_Wert(lGutnr As Long) As Double
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL        As String
    Dim rsrs        As Recordset
    
    erm_Gutschein_Wert = 0
    
    sSQL = "Select Wert from gutsch where gutschnr = " & lGutnr
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
    
        If IsNull(rsrs!Wert) Then
            erm_Gutschein_Wert = rsrs!Wert
        End If
    
    End If
    rsrs.Close: Set rsrs = Nothing
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "erm_Gutschein_Wert"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function NewGutschein() As Long
    On Error GoTo LOKAL_ERROR
    
    Dim lGutschnr   As Long
    Dim lbednu      As Long
    Dim lDatum      As Long
    Dim lKUNDNR     As Long
    Dim dWert       As Double
    Dim dAnz        As Double
    Dim dCount      As Double
    
    Dim ctmp        As String
    Dim cArtNr      As String
    Dim cBezeich    As String
    Dim cMin        As String
    Dim cMax        As String
    Dim cSQL        As String
    Dim sWert       As String
    Dim rsrs        As Recordset
    Dim lBis        As Long
    Dim lVon        As Long
    
    NewGutschein = 0
    
    If Len(Trim(gcKasNum)) = 1 Then
    
        If Len(Trim(gcFilNr)) = 1 Then
            If (Trim(gcFilNr)) = "0" Then
                cMin = gcKasNum & "10000"
                cMax = gcKasNum & "99999"
    
            Else
'                cMin = gcFilNr & gcKasNum & "1000"
'                cMax = gcFilNr & gcKasNum & "9999"

                'Achtung Kassennummer entfällt
                
                cMin = gcFilNr & "10000"
                cMax = gcFilNr & "99999"
            End If
        ElseIf Len(Trim(gcFilNr)) = 2 Then
'            cMin = gcFilNr & gcKasNum & "0000" 'achtung veränderung 4 Stellen
'            cMax = gcFilNr & gcKasNum & "9999"
            
            'Achtung Kassennummer entfällt
            cMin = gcFilNr & "10000"
            cMax = gcFilNr & "99999"
        End If
    Else
        If Len(Trim(gcFilNr)) = 1 Then
            If (Trim(gcFilNr)) = "0" Then
                cMin = "100000"
                cMax = "999999"
    
            Else
                cMin = gcFilNr & "10000"
                cMax = gcFilNr & "99999"
            End If
        ElseIf Len(Trim(gcFilNr)) = 2 Then
            cMin = gcFilNr & "0000"
            cMax = gcFilNr & "9999"
        End If
    End If
    
    lBis = CLng(cMax)
    lVon = CLng(cMin)
    
    Dim sSQL As String
    
    If gbKL_LIVEGUTSCHEIN Then
    
    
    
        If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
            'alles okay
            
        Else
        
            schreibeProtokollVPNTXT "Unterbrechung"
        
            Dim sTemp As String
            sTemp = "Bitte starten Sie diesen Rechner neu" & vbCrLf
            sTemp = sTemp & "oder schließen Sie das Schloss und starten Sie WinKiss neu."
        
            MsgBox sTemp, vbCritical + vbOKOnly, "Gutschein-Datenbank nicht erreichbar"
            Exit Function
        End If
    
        Dim stConnect As String
        
        If gsKL_DSN <> "" Then
            stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        Else
            stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        End If
        
        Dim dbEAN As DAO.Database
        Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
        
        
        sSQL = "Select max(gutschnr) as maxi from GUTSCHEINE where gutschnr between '" & lVon & "' and '" & lBis & "'"
        Set rsrs = dbEAN.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
        
            If Not IsNull(rsrs!maxi) Then
                NewGutschein = rsrs!maxi
                If NewGutschein + 1 >= lBis Then
                    MsgBox "Keine Gutscheinnummer mehr frei", vbCritical, "Winkiss Hinweis:"
                    NewGutschein = 0
                Else
                    NewGutschein = NewGutschein + 1
                End If
            Else
                NewGutschein = lVon
            End If
        Else
            NewGutschein = lVon
        End If
        rsrs.Close: Set rsrs = Nothing
        
        dbEAN.Close
        
    Else
    
    
        
    
    
       
    
    
    
    
    
    
        sSQL = "Select max(gutschnr) as maxi from gutsch where gutschnr between " & lVon & " and " & lBis
        Set rsrs = gdBase.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
        
            If Not IsNull(rsrs!maxi) Then
                NewGutschein = rsrs!maxi
                If NewGutschein + 1 >= lBis Then
'                    MsgBox "Keine Gutscheinnummer mehr frei", vbCritical, "Winkiss Hinweis:"
                    NewGutschein = 0
                Else
                    NewGutschein = NewGutschein + 1
                End If
            Else
                NewGutschein = lVon
            End If
        Else
            NewGutschein = lVon
        End If
        rsrs.Close: Set rsrs = Nothing
        
        
        If NewGutschein = 0 Then
        
            sSQL = "Select Top 1 Gutschnr + 1 as Gutschnr2 "
            sSQL = sSQL & " from gutsch t1 where t1.Gutschnr + 1 not in  "
            sSQL = sSQL & " (SELECT  Gutschnr  FROM Gutsch t2 where t2.Gutschnr = t1.Gutschnr + 1) "
            sSQL = sSQL & " and t1.Gutschnr between " & lVon & " and " & lBis
    '        sSQL = sSQL & " and t1.artnr + 1 not in (SELECT  artnr  FROM ums_art t3 where t3.artnr = t1.artnr + 1) "
            sSQL = sSQL & " order by Gutschnr asc "
        
            Set rsrs = gdBase.OpenRecordset(sSQL)
            If Not rsrs.EOF Then
                If Not IsNull(rsrs!Gutschnr2) Then
                    NewGutschein = rsrs!Gutschnr2
                End If
            End If
            rsrs.Close
        
        End If
        
        If NewGutschein = 0 Then
            MsgBox "Keine Gutscheinnummer mehr frei", vbCritical, "Winkiss Hinweis:"
        End If
        
        
        
    End If

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "newGutschein"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub Insert_Gutschein(lGutschnr As Long, lKUNDNR As Long, dWert As Double, lbed As Long, cFil As String, cKasnum As String, cART As String, lDatum As Long, sWert As String)
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rsrs As DAO.Recordset

    If gbKL_LIVEGUTSCHEIN Then
    
    
    
        If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
            'alles okay
            
        Else
        
            schreibeProtokollVPNTXT "Unterbrechung"
        
            Dim sTemp As String
            sTemp = "Bitte starten Sie diesen Rechner neu" & vbCrLf
            sTemp = sTemp & "oder schließen Sie das Schloss und starten Sie WinKiss neu."
        
            MsgBox sTemp, vbCritical + vbOKOnly, "Gutschein-Datenbank nicht erreichbar"
            Exit Sub
        End If
    
    
        Dim stConnect As String
        
        If gsKL_DSN <> "" Then
            stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        Else
            stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        End If
        
        Dim dbEAN As DAO.Database
        Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
        
        sSQL = "Insert Into Gutscheine "
        sSQL = sSQL & " ( "
        sSQL = sSQL & " Gutschnr"
        sSQL = sSQL & ",Wert"
        sSQL = sSQL & ",Ausg_Datum"
        sSQL = sSQL & ",Ausg_Zeit"
        sSQL = sSQL & ",Ausg_KundNr"
        sSQL = sSQL & ",Ausg_Bediener"
        sSQL = sSQL & ",Ausg_Filiale"
        sSQL = sSQL & ",Ausg_KasNum"
        sSQL = sSQL & ",Ausg_Rechner"
        sSQL = sSQL & ",Ausg_Art"
        sSQL = sSQL & ") VALUES ("
        sSQL = sSQL & "'" & lGutschnr & "'"
        sSQL = sSQL & ",'" & dWert & "' "
        sSQL = sSQL & ",'" & DateValue(Now) & "'"
        sSQL = sSQL & ",'" & TimeValue(Now) & "'"
        sSQL = sSQL & "," & lKUNDNR & ""
        sSQL = sSQL & ",'" & lbed & "'"
        sSQL = sSQL & "," & cFil
        sSQL = sSQL & "," & cKasnum
        sSQL = sSQL & ",'" & rechnername & "'"
        sSQL = sSQL & ",'" & cART & "'"
        sSQL = sSQL & " ) "
        dbEAN.Execute sSQL, dbFailOnError
        
        dbEAN.Close
    Else
    
        sSQL = "Select * from GUTSCH where GUTSCHNR = 0"
        FnOpenrecordset rsrs, sSQL, 1, gdBase
        rsrs.AddNew
        rsrs!gutschnr = lGutschnr
        rsrs!BEDNU = lbed
        rsrs!DAT_AUSG = lDatum
        rsrs!Wert = dWert
        rsrs!Kundnr = lKUNDNR
        rsrs!SYNStatus = "A"
        rsrs!Status = sWert
        rsrs!FILIALE = cFil
        rsrs.Update
        rsrs.Close: Set rsrs = Nothing
    End If





Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Insert_Gutschein"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub Update_Gutschein(lGutschnr As Long, lKUNDNR As Long, dWert As Double, lbed As Long, cFil As String, cKasnum As String, cART As String, lDatum As Long, sWert As String)
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    Dim rsrs As DAO.Recordset

    If gbKL_LIVEGUTSCHEIN Then
    
    
        If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
            'alles okay
            
        Else
        
            schreibeProtokollVPNTXT "Unterbrechung"
        
            Dim sTemp As String
            sTemp = "Bitte starten Sie diesen Rechner neu" & vbCrLf
            sTemp = sTemp & "oder schließen Sie das Schloss und starten Sie WinKiss neu."
        
            MsgBox sTemp, vbCritical + vbOKOnly, "Gutschein-Datenbank nicht erreichbar"
            Exit Sub
        End If
    
    
        Dim stConnect As String
        
        If gsKL_DSN <> "" Then
            stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        Else
            stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        End If
        
        Dim dbEAN As DAO.Database
        Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
        
        Dim cGutschnr As String
        cGutschnr = lGutschnr
        Dim cNeuerWert As String
        cNeuerWert = CStr(dWert)
        
        cNeuerWert = SwapStr(cNeuerWert, ",", ".")
        
        sSQL = "Update Gutscheine set "
        sSQL = sSQL & " EINL_Datum = null "
        sSQL = sSQL & " ,Wert = " & cNeuerWert & "  "
        sSQL = sSQL & " Where GUTSCHNR = '" & cGutschnr & "'"
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        dbEAN.Close
    Else
    
        sSQL = "Select * from GUTSCH where GUTSCHNR = " & lGutschnr
        Set rsrs = gdBase.OpenRecordset(sSQL)
        If Not rsrs.EOF Then
            rsrs.Edit
            rsrs!gutschnr = lGutschnr
            rsrs!BEDNU = lbed
            rsrs!DAT_AUSG = lDatum
            rsrs!DAT_EINL = Null
            rsrs!Wert = dWert
            rsrs!SYNStatus = "E"
            rsrs!Status = sWert
            rsrs!FILIALE = cFil
            rsrs.Update
            
        End If
        rsrs.Close: Set rsrs = Nothing
    
    End If





Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Update_Gutschein"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub Gutschein_Einloesen(cGutschnr As String, lHeute As Long, czeit As String, cBon As String, cKass As String, cBed As String)
On Error GoTo LOKAL_ERROR

    Dim sSQL As String

    If gbKL_LIVEGUTSCHEIN Then
    
        If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
            'alles okay
            
        Else
        
            schreibeProtokollVPNTXT "Unterbrechung"
        
            Dim sTemp As String
            sTemp = "Bitte starten Sie diesen Rechner neu" & vbCrLf
            sTemp = sTemp & "oder schließen Sie das Schloss und starten Sie WinKiss neu."
        
            MsgBox sTemp, vbCritical + vbOKOnly, "Gutschein-Datenbank nicht erreichbar"
            Exit Sub
        End If
    
    
        Dim stConnect As String
        
        If gsKL_DSN <> "" Then
            stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        Else
            stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        End If
        
        Dim dbEAN As DAO.Database
        Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
        
        'EINL_KUNDNR fehlt noch
        
        sSQL = "Update Gutscheine set "
        sSQL = sSQL & " EINL_Datum = '" & DateValue(Now) & "' "
        sSQL = sSQL & ", EINL_Zeit = '" & czeit & "' "
        sSQL = sSQL & ", EINL_BEDIENER = '" & cBed & "' "
        sSQL = sSQL & ", EINL_FILIALE = '" & gcFilNr & "' "
        sSQL = sSQL & ", EINL_KASNUM = '" & cKass & "' "
        sSQL = sSQL & ", EINL_BELEGNR = '" & cBon & "' "
        sSQL = sSQL & " Where GUTSCHNR = '" & cGutschnr & "'"
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        dbEAN.Close
    Else
    
        sSQL = "Update GUTSCH set DAT_EINL = " & Trim$(Str$(lHeute)) & " where GUTSCHNR = " & cGutschnr
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update GUTSCH set SYNStatus = 'E' where GUTSCHNR = " & cGutschnr
        gdBase.Execute sSQL, dbFailOnError
        
        sSQL = "Update GUTSCH set Status = 'E' where GUTSCHNR = " & cGutschnr
        gdBase.Execute sSQL, dbFailOnError
    
    End If


Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Gutschein_Einloesen"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub Gutschein_Einloesen_Aufheben(cGutschnr As String)
On Error GoTo LOKAL_ERROR

    Dim sSQL As String

    If gbKL_LIVEGUTSCHEIN Then
    
    
    
        If fTestLogin_SQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
            'alles okay
            
        Else
        
            schreibeProtokollVPNTXT "Unterbrechung"
        
            Dim sTemp As String
            sTemp = "Bitte starten Sie diesen Rechner neu" & vbCrLf
            sTemp = sTemp & "oder schließen Sie das Schloss und starten Sie WinKiss neu."
        
            MsgBox sTemp, vbCritical + vbOKOnly, "Gutschein-Datenbank nicht erreichbar"
            Exit Sub
        End If
    
    
        Dim stConnect As String
        
        If gsKL_DSN <> "" Then
            stConnect = "ODBC;DSN=" & gsKL_DSN & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        Else
            stConnect = "ODBC;DRIVER=SQL Server;SERVER=" & gsKL_ADRESSE & ";DATABASE=" & gsKL_DATENBANKNAME & ";UID=" & gsKL_BENUTZER & ";PWD=" & gsKL_PASSWORT & ""
        End If
        
        Dim dbEAN As DAO.Database
        Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
        

        
        sSQL = " Update Gutscheine set "
        sSQL = sSQL & " EINL_Datum = NULL "
        sSQL = sSQL & ", EINL_Zeit = NULL "
        sSQL = sSQL & ", EINL_BEDIENER = NULL "
        sSQL = sSQL & ", EINL_FILIALE = NULL "
        sSQL = sSQL & ", EINL_KASNUM = NULL "
        sSQL = sSQL & ", EINL_BELEGNR = NULL "
        sSQL = sSQL & " Where GUTSCHNR = '" & cGutschnr & "'"
        dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
        
        dbEAN.Close
    Else
    
        sSQL = "Update GUTSCH set DAT_EINL = NULL  " & ", Status = 'N' where GUTSCHNR = " & cGutschnr
        gdBase.Execute sSQL, dbFailOnError
    
    End If


Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Gutschein_Einloesen_Aufheben"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function NewGutschein1(sFilnr As String) As Long
    On Error GoTo LOKAL_ERROR
    
    Dim lGutschnr   As Long
    Dim lbednu      As Long
    Dim lDatum      As Long
    Dim lKUNDNR     As Long
    Dim dWert       As Double
    Dim dAnz        As Double
    Dim dCount      As Double
    
    Dim ctmp        As String
    Dim cArtNr      As String
    Dim cBezeich    As String
    Dim cMin        As String
    Dim cMax        As String
    Dim cSQL        As String
    Dim sWert       As String
    Dim rsrs        As Recordset
    Dim lBis        As Long
    Dim lVon        As Long
    
    NewGutschein1 = 0
    
    If Len(Trim(gcKasNum)) = 1 Then
    
        If Len(Trim(sFilnr)) = 1 Then
            If (Trim(sFilnr)) = "0" Then
                cMin = gcKasNum & "10000"
                cMax = gcKasNum & "99999"
    
            Else
                cMin = sFilnr & gcKasNum & "1000"
                cMax = sFilnr & gcKasNum & "9999"
            End If
        ElseIf Len(Trim(sFilnr)) = 2 Then
            cMin = sFilnr & gcKasNum & "000"
            cMax = sFilnr & gcKasNum & "999"
        End If
    Else
        If Len(Trim(sFilnr)) = 1 Then
            If (Trim(sFilnr)) = "0" Then
                cMin = "100000"
                cMax = "999999"
    
            Else
                cMin = sFilnr & "10000"
                cMax = sFilnr & "99999"
            End If
        ElseIf Len(Trim(sFilnr)) = 2 Then
            cMin = sFilnr & "0000"
            cMax = sFilnr & "9999"
        End If
    End If
    
    lBis = CLng(cMax)
    lVon = CLng(cMin)
    
    
    Dim sSQL As String
    
    sSQL = "Select max(gutschnr) as maxi from gutsch where gutschnr between " & lVon & " and " & lBis
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
    
        If Not IsNull(rsrs!maxi) Then
            NewGutschein1 = rsrs!maxi
            If NewGutschein1 + 1 > lBis Then
            
            Else
                NewGutschein1 = NewGutschein1 + 1
            End If
        Else
            NewGutschein1 = lVon
        End If
    Else
        NewGutschein1 = lVon
    End If
    rsrs.Close: Set rsrs = Nothing

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "newGutschein1"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function MaxGutschein1(sFilnr As String) As Long
    On Error GoTo LOKAL_ERROR
    
    Dim cMin        As String
    Dim cMax        As String
    Dim lBis        As Long
    Dim lVon        As Long
    
    MaxGutschein1 = 0
    
    If Len(Trim(gcKasNum)) = 1 Then
    
        If Len(Trim(sFilnr)) = 1 Then
            If (Trim(sFilnr)) = "0" Then
                cMin = gcKasNum & "10000"
                cMax = gcKasNum & "99999"
    
            Else
                cMin = sFilnr & gcKasNum & "1000"
                cMax = sFilnr & gcKasNum & "9999"
            End If
        ElseIf Len(Trim(sFilnr)) = 2 Then
            cMin = sFilnr & gcKasNum & "000"
            cMax = sFilnr & gcKasNum & "999"
        End If
    Else
        If Len(Trim(sFilnr)) = 1 Then
            If (Trim(sFilnr)) = "0" Then
                cMin = "100000"
                cMax = "999999"
    
            Else
                cMin = sFilnr & "10000"
                cMax = sFilnr & "99999"
            End If
        ElseIf Len(Trim(sFilnr)) = 2 Then
            cMin = sFilnr & "0000"
            cMax = sFilnr & "9999"
        End If
    End If
    
    lBis = CLng(cMax)
    lVon = CLng(cMin)
    
    MaxGutschein1 = lBis

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "MaxGutschein1"
    Fehler.gsFehlertext = "Im Programmteil Kasse ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function WerIstDefaultDrucker() As String
    On Error GoTo LOKAL_ERROR
    
    Dim i As Integer
    Dim PrinterName As String
    WerIstDefaultDrucker = ""
    
    For i = 0 To Printers.Count - 1
        PrinterName = Printers(i).DeviceName
        
        If Printer.DeviceName = Printers(i).DeviceName Then
            WerIstDefaultDrucker = PrinterName
        End If
    
    Next i
    
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "WerIstDefaultDrucker"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub setzedrucker(sDrucker As String)
    On Error GoTo LOKAL_ERROR
    
    Dim P           As Printer
    Dim bgefunden   As Boolean
    Dim sbesy       As String
    
    sbesy = Trim(Get_OS)

   
    If sbesy = "Windows 95" Then
        setzedrucker2 sDrucker
        Exit Sub
    End If
    
    Screen.MousePointer = 11
    bgefunden = False
    gcDefaultDrucker = ""
    
    For Each P In Printers
        If UCase(P.DeviceName) = UCase(sDrucker) Then
            Set Printer = P
            bgefunden = True
            Exit For
        End If
    Next
    
    'Frühes Binden (early binding)
    'Verweis auf 'Windows Script Host Object Model' nötig
    'Dim objWSHNetwork As New IWshRuntimeLibrary.WshNetwork
    
    'Spätes Binden (late binding)
    Dim objWSHNetwork As Object
    
    Set objWSHNetwork = CreateObject("WScript.Network")
    
    'Standarddrucker setzen
    objWSHNetwork.SetDefaultPrinter sDrucker
    
    If bgefunden = False Then
        MsgBox "Drucker: " & sDrucker & " konnte nicht initialisiert werden!", vbCritical, "Winkiss Hinweis:"
    Else
        gcDefaultDrucker = WerIstDefaultDrucker
    End If

    Screen.MousePointer = 0
    
    
Exit Sub
LOKAL_ERROR:
    If err.Number = -2147352567 Or err.Number = -2147024846 Then
        setzedrucker2 sDrucker
        Screen.MousePointer = 0
        Exit Sub
'        gcDefaultDrucker = WerIstDefaultDrucker
'        MsgBox "Drucker: " & sDrucker & " konnte nicht gefunden werden! Standarddrucker ist: " & gcDefaultDrucker, vbCritical, "Winkiss Hinweis:"
    ElseIf err.Number = 429 Or err.Number = 462 Then
        setzedrucker2 sDrucker
        Screen.MousePointer = 0
        Exit Sub
'        gcDefaultDrucker = WerIstDefaultDrucker
'        MsgBox "Drucker: " & sDrucker & " konnte nicht als Standarddrucker gesetzt werden! Standarddrucker ist: " & gcDefaultDrucker, vbCritical, "Winkiss Hinweis:"
    
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "setzedrucker"
        Fehler.gsFehlertext = "Beim Setzen des Standarddruckers ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub setzedrucker2(sDrucker As String)
    On Error GoTo LOKAL_ERROR

    Dim lcount As Long
    Dim lAnz As Long
    Dim bReturn As Boolean
    Dim cDrucker As String
    
    cDrucker = sDrucker
    
    bReturn = SetDefaultPrinter(cDrucker)
    If bReturn = False Then
'        MsgBox "Drucker konnte nicht initialisiert werden!", vbCritical, "STOP!"
    End If
    
    lAnz = Printers.Count
    For lcount = 0 To lAnz - 1
        If Printers(lcount).DeviceName = sDrucker Then
            Set Printer = Printers(lcount)
            Exit For
        End If
    Next lcount

Exit Sub

LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "setzedrucker2"
    Fehler.gsFehlertext = "Beim Setzen des Standarddruckers ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub newGutschStrichcods()
    On Error GoTo LOKAL_ERROR
    
    Dim cGutsch     As String
    Dim i           As Integer
    Dim lGutsch     As Long
    Dim rsrs        As Recordset
    Dim cSQL        As String
    Dim cPfad       As String
    
    cPfad = gcDBPfad
    
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
            
    loeschNEW "DruGut", gdBase
    
    cSQL = "Create Table DruGut (Gutschnr long, Barcode text(11))"
    gdBase.Execute cSQL, dbFailOnError
    
    If FileExists(cPfad & "aWKL30j.rpt") Then 'Spezialreport a5
    
        Dim sFil            As String
        sFil = InputBox("Welche Filialnummer?", "Winkiss Eingabe:")
        
        Dim iStueck         As Integer
        Dim lmaxforThisFil  As Long
        Dim lMax            As Long
        Dim lgu             As Long
        Dim Ldiff           As Long
        Dim sMsg As String
        iStueck = InputBox("Wieviele Gutscheine wollen Sie drucken?", "Winkiss Eingabe:")
        
        lGutsch = NewGutschein1(sFil)
        
        lmaxforThisFil = MaxGutschein1(sFil)
        lgu = lGutsch
        
        Ldiff = lmaxforThisFil - lGutsch
        lMax = lgu + iStueck
        
        If lMax <= lmaxforThisFil Then
        
        Else
            Screen.MousePointer = 0
            sMsg = "Die gewünschte Anzahl ist nicht mehr verfügbar." & vbCrLf
            sMsg = sMsg & "Es stehen noch " & Ldiff & " zur Verfügung." & vbCrLf
            sMsg = sMsg & "Bitte verringern Sie diese!"
            MsgBox sMsg, , "Winkiss Hinweis:"
            Exit Sub
        End If
        
        For i = 0 To iStueck
            lGutsch = lGutsch + 1
            
            cGutsch = CStr(lGutsch)
            cGutsch = fnMoveArtNr2EAN8(Right(cGutsch, 6))
            cGutsch = fnCodiereEANCode(cGutsch)
    
            cSQL = " Insert into DruGut (Gutschnr,Barcode) Values (" & lGutsch & ", '" & cGutsch & "' ) "
            gdBase.Execute cSQL, dbFailOnError
        Next i
        
        'neuen Gutschein
        lGutsch = lGutsch + 1
        cSQL = "Select * from GUTSCH where GUTSCHNR = 0"
        Set rsrs = gdBase.OpenRecordset(cSQL)
        rsrs.AddNew
        rsrs!gutschnr = lGutsch
        rsrs!SYNStatus = "A"
        rsrs!Status = "N"
        rsrs!FILIALE = gcFilNr
        rsrs.Update
        rsrs.Close: Set rsrs = Nothing
        
        reportbildschirm "WKL021e", "aWKL30j"
    
    Else
    
        lGutsch = NewGutschein
        
''''        'Frag doch mal den Vorgänger, ob der Wert = null ist
''''        'dann Vorgänger nehmen
''''        If Gutschein_nochfrei(lGutsch - 1) Then
''''            lGutsch = lGutsch - 1
''''        End If
        
        For i = 0 To 79
            
            
            cGutsch = CStr(lGutsch)
            cGutsch = fnMoveArtNr2EAN8(Right(cGutsch, 6))
            cGutsch = fnCodiereEANCode(cGutsch)
    
            cSQL = " Insert into DruGut (Gutschnr,Barcode) Values (" & lGutsch & ", '" & cGutsch & "' ) "
            gdBase.Execute cSQL, dbFailOnError
            lGutsch = lGutsch + 1
        Next i
        
        'neuen Gutschein
        lGutsch = lGutsch + 1
        cSQL = "Select * from GUTSCH where GUTSCHNR = 0"
        Set rsrs = gdBase.OpenRecordset(cSQL)
        rsrs.AddNew
        rsrs!gutschnr = lGutsch
        rsrs!SYNStatus = "A"
        rsrs!Status = "N"
        rsrs!FILIALE = gcFilNr
        rsrs.Update
        rsrs.Close: Set rsrs = Nothing
        
        If Modul6.FindFile(gcDBPfad, "aWKL30is.rpt") Then
            reportbildschirm "WKL021e", "aWKL30is"
        Else
            reportbildschirm "WKL021e", "aWKL30i"
        End If
        
    End If
    

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "newGutschStrichcods"
    Fehler.gsFehlertext = "Im Programmteil neue Strichcodes für Gutscheine ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub newGutschStrichcods_KL()
    On Error GoTo LOKAL_ERROR
    
    Dim cGutsch     As String
    Dim i           As Integer
    Dim lGutsch     As Long
    Dim lDatum      As Long
    Dim rsrs        As Recordset
    Dim cSQL        As String
    Dim cPfad       As String
    
    cPfad = gcDBPfad
    
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
            
    loeschNEW "DruGut", gdBase
    
    cSQL = "Create Table DruGut (Gutschnr long, Barcode text(11))"
    gdBase.Execute cSQL, dbFailOnError
    
'    If FileExists(cPfad & "aWKL30j.rpt") Then 'Spezialreport a5
'
'        Dim sFil            As String
'        sFil = InputBox("Welche Filialnummer?", "Winkiss Eingabe:")
'
'        Dim iStueck         As Integer
'        Dim lmaxforThisFil  As Long
'        Dim lMax            As Long
'        Dim lgu             As Long
'        Dim lDiff           As Long
'        Dim sMsg As String
'        iStueck = InputBox("Wieviele Gutscheine wollen Sie drucken?", "Winkiss Eingabe:")
'
'        lGutsch = NewGutschein1(sFil)
'
'        lmaxforThisFil = MaxGutschein1(sFil)
'        lgu = lGutsch
'
'        lDiff = lmaxforThisFil - lGutsch
'        lMax = lgu + iStueck
'
'        If lMax <= lmaxforThisFil Then
'
'        Else
'            Screen.MousePointer = 0
'            sMsg = "Die gewünschte Anzahl ist nicht mehr verfügbar." & vbCrLf
'            sMsg = sMsg & "Es stehen noch " & lDiff & " zur Verfügung." & vbCrLf
'            sMsg = sMsg & "Bitte verringern Sie diese!"
'            MsgBox sMsg, , "Winkiss Hinweis:"
'            Exit Sub
'        End If
'
'        For i = 0 To iStueck
'            lGutsch = lGutsch + 1
'
'            cGutsch = CStr(lGutsch)
'            cGutsch = fnMoveArtNr2EAN8(Right(cGutsch, 6))
'            cGutsch = fnCodiereEANCode(cGutsch)
'
'            cSQL = " Insert into DruGut (Gutschnr,Barcode) Values (" & lGutsch & ", '" & cGutsch & "' ) "
'            gdBase.Execute cSQL, dbFailOnError
'        Next i
'
'        'neuen Gutschein
'        lGutsch = lGutsch + 1
'        cSQL = "Select * from GUTSCH where GUTSCHNR = 0"
'        Set rsrs = gdBase.OpenRecordset(cSQL)
'        rsrs.AddNew
'        rsrs!gutschnr = lGutsch
'        rsrs!SYNStatus = "A"
'        rsrs!Status = "N"
'        rsrs!FILIALE = gcFilNr
'        rsrs.Update
'        rsrs.Close: Set rsrs = Nothing
'
'        reportbildschirm "WKL021e", "aWKL30j"
'
'    Else
    
        lGutsch = NewGutschein
        
        For i = 0 To 79
            cGutsch = CStr(lGutsch)
            cGutsch = fnMoveArtNr2EAN8(Right(cGutsch, 6))
            cGutsch = fnCodiereEANCode(cGutsch)
    
            cSQL = " Insert into DruGut (Gutschnr,Barcode) Values (" & lGutsch & ", '" & cGutsch & "' ) "
            gdBase.Execute cSQL, dbFailOnError
            lGutsch = lGutsch + 1
        Next i
        
        'neuen Gutschein
        lGutsch = lGutsch + 1
        
        lDatum = Fix(Now)
        
        Insert_Gutschein lGutsch, 0, 0, 0, gcFilNr, gcKasNum, "ERSTGUTSCHEIN", lDatum, "A"
        
        
        
        
        
        
'        cSQL = "Select * from GUTSCH where GUTSCHNR = 0"
'        Set rsrs = gdBase.OpenRecordset(cSQL)
'        rsrs.AddNew
'        rsrs!gutschnr = lGutsch
'        rsrs!SYNStatus = "A"
'        rsrs!Status = "N"
'        rsrs!FILIALE = gcFilNr
'        rsrs.Update
'        rsrs.Close: Set rsrs = Nothing
        
        If Modul6.FindFile(gcDBPfad, "aWKL30is.rpt") Then
            reportbildschirm "WKL021e", "aWKL30is"
        Else
            reportbildschirm "WKL021e", "aWKL30i"
        End If
        
'    End If
    

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "newGutschStrichcods_KL"
    Fehler.gsFehlertext = "Im Programmteil neue Strichcodes für Gutscheine ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub newRabattStrichcods(irab As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim cRabnr      As String
    Dim cRabnrBar   As String
    Dim i           As Integer
    Dim cSQL        As String
            
    loeschNEW "DruRab", gdBase
    
    cSQL = "Create Table DruRab (Rabnr Text(13), Barcode text(18),Rabatt integer)"
    gdBase.Execute cSQL, dbFailOnError
    
    Dim sRab As String
    sRab = CStr(irab)
    If Len(sRab) = 1 Then
        sRab = "0" & sRab
    End If
    
    cRabnr = "2771" & "000000" & sRab
    cRabnr = fnMoveGutschnr2EAN13(cRabnr)
    cRabnrBar = ean13(cRabnr)
        
    For i = 0 To 39
        cSQL = "Insert into DruRab (Rabnr,Barcode,Rabatt) Values ('" & cRabnr & "', '" & cRabnrBar & "'," & irab & ") "
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    If Modul6.FindFile(gcDBPfad, "aWKL30ws.rpt") Then
        reportbildschirm "WKL021e", "aWKL30ws"
    Else
        reportbildschirm "WKL021e", "aWKL30w"
    End If
    
    

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "newRabattStrichcods"
    Fehler.gsFehlertext = "Im Programmteil Rabattaufkleber ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub newGesamtRabattStrichcods(irab As Integer)
    On Error GoTo LOKAL_ERROR
    
    Dim cRabnr      As String
    Dim cRabnrBar   As String
    Dim i           As Integer
    Dim cSQL        As String
            
    loeschNEW "DruRab", gdBase
    
    cSQL = "Create Table DruRab (Rabnr Text(13), Barcode text(18),Rabatt integer)"
    gdBase.Execute cSQL, dbFailOnError
    
    Dim sRab As String
    sRab = CStr(irab)
    If Len(sRab) = 1 Then
        sRab = "0" & sRab
    End If
    
    cRabnr = "2772" & "000000" & sRab
    cRabnr = fnMoveGutschnr2EAN13(cRabnr)
    cRabnrBar = ean13(cRabnr)
        
    For i = 0 To 39
        cSQL = "Insert into DruRab (Rabnr,Barcode,Rabatt) Values ('" & cRabnr & "', '" & cRabnrBar & "'," & irab & ") "
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    reportbildschirm "WKL021e", "aWKL30n"

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "newGesamtRabattStrichcods"
    Fehler.gsFehlertext = "Im Programmteil Rabattaufkleber ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Sub newSonderpreisEtiketten(dPreis As Double, lVorschub As Long, lAnz As Long, gb_rund As Boolean)
    On Error GoTo LOKAL_ERROR
    
    Dim cRabnr      As String
    Dim cRabnrBar   As String
    Dim i           As Integer
    Dim cSQL        As String
            
    loeschNEW "DRU_GRUN", gdBase
    
    cSQL = "Create Table DRU_GRUN (VKPR double, BEZEICH Text(35))"
    gdBase.Execute cSQL, dbFailOnError
    
    For i = 0 To lVorschub - 1
        cSQL = "Insert into DRU_GRUN (BEZEICH) Values ('.') "
        gdBase.Execute cSQL, dbFailOnError
    Next i
        
    For i = 0 To lAnz - 1
        cSQL = "Insert into DRU_GRUN (VKPR,BEZEICH) Values ('" & dPreis & "','') "
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    If gb_rund = False Then
        reportbildschirm "WKL021e", "aWKL30m"
    Else
        reportbildschirm "WKL021e", "aWKL30rm"
    End If
    

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "newSonderpreisEtiketten"
    Fehler.gsFehlertext = "Im Programmteil Rabattaufkleber ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Sub
Public Function Get_OS() As String
    On Error GoTo LOKAL_ERROR
    
    
  Dim OSString$, OSVersion As OSVERSIONINFO, BuildNr&
    
    OSVersion.dwOSVersionInfoSize = Len(OSVersion)
    Call GetVersionEx(OSVersion)
    
    OSString = "Unbekanntes Betriebssystem"

    With OSVersion
      If (.dwBuildNumber And &HFFFF&) > &H7FFF Then
        BuildNr = (.dwBuildNumber And &HFFFF&) - &H10000
      Else
        BuildNr = .dwBuildNumber And &HFFFF&
      End If
    
      If .dwPlatformId = VER_PLATFORM_WIN32_NT Then
        If .dwMajorVersion = 4 Then
          OSString = "Windows NT"
        ElseIf .dwMajorVersion = 5 Then
          If .dwMinorVersion = 0 Then
              OSString = "Windows 2000"
          ElseIf .dwMinorVersion = 1 Then
              OSString = "Windows XP"
          End If
        End If
      ElseIf .dwPlatformId = VER_PLATFORM_WIN32_WINDOWS Then
        If (.dwMajorVersion > 4) Or (.dwMajorVersion = 4 And _
        .dwMinorVersion = 10) Then
          If BuildNr = 1998 Then
            OSString = "Windows 98"
          Else
            OSString = "Windows 98 SE"
          End If
        ElseIf (.dwMajorVersion = 4 And .dwMinorVersion = 0) Then
          OSString = "Windows 95"
        ElseIf (.dwMajorVersion = 4 And .dwMinorVersion = 90) Then
          OSString = "Windows ME"
        End If
      ElseIf .dwPlatformId = VER_PLATFORM_WIN32s Then
        OSString = "Windows 32s"
      End If
    End With
      
    Get_OS = OSString
    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Get_OS"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function lookingForKundendaten(sKUNDNR As String) As Kunde
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    Dim bonkunde As Kunde
    
    If sKUNDNR = "" Then
        Exit Function
    End If

    cSQL = "Select * from KUNDEN where KUNDNR = " & sKUNDNR
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        
        With bonkunde
        If Not IsNull(rsrs!name) Then
            .nachname = rsrs!name
        Else
            .nachname = ""
        End If
        
        If Not IsNull(rsrs!vorname) Then
            .vorname = rsrs!vorname
        Else
            .vorname = ""
        End If
        
        If Not IsNull(rsrs!Kuerzel) Then
            .Kuerzel = rsrs!Kuerzel
        Else
            .Kuerzel = ""
        End If
        
        If Not IsNull(rsrs!strasse) Then
            .strasse = rsrs!strasse
        Else
            .strasse = ""
        End If
        
        If Not IsNull(rsrs!Plz) Then
            .Plz = rsrs!Plz
        Else
            .Plz = ""
        End If
        
        If Not IsNull(rsrs!STADT) Then
            .Ort = rsrs!STADT
        Else
            .Ort = ""
        End If
        
        If Not IsNull(rsrs!titel) Then
            .titel = rsrs!titel
        Else
            .titel = ""
        End If
        
        If Not IsNull(rsrs!firma) Then
            .firma = rsrs!firma
        Else
            .firma = ""
        End If
        
        If Not IsNull(rsrs!anrede) Then
            .anrede = rsrs!anrede
        Else
            .anrede = ""
        End If
        
        If Not IsNull(rsrs!geschlecht) Then
            .geschlecht = rsrs!geschlecht
        Else
            .geschlecht = ""
        End If
        
        If Not IsNull(rsrs!Tel) Then
            .telefon = rsrs!Tel
        Else
            .telefon = ""
        End If
        
        If Not IsNull(rsrs!Mobiltel) Then
            .Mobiltel = rsrs!Mobiltel
        Else
            .Mobiltel = ""
        End If
        
        If Not IsNull(rsrs!Email) Then
            .Email = rsrs!Email
        Else
            .Email = ""
        End If
        
        If Not IsNull(rsrs!BONUS) Then
            .BONUS = rsrs!BONUS
        Else
            .BONUS = ""
        End If
        
        If Not IsNull(rsrs!KURZTEXT1) Then
            .LAND = rsrs!KURZTEXT1
        Else
            .LAND = ""
        End If
        
        If Not IsNull(rsrs!Datum1) Then
            .GEBDATUM = rsrs!Datum1
        Else
            .GEBDATUM = ""
        End If
        
        If Not IsNull(rsrs!KurzTEXT2) Then
            .KTEXT2 = rsrs!KurzTEXT2
        Else
            .KTEXT2 = ""
        End If
        
        End With
        lookingForKundendaten = bonkunde
        
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "lookingForKundendaten"
    Fehler.gsFehlertext = "Bei der Ermittlung der Kundendaten ist ein Fehler aufgetreten."
    
    Fehlermeldung1

End Function
Public Function Artnr_is(sEAN As String) As String
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim rsrs        As Recordset
    
    If sEAN = "" Then
        Exit Function
    End If
    
    sEAN = Trim(sEAN)
    sEAN = SwapStr(sEAN, ",", "")
    sEAN = SwapStr(sEAN, ".", "")
    Artnr_is = ""
    
    If sEAN <> "" Then
        If IsNumeric(sEAN) Then
    
            cSQL = "select ARTNR "
           
            If Len(sEAN) = 11 Then
                sEAN = "0" & sEAN
        
                cSQL = cSQL & " from artikel where ean = '" & sEAN & "'"
                cSQL = cSQL & " or ean2 = '" & sEAN & "'"
                cSQL = cSQL & " or ean3 = '" & sEAN & "'"
            ElseIf Len(sEAN) = 8 Then
            
                If Left(sEAN, 1) = "2" Then
                    sEAN = Mid$(sEAN, 2, 6)
                    cSQL = cSQL & " from artikel where artnr = " & sEAN
                Else
                    cSQL = cSQL & " from artikel where ean = '" & sEAN & "'"
                    cSQL = cSQL & " or ean2 = '" & sEAN & "'"
                    cSQL = cSQL & " or ean3 = '" & sEAN & "'"
                End If
            ElseIf Len(sEAN) <= 6 Then
                
                cSQL = cSQL & " from artikel where artnr = " & sEAN
            Else
                cSQL = cSQL & " from artikel where ean = '" & sEAN & "'"
                cSQL = cSQL & " or ean2 = '" & sEAN & "'"
                cSQL = cSQL & " or ean3 = '" & sEAN & "'"
            End If
            Set rsrs = gdBase.OpenRecordset(cSQL)
            
            If Not rsrs.EOF Then
                If Not IsNull(rsrs!artnr) Then
                    Artnr_is = rsrs!artnr
                Else
                    Artnr_is = ""
                End If
            End If
            rsrs.Close: Set rsrs = Nothing
        End If
    End If
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Artnr_is"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function bezis(sEAN As String, Optional bEANandieErsteStelle As Boolean = False) As String
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim rsrs        As Recordset
    Dim bIsEAN      As Boolean
    Dim sArtnr      As String
     
    bIsEAN = False
    
    If sEAN = "" Then
        Exit Function
    End If
    
    sEAN = Trim(sEAN)
    sEAN = SwapStr(sEAN, ",", "")
    sEAN = SwapStr(sEAN, ".", "")
    bezis = ""
    
    If sEAN <> "" Then
        If IsNumeric(sEAN) Then
    
            cSQL = "select Artnr, BEZEICH "
           
            If Len(sEAN) = 11 Then
                sEAN = "0" & sEAN
        
                cSQL = cSQL & " from artikel where ean = '" & sEAN & "'"
                cSQL = cSQL & " or ean2 = '" & sEAN & "'"
                cSQL = cSQL & " or ean3 = '" & sEAN & "'"
                
                bIsEAN = True
            ElseIf Len(sEAN) = 8 Then
            
                If Left(sEAN, 1) = "2" Then
                    sEAN = Mid$(sEAN, 2, 6)
                    cSQL = cSQL & " from artikel where artnr = " & sEAN
                Else
                    cSQL = cSQL & " from artikel where ean = '" & sEAN & "'"
                    cSQL = cSQL & " or ean2 = '" & sEAN & "'"
                    cSQL = cSQL & " or ean3 = '" & sEAN & "'"
                    bIsEAN = True
                End If
            ElseIf Len(sEAN) <= 6 Then
                
                cSQL = cSQL & " from artikel where artnr = " & sEAN
            Else
                cSQL = cSQL & " from artikel where ean = '" & sEAN & "'"
                cSQL = cSQL & " or ean2 = '" & sEAN & "'"
                cSQL = cSQL & " or ean3 = '" & sEAN & "'"
                bIsEAN = True
            End If
            Set rsrs = gdBase.OpenRecordset(cSQL)
            
            If Not rsrs.EOF Then
                If Not IsNull(rsrs!BEZEICH) Then
                    bezis = rsrs!BEZEICH
                Else
                    bezis = ""
                End If
                
                If Not IsNull(rsrs!artnr) Then
                    sArtnr = rsrs!artnr
                Else
                    sArtnr = ""
                End If
            End If
            rsrs.Close: Set rsrs = Nothing
            
            
            
            
            
            If bezis = "" And bIsEAN = True Then
            
                cSQL = "select Artnr from ARTEAN_K where ean = '" & sEAN & "'"
                Set rsrs = gdBase.OpenRecordset(cSQL)
                If Not rsrs.EOF Then
                    If Not IsNull(rsrs!artnr) Then
                        sArtnr = rsrs!artnr
                    Else
                        sArtnr = ""
                    End If
                End If
                rsrs.Close: Set rsrs = Nothing
                
                If sArtnr <> "" Then
                
                    cSQL = "select bezeich from artikel where artnr = " & sArtnr & ""
                    Set rsrs = gdBase.OpenRecordset(cSQL)
                    If Not rsrs.EOF Then
                        If Not IsNull(rsrs!BEZEICH) Then
                            bezis = rsrs!BEZEICH
                        Else
                            bezis = ""
                        End If
                    End If
                    rsrs.Close: Set rsrs = Nothing
                    
                End If
            
            End If
            
            
            
            
            
            
            
            
            
            Dim sEAN1 As String
            Dim sEAN2 As String
            Dim sEAN3 As String
            
            
            If bEANandieErsteStelle = True And bIsEAN = True Then
            
                If bezis <> "" Then
                
                    'Diese EAN an die erste Stelle schubsen
                    'sean
                    cSQL = "select * from artikel where artnr = " & sArtnr & ""
                    Set rsrs = gdBase.OpenRecordset(cSQL)
                    
                    If Not rsrs.EOF Then
                        If Not IsNull(rsrs!EAN) Then
                            sEAN1 = rsrs!EAN
                        Else
                            sEAN1 = ""
                        End If
                        
                    End If
                    rsrs.Close: Set rsrs = Nothing
                    
                    
                    If sEAN <> sEAN1 Then
                    
                    
                    
                        cSQL = "Update artikel set ean = '' where ean = '" & sEAN & "'"
                        gdBase.Execute cSQL, dbFailOnError
                        
                        cSQL = "Update artikel set ean2 = '' where ean2 = '" & sEAN & "'"
                        gdBase.Execute cSQL, dbFailOnError
                        
                        cSQL = "Update artikel set ean3 = '' where ean3 = '" & sEAN & "'"
                        gdBase.Execute cSQL, dbFailOnError
                        
                        cSQL = "delete from artean_k where ean = '" & sEAN & "'"
                        gdBase.Execute cSQL, dbFailOnError
                    
                    
                    
                        'nur dann füg ein
                        cSQL = "Update artikel set ean = '" & sEAN & "' where artnr = " & sArtnr & ""
                        gdBase.Execute cSQL, dbFailOnError
                        
                        
                        'wohin mit sEAN1
                        cSQL = "select ean2 from artikel where artnr = " & sArtnr & ""
                        Set rsrs = gdBase.OpenRecordset(cSQL)
                        
                        If Not rsrs.EOF Then
                            If Not IsNull(rsrs!EAN2) Then
                                sEAN2 = rsrs!EAN2
                            Else
                                sEAN2 = ""
                            End If
                            
                        End If
                        rsrs.Close: Set rsrs = Nothing
                        
                        If sEAN2 = "" Then
                        
                            cSQL = "Update artikel set ean2 = '" & sEAN1 & "' where artnr = " & sArtnr & ""
                            gdBase.Execute cSQL, dbFailOnError
                            Exit Function
                        End If
                        
                        
                        cSQL = "select ean3 from artikel where artnr = " & sArtnr & ""
                        Set rsrs = gdBase.OpenRecordset(cSQL)
                        
                        If Not rsrs.EOF Then
                            If Not IsNull(rsrs!EAN3) Then
                                sEAN3 = rsrs!EAN3
                            Else
                                sEAN3 = ""
                            End If
                            
                        End If
                        rsrs.Close: Set rsrs = Nothing
                        
                        If sEAN3 = "" Then
                        
                            cSQL = "Update artikel set ean3 = '" & sEAN1 & "' where artnr = " & sArtnr & ""
                            gdBase.Execute cSQL, dbFailOnError
                            Exit Function
                        End If
                        
                        'del Artean_k
                        cSQL = "Delete from ARTEAN_K where ean = '" & sEAN1 & "'"
                        gdBase.Execute cSQL, dbFailOnError
                        
                        'insert Artean_K
                        
                        cSQL = "Insert into Artean_k (artnr,ean) values (" & sArtnr & ",'" & sEAN1 & "')"
                        gdBase.Execute cSQL, dbFailOnError
                        
                    
                    End If
                    
                    
                    
                    
                
                End If
            
            End If
            
            
            
        End If
    End If
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "bezis"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function Preis_is(sEAN As String) As Double
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim rsrs        As Recordset
    
    If sEAN = "" Then
        Exit Function
    End If
    
    sEAN = Trim(sEAN)
    sEAN = SwapStr(sEAN, ",", "")
    sEAN = SwapStr(sEAN, ".", "")
    Preis_is = 0#
    
    If sEAN <> "" Then
        If IsNumeric(sEAN) Then
    
            cSQL = "select KVKPR1 "
           
            If Len(sEAN) = 11 Then
                sEAN = "0" & sEAN
        
                cSQL = cSQL & " from artikel where ean = '" & sEAN & "'"
                cSQL = cSQL & " or ean2 = '" & sEAN & "'"
                cSQL = cSQL & " or ean3 = '" & sEAN & "'"
            ElseIf Len(sEAN) = 8 Then
                sEAN = Mid$(sEAN, 2, 6)
                cSQL = cSQL & " from artikel where artnr = " & sEAN
            ElseIf Len(sEAN) <= 6 Then
                
                cSQL = cSQL & " from artikel where artnr = " & sEAN
            Else
                cSQL = cSQL & " from artikel where ean = '" & sEAN & "'"
                cSQL = cSQL & " or ean2 = '" & sEAN & "'"
                cSQL = cSQL & " or ean3 = '" & sEAN & "'"
            End If
            Set rsrs = gdBase.OpenRecordset(cSQL)
            
            If Not rsrs.EOF Then
                If Not IsNull(rsrs!KVKPR1) Then
                    Preis_is = rsrs!KVKPR1
                End If
            End If
            rsrs.Close: Set rsrs = Nothing
        End If
    End If
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "Preis_is"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermfromBed(sSpalte As String, sBednr As String) As String
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim rsrs As Recordset
    
    ermfromBed = ""
    If sBednr = "" Then
        If IsNumeric(sBednr) = False Then
            Exit Function
        End If
    End If
    
    
    cSQL = "Select " & sSpalte & " as max from Bedname where bednu = " & sBednr
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        
        If Not IsNull(rsrs!Max) Then
            ermfromBed = rsrs!Max
        End If
        
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermfromBed"
    Fehler.gsFehlertext = "Bei der Ermittlung der Bedienerdaten ist ein Fehler aufgetreten."
    
    Fehlermeldung1

End Function
Public Sub cbofuellenNE(cbox As ComboBox)
    On Error GoTo LOKAL_ERROR
    
    Dim sUK     As String
    Dim sWK     As String
    Dim sWB     As String
    Dim cSatz   As String
    Dim rs      As Recordset
    Dim lAnz    As Long
    
    cbox.Clear
    cbox.AddItem "bitte auswählen"
    cbox.Text = "bitte auswählen"
    
    Set rs = gdBase.OpenRecordset("NOEURO")
    If Not rs.EOF Then
        rs.MoveLast
        lAnz = rs.RecordCount
        rs.MoveFirst
        Do While Not rs.EOF
            If Not IsNull(rs!UKURSEUR) Then
                sUK = rs!UKURSEUR
                If Not IsNull(rs!WKUERZEL) Then
                    sWK = rs!WKUERZEL
                    If Not IsNull(rs!WBEZEICH) Then
                        sWB = rs!WBEZEICH
                        cSatz = Space(6 - Len(sWK)) & sWK & Space(11 - Len(Format(sUK, "####0.00###"))) & Format(sUK, "####0.00###")
                        cSatz = cSatz & Space(31 - Len(sWB)) & sWB
                        cbox.AddItem cSatz
                        If lAnz = 1 Then
                            cbox.Text = cSatz
                        End If
                    End If
                End If
            End If
        
        rs.MoveNext
        Loop
    End If
    rs.Close: Set rs = Nothing
    
    If lAnz = 1 Then
'        cboNoEuro Click
    End If
    

Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "cbofuellenNE"
    Fehler.gsFehlertext = "Beim Anzeigen der Fremdwährungen ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function ermBackcolor(sawm As String, cArtNr As String) As Long
On Error GoTo LOKAL_ERROR

ermBackcolor = glfarbe(0)

If sawm <> "" Then
    If CInt(sawm) < 10 Then
        ermBackcolor = glfarbe(sawm)
    End If
    
    If CInt(sawm) > 10 And CInt(sawm) < 20 Then
        ermBackcolor = glfarbe2(CInt(sawm) - 10)
    End If
    
    If CInt(sawm) = 98 Then
        ermBackcolor = vbWhite
    End If
    
    If CInt(sawm) = 95 Then
        ermBackcolor = vbBlue
    End If
        
    If CInt(sawm) = 94 Then
        ermBackcolor = vbWhite
    End If
    
    If CInt(sawm) = 93 Then
        ermBackcolor = vbWhite
    End If
        
    If CInt(sawm) = 92 Then
        ermBackcolor = vbBlack
    End If
    
    If BistDuEinSonderkontingent(cArtNr) Then
        ermBackcolor = glfarbe(0)
    End If
End If

Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermBackcolor"
    Fehler.gsFehlertext = "Beim Anzeigen der Hintergrundfarbe ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermFarbbez(sawm, cArtNr As String) As String
On Error GoTo LOKAL_ERROR

    Dim rsArt As Recordset
    
    ermFarbbez = ""
    
    If sawm = "" Then
        ermFarbbez = "ohne Merkmal"
        Exit Function
    End If
    
    If CInt(sawm) = 0 Then
        ermFarbbez = "ohne Merkmal"
        Exit Function
    End If

    If CInt(sawm) < 20 And CInt(sawm) > 0 Then
    
        Set rsArt = gdBase.OpenRecordset("Select FarbText from FARBMERK where farbNr = " & CInt(sawm))
        If Not rsArt.EOF Then
            If Not IsNull(rsArt!farbtext) Then
                ermFarbbez = rsArt!farbtext
            End If
        End If
        rsArt.Close: Set rsArt = Nothing
        
    End If
    
    If CInt(sawm) = 98 Then
        ermFarbbez = "neuer Artikel"
    End If

    If CInt(sawm) = 95 Then
        ermFarbbez = "nicht geliefert"
    End If
        
    If CInt(sawm) = 94 Then
        ermFarbbez = "für Preisaktion vorgesehen"
    End If
    
    If CInt(sawm) = 93 Then
        ermFarbbez = "befindet sich in Preisaktion"
    End If
        
    If CInt(sawm) = 92 Then
        ermFarbbez = "seit 2 Jahren oder noch nie verkauft"
    End If
    
    If BistDuEinSonderkontingent(cArtNr) Then
        ermFarbbez = "Sonderkontingent"
    End If
    
Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermFarbbez"
    Fehler.gsFehlertext = "Beim Ermitteln der Farbbezeichnung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermForecolor(sawm As String) As Long
On Error GoTo LOKAL_ERROR

ermForecolor = vbBlack

If sawm <> "" Then
    If CInt(sawm) < 10 Then
        ermForecolor = vbBlack
    End If
    
    If CInt(sawm) > 10 And CInt(sawm) < 20 Then
        ermForecolor = vbBlack
    End If
    
    If CInt(sawm) = 98 Then
        ermForecolor = vbWhite
    End If
        
    If CInt(sawm) = 95 Then
        ermForecolor = vbBlack
    End If
        
    If CInt(sawm) = 94 Then
        ermForecolor = vbBlue
    End If
    
    If CInt(sawm) = 93 Then
        ermForecolor = vbGreen
    End If
       
    If CInt(sawm) = 92 Then
        ermForecolor = vbWhite
    End If
        
'    If BistDuEinSonderkontingent(cArtNr) Then
'        frmWKL20.List3.Nodes(i).BackColor = glfarbe(0)
'    End If
        
End If

Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermForecolor"
    Fehler.gsFehlertext = "Beim Anzeigen der Schriftfarbe ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function SwapStr(ByVal txt As String, Search As String, Swap As String) As String
    On Error GoTo LOKAL_ERROR
    
  Dim X&, Pos&
    
    X = 1
    Do While X <= Len(txt)
      Pos = InStr(X, txt, Search)
      If Pos = 0 Then
        Exit Do
      Else
        txt = Left$(txt, Pos - 1) & Swap & Mid$(txt, Pos + _
              Len(Search), Len(txt))
              
        X = Pos + Len(Swap)
      End If
    Loop
    SwapStr = txt

Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "SwapStr"
    Fehler.gsFehlertext = "Bei der Textersetzung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function

Public Sub KassendatundStatcheck()
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    
    cPfad = gcDBPfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    
    If gbBestAkt = True Then
        frmWKL00.File2.Path = gsZoutPfad
        frmWKL00.File2.Refresh
        
        If frmWKL00.File2.ListCount > 0 Then
            If gbFtpYes Then
            
                gsZenFTPAdresse = "80.86.85.121"
                gsZenFTPUSER = gsLagerFTPBox 'Das ist der Eintrag aus der Lager.cfg
                gsZenFTPPASS = "stada"
                
                giKissFtpMode = 6 'FTPMODE= 6 , gsZoutpfad - Ordner leeren abschicken
                frmWKL38.Show 1
            Else
                theBigFTPFehler = True
            End If
        Else
            theBigFTPFehler = True
        End If
    
    Else
    
        frmWKL00.File2.Path = cPfad & "STAT"
        frmWKL00.File2.Refresh
        
        If frmWKL00.File2.ListCount > 0 Then
        
            frmWKL00.File2.Path = gsZoutPfad
            frmWKL00.File2.Refresh
            
            If frmWKL00.File2.ListCount > 0 Then
                If gbFtpYes Then
                    If gbFtpZENT = True Then
                        giKissFtpMode = 7 'FTPMODE= 7 , Kombimodus Stat und gsZoutpfad - Ordner leeren abschicken
                        frmWKL38.Show 1
                    Else
                        giKissFtpMode = 5 'FTPMODE= 5 , STAT - Ordner leeren abschicken
                        frmWKL38.Show 1
                        
                    End If
                Else
    
                    theBigFTPFehler = True
                End If
            Else
                If gbFtpYes Then
                    giKissFtpMode = 5 'FTPMODE= 5 , STAT - Ordner leeren abschicken
                    frmWKL38.Show 1
                Else
    
                    theBigFTPFehler = True
                End If
                theBigFTPFehler = True
                
            End If
            
        Else
            frmWKL00.File2.Path = gsZoutPfad
            frmWKL00.File2.Refresh
            
            If frmWKL00.File2.ListCount > 0 Then
                If gbFtpYes Then
                    If gbFtpZENT Then
                        giKissFtpMode = 6 'FTPMODE= 6 , gsZoutpfad - Ordner leeren abschicken
                        frmWKL38.Show 1
                    Else
                        theBigFTPFehler = True
                    End If
                Else
                    theBigFTPFehler = True
                End If
            Else
                theBigFTPFehler = True
            End If
        End If
    End If
    
    
    Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "KassendatundStatcheck"
    Fehler.gsFehlertext = "Beim Kassen- und Statistikdateiencheck ist ein Fehler aufgetreten." & cPfad & " " & gsZoutPfad
    
    Fehlermeldung1
End Sub

Public Sub zeigeHilfeAPPpfad(cverz As String, Helpname As String)
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad   As String
    Dim cPfad1  As String
    Dim lRet    As Long
    
    Dim sWordp  As String
    Dim sbesy   As String
    
    sWordp = "C:\Programme\Microsoft Office\Office\WINWORD.exe "
    sWordp = ShortPath(sWordp)
    
    
    cPfad = App.Path   'dabapfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    cPfad1 = cPfad & cverz
    cPfad = cPfad & cverz & "\"
    
    cPfad = ShortPath(cPfad)
    cPfad1 = ShortPath(cPfad1)
    
    lRet = 88
    sbesy = Trim(Get_OS)

    If FileExists(cPfad & Helpname) Then
'    If FindFile(cpfad, Helpname & ".rtf") Then
        If sbesy = "Windows 98 SE" Then
        
            Select Case lRet
                Case Is = 8
                    lRet = Shell(sWordp & cPfad & Helpname, vbNormalFocus)
                    If lRet = 8 Then
                        lRet = Shell("WRITE.exe " & cPfad & Helpname, vbNormalFocus)
                    End If
                Case Is = 88, 5, 8
                    lRet = Shell("WRITE.exe " & cPfad & Helpname, vbNormalFocus)
            End Select
            
            
        Else
        
            lRet = ShellExecute(260052, "open", Helpname, "", cPfad1, 1)
            
            Select Case lRet
                Case Is = 8
                    lRet = Shell(sWordp & cPfad & Helpname, vbNormalFocus)
                    If lRet = 8 Then
                        lRet = Shell("WRITE.exe " & cPfad & Helpname, vbNormalFocus)
                    End If
                Case Is = 88, 5, 8
                    lRet = Shell("WRITE.exe " & cPfad & Helpname, vbNormalFocus)
            End Select
        End If
    End If
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Or err.Number = 5 Then
        Resume Next
    Else
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "zeigeHilfeAPPpfad"
        Fehler.gsFehlertext = "Beim Anzeigen der Anleitung ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub
Public Sub zeigeHilfe(cverz As String, Helpname As String, ByRef cPfad As String)
    On Error GoTo LOKAL_ERROR
    

    Dim cPfad1  As String
    Dim lRet    As Long
    
    Dim sWordp  As String
    Dim sbesy   As String
    
    sWordp = "C:\Programme\Microsoft Office\Office\WINWORD.exe "
    sWordp = ShortPath(sWordp)
    

    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    cPfad1 = cPfad & cverz
    cPfad = cPfad & cverz & "\"
    
    cPfad = ShortPath(cPfad)
    cPfad1 = ShortPath(cPfad1)
    
    lRet = 88
    sbesy = Trim(Get_OS)

    If Modul6.FindFile(cPfad, Helpname) Then
        If sbesy = "Windows 98 SE" Then
        
            Select Case lRet
                Case Is = 8
                    lRet = Shell(sWordp & cPfad & Helpname, vbNormalFocus)
                    If lRet = 8 Then
                        lRet = Shell("WRITE.exe " & cPfad & Helpname, vbNormalFocus)
                    End If
                Case Is = 88, 5, 8
                    lRet = Shell("WRITE.exe " & cPfad & Helpname, vbNormalFocus)
            End Select
            
            
        Else
        
            lRet = ShellExecute(260052, "open", Helpname, "", cPfad1, 1)
            
            Select Case lRet
                Case Is = 8
                    lRet = Shell(sWordp & cPfad & Helpname, vbNormalFocus)
                    If lRet = 8 Then
                        lRet = Shell("WRITE.exe " & cPfad & Helpname, vbNormalFocus)
                    End If
                Case Is = 88, 5, 8
                    lRet = Shell("WRITE.exe " & cPfad & Helpname, vbNormalFocus)
            End Select
        End If
    End If
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 53 Or err.Number = 5 Then
        Resume Next
    Else
    
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "zeigeHilfe"
        Fehler.gsFehlertext = "Beim Anzeigen der Anleitung ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
End Sub



Public Function istHilfeda(Helpname As String) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cPfad As String
    Dim lRet As Long
    
    istHilfeda = False
    
    cPfad = gcPfad    'Anwendungspfad
    If Right(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    cPfad = cPfad & "KissHelp"
    
    If Modul6.FindFile(cPfad, Helpname & ".DOC") Then
        istHilfeda = True
    End If
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "istHilfeda"
    Fehler.gsFehlertext = "Beim Suchen der Anleitung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub TransferTab(dbQuell As Database, sZiel As String, sTab As String)
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    
    sSQL = "Select " & sTab & ".* into " & sTab & " IN '" & sZiel & "' from " & sTab
    dbQuell.Execute sSQL, dbFailOnError
    
    Exit Sub
LOKAL_ERROR:
    If err.Number = 3078 Or err.Number = 3010 Then
        Resume Next
    ElseIf err.Number = 3163 Then
    
        theBigFehler = True
        schreibetheBigFehler "Datenlängenfehler in " & sTab
        
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "TransferTab"
        Fehler.gsFehlertext = "Beim Kopieren der Tabelle " & sTab & " in eine andere Datenbank ist ein Fehler aufgetreten."
        
        Fehlermeldung1
        Exit Sub
        
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul5"
        Fehler.gsFunktion = "TransferTab"
        Fehler.gsFehlertext = "Beim Kopieren der Tabelle " & sTab & " in eine andere Datenbank ist ein Fehler aufgetreten."
        
        Fehlermeldung1
    End If
    
End Sub
Public Function GetEntry(id&) As String
    On Error GoTo LOKAL_ERROR
    
    Dim LCID&, result&, Buffer$, length&
    
    LCID = GetSystemDefaultLCID()
    length = GetLocaleInfo(LCID, id, Buffer, 0) - 1
    Buffer = Space(length + 1)
    result = GetLocaleInfo(LCID, id, Buffer, length)
    GetEntry = Left$(Buffer, length)
    
Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "GetEntry"
    Fehler.gsFehlertext = "Beim Ermitteln von Systemeinstellungen ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Sub fAnmeldung()
    On Error GoTo LOKAL_ERROR
    
    Dim iRet As Integer
    gsMeldestatus = "Anmeldung"
    
    Do
        
        If gbBEDKARTE Then
            frmWK12a.Show 1
        Else
            frmWKL99.Show 1
        End If
    
        If glLevel < 0 Then

            iRet = MsgBox("Anmeldung fehlerhaft!" & vbCrLf & "Erneuter Versuch?", vbQuestion + vbYesNo, gsPname & " Anmeldung:")
            If iRet = vbNo Then
                Unload frmWKL00
                End 'Ende
            End If
        End If
    Loop While glLevel = -1
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "fAnmeldung"
    Fehler.gsFehlertext = "Bei der Anmeldung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Function repDbeinste() As Boolean
On Error GoTo LOKAL_ERROR
    Dim sSQL As String
    
    repDbeinste = False
    If NewTableSuchenDBKombi("ZDBEINSTE", gdBase) Then
        loeschNEW "DBEINSTE", gdBase
        sSQL = "Select * into DBEINSTE from ZDBEINSTE"
        schreibeProtokollDabaAblauf sSQL: gdBase.Execute sSQL, dbFailOnError
        
        repDbeinste = True
    End If
    

    
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "repDbeinste"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1

End Function
Public Sub checktab(sTab As String, db As Database)
On Error GoTo LOKAL_ERROR

    Dim sSQL As String
    
    Select Case UCase(sTab)
        Case "DBEINSTE"
            '1
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "DBVERSION", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "DBVERSION", "DOUBLE", db
                
                sSQL = "Update DBEINSTE Set DBVERSION = 700 "
                db.Execute sSQL, dbFailOnError
            End If
            
            '2
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "SPANNE", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "SPANNE", "TEXT(3)", db
                
                sSQL = "Update DBEINSTE Set Spanne = 'LEK' "
                db.Execute sSQL, dbFailOnError
            End If
            
            '3
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "BONUSGRENZ", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "BONUSGRENZ", "Double", db
                
                sSQL = "Update DBEINSTE Set BONUSGRENZ = 0"
                db.Execute sSQL, dbFailOnError
            End If
            
            '4
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ABRUNDEN", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "ABRUNDEN", "DOUBLE", db
                
                sSQL = "Update DBEINSTE Set ABRUNDEN = 0 "
                db.Execute sSQL, dbFailOnError
            End If
            
            '5
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "AUFRUNDEN", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "AUFRUNDEN", "DOUBLE", db
                
                sSQL = "Update DBEINSTE Set AUFRUNDEN = 0 "
                db.Execute sSQL, dbFailOnError
            End If
            
            '6
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "RUNDKRIT", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "RUNDKRIT", "Double", db
                
                sSQL = "Update DBEINSTE Set RUNDKRIT = 5"
                db.Execute sSQL, dbFailOnError
            End If
            
            '7
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "HAGUNR", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "HaGuNr", "Bit", db
                
                sSQL = "Update DBEINSTE Set HaGuNr = False "
                db.Execute sSQL, dbFailOnError
            End If
            
            '8
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "SONDRAB", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "SONDRAB", "Bit", db
                
                sSQL = "Update DBEINSTE Set SONDRAB = False "
                db.Execute sSQL, dbFailOnError
            End If
            
'''            '9
'''            If Not SpalteInTabellegefundenNEW("DBEINSTE", "KASSPASS", db) Then
'''                SpalteAnfuegenNEW "DBEINSTE", "KASSPASS", "TEXT (10)", db
'''
'''                sSQL = "Update DBEINSTE Set KASSPASS = '' "
'''                db.Execute sSQL, dbFailOnError
'''            End If
            
            '10
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "UPDCOUNT", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "UPDCOUNT", "long", db
                
                sSQL = "Update DBEINSTE Set UPDCOUNT = 100 "
                db.Execute sSQL, dbFailOnError

            End If
            
            '11
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "UPDTIME", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "UPDTIME", "long", db
                
                sSQL = "Update DBEINSTE Set UPDTIME = 1000 "
                db.Execute sSQL, dbFailOnError
            End If
            
            '12
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "KuImBoY", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "KuImBoY", "BIT", db
                
                sSQL = "Update DBEINSTE Set KuImBoY = yes "
                db.Execute sSQL, dbFailOnError
            End If
            
            '13
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "LASTKOMP", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "LastKomp", "DATETIME", db
    
                Dim lalt As Long
                lalt = Fix(Now) - 7
                
                sSQL = "Update DBEINSTE Set LastKomp = " & lalt
                db.Execute sSQL, dbFailOnError
            End If
            
            '14
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "FTPZENT", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "FTPZENT", "BIT", db

                sSQL = "Update DBEINSTE Set FTPZENT = False "
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '15
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "FILKASDAT", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "FILKASDAT", "BIT", db
    
                sSQL = "Update DBEINSTE Set FILKASDAT = False "
                db.Execute sSQL, dbFailOnError
            End If
            
            '16
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "USTATW", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "USTATW", "BIT", db
    
                sSQL = "Update DBEINSTE Set USTATW = False "
                db.Execute sSQL, dbFailOnError
            End If
            
            '17
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GESRAB", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GESRAB", "SINGLE", db
    
                sSQL = "Update DBEINSTE Set GESRAB = 0 "
                db.Execute sSQL, dbFailOnError
            End If
            
            '18
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "BEDKARTE", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "BEDKARTE", "BIT", db
                
                sSQL = "Update DBEINSTE Set BEDKARTE = False"
                db.Execute sSQL, dbFailOnError
            End If
            
            '19
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ZUGRIFFNEW", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "ZUGRIFFNEW", "BIT", db
    
                sSQL = "Update DBEINSTE Set ZUGRIFFNEW = False"
                db.Execute sSQL, dbFailOnError
            End If
            
            '20
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ABda", db) Then
    
                SpalteAnfuegenNEW "DBEINSTE", "ABda", "BIT", db
                
                sSQL = "Update DBEINSTE Set ABda = False"
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '21
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ABNR", db) Then
            
                SpalteAnfuegenNEW "DBEINSTE", "ABNr", "BIT", db
                
                sSQL = "Update DBEINSTE Set ABNr = False"
                db.Execute sSQL, dbFailOnError
                
            End If
            
            
            
            '22
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "STORNO", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "STORNO", "BIT", db
    
                sSQL = "Update DBEINSTE Set STORNO = False"
                db.Execute sSQL, dbFailOnError

            End If
            
            '23
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "STADAP", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "STADAP", "BIT", db
    
                sSQL = "Update DBEINSTE Set STADAP = true"
                db.Execute sSQL, dbFailOnError

            End If
            
            '23
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "DRUCK27", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "DRUCK27", "BIT", db
    
                sSQL = "Update DBEINSTE Set DRUCK27 = true"
                db.Execute sSQL, dbFailOnError

            End If
            
            '24
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "FILMEK", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "FILMEK", "BIT", db
    
                sSQL = "Update DBEINSTE Set FILMEK = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '25
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "FILBONI", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "FILBONI", "BIT", db
    
                sSQL = "Update DBEINSTE Set FILBONI = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '26
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ECTOZ", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "ECTOZ", "BIT", db
    
                sSQL = "Update DBEINSTE Set ECTOZ = false"
                db.Execute sSQL, dbFailOnError

            End If
            
            '27
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "BONUSBNB", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "BONUSBNB", "BIT", db
    
                sSQL = "Update DBEINSTE Set BONUSBNB = true"
                db.Execute sSQL, dbFailOnError
            End If
            
            '28
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "OGV", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "OGV", "BIT", db
    
                sSQL = "Update DBEINSTE Set OGV = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '29
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "RGO", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "RGO", "BIT", db
    
                sSQL = "Update DBEINSTE Set RGO = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '30
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "REGEB", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "REGEB", "BIT", db
    
                sSQL = "Update DBEINSTE Set REGEB = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '31
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "AA", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "AA", "BIT", db
    
                sSQL = "Update DBEINSTE Set AA = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '32
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "KuImBoN", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "KuImBoN", "BIT", db
                
                sSQL = "Update DBEINSTE Set KuImBoN = yes "
                db.Execute sSQL, dbFailOnError
            End If
            
            '33
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "TAGAKT", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "TAGAKT", "BIT", db
    
                sSQL = "Update DBEINSTE Set TAGAKT = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '34
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "SPEZRU", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "SPEZRU", "BIT", db
    
                sSQL = "Update DBEINSTE Set SPEZRU = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '35
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "SCHUBMB", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "SCHUBMB", "Bit", db
                
                sSQL = "Update DBEINSTE Set SCHUBMB = False "
                db.Execute sSQL, dbFailOnError
            End If
            
            '36
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "OLDSTADADEL", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "OLDSTADADEL", "Bit", db
                
                sSQL = "Update DBEINSTE Set OLDSTADADEL = True "
                db.Execute sSQL, dbFailOnError
            End If
            
            '36
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "STADAPause", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "STADAPause", "Double", db
                
                sSQL = "Update DBEINSTE Set STADAPause = 0 "
                db.Execute sSQL, dbFailOnError
            End If
            
            '37
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "SPEZVAR", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "SPEZVAR", "BYTE", db
    
                sSQL = "Update DBEINSTE Set SPEZVAR = 0"
                db.Execute sSQL, dbFailOnError
            End If
            
            '38
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "AGNAUSW", db) Then
    
                SpalteAnfuegenNEW "DBEINSTE", "AGNAUSW", "BIT", db
                
                sSQL = "Update DBEINSTE Set AGNAUSW = False"
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '39
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "STORNOcheck2Bed", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "STORNOcheck2Bed", "Bit", db
                
                sSQL = "Update DBEINSTE Set STORNOcheck2Bed = False "
                db.Execute sSQL, dbFailOnError
            End If
            
            '40
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "USTATM", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "USTATM", "BIT", db
    
                sSQL = "Update DBEINSTE Set USTATM = False "
                db.Execute sSQL, dbFailOnError
            End If
            
            '41
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "LUGBE", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "LUGBE", "BYTE", db

                sSQL = "Update DBEINSTE set LUGBE = 2"
                db.Execute sSQL, dbFailOnError
            End If
            
            '42
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "LUGTAGV", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "LUGTAGV", "Integer", db
                
                sSQL = "Update DBEINSTE set LUGTAGV = 365"
                db.Execute sSQL, dbFailOnError
            End If
    
            '43
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "LUGTAGZ", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "LUGTAGZ", "Integer", db
            
                sSQL = "Update DBEINSTE set LUGTAGZ = 365"
                db.Execute sSQL, dbFailOnError
            End If
            
            '44
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "DSL", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "DSL", "BIT", db
    
                sSQL = "Update DBEINSTE Set DSL = false "
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '45
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "OptiStada", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "OptiStada", "BIT", db
    
                sSQL = "Update DBEINSTE Set OptiStada = false "
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '46
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ARTKUMWGN", db) Then
    
                SpalteAnfuegenNEW "DBEINSTE", "ARTKUMWGN", "BIT", db
                
                sSQL = "Update DBEINSTE Set ARTKUMWGN = False"
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '47
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "MWSTBeg", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "MWSTBeg", "TEXT (1)", db
    
                sSQL = "Update DBEINSTE Set MWSTBeg = 'V' "
                db.Execute sSQL, dbFailOnError
            End If
            
            '48
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "LASTKOMPTIME", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "LASTKOMPTIME", "TEXT(8)", db
    
                sSQL = "Update DBEINSTE Set LASTKOMPTIME = ''"
                db.Execute sSQL, dbFailOnError
            End If
            
            '49
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "DELBDAT", db) Then
    
                SpalteAnfuegenNEW "DBEINSTE", "DELBDAT", "BIT", db
                
                sSQL = "Update DBEINSTE Set DELBDAT = False"
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '50
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "DIFFPROT", db) Then
    
                SpalteAnfuegenNEW "DBEINSTE", "DIFFPROT", "BIT", db
                
                sSQL = "Update DBEINSTE Set DIFFPROT = False"
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '51
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "KUPFAD", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "KUPFAD", "TEXT(100)", db
    
                sSQL = "Update DBEINSTE Set KUPFAD = '' "
                db.Execute sSQL, dbFailOnError
            End If
            
            '52
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GESEK", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GESEK", "BIT", db
    
                sSQL = "Update DBEINSTE Set GESEK = true"
                db.Execute sSQL, dbFailOnError
            End If
            
            '53
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GEBTAGE", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GEBTAGE", "Integer", db
                
                sSQL = "Update DBEINSTE set GEBTAGE = 2"
                db.Execute sSQL, dbFailOnError
            End If
            
            '54
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "NoSpruch", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "NoSpruch", "BIT", db
                
                sSQL = "Update DBEINSTE Set NoSpruch = False"
                db.Execute sSQL, dbFailOnError
            End If
            
            '55
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "FTH", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "FTH", "BIT", db
    
                sSQL = "Update DBEINSTE Set FTH = true"
                db.Execute sSQL, dbFailOnError

            End If
            
            '56
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "KUMSUM", db) Then
    
                SpalteAnfuegenNEW "DBEINSTE", "KUMSUM", "BIT", db
                
                sSQL = "Update DBEINSTE Set KUMSUM = true"
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '57
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "WEautoGEF", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "WEautoGEF", "BIT", db
                
                sSQL = "Update DBEINSTE Set WEautoGEF = True"
                db.Execute sSQL, dbFailOnError
            End If
            
            '58
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "AutoZwsp", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "AutoZwsp", "BIT", db
                
                sSQL = "Update DBEINSTE Set AutoZwsp = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '59
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ETIKVKAE", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "ETIKVKAE", "BIT", db
                
                sSQL = "Update DBEINSTE Set ETIKVKAE = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '60
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "PENNERFARB", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "PENNERFARB", "BIT", db
                
                sSQL = "Update DBEINSTE Set PENNERFARB = True"
                db.Execute sSQL, dbFailOnError
            End If
            
            '61
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "NewArt", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "NewArt", "BIT", db
                
                sSQL = "Update DBEINSTE Set NewArt = True"
                db.Execute sSQL, dbFailOnError
            End If
            
            '62
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "NONEGZU", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "NONEGZU", "BIT", db
                
                sSQL = "Update DBEINSTE Set NONEGZU = False"
                db.Execute sSQL, dbFailOnError
            End If
            
            '63
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ARTEINDEUT", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "ARTEINDEUT", "BIT", db
                
                sSQL = "Update DBEINSTE Set ARTEINDEUT = true"
                db.Execute sSQL, dbFailOnError
            End If
            
            '64
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "EDEKA", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "EDEKA", "TEXT(6)", db
                
                sSQL = "Update DBEINSTE Set EDEKA = ''"
                db.Execute sSQL, dbFailOnError
            End If
            
            '65
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GESRABBEZ", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GESRABBEZ", "TEXT(20)", db
                
                sSQL = "Update DBEINSTE Set GESRABBEZ = 'Jubiläumsrabatt:'"
                db.Execute sSQL, dbFailOnError
            End If
            
            '66
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "KundRabattDeaktiv", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "KundRabattDeaktiv", "BIT", db
                
                sSQL = "Update DBEINSTE Set KundRabattDeaktiv = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '67
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GEBADRESSE", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GEBADRESSE", "BIT", db
                
                sSQL = "Update DBEINSTE Set GEBADRESSE = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '68
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "UEBERPROT", db) Then
    
                SpalteAnfuegenNEW "DBEINSTE", "UEBERPROT", "BIT", db
                
                sSQL = "Update DBEINSTE Set UEBERPROT = False"
                db.Execute sSQL, dbFailOnError
                
            End If
            
            '69
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ETIONLYME", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "ETIONLYME", "BIT", db
                
                sSQL = "Update DBEINSTE Set ETIONLYME = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '70
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "NOETIWEAUSBE", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "NOETIWEAUSBE", "BIT", db
                
                sSQL = "Update DBEINSTE Set NOETIWEAUSBE = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '71
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "NewArtNrVorschlag", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "NewArtNrVorschlag", "BIT", db
                
                sSQL = "Update DBEINSTE Set NewArtNrVorschlag = False"
                db.Execute sSQL, dbFailOnError
            End If
            
            '72
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "KVKSICHER", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "KVKSICHER", "BIT", db
    
                sSQL = "Update DBEINSTE Set KVKSICHER = False"
                db.Execute sSQL, dbFailOnError

            End If
            
            '72
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "NOWOCHENDATEN", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "NOWOCHENDATEN", "BIT", db
    
                sSQL = "Update DBEINSTE Set NOWOCHENDATEN = False"
                db.Execute sSQL, dbFailOnError

            End If
            
            '73
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "JUGENDSCHUTZFARBE", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "JUGENDSCHUTZFARBE", "TEXT (2)", db
    
                sSQL = "Update DBEINSTE Set JUGENDSCHUTZFARBE = '' "
                db.Execute sSQL, dbFailOnError
            End If
            
            '74
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "UnbekanntStrichMail", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "UnbekanntStrichMail", "TEXT (50)", db
    
                sSQL = "Update DBEINSTE Set UnbekanntStrichMail = '' "
                db.Execute sSQL, dbFailOnError
            End If
            
            '75
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "ETIBEIFARB", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "ETIBEIFARB", "BIT", db
    
                sSQL = "Update DBEINSTE Set ETIBEIFARB = False"
                db.Execute sSQL, dbFailOnError

            End If
            
            '76
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "TerminReminderSMS", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "TerminReminderSMS", "BIT", db
    
                sSQL = "Update DBEINSTE Set TerminReminderSMS = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '77
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "BonusGutscheinBeiGrenze", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "BonusGutscheinBeiGrenze", "Double", db
                
                sSQL = "Update DBEINSTE Set BonusGutscheinBeiGrenze = 0 "
                db.Execute sSQL, dbFailOnError
            End If
            
            '78
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "NachtStart", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "NachtStart", "TEXT (8)", db
    
                sSQL = "Update DBEINSTE Set NachtStart = '' "
                db.Execute sSQL, dbFailOnError
            End If
            
            '79
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "JBTART", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "JBTART", "BIT", db
                
                sSQL = "Update DBEINSTE Set JBTART = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '80
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GutschNrKomplett", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GutschNrKomplett", "BIT", db
    
                sSQL = "Update DBEINSTE Set GutschNrKomplett = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '81
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GUTSCHBARAUSZAHLUNGMITUNTER", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GUTSCHBARAUSZAHLUNGMITUNTER", "BIT", db
    
                sSQL = "Update DBEINSTE Set GUTSCHBARAUSZAHLUNGMITUNTER = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '82
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GutscheinBeiVKversteuern", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GutscheinBeiVKversteuern", "BIT", db
    
                sSQL = "Update DBEINSTE Set GutscheinBeiVKversteuern = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '83
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "KURZERSTORNI", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "KURZERSTORNI", "BIT", db
    
                sSQL = "Update DBEINSTE Set KURZERSTORNI = false"
                db.Execute sSQL, dbFailOnError
            End If
            
            '84
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "NachtVerarbeitungMail", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "NachtVerarbeitungMail", "TEXT (50)", db
    
                sSQL = "Update DBEINSTE Set NachtVerarbeitungMail = '' "
                db.Execute sSQL, dbFailOnError
            End If
            
            '85
            If Not SpalteInTabellegefundenNEW("DBEINSTE", "GZBEZ", db) Then
                SpalteAnfuegenNEW "DBEINSTE", "GZBEZ", "TEXT(20)", db
                
                sSQL = "Update DBEINSTE Set GZBEZ = ''"
                db.Execute sSQL, dbFailOnError
            End If
            

    End Select
    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "checktab"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub fAbmeldung()
    On Error GoTo LOKAL_ERROR
    
    Dim iRet As Integer
    gsMeldestatus = "Abmeldung"
    
    frmWK12a.Show 1

    
Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "fAbmeldung"
    Fehler.gsFehlertext = "Bei der Abmeldung ist ein Fehler aufgetreten."
    
    Fehlermeldung1
   
End Sub
Public Function ermbrheute() As Byte
On Error GoTo LOKAL_ERROR

ermbrheute = 255

Dim bytebr As Byte
Dim iWeek As Integer
Dim j As Integer
Dim lWeekday As Long

lWeekday = Weekday(DateValue(Now), vbMonday)

If lWeekday > 0 And lWeekday < 8 Then

    iWeek = Format(DateValue(Now) - 7, "ww")
    
    j = iWeek Mod 2
    If j = 0 Then 'gerade KW
        bytebr = CByte(lWeekday)
    Else 'ungerade KW
         bytebr = CByte(lWeekday) + 7
    End If
    
    ermbrheute = bytebr
    
End If



Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermbrheute"
    Fehler.gsFehlertext = "Im Programmteil Eingabehilfe ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Sub leseNacht()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    gbBR = False
    gbMB = False
    gbEXTSICH = False
    gbSTAMDA = False
    gbKABSCH = False
    gbUmsatzNeu = False
    gbPCAus = False
    gbUKDAT = False
    gbEKDAT = False
    gbUSTAT = False
    gbUPRO = False
    gbUSTADA = False
    gbWKAUS = False
    gsNachtstart = ""
    giINTERV = 15
    giSTARTMIN = 30
    
    If NewTableSuchenDBKombi("NACHT", gdApp) = False Then
        CreateTable "NACHT", gdApp
    Else
        If Not SpalteInTabellegefundenNEW("NACHT", "EXTSICH", gdApp) Then
            SpalteAnfuegenNEW "NACHT", "EXTSICH", "Bit", gdApp
        End If
        
        If Not SpalteInTabellegefundenNEW("NACHT", "WKAUS", gdApp) Then
            SpalteAnfuegenNEW "NACHT", "WKAUS", "Bit", gdApp
        End If
    End If
    
    Set rsrs = gdApp.OpenRecordset("NACHT")
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!pcaus) Then
            gbPCAus = rsrs!pcaus
        Else
            gbPCAus = False
        End If
        
        If Not IsNull(rsrs!wkaus) Then
            gbWKAUS = rsrs!wkaus
        Else
            gbWKAUS = False
        End If
        
        If Not IsNull(rsrs!br) Then
            gbBR = rsrs!br
        Else
            gbBR = False
        End If
        
        If Not IsNull(rsrs!STAMDA) Then
            gbSTAMDA = rsrs!STAMDA
        Else
            gbSTAMDA = False
        End If
        
        If Not IsNull(rsrs!MB) Then
            gbMB = rsrs!MB
        Else
            gbMB = False
        End If
        
        If Not IsNull(rsrs!EXTSICH) Then
            gbEXTSICH = rsrs!EXTSICH
        Else
            gbEXTSICH = False
        End If
        
        If Not IsNull(rsrs!KABSCH) Then
            gbKABSCH = rsrs!KABSCH
        Else
            gbKABSCH = False
        End If
        
        If Not IsNull(rsrs!UMSATZNEU) Then
            gbUmsatzNeu = rsrs!UMSATZNEU
        Else
            gbUmsatzNeu = False
        End If
        
        If Not IsNull(rsrs!INTERV) Then
            giINTERV = rsrs!INTERV
        Else
            giINTERV = 15
        End If
        
        If Not IsNull(rsrs!STARTMIN) Then
            giSTARTMIN = rsrs!STARTMIN
        Else
            giSTARTMIN = 30
        End If
        
        If Not IsNull(rsrs!NachtStart) Then
            gsNachtstart = rsrs!NachtStart
        Else
            gsNachtstart = ""
        End If
        
        If Not IsNull(rsrs!upro) Then
            gbUPRO = rsrs!upro
        Else
            gbUPRO = False
        End If
        
        If Not IsNull(rsrs!Ustada) Then
            gbUSTADA = rsrs!Ustada
        Else
            gbUSTADA = False
        End If
        
        If Not IsNull(rsrs!Ustat) Then
            gbUSTAT = rsrs!Ustat
        Else
            gbUSTAT = False
        End If
    
        If Not IsNull(rsrs!UKDAT) Then
            gbUKDAT = rsrs!UKDAT
        Else
            gbUKDAT = False
        End If
        
        If Not IsNull(rsrs!EKDAT) Then
            gbEKDAT = rsrs!EKDAT
        Else
            gbEKDAT = False
        End If
    
    End If
    rsrs.Close: Set rsrs = Nothing
    
    
    
    
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "leseNacht"
    Fehler.gsFehlertext = "Es trat ein Fehler im Programmteil Programmeinstellungen auf. "
    
    Fehlermeldung1
End Sub
Public Sub leseKundenimBon()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    gbKUIBONname = False
    gbKUIBONvorname = False
    gbKUIBONtitel = False
    gbKUIBONfirma = False
    gbKUIBONplz = False
    gbKUIBONort = False
    gbKUIBONstrasse = False
    gbKUIBONtel = False
    gbKUIBONmobil = False
    
    If NewTableSuchenDBKombi("KUIBON", gdBase) = False Then
        CreateTableT2 "KUIBON", gdBase
        
        sSQL = "Insert into KUIBON ("
        sSQL = sSQL & " Name   "
        sSQL = sSQL & ", VORNAME  "
        sSQL = sSQL & ", titel "
        sSQL = sSQL & ", FIRMA  "
        sSQL = sSQL & ", PLZ  "
        sSQL = sSQL & ", ORT  "
        sSQL = sSQL & ", STRASSE  "
        sSQL = sSQL & ", TEL  "
        sSQL = sSQL & ", MOBIL  "
        sSQL = sSQL & " ) values (true,true,true,true,true,true,true,true,true)"
        gdBase.Execute sSQL, dbFailOnError
        
    End If
    
    Set rsrs = gdBase.OpenRecordset("KUIBON")
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!name) Then
            gbKUIBONname = rsrs!name
        Else
            gbKUIBONname = False
        End If
        If Not IsNull(rsrs!vorname) Then
            gbKUIBONvorname = rsrs!vorname
        Else
            gbKUIBONvorname = False
        End If
        
        If Not IsNull(rsrs!firma) Then
            gbKUIBONfirma = rsrs!firma
        Else
            gbKUIBONfirma = False
        End If
        If Not IsNull(rsrs!titel) Then
            gbKUIBONtitel = rsrs!titel
        Else
            gbKUIBONtitel = False
        End If
        
        If Not IsNull(rsrs!strasse) Then
            gbKUIBONstrasse = rsrs!strasse
        Else
            gbKUIBONstrasse = False
        End If
        If Not IsNull(rsrs!Plz) Then
            gbKUIBONplz = rsrs!Plz
        Else
            gbKUIBONplz = False
        End If
        
        If Not IsNull(rsrs!Ort) Then
            gbKUIBONort = rsrs!Ort
        Else
            gbKUIBONort = False
        End If
        
        If Not IsNull(rsrs!Tel) Then
            gbKUIBONtel = rsrs!Tel
        Else
            gbKUIBONtel = False
        End If
        If Not IsNull(rsrs!mobil) Then
            gbKUIBONmobil = rsrs!mobil
        Else
            gbKUIBONmobil = False
        End If
    
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "leseKundenimBon"
    Fehler.gsFehlertext = "Es trat ein Fehler im Programmteil Programmeinstellungen auf. "
    
    Fehlermeldung1
End Sub
'Public Sub UMS_ARTFkleinhalten()
'    On Error GoTo LOKAL_ERROR
'    Dim sSQL As String
'
'    sSQL = "Delete from UMS_ARTF where Jahr < year(now) - 3"
'    gdBase.Execute sSQL, dbFailOnError
'
'    Exit Sub
'LOKAL_ERROR:
'
'    Fehler.gsDescr = err.Description
'    Fehler.gsNumber = err.Number
'    Fehler.gsFormular = "Modul5"
'    Fehler.gsFunktion = "UMS_ARTFkleinhalten"
'    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
'
'    Fehlermeldung1
'End Sub
'Public Sub GLAGER_Kleinhalten()
'    On Error GoTo LOKAL_ERROR
'    Dim sSQL As String
'
'    sSQL = "Delete from GLAGER where Datum < Datevalue(now) - 1500"
'    gdBase.Execute sSQL, dbFailOnError
'
'    Exit Sub
'LOKAL_ERROR:
'
'    Fehler.gsDescr = err.Description
'    Fehler.gsNumber = err.Number
'    Fehler.gsFormular = "Modul5"
'    Fehler.gsFunktion = "GLAGER_Kleinhalten"
'    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
'
'    Fehlermeldung1
'End Sub
Public Sub KassBedp_Kleinhalten()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String
    
    sSQL = "Delete from KassBedp where ADATE < Datevalue(now) - 180"
    gdBase.Execute sSQL, dbFailOnError
    
    Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "KassBedp_Kleinhalten"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub AWMsetzen1()
    On Error GoTo LOKAL_ERROR
    Dim sSQL As String
    
    sSQL = "Update Artikel set AWM = '0' where AWM is null"
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Artikel set AWM = '0' where val(AWM) <= 0 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Artikel set AWM = '0' where val(AWM) > 99 "
    gdBase.Execute sSQL, dbFailOnError
    
    sSQL = "Update Artikel set AWM = '0' where not isnumeric(awm)"
    gdBase.Execute sSQL, dbFailOnError
    
    Exit Sub
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "AWMsetzen1"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1
End Sub
Public Sub ErzeugeFilialDBestand()
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL As String
    Dim lJahr As Long
    
    Screen.MousePointer = 11
    
    loeschNEW "GDLAGER", gdBase
    CreateTableT2 "GDLAGER", gdBase
    
    cSQL = "Create Index PRIMKEY on GDLAGER(ARTNR,JAHR, MONAT)"
    gdBase.Execute cSQL, dbFailOnError
    
    loeschNEW "DVKART", gdBase
    CreateTable "DVKART", gdBase
    
    cSQL = "Create Index PRIMKEY on DVKART(ARTNR,JAHR, MONAT)"
    gdBase.Execute cSQL, dbFailOnError
    
    lJahr = Year(Now)
    lJahr = lJahr - 1
    
    Dim cPfad           As String
    
    cPfad = gcDBPfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "GDPdU\"
    
    cSQL = "Insert into GDLAGER "
    cSQL = cSQL & "Select "
    cSQL = cSQL & " YEAR(DATUM) as JAHR"
    cSQL = cSQL & ", MONTH(DATUM) as MONAT"
    cSQL = cSQL & ", ARTNR"
    cSQL = cSQL & ", AVG(BESTAND) as SBESTAND"
    cSQL = cSQL & " from [;DATABASE=" & cPfad & "GDPdU.MDB;pwd=" & gsGDPdU_Passwort & "].GLAGER_GDPdU"
    cSQL = cSQL & " group by YEAR(DATUM), MONTH(DATUM), ARTNR "
    gdBase.Execute cSQL, dbFailOnError

    Dim iMinJahr As Integer
    Dim iMinMonat As Integer
    
    iMinJahr = ermminJahrGDLAGER
    iMinMonat = ermminMonatGDLAGER(iMinJahr)
    
    cSQL = "Insert into DVKART "
    cSQL = cSQL & "Select "
    cSQL = cSQL & " YEAR(ADATE) as JAHR"
    cSQL = cSQL & ", MONTH(ADATE) as MONAT"
    cSQL = cSQL & ", ARTNR"
    cSQL = cSQL & ", sum(MENGE) as DVK"
    cSQL = cSQL & " from KASSJOUR"
    cSQL = cSQL & " where YEAR(ADATE) >=  " & iMinJahr
'    cSQL = cSQL & " and MONTH(ADATE) >=  " & iMinMonat
    cSQL = cSQL & " group by YEAR(ADATE), MONTH(ADATE), ARTNR "
    gdBase.Execute cSQL, dbFailOnError
    
    Screen.MousePointer = 0
Exit Sub
LOKAL_ERROR:
    If err.Number = 3376 Or err.Number = 3372 Then
        Resume Next
    Else
        Fehler.gsDescr = err.Description
        Fehler.gsNumber = err.Number
        Fehler.gsFormular = "Modul1"
        Fehler.gsFunktion = "ErzeugeFilialDBestand"
        Fehler.gsFehlertext = "Beim Erzeugen der Tabelle DBESTART und DVKART ist ein Fehler aufgetreten."
    
        Fehlermeldung1
    End If
End Sub
Public Function ermminMonatGDLAGER(iJahr As Integer) As Integer
On Error GoTo LOKAL_ERROR

    Dim cSQL As String
    Dim rsrs As Recordset
    
    ermminMonatGDLAGER = 1
    
    cSQL = "Select min(monat) as mini from GDLAGER where Jahr  = " & iJahr
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!mini) Then
            ermminMonatGDLAGER = rsrs!mini
        End If
    End If
    rsrs.Close
        
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermminMonatGDLAGER"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermminJahrGDLAGER() As Integer
On Error GoTo LOKAL_ERROR

    Dim cSQL As String
    Dim rsrs As Recordset
    
    ermminJahrGDLAGER = 1
    
    cSQL = "Select min(Jahr) as mini from GDLAGER"
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        rsrs.MoveFirst
        If Not IsNull(rsrs!mini) Then
            ermminJahrGDLAGER = rsrs!mini
        End If
    End If
    rsrs.Close
        
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermminJahrGDLAGER"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function VorBereitLagerumschlag()
    On Error GoTo LOKAL_ERROR

    Dim cSQL        As String
    Dim i           As Integer
    Dim lMoni       As Byte
    Dim lJahri      As Integer
    
    loeschNEW "TB" & srechnertab, gdBase
    
    cSQL = "Create table TB" & srechnertab & "( "
    cSQL = cSQL & " Monat  byte "
    cSQL = cSQL & " , Jahr Long"
    cSQL = cSQL & " , Bestand long "
    cSQL = cSQL & " , Verkauf long )"
    SQL_Befehl_ausführen cSQL

    cSQL = "Create index monat on TB" & srechnertab & " (monat)"
    SQL_Befehl_ausführen cSQL

    cSQL = "Create index Jahr on TB" & srechnertab & " (Jahr)"
    SQL_Befehl_ausführen cSQL

    lMoni = Month(DateValue(Now))
    lJahri = Year(DateValue(Now))
    
    For i = 12 To 1 Step -1
        cSQL = "Insert into TB" & srechnertab & " (Monat,Jahr) values (" & i & "," & lJahri & ")"
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    For i = 12 To 1 Step -1
        cSQL = "Insert into TB" & srechnertab & " (Monat,Jahr) values (" & i & "," & lJahri - 1 & ")"
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    cSQL = "Delete from TB" & srechnertab & "  where "
    cSQL = cSQL & " monat >= " & lMoni & " and jahr = " & lJahri
    SQL_Befehl_ausführen cSQL
    
    cSQL = "Delete from TB" & srechnertab & "  where "
    cSQL = cSQL & " monat < " & lMoni & " and jahr = " & lJahri - 1
    SQL_Befehl_ausführen cSQL
        
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "VorBereitLagerumschlag"
    Fehler.gsFehlertext = "Im Programmteil Artikel bearbeiten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function

Public Function VorBereitLagerumschlagVJ()
    On Error GoTo LOKAL_ERROR

    Dim cSQL        As String
    Dim i           As Integer
    Dim lMoni       As Byte
    Dim lJahri      As Integer
    
    loeschNEW "TBVJ" & srechnertab, gdBase
    
    cSQL = " create table TBVJ" & srechnertab & "( "
    cSQL = cSQL & " Monat  byte "
    cSQL = cSQL & " , Jahr Long"
    cSQL = cSQL & " , Bestand long "
    cSQL = cSQL & " , Verkauf long )"
    SQL_Befehl_ausführen cSQL
    
    cSQL = "Create index monat on TBVJ" & srechnertab & " (monat)"
    SQL_Befehl_ausführen cSQL

    cSQL = "Create index Jahr on TBVJ" & srechnertab & " (Jahr)"
    SQL_Befehl_ausführen cSQL
    
    lMoni = Month(DateValue(Now))
    lJahri = Year(DateValue(Now))
    
    
    For i = 12 To 1 Step -1
        cSQL = "Insert into TBVJ" & srechnertab & " (Monat,Jahr) values (" & i & "," & lJahri - 1 & ")"
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    For i = 12 To 1 Step -1
        cSQL = "Insert into TBVJ" & srechnertab & " (Monat,Jahr) values (" & i & "," & lJahri - 2 & ")"
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    cSQL = "Delete from TBVJ" & srechnertab & "  where "
    cSQL = cSQL & " monat >= " & lMoni & " and jahr = " & lJahri - 1
    SQL_Befehl_ausführen cSQL
    
    cSQL = "Delete from TBVJ" & srechnertab & "  where "
    cSQL = cSQL & " monat < " & lMoni & " and jahr = " & lJahri - 2
    SQL_Befehl_ausführen cSQL
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "VorBereitLagerumschlagVJ"
    Fehler.gsFehlertext = "Im Programmteil Artikel bearbeiten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function VorBereitLagerumschlagVVJ()
    On Error GoTo LOKAL_ERROR

    Dim cSQL        As String
    Dim i           As Integer
    Dim lMoni       As Byte
    Dim lJahri      As Integer
    
    loeschNEW "TBVVJ" & srechnertab, gdBase
    
    cSQL = " create table TBVVJ" & srechnertab & "( "
    cSQL = cSQL & " Monat  byte "
    cSQL = cSQL & " , Jahr Long"
    cSQL = cSQL & " , Bestand long "
    cSQL = cSQL & " , Verkauf long )"
    SQL_Befehl_ausführen cSQL
    
    cSQL = "Create index monat on TBVVJ" & srechnertab & " (monat)"
    SQL_Befehl_ausführen cSQL

    cSQL = "Create index Jahr on TBVVJ" & srechnertab & " (Jahr)"
    SQL_Befehl_ausführen cSQL
    
    lMoni = Month(DateValue(Now))
    lJahri = Year(DateValue(Now))
    
    
    For i = 12 To 1 Step -1
        cSQL = "Insert into TBVVJ" & srechnertab & " (Monat,Jahr) values (" & i & "," & lJahri - 2 & ")"
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    For i = 12 To 1 Step -1
        cSQL = "Insert into TBVVJ" & srechnertab & " (Monat,Jahr) values (" & i & "," & lJahri - 3 & ")"
        gdBase.Execute cSQL, dbFailOnError
    Next i
    
    cSQL = "Delete from TBVVJ" & srechnertab & "  where "
    cSQL = cSQL & " monat >= " & lMoni & " and jahr = " & lJahri - 2
    SQL_Befehl_ausführen cSQL
    
    cSQL = "Delete from TBVVJ" & srechnertab & "  where "
    cSQL = cSQL & " monat < " & lMoni & " and jahr = " & lJahri - 3
    SQL_Befehl_ausführen cSQL
    
    Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "VorBereitLagerumschlagVVJ"
    Fehler.gsFehlertext = "Im Programmteil Artikel bearbeiten ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function alleLUGnachLief(txtStatus As TextBox, picprogress As PictureBox, bFragen As Boolean) As Boolean
    On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim rsrs        As Recordset
    Dim cART        As String
    Dim i           As Integer
    Dim lAnz        As Long
    Dim lanzg       As Long
    Dim siEkpr      As Double
    Dim siAnzeige   As Single
    Dim cLinr       As String
    Dim lMoni       As Long
    Dim lJahri      As Long
    Dim sGrundl     As String
    Dim iRet        As Integer
    
    alleLUGnachLief = False
    
    If NewTableSuchenDBKombi("ALLARTLU", gdBase) Then
        If Datendrin("ALLARTLU", gdBase) Then
            If LUGSAktuell Then
                alleLUGnachLief = True
                Exit Function
            Else
                If bFragen Then
                    iRet = MsgBox("Ihre Lagerumschlagszahlen sind veraltet. Möchten Sie diese neu erstellen? ca. 20 min Dauer", vbYesNo + vbQuestion + vbDefaultButton2, "Winkiss Frage:")
                Else
                    iRet = vbYes
                End If
                
                If iRet = vbYes Then
                    
                Else
                    alleLUGnachLief = True
                    Exit Function
                End If
            End If
        Else
            If bFragen Then
                iRet = MsgBox("Möchten Sie die Lagerumschlagszahlen erstellen? ca. 20 min Dauer", vbYesNo + vbQuestion + vbDefaultButton2, "Winkiss Frage:")
            Else
                iRet = vbYes
            End If
            
            
            If iRet = vbYes Then
            Else
                Exit Function
            End If
        End If
    Else
        If bFragen Then
            iRet = MsgBox("Möchten Sie die Lagerumschlagszahlen erstellen? ca. 20 min Dauer", vbYesNo + vbQuestion + vbDefaultButton2, "Winkiss Frage:")
        Else
            iRet = vbYes
        End If
        
        
        If iRet = vbYes Then
    
        Else
            Exit Function
        End If
    End If

            
    Screen.MousePointer = 11
    
    loeschNEW "ALLARTLU", gdBase
    CreateTable "ALLARTLU", gdBase
    
    If Datendrin("GDLAGER", gdBase) = False Then
    
        Screen.MousePointer = 11
        ErzeugeFilialDBestand
        Screen.MousePointer = 0
        
    End If

    txtStatus.Text = 0
    
    picprogress.Visible = True

    txtStatus.Text = 5
    
    
    loeschNEW "ARTNurBest", gdBase
        
    cSQL = " Select artnr,bestand into ARTNurBest from Artikel "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "delete from  ARTNurBest where bestand = 0 "
    gdBase.Execute cSQL, dbFailOnError
    
    
    'Hier die Fallunterscheidung
    Select Case gbyLugBe
        Case 1 'nur Artikel, die geführt werden (geführt ='J')
            cSQL = "Insert into ALLARTLU Select distinct(artnr)as artnummer"
            cSQL = cSQL & " from ARTIKEL "
            cSQL = cSQL & " where artnr in (Select artnr from artikel where gefuehrt = 'J' ) "
            gdBase.Execute cSQL, dbFailOnError
            
            sGrundl = "Zur Berechnung zählen alle geführten Artikel geführt =J und die Artikel, die zur Zeit im Bestand sind."
            
        Case 2
    
            loeschNEW "ARTDIS", gdBase
        
            cSQL = " Select distinct(artnr) into ARTDIS from Kassjour where adate > Datevalue(now)- " & giTageVerkauf
            gdBase.Execute cSQL, dbFailOnError
            
            cSQL = "Insert into ALLARTLU Select distinct(artnr)as artnummer"
            cSQL = cSQL & " from ARTIKEL "
            cSQL = cSQL & " where artnr in (Select artnr from ARTDIS ) "
            gdBase.Execute cSQL, dbFailOnError
            
            loeschNEW "ARTDIS", gdBase
            
            sGrundl = "Zur Berechnung zählen alle Artikel, die seit " & giTageVerkauf & " Tagen verkauft worden sind. Des Weiteren die Artikel, die zur Zeit im Bestand sind."
        Case 3
        
            cSQL = "Insert into ALLARTLU Select distinct(artnr)as artnummer"
            cSQL = cSQL & " from ARTIKEL "
            gdBase.Execute cSQL, dbFailOnError
            
            sGrundl = "Zur Berechnung zählen alle Artikel."
            
            
        Case 4 'nur Artikel, die im Zugang waren in den letzten 365
        
            cSQL = "Insert into ALLARTLU Select distinct(artnr)as artnummer"
            cSQL = cSQL & " from ARTIKEL "
            cSQL = cSQL & " where artnr in (Select artnr from Zugang where adate > Datevalue(now)-" & giTageZugang & ") "
            gdBase.Execute cSQL, dbFailOnError
            
            sGrundl = "Zur Berechnung zählen alle Artikel, die seit " & giTageZugang & " Tagen im Zugang waren. Des Weitern die Artikel, die zur Zeit im Bestand sind."
    End Select
    
    cSQL = "Delete from ARTNURBEST "
    cSQL = cSQL & " where artnr in (Select artnummer from ALLARTLU ) "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Insert into ALLARTLU Select artnr as artnummer"
    cSQL = cSQL & " from ARTNURBEST "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Delete from ALLARTLU "
    cSQL = cSQL & " where artnummer in (Select artnr from Warengru) "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Create index artnummer on ALLARTLU(artnummer) "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 8

    cSQL = "Update artikel set awm = '0' where awm is null"
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update artikel set ekpr = 0 where ekpr is null"
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update artikel set ekpr = 0 where ekpr <= 0"
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.EKPR  = ARTIKEL.EKPR "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.BEZEICH  = ARTIKEL.BEZEICH "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.KVKPR1  = ARTIKEL.KVKPR1 "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.linr  = ARTIKEL.linr "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.rkz  = ARTIKEL.rkz "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.gefuehrt  = ARTIKEL.gefuehrt "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.lpz  = ARTIKEL.lpz "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.agn  = ARTIKEL.agn "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.RABATT_OK  = ARTIKEL.RABATT_OK "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.FARBNR  = val(ARTIKEL.AWM)"
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.BESTAND  = ARTIKEL.BESTAND "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Update ALLARTLU inner join ARTIKEL on ALLARTLU.artnummer = ARTIKEL.artnr "
    cSQL = cSQL & " set ALLARTLU.BONUS_OK  = ARTIKEL.BONUS_OK "
    gdBase.Execute cSQL, dbFailOnError
    

    txtStatus.Text = 12

    cSQL = "Update ALLARTLU "
    cSQL = cSQL & " set ALLARTLU.LUG  = 0 "
    gdBase.Execute cSQL, dbFailOnError
    
    
    txtStatus.Text = 14
    
    cSQL = "Update ALLARTLU inner join LISRT on ALLARTLU.LINR = LISRT.LINR "
    cSQL = cSQL & " Set ALLARTLU.LIEFBEZ = LISRT.LIEFBEZ "
    gdBase.Execute cSQL, dbFailOnError
    
    cSQL = "Alter table ALLARTLU add ARTNR long "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 15
    
    cSQL = "Update ALLARTLU Set artnr = artnummer "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 16
    
    
    txtStatus.Text = 17
    
    cSQL = "Delete from  ALLARTLU where liefbez = '' "
    cSQL = cSQL & " and Bestand <= 0 "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 21
    
    cSQL = "Delete from  ALLARTLU where liefbez is null "
    cSQL = cSQL & " and Bestand <= 0 "
    gdBase.Execute cSQL, dbFailOnError

    txtStatus.Text = 26
    
    cSQL = "Select * from ALLARTLU "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    
    txtStatus.Text = 32
    
'    CheckIndex "Kassjour", "BEST1", gdbase
    
    txtStatus.Text = 35
    'Hintergrund auf den neusten Stand bringen
    lMoni = Month(DateValue(Now))
    lJahri = Year(DateValue(Now))

    cSQL = "Delete from GDLAGER "
    cSQL = cSQL & " where Jahr = " & lJahri
    cSQL = cSQL & " and Monat = " & lMoni
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 37
    
    cSQL = "Delete from DVKART "
    cSQL = cSQL & " where Jahr = " & lJahri
    cSQL = cSQL & " and Monat = " & lMoni
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 38
    
    If lMoni = 1 Then
        lMoni = 12
        lJahri = lJahri - 1
    Else
        lMoni = lMoni - 1
    End If
    
    cSQL = "Delete from GDLAGER "
    cSQL = cSQL & " where Jahr = " & lJahri
    cSQL = cSQL & " and Monat = " & lMoni
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 40
    
    cSQL = "Delete from DVKART "
    cSQL = cSQL & " where Jahr = " & lJahri
    cSQL = cSQL & " and Monat = " & lMoni
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 43
    
    
    
    Dim cPfad           As String
    
    cPfad = gcDBPfad
    If Right$(cPfad, 1) <> "\" Then
        cPfad = cPfad & "\"
    End If
    
    cPfad = cPfad & "GDPdU\"
    
    
    
    
    cSQL = "Insert into GDLAGER "
    cSQL = cSQL & "Select "
    cSQL = cSQL & " YEAR(DATUM) as JAHR"
    cSQL = cSQL & ", MONTH(DATUM) as MONAT"
    cSQL = cSQL & ", ARTNR"
    cSQL = cSQL & ", AVG(BESTAND) as SBESTAND"
    cSQL = cSQL & " from [;DATABASE=" & cPfad & "GDPdU.MDB;pwd=" & gsGDPdU_Passwort & "].GLAGER_GDPdU"
    cSQL = cSQL & " where YEAR(DATUM) = " & lJahri
    cSQL = cSQL & " and MONTH(DATUM) = " & lMoni
    cSQL = cSQL & " group by YEAR(DATUM), MONTH(DATUM), ARTNR "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 44
    
    cSQL = "Insert into DVKART "
    cSQL = cSQL & "Select "
    cSQL = cSQL & " YEAR(ADATE) as JAHR"
    cSQL = cSQL & ", MONTH(ADATE) as MONAT"
    cSQL = cSQL & ", ARTNR"
    cSQL = cSQL & ", sum(MENGE) as DVK"
    cSQL = cSQL & " from KASSJOUR"
    cSQL = cSQL & " where YEAR(ADATE) = " & lJahri
    cSQL = cSQL & " and MONTH(ADATE) = " & lMoni
    cSQL = cSQL & " group by YEAR(ADATE), MONTH(ADATE), ARTNR "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 48
    
    VorBereitLagerumschlag
    
    txtStatus.Text = 49
    VorBereitLagerumschlagVJ
    txtStatus.Text = 50
    VorBereitLagerumschlagVVJ
    txtStatus.Text = 51
    
    
    If Not rsrs.EOF Then
        rsrs.MoveLast
        lAnz = rsrs.RecordCount
        lanzg = rsrs.RecordCount
        rsrs.MoveFirst
        Do While Not rsrs.EOF
            

            
            siAnzeige = siAnzeige + 1
            txtStatus.Text = CStr((100 * siAnzeige) / lanzg)
            If Not IsNull(rsrs!artnummer) Then
                cART = rsrs!artnummer
                
                rsrs.Edit
                rsrs!LUG = HoleLagerumschlag2(cART)

                rsrs.Update

            End If
            
            lAnz = lAnz - 1
        rsrs.MoveNext
        Loop
    End If
    rsrs.Close

    Screen.MousePointer = 0

    txtStatus.Text = 20



    cSQL = "Update ALLARTLU inner join LINBEZ on ALLARTLU.linr = LINBEZ.linr and ALLARTLU.LPZ = LINBEZ.LPZ "
    cSQL = cSQL & " Set ALLARTLU.LINBEZEICH = LINBEZ.LINBEZEICH "
    gdBase.Execute cSQL, dbFailOnError

    txtStatus.Text = 24
    
    BringFarbeInsSpiel "ALLARTLU", gdBase
    
    txtStatus.Text = 25
    
    
    
    txtStatus.Text = 27

    
    txtStatus.Text = 28
    
    cSQL = " Alter table ALLARTLU drop ARTNR "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 29
    
    
    
'    txtstatus.Text = 35

    cSQL = "DELETE from ALLARTLU "
    cSQL = cSQL & "  where linr is null "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 39

    cSQL = "DELETE from ALLARTLU "
    cSQL = cSQL & "  where linr = 0 "
    gdBase.Execute cSQL, dbFailOnError
    
    txtStatus.Text = 78
    
    Dim sLUG As String
    Dim sLUGVJ As String
    Dim sLUGVVJ As String
    Dim lDatum      As Long

    lDatum = Fix(Now)
    
    If Month(Now) - 1 = 0 Then
    
        sLUG = 1 & "/" & Year(Now) - 1 & " bis "
        sLUG = sLUG & "12"
        sLUG = sLUG & "/" & Year(Now) - 1
    Else
        sLUG = Month(Now) & "/" & Year(Now) - 1 & " bis "
        sLUG = sLUG & Month(Now) - 1
        sLUG = sLUG & "/" & Year(Now)
    End If
    
    If Month(Now) - 1 = 0 Then
    
        sLUGVJ = 1 & "/" & Year(Now) - 2 & " bis "
        sLUGVJ = sLUGVJ & "12"
        sLUGVJ = sLUGVJ & "/" & Year(Now) - 2
    Else
        sLUGVJ = Month(Now) & "/" & Year(Now) - 2 & " bis "
        sLUGVJ = sLUGVJ & Month(Now) - 1
        sLUGVJ = sLUGVJ & "/" & Year(Now) - 1
    End If
    
    If Month(Now) - 1 = 0 Then
    
        sLUGVVJ = 1 & "/" & Year(Now) - 3 & " bis "
        sLUGVVJ = sLUGVVJ & "12"
        sLUGVVJ = sLUGVVJ & "/" & Year(Now) - 3
    Else
        sLUGVVJ = Month(Now) & "/" & Year(Now) - 3 & " bis "
        sLUGVVJ = sLUGVVJ & Month(Now) - 1
        sLUGVVJ = sLUGVVJ & "/" & Year(Now) - 2
    End If
    
    lanzg = CLng(ermAnzArt(""))
    
    Set rsrs = gdBase.OpenRecordset("Select * from ALLARTLU")
    
    If Not rsrs.EOF Then
        rsrs.MoveLast
        lAnz = rsrs.RecordCount
    End If
    rsrs.Close
    
    loeschNEW "ALLARTLUKOPF", gdBase
    CreateTable "ALLARTLUKOPF", gdBase
    
    cSQL = "Insert into ALLARTLUKOPF (LUG,LUGVJ,LUGVVJ,ADATE,Grundl,Anzahlg,Anzahl) values ('" & sLUG & "','" & sLUGVJ & "','" & sLUGVVJ & "'," & lDatum & " "
    cSQL = cSQL & "  ,'" & sGrundl & "' "
    cSQL = cSQL & "   ," & lanzg & ""
    cSQL = cSQL & "   ," & lAnz & ""
    cSQL = cSQL & "  ) "
    gdBase.Execute cSQL, dbFailOnError
    
'    frmZEN00.lbl6(4).Visible = False
'    frmZEN00.lbl6(28).Visible = False
    
    cSQL = "DELETE from ALLARTLU "
    cSQL = cSQL & "  where lug = 0 "
    cSQL = cSQL & "  and lugvj = 0 "
    cSQL = cSQL & "  and lugvvj = 0 "
    cSQL = cSQL & "  and bestand = 0 "
    gdBase.Execute cSQL, dbFailOnError

    txtStatus.Text = 100

    txtStatus.Text = 0
    picprogress.Visible = False
    
    Screen.MousePointer = 0
    
    alleLUGnachLief = True
 
    '***************************
    
    cSQL = " Select * from LUGEVER where Datum = datevalue(now) "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        Exit Function
    End If
    rsrs.Close
    
    cSQL = "Insert into LUGEVER Select Datevalue(now) as datum , avg(LUG) as AVGLUG from ALLARTLU "
    gdBase.Execute cSQL, dbFailOnError
    
Exit Function
LOKAL_ERROR:
    
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "alleLUGnachLief"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermAnzArt(cwhere As String) As String
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    ermAnzArt = 0
    sSQL = "select count(artnr) as maxi from artikel " & cwhere
    Set rsrs = gdBase.OpenRecordset(sSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!maxi) Then
            ermAnzArt = rsrs!maxi
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
         
Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermAnzArt"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
    
End Function
Public Sub leseABREport()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    gbTAGFILT = False
    gbARTKUM = False
    gbARTKUM_ohneWGN = False
    gbKK = False
    gbEA = False
    
    If NewTableSuchenDBKombi("ABREPORT", gdApp) = False Then
        CreateTable "ABREPORT", gdApp
    End If
    
    Set rsrs = gdApp.OpenRecordset("ABREPORT")
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!ARTKUM) Then
            gbARTKUM = rsrs!ARTKUM
        Else
            gbARTKUM = False
        End If
        
        If Not IsNull(rsrs!ARTKUM_ohneWGN) Then
            gbARTKUM_ohneWGN = rsrs!ARTKUM_ohneWGN
        Else
            gbARTKUM_ohneWGN = False
        End If
        
        If Not IsNull(rsrs!kk) Then
            gbKK = rsrs!kk
        Else
            gbKK = False
        End If
        
        If Not IsNull(rsrs!ea) Then
            gbEA = rsrs!ea
        Else
            gbEA = False
        End If
        
        If Not IsNull(rsrs!TAGFILT) Then
            gbTAGFILT = rsrs!TAGFILT
        Else
            gbTAGFILT = False
        End If
    
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "leseABREport"
    Fehler.gsFehlertext = "Es trat ein Fehler im Programmteil Programmeinstellungen auf. "
    
    Fehlermeldung1
End Sub
Public Sub leseLOGOS()
    On Error GoTo LOKAL_ERROR
    
    Dim sSQL As String
    Dim rsrs As Recordset
    
    gbLOGO1 = False
    gbLOGO2 = False
    gbLOGO3 = False
    
    If NewTableSuchenDBKombi("LOGOS", gdBase) = False Then
        CreateTable "LOGOS", gdBase
    End If
    
    Set rsrs = gdBase.OpenRecordset("LOGOS")
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!LOGO1) Then
            gbLOGO1 = rsrs!LOGO1
        Else
            gbLOGO1 = False
        End If
        
        If Not IsNull(rsrs!LOGO2) Then
            gbLOGO2 = rsrs!LOGO2
        Else
            gbLOGO2 = False
        End If
        
        If Not IsNull(rsrs!LOGO3) Then
            gbLOGO3 = rsrs!LOGO3
        Else
            gbLOGO3 = False
        End If
    
    End If
    rsrs.Close: Set rsrs = Nothing
    
    Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "leseLOGOS"
    Fehler.gsFehlertext = "Es trat ein Fehler im Programmteil Programmeinstellungen auf. "
    
    Fehlermeldung1
End Sub
Public Function ermLibesnr(sArt As String, lLinr As Long) As String
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

If sArt = "" Then
    Exit Function
End If

ermLibesnr = ""

sSQL = "Select LIBESNR from Artlief where "
sSQL = sSQL & " artnr = " & sArt
sSQL = sSQL & " and linr = " & lLinr


Set rsrs = gdBase.OpenRecordset(sSQL)
If Not rsrs.EOF Then
    rsrs.MoveFirst
    If Not IsNull(rsrs!LIBESNR) Then
        ermLibesnr = Trim(rsrs!LIBESNR)
    End If
End If
rsrs.Close: Set rsrs = Nothing

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermLibesnr"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function ermVPE(sArt As String, sLinr As String) As Integer
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

If sArt = "" Then
    Exit Function
End If

ermVPE = 0

sSQL = "Select MINMEN from Artlief where "
sSQL = sSQL & " artnr = " & sArt
sSQL = sSQL & " and linr = " & sLinr


Set rsrs = gdBase.OpenRecordset(sSQL)
If Not rsrs.EOF Then
    rsrs.MoveFirst
    If Not IsNull(rsrs!MINMEN) Then
        ermVPE = Trim(rsrs!MINMEN)
    End If
End If
rsrs.Close: Set rsrs = Nothing

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermVPE"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function ermKVKPR(sArt As String) As Double
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

ermKVKPR = 0#

sSQL = "Select KVKPR1 from Artikel where "
sSQL = sSQL & " artnr = " & sArt

Set rsrs = gdBase.OpenRecordset(sSQL)
If Not rsrs.EOF Then
    rsrs.MoveFirst
    If Not IsNull(rsrs!KVKPR1) Then
        ermKVKPR = CSng(rsrs!KVKPR1)
    End If
End If
rsrs.Close

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermKVKPR"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function ermLEKPR(sArt As String, lLinr As Long) As Double
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

ermLEKPR = 0#

sSQL = "Select LEKPR from Artlief where "
sSQL = sSQL & " artnr = " & sArt
sSQL = sSQL & " and linr = " & lLinr


Set rsrs = gdBase.OpenRecordset(sSQL)
If Not rsrs.EOF Then
    rsrs.MoveFirst
    If Not IsNull(rsrs!lekpr) Then
        ermLEKPR = CSng(rsrs!lekpr)
    End If
End If
rsrs.Close: Set rsrs = Nothing

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermLEKPR"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function ermSEKPR(sArt As String) As Double
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

ermSEKPR = 0#

sSQL = "Select EKPR from Artikel where "
sSQL = sSQL & " artnr = " & sArt
Set rsrs = gdBase.OpenRecordset(sSQL)
If Not rsrs.EOF Then
    rsrs.MoveFirst
    If Not IsNull(rsrs!ekpr) Then
        ermSEKPR = CSng(rsrs!ekpr)
    End If
End If
rsrs.Close: Set rsrs = Nothing

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermSEKPR"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Function istderArtikelbeiLinrEX(sArt As String, sLinr As String) As String
On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim rsrs        As Recordset
    
    istderArtikelbeiLinrEX = "N"
    
    cSQL = "Select RKZ from ARTLIEF where ARTNR = " & sArt & " and linr  = " & sLinr & " "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!RKZ) Then
           istderArtikelbeiLinrEX = UCase(rsrs!RKZ)
        End If
    End If
    rsrs.Close: Set rsrs = Nothing
    
    If istderArtikelbeiLinrEX = "" Then istderArtikelbeiLinrEX = "N"


Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "istderArtikelbeiLinrEX"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermLiefmitkleinstenLEKPR(sArt As String) As String
On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim rsrs        As Recordset
    
    ermLiefmitkleinstenLEKPR = "0"
    
    cSQL = "Select min(LEKPR) as ek , linr from ARTLIEF where ARTNR = " & sArt & " group by linr order by min(lekpr) asc "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!linr) Then
           ermLiefmitkleinstenLEKPR = rsrs!linr
        End If
    End If
    rsrs.Close: Set rsrs = Nothing


Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermLiefmitkleinstenLEKPR"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermLiefmitGroesstemLEKPR(sArt As String) As String
On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim rsrs        As Recordset
    
    ermLiefmitGroesstemLEKPR = "0"
    
    cSQL = "Select max(LEKPR) as ek , linr from ARTLIEF where ARTNR = " & sArt & " group by linr order by max(lekpr) asc "
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!linr) Then
           ermLiefmitGroesstemLEKPR = rsrs!linr
        End If
    End If
    rsrs.Close: Set rsrs = Nothing


Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermLiefmitGroesstemLEKPR"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermLEKPRundWelcher(sArtnr As String, sWelcher As String) As Double
On Error GoTo LOKAL_ERROR
    
    Dim cSQL        As String
    Dim rsrs        As Recordset
    
    ermLEKPRundWelcher = 0
    
    cSQL = "Select " & sWelcher & "(LEKPR) as ek  from ARTLIEF where ARTNR = " & sArtnr
    Set rsrs = gdBase.OpenRecordset(cSQL)
    If Not rsrs.EOF Then
        If Not IsNull(rsrs!ek) Then
           ermLEKPRundWelcher = CDbl(rsrs!ek)
        End If
    End If
    rsrs.Close: Set rsrs = Nothing


Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermLEKPRundWelcher"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Function
Public Function ermMaxLEKPR(sArt As String) As Double
On Error GoTo LOKAL_ERROR

Dim sSQL As String
Dim rsrs As Recordset

ermMaxLEKPR = 0#

If gbEKMAX = True Then
    sSQL = "Select max(LEKPR) as Maxi from Artlief where "
Else
    sSQL = "Select min(LEKPR) as Maxi from Artlief where "
End If

sSQL = sSQL & " artnr = " & sArt

Set rsrs = gdBase.OpenRecordset(sSQL)
If Not rsrs.EOF Then
    rsrs.MoveFirst
    If Not IsNull(rsrs!maxi) Then
        ermMaxLEKPR = CSng(rsrs!maxi)
    End If
End If
rsrs.Close: Set rsrs = Nothing

Exit Function
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "ermMaxLEKPR"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."

    Fehlermeldung1
End Function
Public Sub InsertEMAIL(sEmail As String, Optional sThema As String = "")
On Error GoTo LOKAL_ERROR

Dim cSQL As String

cSQL = "Delete from EMAIL where adresse = '" & sEmail & "'"
gdBase.Execute cSQL, dbFailOnError
    
cSQL = "Insert into EMAIL ( "
cSQL = cSQL & " adresse,thema  "
cSQL = cSQL & " ) "
cSQL = cSQL & " values  "
cSQL = cSQL & " ( '" & sEmail & "' , '" & sThema & "'"
cSQL = cSQL & " ) "
gdBase.Execute cSQL, dbFailOnError
    
Exit Sub
LOKAL_ERROR:
  
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "InsertEMAIL"
    Fehler.gsFehlertext = "Im Programmteil Kassenbuch ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub DatumRauf(textx As TextBox, sDFormat As String)
On Error GoTo LOKAL_ERROR

    Dim lDat As Long
    
    If IsDate(textx.Text) = False Then
        If UCase(sDFormat) = "LANG" Then
            textx.Text = Format(DateValue(Now), "DD.MM.YYYY")
        ElseIf UCase(sDFormat) = "KURZ" Then
            textx.Text = Format(DateValue(Now), "DD.MM.YY")
        Else
            textx.Text = Format(DateValue(Now), "DD.MM.YY")
        End If
    Else
        If IsDate(textx.Text) = True Then
            lDat = CLng(DateValue(textx.Text))
        End If
        lDat = lDat + 1
        
        If UCase(sDFormat) = "LANG" Then
            textx.Text = Format(lDat, "DD.MM.YYYY")
        ElseIf UCase(sDFormat) = "KURZ" Then
            textx.Text = Format(lDat, "DD.MM.YY")
        Else
            textx.Text = Format(lDat, "DD.MM.YY")
        End If
    End If

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DatumRauf"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
Public Sub DatumRunter(textx As TextBox, sDFormat As String)
On Error GoTo LOKAL_ERROR

    Dim lDat As Long
    
    If IsDate(textx.Text) = False Then
        If UCase(sDFormat) = "LANG" Then
            textx.Text = Format(DateValue(Now), "DD.MM.YYYY")
        ElseIf UCase(sDFormat) = "KURZ" Then
            textx.Text = Format(DateValue(Now), "DD.MM.YY")
        Else
            textx.Text = Format(DateValue(Now), "DD.MM.YY")
        End If
    Else
        If IsDate(textx.Text) = True Then
            lDat = CLng(DateValue(textx.Text))
        End If
        lDat = lDat - 1
        
        If UCase(sDFormat) = "LANG" Then
            textx.Text = Format(lDat, "DD.MM.YYYY")
        ElseIf UCase(sDFormat) = "KURZ" Then
            textx.Text = Format(lDat, "DD.MM.YY")
        Else
            textx.Text = Format(lDat, "DD.MM.YY")
        End If
    End If

Exit Sub
LOKAL_ERROR:
    Fehler.gsDescr = err.Description
    Fehler.gsNumber = err.Number
    Fehler.gsFormular = "Modul5"
    Fehler.gsFunktion = "DatumRunter"
    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
    
    Fehlermeldung1
End Sub
'Public Function MySQL_live_bestand_updaten(cArtNr As String, lNeuerBestand As Long) As Boolean
'On Error GoTo LOKAL_ERROR
'
'    MySQL_live_bestand_updaten = False
'
'
'    If IfOnline = "Offline" Then
'        'MsgBox "Es besteht keine Verbindung zum Internet." & vbCrLf & "Bitte stellen Sie eine Online-Verbindung her und versuchen Sie es erneut."
'        Exit Function
'    End If
'
'    If fTestLogin_MySQLDABA_Error = 0 Then 'ist alles OK? Datenbank erreichbar?
'        'MsgBox "YES"
'    Else
'        'MsgBox "NONO"
'        Exit Function
'    End If
'
'    Dim stConnect As String
'
'    stConnect = "ODBC;DRIVER=MySQL ODBC 3.51 Driver;SERVER=" & gsMySQL_ADRESSE & ";DATABASE=" & gsMySQL_DATENBANKNAME & ";UID=" & gsMySQL_BENUTZER & ";PWD=" & gsMySQL_PASSWORT & "; OPTION=3"
'
'
'    Dim dbEAN As DAO.Database
'
'    Set dbEAN = OpenDatabase(gsMySQL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
'
''    Set dbEAN = OpenDatabase(gsKL_DATENBANKNAME, dbDriverNoPrompt, False, stConnect)
'
'    Dim sSQL            As String
'    Dim rsrs            As DAO.Recordset
'
'    '1. Suchen auf dem SQL-SERVER nach EAN
'
'    sSQL = " Update " & gsMySQL_BESTAND_TAB & " set " & gsMySQL_BESTAND_SPALTE & " = " & lNeuerBestand & "  Where " & gsMySQL_BESTAND_INDEXSPALTE & " = " & cArtNr & ""
'    dbEAN.Execute sSQL, dbSQLPassThrough + dbFailOnError
'
'
'    dbEAN.Close
'
'    MySQL_live_bestand_updaten = True
'
'Exit Function
'LOKAL_ERROR:
'    Fehler.gsDescr = err.Description
'    Fehler.gsNumber = err.Number
'    Fehler.gsFormular = "Modul5"
'    Fehler.gsFunktion = "MySQL_live_bestand_updaten"
'    Fehler.gsFehlertext = "Es ist ein Fehler aufgetreten."
'
'    Fehlermeldung1
''    Resume Next
'End Function
